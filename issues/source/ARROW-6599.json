{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13257383",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383",
    "key": "ARROW-6599",
    "fields": {
        "parent": {
            "id": "13230559",
            "key": "ARROW-5227",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13230559",
            "fields": {
                "summary": "[Rust] [DataFusion] Re-implement query execution with an extensible physical query plan",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6599/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419\n \n \n   This PR implements the traits for aggregate expressions and the SUM implementation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T13:38:22.089+0000",
                    "updated": "2019-09-18T13:38:22.089+0000",
                    "started": "2019-09-18T13:38:22.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314312",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#issuecomment-532690392\n \n \n   @paddyhoran @sunchao @nevi-me I'm working on breaking down the Hash Aggregate PR (https://github.com/apache/arrow/pull/5191) into smaller pieces to make the reviews easier. I'd appreciate it if you could review this one before end of week so it can make it into 0.15.0 release. Thanks!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T13:43:33.588+0000",
                    "updated": "2019-09-18T13:43:33.588+0000",
                    "started": "2019-09-18T13:43:33.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314314",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325776239\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(SumAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Sum::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! sum_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            let value = array.value($ROW_INDEX);\n+            $SELF.sum = match $SELF.sum {\n+                Some(ScalarValue::$SCALAR_VARIANT(n)) => {\n+                    Some(ScalarValue::$SCALAR_VARIANT(n + value as $TY))\n+                }\n+                _ => Some(ScalarValue::$SCALAR_VARIANT(value as $TY)),\n \n Review comment:\n   Shouldn't you match on `None` here, what else could it be?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T16:36:57.906+0000",
                    "updated": "2019-09-18T16:36:57.906+0000",
                    "started": "2019-09-18T16:36:57.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314453",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325776302\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(SumAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Sum::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! sum_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            let value = array.value($ROW_INDEX);\n+            $SELF.sum = match $SELF.sum {\n+                Some(ScalarValue::$SCALAR_VARIANT(n)) => {\n+                    Some(ScalarValue::$SCALAR_VARIANT(n + value as $TY))\n+                }\n+                _ => Some(ScalarValue::$SCALAR_VARIANT(value as $TY)),\n+            };\n+            Ok(())\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Failed to downcast array\".to_string(),\n+            ))\n+        }\n+    }};\n+}\n+struct SumAccumulator {\n+    expr: Arc<dyn PhysicalExpr>,\n+    sum: Option<ScalarValue>,\n+}\n+\n+impl Accumulator for SumAccumulator {\n+    fn accumulate(&mut self, batch: &RecordBatch, row_index: usize) -> Result<()> {\n+        let array = self.expr.evaluate(batch)?;\n+        match self.expr.data_type(batch.schema())? {\n+            DataType::Int8 => {\n+                sum_accumulate!(self, array, row_index, Int8Array, Int64, i64)\n+            }\n+            DataType::Int16 => {\n+                sum_accumulate!(self, array, row_index, Int16Array, Int64, i64)\n+            }\n+            DataType::Int32 => {\n+                sum_accumulate!(self, array, row_index, Int32Array, Int64, i64)\n+            }\n+            DataType::Int64 => {\n+                sum_accumulate!(self, array, row_index, Int64Array, Int64, i64)\n+            }\n+            DataType::UInt8 => {\n+                sum_accumulate!(self, array, row_index, UInt8Array, UInt64, u64)\n+            }\n+            DataType::UInt16 => {\n+                sum_accumulate!(self, array, row_index, UInt16Array, UInt64, u64)\n+            }\n+            DataType::UInt32 => {\n+                sum_accumulate!(self, array, row_index, UInt32Array, UInt64, u64)\n+            }\n+            DataType::UInt64 => {\n+                sum_accumulate!(self, array, row_index, UInt64Array, UInt64, u64)\n+            }\n+            DataType::Float32 => {\n+                sum_accumulate!(self, array, row_index, Float32Array, Float32, f32)\n+            }\n+            DataType::Float64 => {\n+                sum_accumulate!(self, array, row_index, Float64Array, Float64, f64)\n+            }\n+            other => Err(ExecutionError::General(format!(\n+                \"SUM does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn get_value(&self) -> Result<Option<ScalarValue>> {\n+        Ok(self.sum.clone())\n+    }\n+}\n+\n+/// Create a sum expression\n+pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n+    Arc::new(Sum::new(expr))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::error::Result;\n+    use arrow::array::*;\n+    use arrow::buffer::*;\n+    use arrow::datatypes::*;\n+\n+    #[test]\n+    fn aggr_sum() -> Result<()> {\n+        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n+\n+        let v = vec![1, 2, 3, 4, 5];\n+        let array_data = ArrayData::builder(DataType::Int32)\n+            .len(5)\n+            .add_buffer(Buffer::from(v.to_byte_slice()))\n+            .build();\n+        let a = Int32Array::from(array_data);\n+\n+        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+\n+        let sum = sum(col(0));\n+        assert_eq!(\"SUM\".to_string(), sum.name());\n+        assert_eq!(DataType::Int64, sum.data_type(&schema)?);\n+\n+        let combiner = sum.create_combiner(0);\n+        assert_eq!(\"SUM\".to_string(), combiner.name());\n+        assert_eq!(DataType::Int64, combiner.data_type(&schema)?);\n+\n+        let accum = sum.create_accumulator();\n+        let mut accum = accum.borrow_mut();\n+        for i in 0..batch.num_rows() {\n+            accum.accumulate(&batch, i)?;\n+        }\n+        assert_eq!(accum.get_value()?, Some(ScalarValue::Int64(15)));\n+\n+        Ok(())\n \n Review comment:\n   We should include a test that uses floats and contains nulls also.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T16:36:57.984+0000",
                    "updated": "2019-09-18T16:36:57.984+0000",
                    "started": "2019-09-18T16:36:57.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314454",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325776204\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(SumAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Sum::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! sum_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            let value = array.value($ROW_INDEX);\n \n Review comment:\n   You are not handling `NULL` slots here right?  Shouldn't you use [sum](https://github.com/apache/arrow/blob/master/rust/arrow/src/compute/array_ops.rs#L75) from kernels module?  That way `NULL` handling is taken care of.  (SIMD, eventually, will be leveraged automatically as well).  \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T16:36:58.068+0000",
                    "updated": "2019-09-18T16:36:58.068+0000",
                    "started": "2019-09-18T16:36:58.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314455",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325775962\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n \n Review comment:\n   nit: this can be `Self` instead of `Sum`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T16:36:58.309+0000",
                    "updated": "2019-09-18T16:36:58.309+0000",
                    "started": "2019-09-18T16:36:58.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314456",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325776085\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n \n Review comment:\n   Can we be explicit here about what else is allowed?  i.e. floats should pass through but everything else should be an `Err` right?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T16:36:58.389+0000",
                    "updated": "2019-09-18T16:36:58.389+0000",
                    "started": "2019-09-18T16:36:58.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314457",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325846371\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(SumAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Sum::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! sum_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            let value = array.value($ROW_INDEX);\n \n Review comment:\n   This method is called to update an accumulator with the value from a single row within the batch, so SIMD can't help with this particular usage.\r\n   \r\n   Basically I'm building a hash map of accumulators by grouping key, then iterating over the rows in the batch to look up the accumulator based on the grouping key in each row, then updating is.\r\n   \r\n   There is a future optimization that can be made for aggregate queries without grouping keys e.g. `SELECT SUM(a) FROM b` where we could use the sum from kernels to sum entire batches.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T19:10:42.409+0000",
                    "updated": "2019-09-18T19:10:42.409+0000",
                    "started": "2019-09-18T19:10:42.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314588",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#issuecomment-532830626\n \n \n   Thanks for the review @paddyhoran ! I've addressed most of the comments. The reason for the concise function names for creating expressions is so that users can write concise code when building a query plan. For example:\r\n   \r\n   ```rust\r\n   HashAggregate:::new(\r\n     col(0), // GROUP BY c0\r\n     sum(col(1)), // SUM(c1)\r\n     ..\r\n   );\r\n   ```\r\n   \r\n   Let me know what you think. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T19:26:05.303+0000",
                    "updated": "2019-09-18T19:26:05.303+0000",
                    "started": "2019-09-18T19:26:05.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314594",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325858155\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(SumAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Sum::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! sum_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            let value = array.value($ROW_INDEX);\n \n Review comment:\n   Ok, I see. Yes, the example without grouping is what I had in mind.  Optimizations can be added later but are you handling `NULL` slots correctly here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T19:40:44.426+0000",
                    "updated": "2019-09-18T19:40:44.426+0000",
                    "started": "2019-09-18T19:40:44.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314602",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#issuecomment-532836194\n \n \n   > The reason for the concise function names for creating expressions is so that users can write concise code when building a query plan.\r\n   \r\n   Ok I see, in that context it makes sense to keep them short and concise. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T19:42:22.197+0000",
                    "updated": "2019-09-18T19:42:22.197+0000",
                    "started": "2019-09-18T19:42:22.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314605",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419#discussion_r325923897\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -51,3 +59,163 @@ impl PhysicalExpr for Column {\n         Ok(batch.column(self.index).clone())\n     }\n }\n+\n+/// Create a column expression\n+pub fn col(i: usize) -> Arc<dyn PhysicalExpr> {\n+    Arc::new(Column::new(i))\n+}\n+\n+/// SUM aggregate expression\n+pub struct Sum {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Sum { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Sum {\n+    fn name(&self) -> String {\n+        \"SUM\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+                Ok(DataType::Int64)\n+            }\n+            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+                Ok(DataType::UInt64)\n+            }\n+            other => Ok(other.clone()),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(SumAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Sum::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! sum_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            let value = array.value($ROW_INDEX);\n \n Review comment:\n   Good catch. I was not handling null slots correctly. I have pushed the fix and added a test with all null values.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-18T22:44:16.555+0000",
                    "updated": "2019-09-18T22:44:16.555+0000",
                    "started": "2019-09-18T22:44:16.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314711",
                    "issueId": "13257383"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/worklog/314801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5419: ARROW-6599: [Rust] [DataFusion] Add aggregate traits and SUM implementation to physical query plan\nURL: https://github.com/apache/arrow/pull/5419\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T03:46:48.272+0000",
                    "updated": "2019-09-19T03:46:48.272+0000",
                    "started": "2019-09-19T03:46:48.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "314801",
                    "issueId": "13257383"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5772152e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@686ee379[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@450f9e47[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a65c8b4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64cff68d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7f453b1a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46817f13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@32d52f1f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2935dc56[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7f7eaf81[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32ca2e9a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@297c520b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 19 03:46:47 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-19T03:46:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6599/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-18T13:22:27.000+0000",
        "updated": "2019-09-19T03:46:48.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement the SUM aggregate function in the new physical query plan",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement SUM aggregate expression",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257383/comment/16933038",
                    "id": "16933038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 5419\n[https://github.com/apache/arrow/pull/5419]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-09-19T03:46:47.812+0000",
                    "updated": "2019-09-19T03:46:47.812+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06rh4:",
        "customfield_12314139": null
    }
}