{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13256600",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600",
    "key": "ARROW-6558",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12575627",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12575627",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13237569",
                    "key": "ARROW-5508",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237569",
                    "fields": {
                        "summary": "[C++] Create reusable Iterator<T> interface ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6558/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 39,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/312997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391\n \n \n   To resolve linkage issues with MSVC and the current abstract base class Iterator\r\n   \r\n   @pitrou \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T13:59:17.173+0000",
                    "updated": "2019-09-16T13:59:17.173+0000",
                    "started": "2019-09-16T13:59:17.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312997",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#issuecomment-531828159\n \n \n   @kszucs Do you think the Ursabot build failures here are related?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T15:26:29.960+0000",
                    "updated": "2019-09-16T15:26:29.960+0000",
                    "started": "2019-09-16T15:26:29.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313066",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313093",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324742566\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n \n Review comment:\n   I would expect the reverse, i.e. `return ptr_ != NULLPTR` (similarly to a `shared_ptr` or other delegators which are true-ish when they point to an actual value).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:47.523+0000",
                    "updated": "2019-09-16T16:05:47.523+0000",
                    "started": "2019-09-16T16:05:47.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313093",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324744018\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n \n Review comment:\n   What is the point of going through `type_constant` instead of overloading the zero-argument form?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.143+0000",
                    "updated": "2019-09-16T16:05:48.143+0000",
                    "started": "2019-09-16T16:05:48.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313094",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324749926\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n+          typename Fn = decltype(std::mem_fun(&Pointed::Next)),\n \n Review comment:\n   Looks like `mem_fun` is going away in C++17:\r\n   > This function and the related types were deprecated in C++11 and removed in C++17 in favor of the more general std::mem_fn and std::bind, both of which create callable adapter-compatible function objects from member functions.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.151+0000",
                    "updated": "2019-09-16T16:05:48.151+0000",
                    "started": "2019-09-16T16:05:48.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313095",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324751095\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n+          typename Fn = decltype(std::mem_fun(&Pointed::Next)),\n+          typename T = typename std::remove_pointer<\n+              internal::call_traits::argument_type<1, Fn>>::type>\n+Iterator<T> MakePointerIterator(Ptr ptr) {\n+  return Iterator<T>(PointerIterator<Ptr, T>(std::move(ptr)));\n }\n \n-template <typename T>\n-class EmptyIterator : public Iterator<T> {\n+template <typename Fn, typename T>\n+class FunctionIterator {\n  public:\n-  explicit EmptyIterator(Status s = Status::OK()) : status_(s) {}\n+  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n \n-  Status Next(T* out) override {\n-    *out = NULLPTR;\n-    return status_;\n-  }\n+  Status Next(T* out) { return fn_(out); }\n \n  private:\n-  Status status_;\n+  Fn fn_;\n };\n \n+/// \\brief Construct an Iterator which invokes a callable on Next()\n+template <typename Fn, typename T = typename std::remove_pointer<\n+                           internal::call_traits::argument_type<0, Fn>>::type>\n+Iterator<T> MakeFunctionIterator(Fn fn) {\n+  return Iterator<T>(FunctionIterator<Fn, T>(std::move(fn)));\n \n Review comment:\n   I don't understand exactly the subtleties at play, but isn't the recommended spelling more like:\r\n   ```cpp\r\n   \r\n   Iterator<T> MakeFunctionIterator(Fn&& fn) {\r\n     return Iterator<T>(FunctionIterator<Fn, T>(std::forward(fn)));\r\n   }\r\n   ```\r\n   or doesn't it matter here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.407+0000",
                    "updated": "2019-09-16T16:05:48.407+0000",
                    "started": "2019-09-16T16:05:48.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313096",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324748069\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n \n Review comment:\n   Why is the `decltype(declval...)` dance necessary? `std::remove_pointer` doesn't work here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.657+0000",
                    "updated": "2019-09-16T16:05:48.657+0000",
                    "started": "2019-09-16T16:05:48.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313097",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324756568\n \n \n\n ##########\n File path: cpp/src/arrow/table.h\n ##########\n @@ -293,8 +291,12 @@ class ARROW_EXPORT TableBatchReader : public RecordBatchReader {\n   void set_chunksize(int64_t chunksize);\n \n  private:\n-  class TableBatchReaderImpl;\n-  std::unique_ptr<TableBatchReaderImpl> impl_;\n \n Review comment:\n   Why did you remove the pimpl? Is it just to remove one layer of indirection?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.660+0000",
                    "updated": "2019-09-16T16:05:48.660+0000",
                    "started": "2019-09-16T16:05:48.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313099",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324744979\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n \n Review comment:\n   Can you comment a bit on the implementation? So that the person reading this for the first time doesn't scratch their head.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.660+0000",
                    "updated": "2019-09-16T16:05:48.660+0000",
                    "started": "2019-09-16T16:05:48.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313098",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324741234\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n \n Review comment:\n   I think you mean `Status Next(T*)`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.660+0000",
                    "updated": "2019-09-16T16:05:48.660+0000",
                    "started": "2019-09-16T16:05:48.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313100",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324758265\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet_test.cc\n ##########\n @@ -60,42 +60,43 @@ Status WriteRecordBatch(const RecordBatch& batch, FileWriter* writer) {\n   return Status::OK();\n }\n \n-Status WriteRecordBatchReader(RecordBatchReader* reader, FileWriter* writer) {\n-  auto schema = reader->schema();\n+Status WriteRecordBatchReader(RecordBatchReader&& reader, FileWriter* writer) {\n \n Review comment:\n   Is there a reason for making these changes or is it just for aesthetics?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.663+0000",
                    "updated": "2019-09-16T16:05:48.663+0000",
                    "started": "2019-09-16T16:05:48.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313101",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324751667\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n+          typename Fn = decltype(std::mem_fun(&Pointed::Next)),\n+          typename T = typename std::remove_pointer<\n+              internal::call_traits::argument_type<1, Fn>>::type>\n+Iterator<T> MakePointerIterator(Ptr ptr) {\n+  return Iterator<T>(PointerIterator<Ptr, T>(std::move(ptr)));\n }\n \n-template <typename T>\n-class EmptyIterator : public Iterator<T> {\n+template <typename Fn, typename T>\n+class FunctionIterator {\n  public:\n-  explicit EmptyIterator(Status s = Status::OK()) : status_(s) {}\n+  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n \n-  Status Next(T* out) override {\n-    *out = NULLPTR;\n-    return status_;\n-  }\n+  Status Next(T* out) { return fn_(out); }\n \n  private:\n-  Status status_;\n+  Fn fn_;\n };\n \n+/// \\brief Construct an Iterator which invokes a callable on Next()\n+template <typename Fn, typename T = typename std::remove_pointer<\n+                           internal::call_traits::argument_type<0, Fn>>::type>\n+Iterator<T> MakeFunctionIterator(Fn fn) {\n+  return Iterator<T>(FunctionIterator<Fn, T>(std::move(fn)));\n+}\n+\n template <typename T>\n-std::unique_ptr<Iterator<T>> MakeEmptyIterator() {\n-  return std::unique_ptr<EmptyIterator<T>>(new EmptyIterator<T>());\n+Iterator<T> MakeEmptyIterator(Status s = Status::OK()) {\n \n Review comment:\n   Is this `Status` argument some kind of micro-optimization? I don't think it's worthwhile.\r\n   (also, it may end up a pessimization if for some reason the compiler isn't very good at optimizing closures)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.663+0000",
                    "updated": "2019-09-16T16:05:48.663+0000",
                    "started": "2019-09-16T16:05:48.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313102",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324751889\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n+          typename Fn = decltype(std::mem_fun(&Pointed::Next)),\n+          typename T = typename std::remove_pointer<\n+              internal::call_traits::argument_type<1, Fn>>::type>\n+Iterator<T> MakePointerIterator(Ptr ptr) {\n+  return Iterator<T>(PointerIterator<Ptr, T>(std::move(ptr)));\n }\n \n-template <typename T>\n-class EmptyIterator : public Iterator<T> {\n+template <typename Fn, typename T>\n+class FunctionIterator {\n  public:\n-  explicit EmptyIterator(Status s = Status::OK()) : status_(s) {}\n+  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n \n-  Status Next(T* out) override {\n-    *out = NULLPTR;\n-    return status_;\n-  }\n+  Status Next(T* out) { return fn_(out); }\n \n  private:\n-  Status status_;\n+  Fn fn_;\n };\n \n+/// \\brief Construct an Iterator which invokes a callable on Next()\n+template <typename Fn, typename T = typename std::remove_pointer<\n+                           internal::call_traits::argument_type<0, Fn>>::type>\n+Iterator<T> MakeFunctionIterator(Fn fn) {\n+  return Iterator<T>(FunctionIterator<Fn, T>(std::move(fn)));\n+}\n+\n template <typename T>\n-std::unique_ptr<Iterator<T>> MakeEmptyIterator() {\n-  return std::unique_ptr<EmptyIterator<T>>(new EmptyIterator<T>());\n+Iterator<T> MakeEmptyIterator(Status s = Status::OK()) {\n \n Review comment:\n   Or perhaps you actually want to be able to pass another return Status?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:05:48.679+0000",
                    "updated": "2019-09-16T16:05:48.679+0000",
                    "started": "2019-09-16T16:05:48.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313103",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324760194\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n \n Review comment:\n   That's a typo. Thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:07:52.773+0000",
                    "updated": "2019-09-16T16:07:52.773+0000",
                    "started": "2019-09-16T16:07:52.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313107",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324760867\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n \n Review comment:\n   I can write it that way; using this notation is redundant when I just mentioned that it was a member function.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:09:16.592+0000",
                    "updated": "2019-09-16T16:09:16.592+0000",
                    "started": "2019-09-16T16:09:16.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313109",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324762980\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n \n Review comment:\n   `remove_pointer` would work for a raw pointer but this helper is mostly designed to wrap smart pointers (for which `remove_pointer` does nothing)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:14:11.100+0000",
                    "updated": "2019-09-16T16:14:11.100+0000",
                    "started": "2019-09-16T16:14:11.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313112",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324763187\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n+          typename Fn = decltype(std::mem_fun(&Pointed::Next)),\n \n Review comment:\n   I'll replace this with a custom trait\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:14:39.188+0000",
                    "updated": "2019-09-16T16:14:39.188+0000",
                    "started": "2019-09-16T16:14:39.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313114",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324764505\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n+template <typename T>\n+static T IteratorEnd() {\n+  return IteratorEnd(internal::type_constant<T>{});\n+}\n+\n /// \\brief A generic Iterator that can return errors\n template <typename T>\n class Iterator {\n  public:\n-  virtual ~Iterator() = default;\n+  /// \\brief Iterator may be constructed from any type which has member function\n+  /// Status HasNext::Next(T*);\n+  template <typename HasNext>\n+  explicit Iterator(HasNext has_next)\n+      : ptr_(new HasNext(std::move(has_next)), Delete<HasNext>), next_(Next<HasNext>) {}\n+\n+  Iterator() : ptr_(NULLPTR, NoopDelete) {}\n \n-  /// \\brief Return the next element of the sequence, nullptr when the\n-  /// iteration is completed\n-  virtual Status Next(T* out) = 0;\n+  /// \\brief Return the next element of the sequence, IteratorEnd<T>() when the\n+  /// iteration is completed. Calling this on a default constructed Iterator\n+  /// will result in undefined behavior.\n+  Status Next(T* out) { return next_(ptr_.get(), out); }\n \n   /// Pass each element of the sequence to a visitor. Will return any error status\n   /// returned by the visitor, terminating iteration.\n   template <typename Visitor>\n   Status Visit(Visitor&& visitor) {\n     Status status;\n-    T value;\n \n-    for (;;) {\n+    for (T value, end = IteratorEnd<T>();;) {\n       status = Next(&value);\n \n       if (!status.ok()) return status;\n \n-      if (value == NULLPTR) break;\n+      if (value == end) break;\n \n       ARROW_RETURN_NOT_OK(visitor(std::move(value)));\n     }\n \n     return status;\n   }\n+\n+  bool operator==(const Iterator& other) const { return ptr_ == other.ptr_; }\n+\n+  explicit operator bool() const { return ptr_ == NULLPTR; }\n+\n+ private:\n+  template <typename HasNext>\n+  static void Delete(void* ptr) {\n+    delete static_cast<HasNext*>(ptr);\n+  }\n+\n+  static void NoopDelete(void*) {}\n+\n+  template <typename HasNext>\n+  static Status Next(void* ptr, T* out) {\n+    return static_cast<HasNext*>(ptr)->Next(out);\n+  }\n+\n+  std::unique_ptr<void, void (*)(void*)> ptr_;\n+  Status (*next_)(void*, T*) = NULLPTR;\n+\n+  friend Iterator IteratorEnd(internal::type_constant<Iterator>) {\n+    // end condition for an Iterator of Iterators is a default constructed (null) iterator\n+    return Iterator();\n+  }\n };\n \n-template <typename Fn, typename T>\n-class FunctionIterator : public Iterator<T> {\n+template <typename Ptr, typename T>\n+class PointerIterator {\n  public:\n-  using IteratorType = Iterator<T>;\n-\n-  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n+  explicit PointerIterator(Ptr ptr) : ptr_(std::move(ptr)) {}\n \n-  Status Next(T* out) override { return fn_(out); }\n+  Status Next(T* out) { return ptr_->Next(out); }\n \n  private:\n-  Fn fn_;\n+  Ptr ptr_;\n };\n \n-template <typename Fn, typename T = typename std::remove_pointer<\n-                           internal::call_traits::argument_type<0, Fn>>::type>\n-std::unique_ptr<FunctionIterator<Fn, T>> MakeFunctionIterator(Fn fn) {\n-  return std::unique_ptr<FunctionIterator<Fn, T>>(\n-      new FunctionIterator<Fn, T>(std::move(fn)));\n+/// \\brief Construct an Iterator which dereferences a (possibly smart) pointer\n+/// to invoke its Next function\n+template <typename Ptr,\n+          typename Pointed = typename std::decay<decltype(*std::declval<Ptr>())>::type,\n+          typename Fn = decltype(std::mem_fun(&Pointed::Next)),\n+          typename T = typename std::remove_pointer<\n+              internal::call_traits::argument_type<1, Fn>>::type>\n+Iterator<T> MakePointerIterator(Ptr ptr) {\n+  return Iterator<T>(PointerIterator<Ptr, T>(std::move(ptr)));\n }\n \n-template <typename T>\n-class EmptyIterator : public Iterator<T> {\n+template <typename Fn, typename T>\n+class FunctionIterator {\n  public:\n-  explicit EmptyIterator(Status s = Status::OK()) : status_(s) {}\n+  explicit FunctionIterator(Fn fn) : fn_(std::move(fn)) {}\n \n-  Status Next(T* out) override {\n-    *out = NULLPTR;\n-    return status_;\n-  }\n+  Status Next(T* out) { return fn_(out); }\n \n  private:\n-  Status status_;\n+  Fn fn_;\n };\n \n+/// \\brief Construct an Iterator which invokes a callable on Next()\n+template <typename Fn, typename T = typename std::remove_pointer<\n+                           internal::call_traits::argument_type<0, Fn>>::type>\n+Iterator<T> MakeFunctionIterator(Fn fn) {\n+  return Iterator<T>(FunctionIterator<Fn, T>(std::move(fn)));\n+}\n+\n template <typename T>\n-std::unique_ptr<Iterator<T>> MakeEmptyIterator() {\n-  return std::unique_ptr<EmptyIterator<T>>(new EmptyIterator<T>());\n+Iterator<T> MakeEmptyIterator(Status s = Status::OK()) {\n \n Review comment:\n   I can remove the argument until we need it. This is slightly legacy: EmptyIterator's original purpose was to allow functions like `Iterator<unique_ptr<ScanTask>> NonStatusReturn()` to emit an error, but we decided that's an antipattern.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:17:32.072+0000",
                    "updated": "2019-09-16T16:17:32.072+0000",
                    "started": "2019-09-16T16:17:32.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313117",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324764616\n \n \n\n ##########\n File path: cpp/src/arrow/table.h\n ##########\n @@ -293,8 +291,12 @@ class ARROW_EXPORT TableBatchReader : public RecordBatchReader {\n   void set_chunksize(int64_t chunksize);\n \n  private:\n-  class TableBatchReaderImpl;\n-  std::unique_ptr<TableBatchReaderImpl> impl_;\n \n Review comment:\n   Yes, it's no longer necessary\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:17:48.244+0000",
                    "updated": "2019-09-16T16:17:48.244+0000",
                    "started": "2019-09-16T16:17:48.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313119",
                    "issueId": "13256600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/worklog/313121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5391: ARROW-6558: [C++] Refactor Iterator to type erased handle\nURL: https://github.com/apache/arrow/pull/5391#discussion_r324764979\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -28,84 +29,141 @@\n \n namespace arrow {\n \n+template <typename T>\n+class Iterator;\n+\n+/// \\brief IteratorEnd returns a reserved value which indicates the end of iteration. By\n+/// default this is NULLPTR since most iterators yield pointer types. Specialize/overload\n+/// if different end semantics are required.\n+template <typename T>\n+static T IteratorEnd(internal::type_constant<T>) {\n+  return T(NULLPTR);\n+}\n+\n+/// Convenience function, overload the type_constant version above and not this one.\n \n Review comment:\n   The zero argument form cannot be partially specialized. Partial specialization is necessary if you need to define a generic `IteratorEnd`, for example for `optional`:\r\n   \r\n   ```c++\r\n   template <typename T>\r\n   optional<T> IteratorEnd<optional<T>>() {\r\n     // signal end of iteration by yielding an empty optional\r\n     return nullopt;\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T16:18:41.855+0000",
                    "updated": "2019-09-16T16:18:41.855+0000",
                    "started": "2019-09-16T16:18:41.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313121",
                    "issueId": "13256600"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@71270eeb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bba247a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7aba308b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@20795252[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ed1c251[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@145a5469[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fcf1001[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@55ce3e68[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65bdadca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@23024408[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@640a1771[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@409358e6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 17 12:04:17 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-17T12:04:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6558/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-13T19:18:46.000+0000",
        "updated": "2019-12-04T19:34:51.000+0000",
        "timeoriginalestimate": null,
        "description": "Since {{Iterator<T>}} is used as a base class for exported classes and is instantiated in both arrow.dll and arrow_dataset.dll we get multiple definition errors. The solution taken by MSVC's stl implementation in the similar case of {{std::function}} is type erasure. Since it's not a base class MSVC doesn't force public visibility of its members. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Refactor Iterator to a type erased handle",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256600/comment/16931364",
                    "id": "16931364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5391\n[https://github.com/apache/arrow/pull/5391]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-17T12:04:17.934+0000",
                    "updated": "2019-09-17T12:04:17.934+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06mns:",
        "customfield_12314139": null
    }
}