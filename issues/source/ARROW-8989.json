{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13308560",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560",
    "key": "ARROW-8989",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589888",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589888",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12593100",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12593100",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13315976",
                    "key": "ARROW-9392",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315976",
                    "fields": {
                        "summary": "[C++] Document more of the compute layer",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8989/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 35,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/456770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695\n\n\n   Also fix glaring bugs in arithmetic kernels\r\n   (signed overflow detection was broken).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T19:05:13.745+0000",
                    "updated": "2020-07-09T19:05:13.745+0000",
                    "started": "2020-07-09T19:05:13.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456770",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/456772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#issuecomment-656300001\n\n\n   @nealrichardson You should like this.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T19:07:09.730+0000",
                    "updated": "2020-07-09T19:07:09.730+0000",
                    "started": "2020-07-09T19:07:09.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456772",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/456780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#issuecomment-656304218\n\n\n   https://issues.apache.org/jira/browse/ARROW-8989\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T19:17:04.963+0000",
                    "updated": "2020-07-09T19:17:04.963+0000",
                    "started": "2020-07-09T19:17:04.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456780",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r452911334\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n\nReview comment:\n       Will this automatically link to some generated docs that say what the possible options are? If not, can you add them here?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n\nReview comment:\n       Yes please, at least an example\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n\nReview comment:\n       Since this doc uses them throughout, it would be good to have an explicit list somewhere of what is included in \"numeric\", \"binary- and string-like\", \"temporal\", and any other type categories used.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n\nReview comment:\n       What happens if you don't use a checked version and it does overflow? Do we recommend one or the other for general use?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n\nReview comment:\n       ```suggestion\r\n   These functions expect two inputs of the same type and apply a given\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n\nReview comment:\n       Could you clarify what kinds of objects are used as `pattern` and `value_set` here? Array, Scalar, std::something, etc.?\r\n   \r\n   Also might be worth calling out that these are unary and not binary, as they often appear to be elsewhere. It certainly confused me when I tried to call `isin` like `isin(x, y)` and got the error message that \"isin\" only takes 1 argument--which doesn't help you understand how to properly construct the call, it just makes you question your sanity.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n\nReview comment:\n       How?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n\nReview comment:\n       OMG yes please, probably more than one\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n+\n+Array-wise (\"vector\") functions\n+-------------------------------\n+\n+Associative transforms\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------+----------------------------+\n+| Function name            | Arity      | Input types                | Output type                |\n++==========================+============+============================+============================+\n+| dictionary_encode        | Unary      | Binary- and String-like    | Dictionary (1)             |\n\nReview comment:\n       Why isn't `dictionary_encode` just cast to Dictionary?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n\nReview comment:\n       Maybe some 3 x 3 truth tables (T, F, NA) would more clearly show the expectations.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n\nReview comment:\n       I'm not sure I understand why there are three rows for `equal, not_equal`\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n\nReview comment:\n       It might be worth noting that this is what R, Numpy, etc. do. And is the \"normal behavior\" default for some other systems? Just to help users understand which one they should use to get their expected results.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n\nReview comment:\n       What are the constraints on the pairs of inputs? I haven't tested all combinations, but it seems that generally you can do `Array OPERATOR Scalar`, `Array OPERATOR Array` iff the arrays are the same length, etc., and also for ChunkedArray. Some are also defined for RecordBatch and Table too right?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n\nReview comment:\n       What determines whether it's int32 or int64?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n\nReview comment:\n       What do StrptimeOptions look like?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T15:46:08.495+0000",
                    "updated": "2020-07-10T15:46:08.495+0000",
                    "started": "2020-07-10T15:46:08.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457208",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453000458\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n\nReview comment:\n       It will. That's the whole point of this markup, and the API docs I added :-)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:18:02.128+0000",
                    "updated": "2020-07-10T18:18:02.128+0000",
                    "started": "2020-07-10T18:18:02.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457286",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453000744\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n\nReview comment:\n       I don't think Numpy does anything, since it doesn't have nulls. Perhaps you mean Pandas?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:18:46.242+0000",
                    "updated": "2020-07-10T18:18:46.242+0000",
                    "started": "2020-07-10T18:18:46.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457287",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453000941\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n\nReview comment:\n       The link to \"Kleene logic\" show the truth tables. I'm not sure it's worth repeating them here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:19:09.530+0000",
                    "updated": "2020-07-10T18:19:09.530+0000",
                    "started": "2020-07-10T18:19:09.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457288",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453001192\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n\nReview comment:\n       You get the detailed API docs by clicking on the `BinaryContainsExactOptions` hyperlink (in the rendered docs only, though :-)).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:19:42.659+0000",
                    "updated": "2020-07-10T18:19:42.659+0000",
                    "started": "2020-07-10T18:19:42.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457289",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453001323\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n\nReview comment:\n       Whether the type is List or LargeList.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:20:03.535+0000",
                    "updated": "2020-07-10T18:20:03.535+0000",
                    "started": "2020-07-10T18:20:03.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457291",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453001677\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n\nReview comment:\n       You get the answer by clicking on the `CastOptions` link not rendered :-) I'm not sure it's worth repeating here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:20:48.878+0000",
                    "updated": "2020-07-10T18:20:48.878+0000",
                    "started": "2020-07-10T18:20:48.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457292",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453001863\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n\nReview comment:\n       I think you can guess the answer now :-)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:21:12.036+0000",
                    "updated": "2020-07-10T18:21:12.036+0000",
                    "started": "2020-07-10T18:21:12.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457293",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453002174\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n+\n+Array-wise (\"vector\") functions\n+-------------------------------\n+\n+Associative transforms\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------+----------------------------+\n+| Function name            | Arity      | Input types                | Output type                |\n++==========================+============+============================+============================+\n+| dictionary_encode        | Unary      | Binary- and String-like    | Dictionary (1)             |\n\nReview comment:\n       Perhaps because it's special enough, though @wesm would know the answer better than me.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:21:48.562+0000",
                    "updated": "2020-07-10T18:21:48.562+0000",
                    "started": "2020-07-10T18:21:48.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457295",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453046448\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n\nReview comment:\n       ```suggestion\r\n   inputs is null, similar to the way any operation involving ``NaN`` devolves to ``NaN``.\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n\nReview comment:\n       ```suggestion\r\n     (null if input is null). The output type is Int32 for List, Int64 for LargeList\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n\nReview comment:\n       If we made a recommendation for general use it'd probably be `_checked` so that users become aware of overflow sooner and can be intentional about handling it\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n\nReview comment:\n       ```suggestion\r\n   The inputs and outputs of compute functions are of type :class:`arrow::Datum`, which are\r\n   a discriminated union of several shapes of data, including :class:`arrow::Scalar`,\r\n   :class:`arrow::Array`, and :class:`arrow::ChunkedArray`.\r\n   \r\n   Compute functions can be invoked by name using the :func:`arrow::compute::CallFunction`\r\n   or via dedicated c++ convenience functions.\r\n   \r\n   .. code-block:: cpp\r\n      std::shared_ptr<arrow::Int32Array> ints = ...;\r\n      std::shared_ptr<arrow::Int32Scalar> increment = ...;\r\n      \r\n      ARROW_ASSIGN_OR_RAISE(arrow::Datum incremented, arrow::compute::CallFunction(\"add_checked\",\r\n          {arrow::Datum(ints), arrow::Datum(increment)}));\r\n   \r\n      arrow::ArithmeticOptions options;\r\n      options.check_overflow = true;\r\n      ARROW_ASSIGN_OR_RAISE(arrow::Datum equivalent, arrow::compute::Add(\r\n          {arrow::Datum(ints), arrow::Datum(increment)}, arithmetic_options));\r\n      \r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n\nReview comment:\n       ```suggestion\r\n   C++ cast example::\r\n       std::shared_ptr<arrow::StringArray> inputs = ...;\r\n       ARROW_ASSIGN_OR_RAISE(arrow::Datum converted, arrow::compute::Cast(inputs, arrow::int32()));\r\n       auto inputs32 = std::static_pointer_cast<arrow::Int32Array>(converted.make_array());\r\n       for (int64_t i = 0; i < inputs32.length(); ++i) {\r\n         ReportInput(inputs32.Value(i));\r\n       }\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n\nReview comment:\n       ```suggestion\r\n   ``_kleene``) where null is taken to mean \"undefined\".  (This is the interpretation of null\r\n   used in ``R`` and ``SQL``, for example.) For those variants\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n\nReview comment:\n       ```suggestion\r\n   operation to each pair of elements gathered from the inputs.  Integer overflow is\r\n   handled by wrapping; the sum of ``1`` and the maximum value will evaluate to the\r\n   minimum value for any integer type. Each function is also available in an overflow-\r\n   checking variant which raises an error if overflow would occur, suffixed ``_checked``.\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n+\n+Array-wise (\"vector\") functions\n+-------------------------------\n+\n+Associative transforms\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------+----------------------------+\n+| Function name            | Arity      | Input types                | Output type                |\n++==========================+============+============================+============================+\n+| dictionary_encode        | Unary      | Binary- and String-like    | Dictionary (1)             |\n\nReview comment:\n       dictionary_encode infers the dictionary's type from the argument and always uses int32 indices. Cast requires that you specify the destination type\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T20:15:25.424+0000",
                    "updated": "2020-07-10T20:15:25.424+0000",
                    "started": "2020-07-10T20:15:25.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457343",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453364998\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n\nReview comment:\n       Same comment here, having multiple lines per function seems really tedious\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n\nReview comment:\n       Note: it isn't necessary to use `Datum(...)` explicitly on most cases because of implicit conversions\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n+\n+Array-wise (\"vector\") functions\n+-------------------------------\n+\n+Associative transforms\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------+----------------------------+\n+| Function name            | Arity      | Input types                | Output type                |\n++==========================+============+============================+============================+\n+| dictionary_encode        | Unary      | Binary- and String-like    | Dictionary (1)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| dictionary_encode        | Unary      | Boolean, Numeric, Temporal | Dictionary (1)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| dictionary_encode        | Unary      | Null                       | Dictionary (1)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| unique                   | Unary      | Binary- and String-like    | Input type (2)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| unique                   | Unary      | Boolean, Numeric, Temporal | Input type (2)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| unique                   | Unary      | Null                       | Input type (2)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| value_counts             | Unary      | Binary- and String-like    | Struct (3)                 |\n++--------------------------+------------+----------------------------+----------------------------+\n+| value_counts             | Unary      | Boolean, Numeric, Temporal | Struct (3)                 |\n++--------------------------+------------+----------------------------+----------------------------+\n+| value_counts             | Unary      | Null                       | Struct (3)                 |\n++--------------------------+------------+----------------------------+----------------------------+\n+\n+* \\(1) Output is ``Dictionary(Int32, input type)``.\n+\n+* \\(2) Duplicates are removed from the output while the original order is\n+  maintained.\n+\n+* \\(3) Output is a ``{\"values\": input type, \"counts\": Int64}`` Struct.\n+  Each output element corresponds to a unique value in the input, along\n+  with the number of times this value has appeared.\n+\n+Selections\n+~~~~~~~~~~\n+\n+These functions select a subset of the first input defined by the second input.\n+\n++-----------------+------------+---------------+--------------+------------------+-------------------------+-------------+\n+| Function name   | Arity      | Input type 1  | Input type 2 | Output type      | Options class           | Notes       |\n++=================+============+===============+==============+==================+=========================+=============+\n+| filter          | Binary     | Any (1)       | Boolean      | Input type 1     | :struct:`FilterOptions` | \\(2)        |\n++-----------------+------------+---------------+--------------+------------------+-------------------------+-------------+\n+| take            | Binary     | Any (1)       | Integer      | Input type 1     | :struct:`TakeOptions`   | \\(3)        |\n\nReview comment:\n       These are metafunctions. Probably also want to list array_filter and array_take \n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n\nReview comment:\n       I've always found these reStructuredText tables to be immensely tedious. What would you say about putting the source of the documentation in e.g. a JSON file (which would be much easier to edit) and then generating the RST markup from the JSON? Then if we need to restructure the output in some way we won't have to tear our hair out manually editing these tables\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n\nReview comment:\n       What is the rationale for having multiple lines for each function?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-12T21:26:15.618+0000",
                    "updated": "2020-07-12T21:26:15.618+0000",
                    "started": "2020-07-12T21:26:15.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457793",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453365336\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n\nReview comment:\n       This is true, the explicit typing was for clarity of exposition\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-12T21:27:19.806+0000",
                    "updated": "2020-07-12T21:27:19.806+0000",
                    "started": "2020-07-12T21:27:19.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457794",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#issuecomment-657277758\n\n\n   I think either CSV or List tables would be an improvement over the current\r\n   \r\n   https://docutils.sourceforge.io/docs/ref/rst/directives.html#tables\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-12T21:27:34.066+0000",
                    "updated": "2020-07-12T21:27:34.066+0000",
                    "started": "2020-07-12T21:27:34.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457795",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453520967\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n\nReview comment:\n       To fit all types. I could also put them all on a single line, but the table may end up quite larger.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T09:34:42.274+0000",
                    "updated": "2020-07-13T09:34:42.274+0000",
                    "started": "2020-07-13T09:34:42.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457931",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453521794\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n\nReview comment:\n       Will do, though unfortunately the real answer may be slightly function-specific.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T09:35:45.449+0000",
                    "updated": "2020-07-13T09:35:45.449+0000",
                    "started": "2020-07-13T09:35:45.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457932",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453525042\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n\nReview comment:\n       I don't find JSON files easy to edit at all. I'd much rather keep the reST table format. It's not the most natural format to edit in a text editor, but it's still reasonable if your editor has a [block selection mode](https://stackoverflow.com/questions/1802616/how-to-select-columns-in-editors-atom-notepad-kate-vim-sublime-textpad-et).\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T09:40:59.942+0000",
                    "updated": "2020-07-13T09:40:59.942+0000",
                    "started": "2020-07-13T09:40:59.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457933",
                    "issueId": "13308560"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/worklog/457934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7695:\nURL: https://github.com/apache/arrow/pull/7695#discussion_r453525416\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -0,0 +1,419 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+=================\n+Compute Functions\n+=================\n+\n+.. TODO: describe API and how to invoke compute functions\n+\n+Available functions\n+===================\n+\n+Aggregations\n+------------\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| count                    | Unary      | Any                | Scalar Int64          | :struct:`CountOptions`                     |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| mean                     | Unary      | Numeric            | Scalar Float64        |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| minmax                   | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| sum                      | Unary      | Numeric            | Scalar Numeric (2)    |                                            |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+Notes:\n+\n+* \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n+\n+* \\(2) Output is Int64, UInt64 or Float64, depending on the input type\n+\n+\n+Element-wise (\"scalar\") functions\n+---------------------------------\n+\n+Arithmetic functions\n+~~~~~~~~~~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given binary\n+operation to each pair of elements gathered from the inputs.  Each function\n+is also available in an overflow-checking variant, suffixed ``_checked``.\n+\n+If any of the input elements in a pair is null, the corresponding output\n+element is null.\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| add                      | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| add_checked              | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| multiply_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract                 | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| subtract_checked         | Binary     | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+Comparisons\n+~~~~~~~~~~~\n+\n+Those functions expect two inputs of the same type and apply a given\n+comparison operator.  If any of the input elements in a pair is null,\n+the corresponding output element is null.\n+\n++--------------------------+------------+---------------------------------+---------------------+\n+| Function names           | Arity      | Input types                     | Output type         |\n++==========================+============+=================================+=====================+\n+| equal, not_equal         | Binary     | Numeric                         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Binary- and String-like         | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| equal, not_equal         | Binary     | Temporal                        | Boolean             |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Numeric                         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Binary- and String-like         | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+| greater, greater_equal,  | Binary     | Temporal                        | Boolean             |\n+| less, less_equal         |            |                                 |                     |\n++--------------------------+------------+---------------------------------+---------------------+\n+\n+Logical functions\n+~~~~~~~~~~~~~~~~~~\n+\n+The normal behaviour for these functions is to emit a null if any of the\n+inputs is null.\n+\n+Some of them are also available in a \"`Kleene logic`_\" variant (suffixed\n+``_kleene``) where null is taken to mean \"undefined\".  For those variants\n+therefore:\n+\n+* \"true AND null\", \"null AND true\" give \"null\" (the result is undefined)\n+* \"true OR null\", \"null OR true\" give \"true\"\n+* \"false AND null\", \"null AND false\" give \"false\"\n+* \"false OR null\", \"null OR false\" give \"null\" (the result is undefined)\n+\n++--------------------------+------------+--------------------+---------------------+\n+| Function name            | Arity      | Input types        | Output type         |\n++==========================+============+====================+=====================+\n+| and                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| and_kleene               | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| invert                   | Unary      | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or                       | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| or_kleene                | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+| xor                      | Binary     | Boolean            | Boolean             |\n++--------------------------+------------+--------------------+---------------------+\n+\n+.. _Kleene logic: https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics\n+\n+String functions\n+~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| ascii_length             | Unary      | String-like        | Int32 or Int64      | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_lower              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| ascii_upper              | Unary      | String-like        | String-like         | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_lower               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| utf8_upper               | Unary      | String-like        | String-like         | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is the physical length in bytes of each input element.\n+\n+* \\(2) Each ASCII character in the input is converted to lowercase or\n+  uppercase.  Non-ASCII characters are left untouched.\n+\n+* \\(3) Each UTF8-encoded character in the input is converted to lowercase or\n+  uppercase.\n+\n+Containment tests\n+~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types                      | Output type           | Options class                              |\n++==========================+============+==================================+=======================+============================================+\n+| binary_contains_exact    | Unary      | String-like                      | Boolean (1)           | :struct:`BinaryContainsExactOptions`       |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Binary- and String-like          | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Null                             | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| isin                     | Unary      | Boolean,Numeric, Temporal        | Boolean (2)           | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Binary- and String-like          | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Null                             | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+| match                    | Unary      | Boolean,Numeric, Temporal        | Int32 (3)             | :struct:`SetLookupOptions`                 |\n++--------------------------+------------+----------------------------------+-----------------------+--------------------------------------------+\n+\n+* \\(1) Output is true iff :member:`BinaryContainsExactOptions::pattern`\n+  is a substring of the corresponding input element.\n+\n+* \\(2) Output is true iff the corresponding input element is equal to one\n+  of the elements in :member:`SetLookupOptions::value_set`.\n+\n+* \\(3) Output is the index of the corresponding input element in\n+  :member:`SetLookupOptions::value_set`, if found there.  Otherwise,\n+  output is null.\n+\n+Structural transforms\n+~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+--------------------+---------------------+---------+\n+| Function name            | Arity      | Input types        | Output type         | Notes   |\n++==========================+============+====================+=====================+=========+\n+| is_null                  | Unary      | Any                | Boolean             | \\(1)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| is_valid                 | Unary      | Any                | Boolean             | \\(2)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+| list_value_lengths       | Unary      | List-like          | Int32 or Int64      | \\(3)    |\n++--------------------------+------------+--------------------+---------------------+---------+\n+\n+* \\(1) Output is true iff the corresponding input element is non-null.\n+\n+* \\(2) Output is true iff the corresponding input element is null.\n+\n+* \\(3) Each output element is the length of the corresponding input element\n+  (null if input is null).\n+\n+Conversions\n+~~~~~~~~~~~\n+\n+A general conversion function named ``cast`` is provided which accepts a large\n+number of input and output types.  The type to cast to can be passed in a\n+:struct:`CastOptions` instance.\n+\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| Function name            | Arity      | Input types        | Output type           | Options class                              |\n++==========================+============+====================+=======================+============================================+\n+| cast                     | Unary      | Many               | Variable              | :struct:`CastOptions`                      |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+| strptime                 | Unary      | String-like        | Timestamp             | :struct:`StrptimeOptions`                  |\n++--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n+\n+The conversions available with ``cast`` are listed below.  In all cases, a\n+null input value is converted into a null output value.\n+\n+**Truth value extraction**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Binary- and String-like     | Boolean                            | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Boolean                            | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) Output is true iff the corresponding input value has non-zero length.\n+\n+* \\(2) Output is true iff the corresponding input value is non-zero.\n+\n+**Same-kind conversion**\n+\n++-----------------------------+------------------------------------+--------------+\n+| Input type                  | Output type                        | Notes        |\n++=============================+====================================+==============+\n+| Int32                       | 32-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Int64                       | 64-bit Temporal                    | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)Binary               | (Large)String                      | \\(2)         |\n++-----------------------------+------------------------------------+--------------+\n+| (Large)String               | (Large)Binary                      | \\(3)         |\n++-----------------------------+------------------------------------+--------------+\n+| Numeric                     | Numeric                            | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+| 32-bit Temporal             | Int32                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| 64-bit Temporal             | Int64                              | \\(1)         |\n++-----------------------------+------------------------------------+--------------+\n+| Temporal                    | Temporal                           | \\(4) \\(5)    |\n++-----------------------------+------------------------------------+--------------+\n+\n+* \\(1) No-operation cast: the raw values are kept identical, only\n+  the type is changed.\n+\n+* \\(2) Validates the contents if :member:`CastOptions::allow_invalid_utf8`\n+  is false.\n+\n+* \\(3) No-operation cast: only the type is changed.\n+\n+* \\(4) Overflow and truncation checks are enabled depending on\n+  the given :struct:`CastOptions`.\n+\n+* \\(5) Not all such casts have been implemented.\n+\n+**String representations**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Boolean                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+| Numeric                     | String-like                        |         |\n++-----------------------------+------------------------------------+---------+\n+\n+**Generic conversions**\n+\n++-----------------------------+------------------------------------+---------+\n+| Input type                  | Output type                        | Notes   |\n++=============================+====================================+=========+\n+| Dictionary                  | Dictionary value type              |         |\n++-----------------------------+------------------------------------+---------+\n+| Extension                   | Extension storage type             |         |\n++-----------------------------+------------------------------------+---------+\n+| List-like                   | List-like                          | \\(1)    |\n++-----------------------------+------------------------------------+---------+\n+| Null                        | Any                                |         |\n++-----------------------------+------------------------------------+---------+\n+\n+* \\(1) The list offsets are unchanged, the list values are cast from the\n+  input value type to the output value type (if a conversion is\n+  available).\n+\n+\n+.. TODO: add C++ cast example\n+\n+Array-wise (\"vector\") functions\n+-------------------------------\n+\n+Associative transforms\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------+------------+----------------------------+----------------------------+\n+| Function name            | Arity      | Input types                | Output type                |\n++==========================+============+============================+============================+\n+| dictionary_encode        | Unary      | Binary- and String-like    | Dictionary (1)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| dictionary_encode        | Unary      | Boolean, Numeric, Temporal | Dictionary (1)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| dictionary_encode        | Unary      | Null                       | Dictionary (1)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| unique                   | Unary      | Binary- and String-like    | Input type (2)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| unique                   | Unary      | Boolean, Numeric, Temporal | Input type (2)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| unique                   | Unary      | Null                       | Input type (2)             |\n++--------------------------+------------+----------------------------+----------------------------+\n+| value_counts             | Unary      | Binary- and String-like    | Struct (3)                 |\n++--------------------------+------------+----------------------------+----------------------------+\n+| value_counts             | Unary      | Boolean, Numeric, Temporal | Struct (3)                 |\n++--------------------------+------------+----------------------------+----------------------------+\n+| value_counts             | Unary      | Null                       | Struct (3)                 |\n++--------------------------+------------+----------------------------+----------------------------+\n+\n+* \\(1) Output is ``Dictionary(Int32, input type)``.\n+\n+* \\(2) Duplicates are removed from the output while the original order is\n+  maintained.\n+\n+* \\(3) Output is a ``{\"values\": input type, \"counts\": Int64}`` Struct.\n+  Each output element corresponds to a unique value in the input, along\n+  with the number of times this value has appeared.\n+\n+Selections\n+~~~~~~~~~~\n+\n+These functions select a subset of the first input defined by the second input.\n+\n++-----------------+------------+---------------+--------------+------------------+-------------------------+-------------+\n+| Function name   | Arity      | Input type 1  | Input type 2 | Output type      | Options class           | Notes       |\n++=================+============+===============+==============+==================+=========================+=============+\n+| filter          | Binary     | Any (1)       | Boolean      | Input type 1     | :struct:`FilterOptions` | \\(2)        |\n++-----------------+------------+---------------+--------------+------------------+-------------------------+-------------+\n+| take            | Binary     | Any (1)       | Integer      | Input type 1     | :struct:`TakeOptions`   | \\(3)        |\n\nReview comment:\n       I don't know. Does it help the user to know about the non-metafunctions? Personally, I wouldn't know what to do with them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T09:41:44.429+0000",
                    "updated": "2020-07-13T09:41:44.429+0000",
                    "started": "2020-07-13T09:41:44.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457934",
                    "issueId": "13308560"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@60d8e87a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f180be0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@178e17e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6e50adba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@390dc887[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d7adaa4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bcfbf64[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1019e0da[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47875bae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2cc31600[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a71b863[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@75b182c7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 13 17:48:38 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-07-13T17:48:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8989/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-05-31T12:59:30.000+0000",
        "updated": "2020-07-13T17:48:50.000+0000",
        "timeoriginalestimate": null,
        "description": "Create a compute page in the C++ section of the Sphinx docs and make a list of the available functions and what they do",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Document available functions in compute::FunctionRegistry",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308560/comment/17156872",
                    "id": "17156872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7695\n[https://github.com/apache/arrow/pull/7695]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-07-13T17:48:38.499+0000",
                    "updated": "2020-07-13T17:48:38.499+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fcw8:",
        "customfield_12314139": null
    }
}