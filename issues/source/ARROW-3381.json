{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188498",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498",
    "key": "ARROW-3381",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "csv",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3381/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/156894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T18:30:57.674+0000",
                    "updated": "2018-10-22T18:30:57.674+0000",
                    "started": "2018-10-22T18:30:57.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156894",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/156982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812#issuecomment-431853993\n \n \n   AppVeyor build here: https://ci.appveyor.com/project/pitrou/arrow/builds/19685443\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:07:49.657+0000",
                    "updated": "2018-10-22T19:07:49.657+0000",
                    "started": "2018-10-22T19:07:49.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156982",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/157107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/appveyor-cpp-build.bat b/ci/appveyor-cpp-build.bat\nindex 3589871653..bce722ffa9 100644\n--- a/ci/appveyor-cpp-build.bat\n+++ b/ci/appveyor-cpp-build.bat\n@@ -99,6 +99,7 @@ if \"%JOB%\" == \"Toolchain\" (\n   @rem Install pre-built \"toolchain\" packages for faster builds\n   conda install -q -y ^\n       brotli ^\n+      bzip2 ^\n       cmake ^\n       flatbuffers ^\n       gflags ^\ndiff --git a/ci/cpp-msvc-build-main.bat b/ci/cpp-msvc-build-main.bat\nindex 5ddb648d50..e5eef1e5d8 100644\n--- a/ci/cpp-msvc-build-main.bat\n+++ b/ci/cpp-msvc-build-main.bat\n@@ -19,6 +19,11 @@\n @rem (i.e. for usual configurations)\n \n set ARROW_HOME=%CONDA_PREFIX%\\Library\n+set CMAKE_ARGS=\n+\n+if \"%JOB%\" == \"Toolchain\" (\n+    set CMAKE_ARGS=%CMAKE_ARGS% -DARROW_WITH_BZ2=ON\n+)\n \n @rem Retrieve git submodules, configure env var for Parquet unit tests\n git submodule update --init || exit /B\n@@ -38,7 +43,7 @@ set CMAKE_CXX_FLAGS_RELEASE=/Od /UNDEBUG\n mkdir cpp\\build\n pushd cpp\\build\n \n-cmake -G \"%GENERATOR%\" ^\n+cmake -G \"%GENERATOR%\" %CMAKE_ARGS% ^\n       -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\\Library ^\n       -DARROW_BOOST_USE_SHARED=OFF ^\n       -DCMAKE_BUILD_TYPE=%CONFIGURATION% ^\ndiff --git a/ci/travis_before_script_cpp.sh b/ci/travis_before_script_cpp.sh\nindex 1b389a21de..2da4c4b79d 100755\n--- a/ci/travis_before_script_cpp.sh\n+++ b/ci/travis_before_script_cpp.sh\n@@ -52,6 +52,7 @@ if [ \"$ARROW_TRAVIS_USE_TOOLCHAIN\" == \"1\" ]; then\n   # Set up C++ toolchain from conda-forge packages for faster builds\n   source $TRAVIS_BUILD_DIR/ci/travis_install_toolchain.sh\n   CMAKE_COMMON_FLAGS=\"${CMAKE_COMMON_FLAGS} -DARROW_JEMALLOC=ON\"\n+  CMAKE_COMMON_FLAGS=\"${CMAKE_COMMON_FLAGS} -DARROW_WITH_BZ2=ON\"\n fi\n \n mkdir -p $ARROW_CPP_BUILD_DIR\ndiff --git a/ci/travis_install_toolchain.sh b/ci/travis_install_toolchain.sh\nindex eb4bdf21d6..fa3b710f32 100755\n--- a/ci/travis_install_toolchain.sh\n+++ b/ci/travis_install_toolchain.sh\n@@ -26,6 +26,7 @@ if [ ! -e $CPP_TOOLCHAIN ]; then\n     conda create -y -q -p $CPP_TOOLCHAIN python=3.6 nomkl \\\n         boost-cpp \\\n         brotli \\\n+        bzip2 \\\n         ccache \\\n         cmake \\\n         curl \\\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 691c307d42..f78ffbd8b6 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -228,6 +228,10 @@ Pass multiple labels by dividing with semicolons\")\n     \"Build with Brotli compression\"\n     ON)\n \n+  option(ARROW_WITH_BZ2\n+    \"Build with BZ2 compression\"\n+    OFF)\n+\n   option(ARROW_WITH_LZ4\n     \"Build with lz4 compression\"\n     ON)\n@@ -609,6 +613,10 @@ if (ARROW_WITH_BROTLI)\n     ${ARROW_STATIC_LINK_LIBS})\n endif()\n \n+if (ARROW_WITH_BZ2)\n+  SET(ARROW_STATIC_LINK_LIBS bz2_static ${ARROW_STATIC_LINK_LIBS})\n+endif()\n+\n if (ARROW_WITH_LZ4)\n   SET(ARROW_STATIC_LINK_LIBS lz4_static ${ARROW_STATIC_LINK_LIBS})\n endif()\ndiff --git a/cpp/cmake_modules/FindBz2.cmake b/cpp/cmake_modules/FindBz2.cmake\nnew file mode 100644\nindex 0000000000..c26b8b7241\n--- /dev/null\n+++ b/cpp/cmake_modules/FindBz2.cmake\n@@ -0,0 +1,57 @@\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# Tries to find bz2 headers and libraries.\n+#\n+# Usage of this module as follows:\n+#\n+#  find_package(Bz2)\n+#\n+# Variables used by this module, they can change the default behaviour and need\n+# to be set before calling find_package:\n+#\n+#  BZ2_HOME - When set, this path is inspected instead of standard library\n+#             locations as the root of the bz2 installation.\n+#\n+# This module defines\n+#  BZ2_INCLUDE_DIR, directory containing headers\n+#  BZ2_STATIC_LIB, path to libbz2 static library\n+#  BZ2_FOUND, whether bz2 has been found\n+\n+if( NOT \"${BZ2_HOME}\" STREQUAL \"\")\n+    file( TO_CMAKE_PATH \"${BZ2_HOME}\" _native_path )\n+    list( APPEND _bz2_roots ${_native_path} )\n+elseif ( BZ2_HOME )\n+    list( APPEND _bz2_roots ${BZ2_HOME} )\n+endif()\n+\n+if (MSVC)\n+  set(BZ2_STATIC_LIB_NAME\n+    ${CMAKE_STATIC_LIBRARY_PREFIX}bz2_static${CMAKE_STATIC_LIBRARY_SUFFIX})\n+else()\n+  set(BZ2_STATIC_LIB_NAME\n+    ${CMAKE_STATIC_LIBRARY_PREFIX}bz2${CMAKE_STATIC_LIBRARY_SUFFIX})\n+endif()\n+\n+find_path(BZ2_INCLUDE_DIR NAMES bzlib.h\n+  PATHS ${_bz2_roots}\n+  NO_DEFAULT_PATH\n+  PATH_SUFFIXES \"include\" )\n+find_library(BZ2_STATIC_LIB NAMES ${BZ2_STATIC_LIB_NAME} lib${BZ2_STATIC_LIB_NAME}\n+  PATHS ${_bz2_roots}\n+  NO_DEFAULT_PATH\n+  PATH_SUFFIXES \"lib\" )\n+\n+include(FindPackageHandleStandardArgs)\n+find_package_handle_standard_args(BZ2 REQUIRED_VARS\n+  BZ2_STATIC_LIB BZ2_INCLUDE_DIR)\ndiff --git a/cpp/cmake_modules/FindZSTD.cmake b/cpp/cmake_modules/FindZSTD.cmake\nindex 810e5c0bed..7f8d1319e6 100644\n--- a/cpp/cmake_modules/FindZSTD.cmake\n+++ b/cpp/cmake_modules/FindZSTD.cmake\n@@ -18,7 +18,6 @@\n # - Find ZSTD (zstd.h, libzstd.a, libzstd.so, and libzstd.so.0)\n # This module defines\n #  ZSTD_INCLUDE_DIR, directory containing headers\n-#  ZSTD_SHARED_LIB, path to libzstd shared library\n #  ZSTD_STATIC_LIB, path to libzstd static library\n #  ZSTD_FOUND, whether zstd has been found\n \ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex b4617645dd..c35dd4a1dc 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -28,6 +28,7 @@ set(THIRDPARTY_DIR \"${arrow_SOURCE_DIR}/thirdparty\")\n \n if (NOT \"$ENV{ARROW_BUILD_TOOLCHAIN}\" STREQUAL \"\")\n   set(BROTLI_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n+  set(BZ2_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(FLATBUFFERS_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(GFLAGS_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(GLOG_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n@@ -61,6 +62,10 @@ if (DEFINED ENV{BROTLI_HOME})\n   set(BROTLI_HOME \"$ENV{BROTLI_HOME}\")\n endif()\n \n+if (DEFINED ENV{BZ2_HOME})\n+  set(BZ2_HOME \"$ENV{BZ2_HOME}\")\n+endif()\n+\n if (DEFINED ENV{DOUBLE_CONVERSION_HOME})\n   set(DOUBLE_CONVERSION_HOME \"$ENV{DOUBLE_CONVERSION_HOME}\")\n endif()\n@@ -975,6 +980,21 @@ if (ARROW_WITH_BROTLI)\n   endif()\n endif()\n \n+if (ARROW_WITH_BZ2)\n+# ----------------------------------------------------------------------\n+# BZ2\n+\n+  if(\"${BZ2_HOME}\" STREQUAL \"\")\n+    message(SEND_ERROR \"a binary install of libbz2 must be present, please set the BZ2_HOME environment variable\")\n+  else()\n+    find_package(Bz2 REQUIRED)\n+  endif()\n+\n+  include_directories(SYSTEM ${BZ2_INCLUDE_DIR})\n+  ADD_THIRDPARTY_LIB(bz2_static\n+    STATIC_LIB ${BZ2_STATIC_LIB})\n+endif()\n+\n if (ARROW_WITH_LZ4)\n # ----------------------------------------------------------------------\n # Lz4\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 9a2f3a4afb..63c1bf27bf 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -89,6 +89,11 @@ if (ARROW_WITH_BROTLI)\n   SET(ARROW_SRCS util/compression_brotli.cc ${ARROW_SRCS})\n endif()\n \n+if (ARROW_WITH_BZ2)\n+  add_definitions(-DARROW_WITH_BZ2)\n+  SET(ARROW_SRCS util/compression_bz2.cc ${ARROW_SRCS})\n+endif()\n+\n if (ARROW_WITH_LZ4)\n   add_definitions(-DARROW_WITH_LZ4)\n   SET(ARROW_SRCS util/compression_lz4.cc ${ARROW_SRCS})\ndiff --git a/cpp/src/arrow/io/io-compressed-test.cc b/cpp/src/arrow/io/io-compressed-test.cc\nindex 78240dadc4..4a3b32333e 100644\n--- a/cpp/src/arrow/io/io-compressed-test.cc\n+++ b/cpp/src/arrow/io/io-compressed-test.cc\n@@ -191,6 +191,8 @@ TEST_P(CompressedInputStreamTest, InvalidData) {\n \n // NOTE: Snappy doesn't support streaming decompression\n \n+// NOTE: BZ2 doesn't support one-shot compression\n+\n // NOTE: LZ4 streaming decompression uses the LZ4 framing format,\n // which must be tested against a streaming compressor\n \ndiff --git a/cpp/src/arrow/symbols.map b/cpp/src/arrow/symbols.map\nindex 18802ff45a..083b4b2a7a 100644\n--- a/cpp/src/arrow/symbols.map\n+++ b/cpp/src/arrow/symbols.map\n@@ -47,6 +47,8 @@\n     zlibCompileFlags;\n     zlibVersion;\n     _tr_*;\n+    # bz2\n+    BZ2_*;\n     # lz4\n     LZ4_*;\n     LZ4F_*;\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 69e18a6850..28c611637b 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -28,6 +28,7 @@ install(FILES\n   compiler-util.h\n   compression.h\n   compression_brotli.h\n+  compression_bz2.h\n   compression_lz4.h\n   compression_snappy.h\n   compression_zlib.h\ndiff --git a/cpp/src/arrow/util/compression-test.cc b/cpp/src/arrow/util/compression-test.cc\nindex 10447c6f11..899238b915 100644\n--- a/cpp/src/arrow/util/compression-test.cc\n+++ b/cpp/src/arrow/util/compression-test.cc\n@@ -314,6 +314,11 @@ class CodecTest : public ::testing::TestWithParam<Compression::type> {\n };\n \n TEST_P(CodecTest, CodecRoundtrip) {\n+  if (GetCompression() == Compression::BZ2) {\n+    // SKIP: BZ2 doesn't support one-shot compression\n+    return;\n+  }\n+\n   int sizes[] = {0, 10000, 100000};\n   for (int data_size : sizes) {\n     vector<uint8_t> data = MakeRandomData(data_size);\n@@ -329,6 +334,10 @@ TEST_P(CodecTest, StreamingCompressor) {\n     // SKIP: snappy doesn't support streaming compression\n     return;\n   }\n+  if (GetCompression() == Compression::BZ2) {\n+    // SKIP: BZ2 doesn't support one-shot decompression\n+    return;\n+  }\n   if (GetCompression() == Compression::LZ4) {\n     // SKIP: LZ4 streaming compression uses the LZ4 framing format,\n     // which must be tested against a streaming decompressor\n@@ -352,6 +361,10 @@ TEST_P(CodecTest, StreamingDecompressor) {\n     // SKIP: snappy doesn't support streaming decompression\n     return;\n   }\n+  if (GetCompression() == Compression::BZ2) {\n+    // SKIP: BZ2 doesn't support one-shot compression\n+    return;\n+  }\n   if (GetCompression() == Compression::LZ4) {\n     // SKIP: LZ4 streaming decompression uses the LZ4 framing format,\n     // which must be tested against a streaming compressor\n@@ -398,5 +411,9 @@ INSTANTIATE_TEST_CASE_P(TestLZ4, CodecTest, ::testing::Values(Compression::LZ4))\n \n INSTANTIATE_TEST_CASE_P(TestBrotli, CodecTest, ::testing::Values(Compression::BROTLI));\n \n+#if ARROW_WITH_BZ2\n+INSTANTIATE_TEST_CASE_P(TestBZ2, CodecTest, ::testing::Values(Compression::BZ2));\n+#endif\n+\n }  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression.cc b/cpp/src/arrow/util/compression.cc\nindex 8d4d838870..7b13adecaf 100644\n--- a/cpp/src/arrow/util/compression.cc\n+++ b/cpp/src/arrow/util/compression.cc\n@@ -39,6 +39,10 @@\n #include \"arrow/util/compression_zstd.h\"\n #endif\n \n+#ifdef ARROW_WITH_BZ2\n+#include \"arrow/util/compression_bz2.h\"\n+#endif\n+\n #include \"arrow/status.h\"\n \n namespace arrow {\n@@ -89,6 +93,13 @@ Status Codec::Create(Compression::type codec_type, std::unique_ptr<Codec>* resul\n       result->reset(new ZSTDCodec());\n #else\n       return Status::NotImplemented(\"ZSTD codec support not built\");\n+#endif\n+      break;\n+    case Compression::BZ2:\n+#ifdef ARROW_WITH_BZ2\n+      result->reset(new BZ2Codec());\n+#else\n+      return Status::NotImplemented(\"BZ2 codec support not built\");\n #endif\n       break;\n     default:\ndiff --git a/cpp/src/arrow/util/compression.h b/cpp/src/arrow/util/compression.h\nindex f34ae43dfb..f9359055bb 100644\n--- a/cpp/src/arrow/util/compression.h\n+++ b/cpp/src/arrow/util/compression.h\n@@ -28,7 +28,7 @@ namespace arrow {\n class Status;\n \n struct Compression {\n-  enum type { UNCOMPRESSED, SNAPPY, GZIP, BROTLI, ZSTD, LZ4, LZO };\n+  enum type { UNCOMPRESSED, SNAPPY, GZIP, BROTLI, ZSTD, LZ4, LZO, BZ2 };\n };\n \n namespace util {\ndiff --git a/cpp/src/arrow/util/compression_bz2.cc b/cpp/src/arrow/util/compression_bz2.cc\nnew file mode 100644\nindex 0000000000..fa5cdac6ba\n--- /dev/null\n+++ b/cpp/src/arrow/util/compression_bz2.cc\n@@ -0,0 +1,259 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/compression_bz2.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+\n+// Avoid defining max() macro\n+#include \"arrow/util/windows_compatibility.h\"\n+\n+#include <bzlib.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+constexpr int kBZ2DefaultCompressionLevel = 9;\n+\n+// Max number of bytes the bz2 APIs accept at a time\n+static constexpr auto kSizeLimit =\n+    static_cast<int64_t>(std::numeric_limits<unsigned int>::max());\n+\n+Status BZ2Error(const char* prefix_msg, int bz_result) {\n+  DCHECK(bz_result != BZ_OK && bz_result != BZ_RUN_OK && bz_result != BZ_FLUSH_OK &&\n+         bz_result != BZ_FINISH_OK && bz_result != BZ_STREAM_END);\n+  StatusCode code;\n+  std::stringstream ss;\n+  ss << prefix_msg;\n+  switch (bz_result) {\n+    case BZ_CONFIG_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"bz2 library improperly configured (internal error)\";\n+      break;\n+    case BZ_SEQUENCE_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong sequence of calls to bz2 library (internal error)\";\n+      break;\n+    case BZ_PARAM_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong parameter to bz2 library (internal error)\";\n+      break;\n+    case BZ_MEM_ERROR:\n+      code = StatusCode::OutOfMemory;\n+      ss << \"could not allocate memory for bz2 library\";\n+      break;\n+    case BZ_DATA_ERROR:\n+      code = StatusCode::IOError;\n+      ss << \"invalid bz2 data\";\n+      break;\n+    case BZ_DATA_ERROR_MAGIC:\n+      code = StatusCode::IOError;\n+      ss << \"data is not bz2-compressed (no magic header)\";\n+      break;\n+    default:\n+      code = StatusCode::UnknownError;\n+      ss << \"unknown bz2 error \" << bz_result;\n+      break;\n+  }\n+  return Status(code, ss.str());\n+}\n+\n+// ----------------------------------------------------------------------\n+// bz2 decompressor implementation\n+\n+class BZ2Decompressor : public Decompressor {\n+ public:\n+  BZ2Decompressor() : initialized_(false) {}\n+\n+  ~BZ2Decompressor() override {\n+    if (initialized_) {\n+      ARROW_UNUSED(BZ2_bzDecompressEnd(&stream_));\n+    }\n+  }\n+\n+  Status Init() {\n+    DCHECK(!initialized_);\n+    memset(&stream_, 0, sizeof(stream_));\n+    int ret;\n+    ret = BZ2_bzDecompressInit(&stream_, 0, 0);\n+    if (ret != BZ_OK) {\n+      return BZ2Error(\"bz2 decompressor init failed: \", ret);\n+    }\n+    initialized_ = true;\n+    finished_ = false;\n+    return Status::OK();\n+  }\n+\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                    uint8_t* output, int64_t* bytes_read, int64_t* bytes_written,\n+                    bool* need_more_output) override {\n+    stream_.next_in = const_cast<char*>(reinterpret_cast<const char*>(input));\n+    stream_.avail_in = static_cast<unsigned int>(std::min(input_len, kSizeLimit));\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzDecompress(&stream_);\n+    if (ret == BZ_OK || BZ_STREAM_END) {\n+      *bytes_read = input_len - stream_.avail_in;\n+      *bytes_written = output_len - stream_.avail_out;\n+      *need_more_output = (*bytes_read == 0 && *bytes_written == 0);\n+      finished_ = (ret == BZ_STREAM_END);\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 decompress failed: \", ret);\n+    }\n+  }\n+\n+  bool IsFinished() override { return finished_; }\n+\n+ protected:\n+  bz_stream stream_;\n+  bool initialized_;\n+  bool finished_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// bz2 compressor implementation\n+\n+class BZ2Compressor : public Compressor {\n+ public:\n+  BZ2Compressor() : initialized_(false) {}\n+\n+  ~BZ2Compressor() override {\n+    if (initialized_) {\n+      ARROW_UNUSED(BZ2_bzCompressEnd(&stream_));\n+    }\n+  }\n+\n+  Status Init() {\n+    DCHECK(!initialized_);\n+    memset(&stream_, 0, sizeof(stream_));\n+    int ret;\n+    ret = BZ2_bzCompressInit(&stream_, kBZ2DefaultCompressionLevel, 0, 0);\n+    if (ret != BZ_OK) {\n+      return BZ2Error(\"bz2 compressor init failed: \", ret);\n+    }\n+    initialized_ = true;\n+    return Status::OK();\n+  }\n+\n+  Status Compress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                  uint8_t* output, int64_t* bytes_read, int64_t* bytes_written) override {\n+    stream_.next_in = const_cast<char*>(reinterpret_cast<const char*>(input));\n+    stream_.avail_in = static_cast<unsigned int>(std::min(input_len, kSizeLimit));\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzCompress(&stream_, BZ_RUN);\n+    if (ret == BZ_RUN_OK) {\n+      *bytes_read = input_len - stream_.avail_in;\n+      *bytes_written = output_len - stream_.avail_out;\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 compress failed: \", ret);\n+    }\n+  }\n+\n+  Status Flush(int64_t output_len, uint8_t* output, int64_t* bytes_written,\n+               bool* should_retry) override {\n+    stream_.next_in = nullptr;\n+    stream_.avail_in = 0;\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzCompress(&stream_, BZ_FLUSH);\n+    if (ret == BZ_RUN_OK || ret == BZ_FLUSH_OK) {\n+      *bytes_written = output_len - stream_.avail_out;\n+      *should_retry = (ret == BZ_FLUSH_OK);\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 compress failed: \", ret);\n+    }\n+  }\n+\n+  Status End(int64_t output_len, uint8_t* output, int64_t* bytes_written,\n+             bool* should_retry) override {\n+    stream_.next_in = nullptr;\n+    stream_.avail_in = 0;\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzCompress(&stream_, BZ_FINISH);\n+    if (ret == BZ_STREAM_END || ret == BZ_FINISH_OK) {\n+      *bytes_written = output_len - stream_.avail_out;\n+      *should_retry = (ret == BZ_FINISH_OK);\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 compress failed: \", ret);\n+    }\n+  }\n+\n+ protected:\n+  bz_stream stream_;\n+  bool initialized_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// bz2 codec implementation\n+\n+Status BZ2Codec::MakeCompressor(std::shared_ptr<Compressor>* out) {\n+  auto ptr = std::make_shared<BZ2Compressor>();\n+  RETURN_NOT_OK(ptr->Init());\n+  *out = ptr;\n+  return Status::OK();\n+}\n+\n+Status BZ2Codec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n+  auto ptr = std::make_shared<BZ2Decompressor>();\n+  RETURN_NOT_OK(ptr->Init());\n+  *out = ptr;\n+  return Status::OK();\n+}\n+\n+Status BZ2Codec::Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                            uint8_t* output_buffer) {\n+  return Status::NotImplemented(\"One-shot bz2 decompression not supported\");\n+}\n+\n+int64_t BZ2Codec::MaxCompressedLen(int64_t input_len,\n+                                   const uint8_t* ARROW_ARG_UNUSED(input)) {\n+  // Cannot determine upper bound for bz2-compressed data\n+  return 0;\n+}\n+\n+Status BZ2Codec::Compress(int64_t input_len, const uint8_t* input,\n+                          int64_t output_buffer_len, uint8_t* output_buffer,\n+                          int64_t* output_length) {\n+  return Status::NotImplemented(\"One-shot bz2 compression not supported\");\n+}\n+\n+}  // namespace util\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_bz2.h b/cpp/src/arrow/util/compression_bz2.h\nnew file mode 100644\nindex 0000000000..304f4c0836\n--- /dev/null\n+++ b/cpp/src/arrow/util/compression_bz2.h\n@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_COMPRESSION_BZ2_H\n+#define ARROW_UTIL_COMPRESSION_BZ2_H\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/compression.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+// BZ2 codec.\n+class ARROW_EXPORT BZ2Codec : public Codec {\n+ public:\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                    uint8_t* output_buffer) override;\n+\n+  Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                  uint8_t* output_buffer, int64_t* output_length) override;\n+\n+  int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n+\n+  Status MakeCompressor(std::shared_ptr<Compressor>* out) override;\n+\n+  Status MakeDecompressor(std::shared_ptr<Decompressor>* out) override;\n+\n+  const char* name() const override { return \"bz2\"; }\n+};\n+\n+}  // namespace util\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_COMPRESSION_BZ2_H\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex c53b4adc15..9e3a879122 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -1132,6 +1132,7 @@ cdef extern from 'arrow/util/compression.h' namespace 'arrow' nogil:\n         CompressionType_BROTLI\" arrow::Compression::BROTLI\"\n         CompressionType_ZSTD\" arrow::Compression::ZSTD\"\n         CompressionType_LZ4\" arrow::Compression::LZ4\"\n+        CompressionType_BZ2\" arrow::Compression::BZ2\"\n \n     cdef cppclass CCodec\" arrow::util::Codec\":\n         @staticmethod\ndiff --git a/python/pyarrow/io.pxi b/python/pyarrow/io.pxi\nindex ca14346199..9c21179e34 100644\n--- a/python/pyarrow/io.pxi\n+++ b/python/pyarrow/io.pxi\n@@ -1135,6 +1135,8 @@ cdef CompressionType _get_compression_type(object name):\n cdef CompressionType _get_compression_type_by_filename(str filename):\n     if filename.endswith('.gz'):\n         return CompressionType_GZIP\n+    elif filename.endswith('.bz2'):\n+        return CompressionType_BZ2\n     elif filename.endswith('.lz4'):\n         return CompressionType_LZ4\n     elif filename.endswith('.zst'):\ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex e3ea92ab06..dbfa4f3395 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -15,6 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+import bz2\n import gzip\n import io\n import itertools\n@@ -275,7 +276,11 @@ def test_random_csv(self):\n         csv, expected = make_random_csv(num_cols=2, num_rows=100)\n         csv_path = os.path.join(self.tmpdir, self.csv_filename)\n         self.write_file(csv_path, csv)\n-        table = read_csv(csv_path)\n+        try:\n+            table = read_csv(csv_path)\n+        except pa.ArrowNotImplementedError as e:\n+            pytest.skip(str(e))\n+            return\n         table._validate()\n         assert table.schema == expected.schema\n         assert table.equals(expected)\n@@ -288,3 +293,11 @@ class TestGZipCSVRead(BaseTestCompressedCSVRead, unittest.TestCase):\n     def write_file(self, path, contents):\n         with gzip.open(path, 'wb', 3) as f:\n             f.write(contents)\n+\n+\n+class TestBZ2CSVRead(BaseTestCompressedCSVRead, unittest.TestCase):\n+    csv_filename = \"compressed.csv.bz2\"\n+\n+    def write_file(self, path, contents):\n+        with bz2.BZ2File(path, 'w') as f:\n+            f.write(contents)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:40:36.922+0000",
                    "updated": "2018-10-22T19:40:36.922+0000",
                    "started": "2018-10-22T19:40:36.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157107",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/157108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:40:37.458+0000",
                    "updated": "2018-10-22T19:40:37.458+0000",
                    "started": "2018-10-22T19:40:37.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157108",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/157535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812#issuecomment-432236899\n \n \n   The R build failure is unrelated (see ARROW-3593).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-23T13:01:14.107+0000",
                    "updated": "2018-10-23T13:01:14.107+0000",
                    "started": "2018-10-23T13:01:14.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157535",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/157933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812#discussion_r227619796\n \n \n\n ##########\n File path: cpp/src/arrow/util/compression_bz2.cc\n ##########\n @@ -0,0 +1,259 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/compression_bz2.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+\n+// Avoid defining max() macro\n+#include \"arrow/util/windows_compatibility.h\"\n+\n+#include <bzlib.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+constexpr int kBZ2DefaultCompressionLevel = 9;\n+\n+// Max number of bytes the bz2 APIs accept at a time\n+static constexpr auto kSizeLimit =\n+    static_cast<int64_t>(std::numeric_limits<unsigned int>::max());\n+\n+Status BZ2Error(const char* prefix_msg, int bz_result) {\n+  DCHECK(bz_result != BZ_OK && bz_result != BZ_RUN_OK && bz_result != BZ_FLUSH_OK &&\n+         bz_result != BZ_FINISH_OK && bz_result != BZ_STREAM_END);\n+  StatusCode code;\n+  std::stringstream ss;\n+  ss << prefix_msg;\n+  switch (bz_result) {\n+    case BZ_CONFIG_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"bz2 library improperly configured (internal error)\";\n+      break;\n+    case BZ_SEQUENCE_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong sequence of calls to bz2 library (internal error)\";\n+      break;\n+    case BZ_PARAM_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong parameter to bz2 library (internal error)\";\n+      break;\n+    case BZ_MEM_ERROR:\n+      code = StatusCode::OutOfMemory;\n+      ss << \"could not allocate memory for bz2 library\";\n+      break;\n+    case BZ_DATA_ERROR:\n+      code = StatusCode::IOError;\n+      ss << \"invalid bz2 data\";\n+      break;\n+    case BZ_DATA_ERROR_MAGIC:\n+      code = StatusCode::IOError;\n+      ss << \"data is not bz2-compressed (no magic header)\";\n+      break;\n+    default:\n+      code = StatusCode::UnknownError;\n+      ss << \"unknown bz2 error \" << bz_result;\n+      break;\n+  }\n+  return Status(code, ss.str());\n+}\n+\n+// ----------------------------------------------------------------------\n+// bz2 decompressor implementation\n+\n+class BZ2Decompressor : public Decompressor {\n+ public:\n+  BZ2Decompressor() : initialized_(false) {}\n+\n+  ~BZ2Decompressor() override {\n+    if (initialized_) {\n+      ARROW_UNUSED(BZ2_bzDecompressEnd(&stream_));\n+    }\n+  }\n+\n+  Status Init() {\n+    DCHECK(!initialized_);\n+    memset(&stream_, 0, sizeof(stream_));\n+    int ret;\n+    ret = BZ2_bzDecompressInit(&stream_, 0, 0);\n+    if (ret != BZ_OK) {\n+      return BZ2Error(\"bz2 decompressor init failed: \", ret);\n+    }\n+    initialized_ = true;\n+    finished_ = false;\n+    return Status::OK();\n+  }\n+\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                    uint8_t* output, int64_t* bytes_read, int64_t* bytes_written,\n+                    bool* need_more_output) override {\n+    stream_.next_in = const_cast<char*>(reinterpret_cast<const char*>(input));\n+    stream_.avail_in = static_cast<unsigned int>(std::min(input_len, kSizeLimit));\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzDecompress(&stream_);\n+    if (ret == BZ_OK || BZ_STREAM_END) {\n \n Review comment:\n   Is `ret ==` missing for `BZ_STREAM_END`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T01:53:00.865+0000",
                    "updated": "2018-10-24T01:53:00.865+0000",
                    "started": "2018-10-24T01:53:00.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157933",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/158004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812#discussion_r227677467\n \n \n\n ##########\n File path: cpp/src/arrow/util/compression_bz2.cc\n ##########\n @@ -0,0 +1,259 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/compression_bz2.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+\n+// Avoid defining max() macro\n+#include \"arrow/util/windows_compatibility.h\"\n+\n+#include <bzlib.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+constexpr int kBZ2DefaultCompressionLevel = 9;\n+\n+// Max number of bytes the bz2 APIs accept at a time\n+static constexpr auto kSizeLimit =\n+    static_cast<int64_t>(std::numeric_limits<unsigned int>::max());\n+\n+Status BZ2Error(const char* prefix_msg, int bz_result) {\n+  DCHECK(bz_result != BZ_OK && bz_result != BZ_RUN_OK && bz_result != BZ_FLUSH_OK &&\n+         bz_result != BZ_FINISH_OK && bz_result != BZ_STREAM_END);\n+  StatusCode code;\n+  std::stringstream ss;\n+  ss << prefix_msg;\n+  switch (bz_result) {\n+    case BZ_CONFIG_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"bz2 library improperly configured (internal error)\";\n+      break;\n+    case BZ_SEQUENCE_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong sequence of calls to bz2 library (internal error)\";\n+      break;\n+    case BZ_PARAM_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong parameter to bz2 library (internal error)\";\n+      break;\n+    case BZ_MEM_ERROR:\n+      code = StatusCode::OutOfMemory;\n+      ss << \"could not allocate memory for bz2 library\";\n+      break;\n+    case BZ_DATA_ERROR:\n+      code = StatusCode::IOError;\n+      ss << \"invalid bz2 data\";\n+      break;\n+    case BZ_DATA_ERROR_MAGIC:\n+      code = StatusCode::IOError;\n+      ss << \"data is not bz2-compressed (no magic header)\";\n+      break;\n+    default:\n+      code = StatusCode::UnknownError;\n+      ss << \"unknown bz2 error \" << bz_result;\n+      break;\n+  }\n+  return Status(code, ss.str());\n+}\n+\n+// ----------------------------------------------------------------------\n+// bz2 decompressor implementation\n+\n+class BZ2Decompressor : public Decompressor {\n+ public:\n+  BZ2Decompressor() : initialized_(false) {}\n+\n+  ~BZ2Decompressor() override {\n+    if (initialized_) {\n+      ARROW_UNUSED(BZ2_bzDecompressEnd(&stream_));\n+    }\n+  }\n+\n+  Status Init() {\n+    DCHECK(!initialized_);\n+    memset(&stream_, 0, sizeof(stream_));\n+    int ret;\n+    ret = BZ2_bzDecompressInit(&stream_, 0, 0);\n+    if (ret != BZ_OK) {\n+      return BZ2Error(\"bz2 decompressor init failed: \", ret);\n+    }\n+    initialized_ = true;\n+    finished_ = false;\n+    return Status::OK();\n+  }\n+\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                    uint8_t* output, int64_t* bytes_read, int64_t* bytes_written,\n+                    bool* need_more_output) override {\n+    stream_.next_in = const_cast<char*>(reinterpret_cast<const char*>(input));\n+    stream_.avail_in = static_cast<unsigned int>(std::min(input_len, kSizeLimit));\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzDecompress(&stream_);\n+    if (ret == BZ_OK || BZ_STREAM_END) {\n \n Review comment:\n   Good catch indeed!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T07:54:58.673+0000",
                    "updated": "2018-10-24T07:54:58.673+0000",
                    "started": "2018-10-24T07:54:58.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158004",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/158038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812#issuecomment-432579220\n \n \n   AppVeyor build: https://ci.appveyor.com/project/pitrou/arrow/builds/19748138\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T09:14:38.888+0000",
                    "updated": "2018-10-24T09:14:38.888+0000",
                    "started": "2018-10-24T09:14:38.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158038",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/158039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812#issuecomment-432579421\n \n \n   R failure is unrelated. Will merge.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T09:15:15.278+0000",
                    "updated": "2018-10-24T09:15:15.278+0000",
                    "started": "2018-10-24T09:15:15.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158039",
                    "issueId": "13188498"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/worklog/158040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #2812: ARROW-3381: [C++] Add bz2 codec\nURL: https://github.com/apache/arrow/pull/2812\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/appveyor-cpp-build.bat b/ci/appveyor-cpp-build.bat\nindex 3589871653..bce722ffa9 100644\n--- a/ci/appveyor-cpp-build.bat\n+++ b/ci/appveyor-cpp-build.bat\n@@ -99,6 +99,7 @@ if \"%JOB%\" == \"Toolchain\" (\n   @rem Install pre-built \"toolchain\" packages for faster builds\n   conda install -q -y ^\n       brotli ^\n+      bzip2 ^\n       cmake ^\n       flatbuffers ^\n       gflags ^\ndiff --git a/ci/cpp-msvc-build-main.bat b/ci/cpp-msvc-build-main.bat\nindex 5ddb648d50..e5eef1e5d8 100644\n--- a/ci/cpp-msvc-build-main.bat\n+++ b/ci/cpp-msvc-build-main.bat\n@@ -19,6 +19,11 @@\n @rem (i.e. for usual configurations)\n \n set ARROW_HOME=%CONDA_PREFIX%\\Library\n+set CMAKE_ARGS=\n+\n+if \"%JOB%\" == \"Toolchain\" (\n+    set CMAKE_ARGS=%CMAKE_ARGS% -DARROW_WITH_BZ2=ON\n+)\n \n @rem Retrieve git submodules, configure env var for Parquet unit tests\n git submodule update --init || exit /B\n@@ -38,7 +43,7 @@ set CMAKE_CXX_FLAGS_RELEASE=/Od /UNDEBUG\n mkdir cpp\\build\n pushd cpp\\build\n \n-cmake -G \"%GENERATOR%\" ^\n+cmake -G \"%GENERATOR%\" %CMAKE_ARGS% ^\n       -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\\Library ^\n       -DARROW_BOOST_USE_SHARED=OFF ^\n       -DCMAKE_BUILD_TYPE=%CONFIGURATION% ^\ndiff --git a/ci/travis_before_script_cpp.sh b/ci/travis_before_script_cpp.sh\nindex 1b389a21de..2da4c4b79d 100755\n--- a/ci/travis_before_script_cpp.sh\n+++ b/ci/travis_before_script_cpp.sh\n@@ -52,6 +52,7 @@ if [ \"$ARROW_TRAVIS_USE_TOOLCHAIN\" == \"1\" ]; then\n   # Set up C++ toolchain from conda-forge packages for faster builds\n   source $TRAVIS_BUILD_DIR/ci/travis_install_toolchain.sh\n   CMAKE_COMMON_FLAGS=\"${CMAKE_COMMON_FLAGS} -DARROW_JEMALLOC=ON\"\n+  CMAKE_COMMON_FLAGS=\"${CMAKE_COMMON_FLAGS} -DARROW_WITH_BZ2=ON\"\n fi\n \n mkdir -p $ARROW_CPP_BUILD_DIR\ndiff --git a/ci/travis_install_toolchain.sh b/ci/travis_install_toolchain.sh\nindex eb4bdf21d6..fa3b710f32 100755\n--- a/ci/travis_install_toolchain.sh\n+++ b/ci/travis_install_toolchain.sh\n@@ -26,6 +26,7 @@ if [ ! -e $CPP_TOOLCHAIN ]; then\n     conda create -y -q -p $CPP_TOOLCHAIN python=3.6 nomkl \\\n         boost-cpp \\\n         brotli \\\n+        bzip2 \\\n         ccache \\\n         cmake \\\n         curl \\\ndiff --git a/ci/travis_lint.sh b/ci/travis_lint.sh\nindex b8059f07ae..4a4578fb9c 100755\n--- a/ci/travis_lint.sh\n+++ b/ci/travis_lint.sh\n@@ -46,17 +46,17 @@ fi\n if [ \"$ARROW_CI_DEV_AFFECTED\" != \"0\" ]; then\n   # crossbow requires python3\n   sudo apt-get install -y -q python3-pip\n-  sudo pip3 install -q flake8\n+  sudo pip3 install -q flake8==3.5\n   python3 -m flake8 --count $ARROW_CROSSBOW_DIR\n fi\n \n if [ \"$ARROW_CI_INTEGRATION_AFFECTED\" != \"0\" ]; then\n-  sudo pip install -q flake8\n+  sudo pip install -q flake8==3.5\n   python -m flake8 --count $ARROW_INTEGRATION_DIR\n fi\n \n if [ \"$ARROW_CI_PYTHON_AFFECTED\" != \"0\" ]; then\n-  sudo pip install -q flake8\n+  sudo pip install -q flake8==3.5\n \n   python -m flake8 --count $ARROW_PYTHON_DIR\n \ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex e14f877689..02499a1e30 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -228,6 +228,10 @@ Pass multiple labels by dividing with semicolons\")\n     \"Build with Brotli compression\"\n     ON)\n \n+  option(ARROW_WITH_BZ2\n+    \"Build with BZ2 compression\"\n+    OFF)\n+\n   option(ARROW_WITH_LZ4\n     \"Build with lz4 compression\"\n     ON)\n@@ -613,6 +617,10 @@ if (ARROW_WITH_BROTLI)\n     ${ARROW_STATIC_LINK_LIBS})\n endif()\n \n+if (ARROW_WITH_BZ2)\n+  SET(ARROW_STATIC_LINK_LIBS bz2_static ${ARROW_STATIC_LINK_LIBS})\n+endif()\n+\n if (ARROW_WITH_LZ4)\n   SET(ARROW_STATIC_LINK_LIBS lz4_static ${ARROW_STATIC_LINK_LIBS})\n endif()\ndiff --git a/cpp/cmake_modules/FindBz2.cmake b/cpp/cmake_modules/FindBz2.cmake\nnew file mode 100644\nindex 0000000000..c26b8b7241\n--- /dev/null\n+++ b/cpp/cmake_modules/FindBz2.cmake\n@@ -0,0 +1,57 @@\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# Tries to find bz2 headers and libraries.\n+#\n+# Usage of this module as follows:\n+#\n+#  find_package(Bz2)\n+#\n+# Variables used by this module, they can change the default behaviour and need\n+# to be set before calling find_package:\n+#\n+#  BZ2_HOME - When set, this path is inspected instead of standard library\n+#             locations as the root of the bz2 installation.\n+#\n+# This module defines\n+#  BZ2_INCLUDE_DIR, directory containing headers\n+#  BZ2_STATIC_LIB, path to libbz2 static library\n+#  BZ2_FOUND, whether bz2 has been found\n+\n+if( NOT \"${BZ2_HOME}\" STREQUAL \"\")\n+    file( TO_CMAKE_PATH \"${BZ2_HOME}\" _native_path )\n+    list( APPEND _bz2_roots ${_native_path} )\n+elseif ( BZ2_HOME )\n+    list( APPEND _bz2_roots ${BZ2_HOME} )\n+endif()\n+\n+if (MSVC)\n+  set(BZ2_STATIC_LIB_NAME\n+    ${CMAKE_STATIC_LIBRARY_PREFIX}bz2_static${CMAKE_STATIC_LIBRARY_SUFFIX})\n+else()\n+  set(BZ2_STATIC_LIB_NAME\n+    ${CMAKE_STATIC_LIBRARY_PREFIX}bz2${CMAKE_STATIC_LIBRARY_SUFFIX})\n+endif()\n+\n+find_path(BZ2_INCLUDE_DIR NAMES bzlib.h\n+  PATHS ${_bz2_roots}\n+  NO_DEFAULT_PATH\n+  PATH_SUFFIXES \"include\" )\n+find_library(BZ2_STATIC_LIB NAMES ${BZ2_STATIC_LIB_NAME} lib${BZ2_STATIC_LIB_NAME}\n+  PATHS ${_bz2_roots}\n+  NO_DEFAULT_PATH\n+  PATH_SUFFIXES \"lib\" )\n+\n+include(FindPackageHandleStandardArgs)\n+find_package_handle_standard_args(BZ2 REQUIRED_VARS\n+  BZ2_STATIC_LIB BZ2_INCLUDE_DIR)\ndiff --git a/cpp/cmake_modules/FindZSTD.cmake b/cpp/cmake_modules/FindZSTD.cmake\nindex 810e5c0bed..7f8d1319e6 100644\n--- a/cpp/cmake_modules/FindZSTD.cmake\n+++ b/cpp/cmake_modules/FindZSTD.cmake\n@@ -18,7 +18,6 @@\n # - Find ZSTD (zstd.h, libzstd.a, libzstd.so, and libzstd.so.0)\n # This module defines\n #  ZSTD_INCLUDE_DIR, directory containing headers\n-#  ZSTD_SHARED_LIB, path to libzstd shared library\n #  ZSTD_STATIC_LIB, path to libzstd static library\n #  ZSTD_FOUND, whether zstd has been found\n \ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex b4617645dd..c35dd4a1dc 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -28,6 +28,7 @@ set(THIRDPARTY_DIR \"${arrow_SOURCE_DIR}/thirdparty\")\n \n if (NOT \"$ENV{ARROW_BUILD_TOOLCHAIN}\" STREQUAL \"\")\n   set(BROTLI_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n+  set(BZ2_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(FLATBUFFERS_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(GFLAGS_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(GLOG_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n@@ -61,6 +62,10 @@ if (DEFINED ENV{BROTLI_HOME})\n   set(BROTLI_HOME \"$ENV{BROTLI_HOME}\")\n endif()\n \n+if (DEFINED ENV{BZ2_HOME})\n+  set(BZ2_HOME \"$ENV{BZ2_HOME}\")\n+endif()\n+\n if (DEFINED ENV{DOUBLE_CONVERSION_HOME})\n   set(DOUBLE_CONVERSION_HOME \"$ENV{DOUBLE_CONVERSION_HOME}\")\n endif()\n@@ -975,6 +980,21 @@ if (ARROW_WITH_BROTLI)\n   endif()\n endif()\n \n+if (ARROW_WITH_BZ2)\n+# ----------------------------------------------------------------------\n+# BZ2\n+\n+  if(\"${BZ2_HOME}\" STREQUAL \"\")\n+    message(SEND_ERROR \"a binary install of libbz2 must be present, please set the BZ2_HOME environment variable\")\n+  else()\n+    find_package(Bz2 REQUIRED)\n+  endif()\n+\n+  include_directories(SYSTEM ${BZ2_INCLUDE_DIR})\n+  ADD_THIRDPARTY_LIB(bz2_static\n+    STATIC_LIB ${BZ2_STATIC_LIB})\n+endif()\n+\n if (ARROW_WITH_LZ4)\n # ----------------------------------------------------------------------\n # Lz4\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 9a2f3a4afb..63c1bf27bf 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -89,6 +89,11 @@ if (ARROW_WITH_BROTLI)\n   SET(ARROW_SRCS util/compression_brotli.cc ${ARROW_SRCS})\n endif()\n \n+if (ARROW_WITH_BZ2)\n+  add_definitions(-DARROW_WITH_BZ2)\n+  SET(ARROW_SRCS util/compression_bz2.cc ${ARROW_SRCS})\n+endif()\n+\n if (ARROW_WITH_LZ4)\n   add_definitions(-DARROW_WITH_LZ4)\n   SET(ARROW_SRCS util/compression_lz4.cc ${ARROW_SRCS})\ndiff --git a/cpp/src/arrow/io/io-compressed-test.cc b/cpp/src/arrow/io/io-compressed-test.cc\nindex 78240dadc4..4a3b32333e 100644\n--- a/cpp/src/arrow/io/io-compressed-test.cc\n+++ b/cpp/src/arrow/io/io-compressed-test.cc\n@@ -191,6 +191,8 @@ TEST_P(CompressedInputStreamTest, InvalidData) {\n \n // NOTE: Snappy doesn't support streaming decompression\n \n+// NOTE: BZ2 doesn't support one-shot compression\n+\n // NOTE: LZ4 streaming decompression uses the LZ4 framing format,\n // which must be tested against a streaming compressor\n \ndiff --git a/cpp/src/arrow/symbols.map b/cpp/src/arrow/symbols.map\nindex 18802ff45a..083b4b2a7a 100644\n--- a/cpp/src/arrow/symbols.map\n+++ b/cpp/src/arrow/symbols.map\n@@ -47,6 +47,8 @@\n     zlibCompileFlags;\n     zlibVersion;\n     _tr_*;\n+    # bz2\n+    BZ2_*;\n     # lz4\n     LZ4_*;\n     LZ4F_*;\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 69e18a6850..28c611637b 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -28,6 +28,7 @@ install(FILES\n   compiler-util.h\n   compression.h\n   compression_brotli.h\n+  compression_bz2.h\n   compression_lz4.h\n   compression_snappy.h\n   compression_zlib.h\ndiff --git a/cpp/src/arrow/util/compression-test.cc b/cpp/src/arrow/util/compression-test.cc\nindex 10447c6f11..899238b915 100644\n--- a/cpp/src/arrow/util/compression-test.cc\n+++ b/cpp/src/arrow/util/compression-test.cc\n@@ -314,6 +314,11 @@ class CodecTest : public ::testing::TestWithParam<Compression::type> {\n };\n \n TEST_P(CodecTest, CodecRoundtrip) {\n+  if (GetCompression() == Compression::BZ2) {\n+    // SKIP: BZ2 doesn't support one-shot compression\n+    return;\n+  }\n+\n   int sizes[] = {0, 10000, 100000};\n   for (int data_size : sizes) {\n     vector<uint8_t> data = MakeRandomData(data_size);\n@@ -329,6 +334,10 @@ TEST_P(CodecTest, StreamingCompressor) {\n     // SKIP: snappy doesn't support streaming compression\n     return;\n   }\n+  if (GetCompression() == Compression::BZ2) {\n+    // SKIP: BZ2 doesn't support one-shot decompression\n+    return;\n+  }\n   if (GetCompression() == Compression::LZ4) {\n     // SKIP: LZ4 streaming compression uses the LZ4 framing format,\n     // which must be tested against a streaming decompressor\n@@ -352,6 +361,10 @@ TEST_P(CodecTest, StreamingDecompressor) {\n     // SKIP: snappy doesn't support streaming decompression\n     return;\n   }\n+  if (GetCompression() == Compression::BZ2) {\n+    // SKIP: BZ2 doesn't support one-shot compression\n+    return;\n+  }\n   if (GetCompression() == Compression::LZ4) {\n     // SKIP: LZ4 streaming decompression uses the LZ4 framing format,\n     // which must be tested against a streaming compressor\n@@ -398,5 +411,9 @@ INSTANTIATE_TEST_CASE_P(TestLZ4, CodecTest, ::testing::Values(Compression::LZ4))\n \n INSTANTIATE_TEST_CASE_P(TestBrotli, CodecTest, ::testing::Values(Compression::BROTLI));\n \n+#if ARROW_WITH_BZ2\n+INSTANTIATE_TEST_CASE_P(TestBZ2, CodecTest, ::testing::Values(Compression::BZ2));\n+#endif\n+\n }  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression.cc b/cpp/src/arrow/util/compression.cc\nindex 8d4d838870..7b13adecaf 100644\n--- a/cpp/src/arrow/util/compression.cc\n+++ b/cpp/src/arrow/util/compression.cc\n@@ -39,6 +39,10 @@\n #include \"arrow/util/compression_zstd.h\"\n #endif\n \n+#ifdef ARROW_WITH_BZ2\n+#include \"arrow/util/compression_bz2.h\"\n+#endif\n+\n #include \"arrow/status.h\"\n \n namespace arrow {\n@@ -89,6 +93,13 @@ Status Codec::Create(Compression::type codec_type, std::unique_ptr<Codec>* resul\n       result->reset(new ZSTDCodec());\n #else\n       return Status::NotImplemented(\"ZSTD codec support not built\");\n+#endif\n+      break;\n+    case Compression::BZ2:\n+#ifdef ARROW_WITH_BZ2\n+      result->reset(new BZ2Codec());\n+#else\n+      return Status::NotImplemented(\"BZ2 codec support not built\");\n #endif\n       break;\n     default:\ndiff --git a/cpp/src/arrow/util/compression.h b/cpp/src/arrow/util/compression.h\nindex f34ae43dfb..f9359055bb 100644\n--- a/cpp/src/arrow/util/compression.h\n+++ b/cpp/src/arrow/util/compression.h\n@@ -28,7 +28,7 @@ namespace arrow {\n class Status;\n \n struct Compression {\n-  enum type { UNCOMPRESSED, SNAPPY, GZIP, BROTLI, ZSTD, LZ4, LZO };\n+  enum type { UNCOMPRESSED, SNAPPY, GZIP, BROTLI, ZSTD, LZ4, LZO, BZ2 };\n };\n \n namespace util {\ndiff --git a/cpp/src/arrow/util/compression_bz2.cc b/cpp/src/arrow/util/compression_bz2.cc\nnew file mode 100644\nindex 0000000000..ae78f98ffc\n--- /dev/null\n+++ b/cpp/src/arrow/util/compression_bz2.cc\n@@ -0,0 +1,259 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/compression_bz2.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+\n+// Avoid defining max() macro\n+#include \"arrow/util/windows_compatibility.h\"\n+\n+#include <bzlib.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+constexpr int kBZ2DefaultCompressionLevel = 9;\n+\n+// Max number of bytes the bz2 APIs accept at a time\n+static constexpr auto kSizeLimit =\n+    static_cast<int64_t>(std::numeric_limits<unsigned int>::max());\n+\n+Status BZ2Error(const char* prefix_msg, int bz_result) {\n+  DCHECK(bz_result != BZ_OK && bz_result != BZ_RUN_OK && bz_result != BZ_FLUSH_OK &&\n+         bz_result != BZ_FINISH_OK && bz_result != BZ_STREAM_END);\n+  StatusCode code;\n+  std::stringstream ss;\n+  ss << prefix_msg;\n+  switch (bz_result) {\n+    case BZ_CONFIG_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"bz2 library improperly configured (internal error)\";\n+      break;\n+    case BZ_SEQUENCE_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong sequence of calls to bz2 library (internal error)\";\n+      break;\n+    case BZ_PARAM_ERROR:\n+      code = StatusCode::UnknownError;\n+      ss << \"wrong parameter to bz2 library (internal error)\";\n+      break;\n+    case BZ_MEM_ERROR:\n+      code = StatusCode::OutOfMemory;\n+      ss << \"could not allocate memory for bz2 library\";\n+      break;\n+    case BZ_DATA_ERROR:\n+      code = StatusCode::IOError;\n+      ss << \"invalid bz2 data\";\n+      break;\n+    case BZ_DATA_ERROR_MAGIC:\n+      code = StatusCode::IOError;\n+      ss << \"data is not bz2-compressed (no magic header)\";\n+      break;\n+    default:\n+      code = StatusCode::UnknownError;\n+      ss << \"unknown bz2 error \" << bz_result;\n+      break;\n+  }\n+  return Status(code, ss.str());\n+}\n+\n+// ----------------------------------------------------------------------\n+// bz2 decompressor implementation\n+\n+class BZ2Decompressor : public Decompressor {\n+ public:\n+  BZ2Decompressor() : initialized_(false) {}\n+\n+  ~BZ2Decompressor() override {\n+    if (initialized_) {\n+      ARROW_UNUSED(BZ2_bzDecompressEnd(&stream_));\n+    }\n+  }\n+\n+  Status Init() {\n+    DCHECK(!initialized_);\n+    memset(&stream_, 0, sizeof(stream_));\n+    int ret;\n+    ret = BZ2_bzDecompressInit(&stream_, 0, 0);\n+    if (ret != BZ_OK) {\n+      return BZ2Error(\"bz2 decompressor init failed: \", ret);\n+    }\n+    initialized_ = true;\n+    finished_ = false;\n+    return Status::OK();\n+  }\n+\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                    uint8_t* output, int64_t* bytes_read, int64_t* bytes_written,\n+                    bool* need_more_output) override {\n+    stream_.next_in = const_cast<char*>(reinterpret_cast<const char*>(input));\n+    stream_.avail_in = static_cast<unsigned int>(std::min(input_len, kSizeLimit));\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzDecompress(&stream_);\n+    if (ret == BZ_OK || ret == BZ_STREAM_END) {\n+      *bytes_read = input_len - stream_.avail_in;\n+      *bytes_written = output_len - stream_.avail_out;\n+      finished_ = (ret == BZ_STREAM_END);\n+      *need_more_output = (!finished_ && *bytes_read == 0 && *bytes_written == 0);\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 decompress failed: \", ret);\n+    }\n+  }\n+\n+  bool IsFinished() override { return finished_; }\n+\n+ protected:\n+  bz_stream stream_;\n+  bool initialized_;\n+  bool finished_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// bz2 compressor implementation\n+\n+class BZ2Compressor : public Compressor {\n+ public:\n+  BZ2Compressor() : initialized_(false) {}\n+\n+  ~BZ2Compressor() override {\n+    if (initialized_) {\n+      ARROW_UNUSED(BZ2_bzCompressEnd(&stream_));\n+    }\n+  }\n+\n+  Status Init() {\n+    DCHECK(!initialized_);\n+    memset(&stream_, 0, sizeof(stream_));\n+    int ret;\n+    ret = BZ2_bzCompressInit(&stream_, kBZ2DefaultCompressionLevel, 0, 0);\n+    if (ret != BZ_OK) {\n+      return BZ2Error(\"bz2 compressor init failed: \", ret);\n+    }\n+    initialized_ = true;\n+    return Status::OK();\n+  }\n+\n+  Status Compress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                  uint8_t* output, int64_t* bytes_read, int64_t* bytes_written) override {\n+    stream_.next_in = const_cast<char*>(reinterpret_cast<const char*>(input));\n+    stream_.avail_in = static_cast<unsigned int>(std::min(input_len, kSizeLimit));\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzCompress(&stream_, BZ_RUN);\n+    if (ret == BZ_RUN_OK) {\n+      *bytes_read = input_len - stream_.avail_in;\n+      *bytes_written = output_len - stream_.avail_out;\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 compress failed: \", ret);\n+    }\n+  }\n+\n+  Status Flush(int64_t output_len, uint8_t* output, int64_t* bytes_written,\n+               bool* should_retry) override {\n+    stream_.next_in = nullptr;\n+    stream_.avail_in = 0;\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzCompress(&stream_, BZ_FLUSH);\n+    if (ret == BZ_RUN_OK || ret == BZ_FLUSH_OK) {\n+      *bytes_written = output_len - stream_.avail_out;\n+      *should_retry = (ret == BZ_FLUSH_OK);\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 compress failed: \", ret);\n+    }\n+  }\n+\n+  Status End(int64_t output_len, uint8_t* output, int64_t* bytes_written,\n+             bool* should_retry) override {\n+    stream_.next_in = nullptr;\n+    stream_.avail_in = 0;\n+    stream_.next_out = reinterpret_cast<char*>(output);\n+    stream_.avail_out = static_cast<unsigned int>(std::min(output_len, kSizeLimit));\n+    int ret;\n+\n+    ret = BZ2_bzCompress(&stream_, BZ_FINISH);\n+    if (ret == BZ_STREAM_END || ret == BZ_FINISH_OK) {\n+      *bytes_written = output_len - stream_.avail_out;\n+      *should_retry = (ret == BZ_FINISH_OK);\n+      return Status::OK();\n+    } else {\n+      return BZ2Error(\"bz2 compress failed: \", ret);\n+    }\n+  }\n+\n+ protected:\n+  bz_stream stream_;\n+  bool initialized_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// bz2 codec implementation\n+\n+Status BZ2Codec::MakeCompressor(std::shared_ptr<Compressor>* out) {\n+  auto ptr = std::make_shared<BZ2Compressor>();\n+  RETURN_NOT_OK(ptr->Init());\n+  *out = ptr;\n+  return Status::OK();\n+}\n+\n+Status BZ2Codec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n+  auto ptr = std::make_shared<BZ2Decompressor>();\n+  RETURN_NOT_OK(ptr->Init());\n+  *out = ptr;\n+  return Status::OK();\n+}\n+\n+Status BZ2Codec::Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                            uint8_t* output_buffer) {\n+  return Status::NotImplemented(\"One-shot bz2 decompression not supported\");\n+}\n+\n+int64_t BZ2Codec::MaxCompressedLen(int64_t input_len,\n+                                   const uint8_t* ARROW_ARG_UNUSED(input)) {\n+  // Cannot determine upper bound for bz2-compressed data\n+  return 0;\n+}\n+\n+Status BZ2Codec::Compress(int64_t input_len, const uint8_t* input,\n+                          int64_t output_buffer_len, uint8_t* output_buffer,\n+                          int64_t* output_length) {\n+  return Status::NotImplemented(\"One-shot bz2 compression not supported\");\n+}\n+\n+}  // namespace util\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_bz2.h b/cpp/src/arrow/util/compression_bz2.h\nnew file mode 100644\nindex 0000000000..304f4c0836\n--- /dev/null\n+++ b/cpp/src/arrow/util/compression_bz2.h\n@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_COMPRESSION_BZ2_H\n+#define ARROW_UTIL_COMPRESSION_BZ2_H\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/compression.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+// BZ2 codec.\n+class ARROW_EXPORT BZ2Codec : public Codec {\n+ public:\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+                    uint8_t* output_buffer) override;\n+\n+  Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                  uint8_t* output_buffer, int64_t* output_length) override;\n+\n+  int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n+\n+  Status MakeCompressor(std::shared_ptr<Compressor>* out) override;\n+\n+  Status MakeDecompressor(std::shared_ptr<Decompressor>* out) override;\n+\n+  const char* name() const override { return \"bz2\"; }\n+};\n+\n+}  // namespace util\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_COMPRESSION_BZ2_H\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex c53b4adc15..9e3a879122 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -1132,6 +1132,7 @@ cdef extern from 'arrow/util/compression.h' namespace 'arrow' nogil:\n         CompressionType_BROTLI\" arrow::Compression::BROTLI\"\n         CompressionType_ZSTD\" arrow::Compression::ZSTD\"\n         CompressionType_LZ4\" arrow::Compression::LZ4\"\n+        CompressionType_BZ2\" arrow::Compression::BZ2\"\n \n     cdef cppclass CCodec\" arrow::util::Codec\":\n         @staticmethod\ndiff --git a/python/pyarrow/io.pxi b/python/pyarrow/io.pxi\nindex be75e7be6b..9881b8c711 100644\n--- a/python/pyarrow/io.pxi\n+++ b/python/pyarrow/io.pxi\n@@ -1135,6 +1135,8 @@ cdef CompressionType _get_compression_type(object name):\n cdef CompressionType _get_compression_type_by_filename(filename):\n     if filename.endswith('.gz'):\n         return CompressionType_GZIP\n+    elif filename.endswith('.bz2'):\n+        return CompressionType_BZ2\n     elif filename.endswith('.lz4'):\n         return CompressionType_LZ4\n     elif filename.endswith('.zst'):\ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex e3ea92ab06..dbfa4f3395 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -15,6 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+import bz2\n import gzip\n import io\n import itertools\n@@ -275,7 +276,11 @@ def test_random_csv(self):\n         csv, expected = make_random_csv(num_cols=2, num_rows=100)\n         csv_path = os.path.join(self.tmpdir, self.csv_filename)\n         self.write_file(csv_path, csv)\n-        table = read_csv(csv_path)\n+        try:\n+            table = read_csv(csv_path)\n+        except pa.ArrowNotImplementedError as e:\n+            pytest.skip(str(e))\n+            return\n         table._validate()\n         assert table.schema == expected.schema\n         assert table.equals(expected)\n@@ -288,3 +293,11 @@ class TestGZipCSVRead(BaseTestCompressedCSVRead, unittest.TestCase):\n     def write_file(self, path, contents):\n         with gzip.open(path, 'wb', 3) as f:\n             f.write(contents)\n+\n+\n+class TestBZ2CSVRead(BaseTestCompressedCSVRead, unittest.TestCase):\n+    csv_filename = \"compressed.csv.bz2\"\n+\n+    def write_file(self, path, contents):\n+        with bz2.BZ2File(path, 'w') as f:\n+            f.write(contents)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T09:15:54.896+0000",
                    "updated": "2018-10-24T09:15:54.896+0000",
                    "started": "2018-10-24T09:15:54.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158040",
                    "issueId": "13188498"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@56cdcbe[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d747173[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e6dc7a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@702cd8f5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a4201cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c6f5ee3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c1fd81b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3a62461d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30a47cfc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@464aa44d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1447739f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3cbd9da4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 24 09:15:44 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-24T09:15:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3381/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-10-01T12:02:41.000+0000",
        "updated": "2018-10-24T09:15:54.000+0000",
        "timeoriginalestimate": null,
        "description": "For reading compressed CSV files",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement InputStream for bz2 files",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/comment/16633908",
                    "id": "16633908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Isn't it basically the same as {{ARROW-1019}} but with a different {{Codec}} instance?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-01T12:05:08.798+0000",
                    "updated": "2018-10-01T12:05:08.798+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/comment/16633933",
                    "id": "16633933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yeah. As part of this we'd need to add bzip2 to our toolchain",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-01T12:31:47.169+0000",
                    "updated": "2018-10-01T12:31:47.169+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/comment/16653331",
                    "id": "16653331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "There is no upstream maintenance of bzip2 anymore and its build chain is rusty, so I think we'll need to always rely on binaries (e.g. from Anaconda).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-17T10:30:33.492+0000",
                    "updated": "2018-10-17T10:30:33.492+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188498/comment/16661976",
                    "id": "16661976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 2812\n[https://github.com/apache/arrow/pull/2812]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-24T09:15:44.805+0000",
                    "updated": "2018-10-24T09:15:44.805+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yo7b:",
        "customfield_12314139": null
    }
}