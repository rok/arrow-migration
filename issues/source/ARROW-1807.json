{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13118069",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069",
    "key": "ARROW-1807",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12519981",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12519981",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13105578",
                    "key": "ARROW-1621",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105578",
                    "fields": {
                        "summary": "[JAVA] Reduce Heap Usage per Vector",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12549730",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12549730",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13203446",
                    "key": "ARROW-3987",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203446",
                    "fields": {
                        "summary": "[Java] Benchmark results for ARROW-1807",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1807/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/172978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra opened a new pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121\n \n \n   - for fixed-len vectors, alloc a combined arrow buf for\r\n     value and validity.\r\n   - Remove the read-write locks in AllocationMgr, they\r\n     contribute about 150 bytes to the heap, and aren't very useful\r\n     since there isn't much contention.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T12:51:14.718+0000",
                    "updated": "2018-12-07T12:51:14.718+0000",
                    "started": "2018-12-07T12:51:14.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172978",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/172982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#issuecomment-445234431\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=h1) Report\n   > Merging [#3121](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/072df8993ba06b56412a357194a73cc7c7d2ef11?src=pr&el=desc) will **decrease** coverage by `0.02%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3121/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3121      +/-   ##\n   ==========================================\n   - Coverage   87.09%   87.07%   -0.03%     \n   ==========================================\n     Files         492      492              \n     Lines       69160    69160              \n   ==========================================\n   - Hits        60233    60219      -14     \n   - Misses       8830     8840      +10     \n   - Partials       97      101       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-5.27%)` | :arrow_down: |\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `95.45% <0%> (-1.95%)` | :arrow_down: |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `72.03% <0%> (-0.95%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [6 more](https://codecov.io/gh/apache/arrow/pull/3121/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=footer). Last update [072df89...40ead47](https://codecov.io/gh/apache/arrow/pull/3121?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T13:35:41.301+0000",
                    "updated": "2018-12-07T13:35:41.301+0000",
                    "started": "2018-12-07T13:35:41.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172982",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/173058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r239940229\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   Can you explain a bit why does this reduce heap usage? We still end up with two ArrowBuf objects, but the fact that they are slices of  a single ArrowBuf allows them to share some heap data structure?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T20:41:15.151+0000",
                    "updated": "2018-12-07T20:41:15.151+0000",
                    "started": "2018-12-07T20:41:15.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173058",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/173209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r240009647\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   Yes.\r\n   \r\n   The current heap cost (shallow counts) for buffers in a IntVector is:\r\n   \r\n   io.netty.buffer.ArrowBuf -> 2 * 109 = 218\r\n   io.netty.buffer.PooledUnsafeDirectBuf -> 2 * 116 = 232\r\n   io.netty.buffer.UnsafeDirectLittleEndian -> 2*48 = 96\r\n   io.netty.util.Recycler$DefaultHandle -> 2*41 = 82\r\n   arrow.memory.AllocationManager -> 2 * 100 = 200\r\n   arrow.memory.AllocationManager$BufferLedger -> 2 * 80 = 160\r\n   java.util.concurrent.locks.ReentrantReadWriteLock* -> 2*180 = 360\r\n   arrow.memory.AutoCloseableLock -> 4 * 24 = 96\r\n   arrow.memory.LowCostIdentityHashMap -> 2 * 32 = 64\r\n   \r\n   **Before Total = 1508 bytes**\r\n   \r\n   My change removes the locks, and shares all objects above except ArrowBuf\r\n   \r\n   io.netty.buffer.ArrowBuf -> 2 * 109 = 218\r\n   io.netty.buffer.PooledUnsafeDirectBuf -> 1 * 116 = 116\r\n   io.netty.buffer.UnsafeDirectLittleEndian -> 1*48 = 48\r\n   io.netty.util.Recycler$DefaultHandle -> 1*41 = 41\r\n   arrow.memory.AllocationManager -> 1 * 76 = 76\r\n   arrow.memory.AllocationManager$BufferLedger -> 1 * 80 = 80\r\n   arrow.memory.LowCostIdentityHashMap -> 1 * 32 = 32\r\n   \r\n   **After total = 611**\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-08T16:37:02.348+0000",
                    "updated": "2018-12-08T16:37:02.348+0000",
                    "started": "2018-12-08T16:37:02.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173209",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/173210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r240009647\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   Yes.\r\n   \r\n   The current heap cost (shallow counts) for buffers in a IntVector is:\r\n   \r\n   io.netty.buffer.ArrowBuf -> 2 * 109 = 218\r\n   io.netty.buffer.PooledUnsafeDirectBuf -> 2 * 116 = 232\r\n   io.netty.buffer.UnsafeDirectLittleEndian -> 2*48 = 96\r\n   io.netty.util.Recycler$DefaultHandle -> 2*41 = 82\r\n   arrow.memory.AllocationManager -> 2 * 100 = 200\r\n   arrow.memory.AllocationManager$BufferLedger -> 2 * 80 = 160\r\n   java.util.concurrent.locks.ReentrantReadWriteLock* -> 2*180 = 360\r\n   arrow.memory.AutoCloseableLock -> 4 * 24 = 96\r\n   arrow.memory.LowCostIdentityHashMap -> 2 * 32 = 64\r\n   \r\n   **Before Total = 1508 bytes**\r\n   \r\n   My change removes the locks, and shares all objects above except ArrowBuf\r\n   \r\n   io.netty.buffer.ArrowBuf -> 2 * 109 = 218\r\n   io.netty.buffer.PooledUnsafeDirectBuf -> 1 * 116 = 116\r\n   io.netty.buffer.UnsafeDirectLittleEndian -> 1*48 = 48\r\n   io.netty.util.Recycler$DefaultHandle -> 1*41 = 41\r\n   arrow.memory.AllocationManager -> 1 * 76 = 76\r\n   arrow.memory.AllocationManager$BufferLedger -> 1 * 80 = 80\r\n   arrow.memory.LowCostIdentityHashMap -> 1 * 32 = 32\r\n   \r\n   **After total = 611 bytes**\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-08T16:37:25.167+0000",
                    "updated": "2018-12-08T16:37:25.167+0000",
                    "started": "2018-12-08T16:37:25.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173210",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/173212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r240009647\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   Yes.\r\n   \r\n   The current heap cost (shallow counts) for buffers in a IntVector is:\r\n   \r\n   io.netty.buffer.ArrowBuf -> 2 * 109 = 218\r\n   io.netty.buffer.PooledUnsafeDirectBuf -> 2 * 116 = 232\r\n   io.netty.buffer.UnsafeDirectLittleEndian -> 2 * 48 = 96\r\n   io.netty.util.Recycler$DefaultHandle -> 2 * 41 = 82\r\n   arrow.memory.AllocationManager -> 2 * 100 = 200\r\n   arrow.memory.AllocationManager$BufferLedger -> 2 * 80 = 160\r\n   java.util.concurrent.locks.ReentrantReadWriteLock* -> 2 * 180 = 360\r\n   arrow.memory.AutoCloseableLock -> 4 * 24 = 96\r\n   arrow.memory.LowCostIdentityHashMap -> 2 * 32 = 64\r\n   \r\n   **Before Total = 1508 bytes**\r\n   \r\n   My change removes the locks, and shares all objects above except ArrowBuf\r\n   \r\n   io.netty.buffer.ArrowBuf -> 2 * 109 = 218\r\n   io.netty.buffer.PooledUnsafeDirectBuf -> 1 * 116 = 116\r\n   io.netty.buffer.UnsafeDirectLittleEndian -> 1 * 48 = 48\r\n   io.netty.util.Recycler$DefaultHandle -> 1 * 41 = 41\r\n   arrow.memory.AllocationManager -> 1 * 76 = 76\r\n   arrow.memory.AllocationManager$BufferLedger -> 1 * 80 = 80\r\n   arrow.memory.LowCostIdentityHashMap -> 1 * 32 = 32\r\n   \r\n   **After total = 611 bytes**\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-08T16:38:13.124+0000",
                    "updated": "2018-12-08T16:38:13.124+0000",
                    "started": "2018-12-08T16:38:13.123+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173212",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/174683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthteotia commented on a change in pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r241197757\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   +1\r\n   \r\n   We had recently done the exact same optimization inside Dremio code by slicing a single large ArrowBuf and handing over the resulting buffers to vectors. This reduced the heap overhead (due to large volume of ArrowBufs) from 1GB to 250MB for very memory intensive aggregation queries.\r\n   \r\n   https://github.com/dremio/dremio-oss/blob/master/sabot/kernel/src/main/java/com/dremio/sabot/op/aggregate/vectorized/AccumulatorSet.java#L93\r\n   \r\n   This reduced heap overhead drastically  but the downside was OOMs became frequent since we are asking for a very largebuffer (due to combining both into one and allocator's power of 2 semantics). So we implemented two additional variants of the algorithm to optimize usage of both heap and direct memory.\r\n   \r\n   I don't think those concerns are applicable here in the context of a single vector. \r\n   \r\n   However, I am just trying to recall that when we created this JIRA with the goal to reduce heap usage in vectors, I think the proposal was to just have a single buffer as opposed to having two buffers sliced from a single buffer and then getting rid of latter.\r\n   \r\n   For example, in case of fixed width vectors, we can pack validity and data into a single buffer. For variable width vectors, we can pack offsets and validity into a single buffer. Similarly for list, we can combine offset and validity into one buffer.\r\n   \r\n   I am wondering if that is even needed now since the heap reduction due to sliced buffer technique is significant\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T21:48:51.390+0000",
                    "updated": "2018-12-12T21:48:51.390+0000",
                    "started": "2018-12-12T21:48:51.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174683",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/175275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #3121: ARROW-1807: [WIP] [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r241718055\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   > I am wondering if that is even needed now since the heap reduction due to sliced buffer \r\n   > technique is significant\r\n   \r\n   yes, @siddharthteotia. We could save another 80 odd bytes on the heap by using a single buffer but it causes complexity in the code due to the following reasons\r\n   \r\n   - There are places in the code where the caller assumes a FixedWidthVector to contain two arrow buffers (one for validity and one for value).\r\n   - When we do a splitAndTransfer of an existing FixedWidthVector, the validity and data portions will not be contiguous. If the split happens at an unaligned boundary, we allocate a new validity buffer, but retain the value buffer. so, there will be too many cases to deal with (both contiguous, both in same buffer but not contiguous, in different buffers).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T11:02:31.908+0000",
                    "updated": "2018-12-14T11:02:31.908+0000",
                    "started": "2018-12-14T11:02:31.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175275",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/175641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthteotia commented on a change in pull request #3121: ARROW-1807: [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#discussion_r241925726\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n ##########\n @@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n \n Review comment:\n   yes combining two buffers into 1 will require a lot of changes -- both in arrow and downstream consumers like Arrow where we assume the number of buffers.\r\n   \r\n   I am merging this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-15T00:17:35.050+0000",
                    "updated": "2018-12-15T00:17:35.050+0000",
                    "started": "2018-12-15T00:17:35.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175641",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/175642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthteotia closed pull request #3121: ARROW-1807: [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java b/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\nindex aaa1f506fb..687674f951 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n@@ -22,11 +22,8 @@\n import java.util.IdentityHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.locks.ReadWriteLock;\n-import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import org.apache.arrow.memory.BaseAllocator.Verbosity;\n-import org.apache.arrow.memory.util.AutoCloseableLock;\n import org.apache.arrow.memory.util.HistoricalLog;\n import org.apache.arrow.util.Preconditions;\n \n@@ -73,9 +70,6 @@\n   // ARROW-1627 Trying to minimize memory overhead caused by previously used IdentityHashMap\n   // see JIRA for details\n   private final LowCostIdentityHashMap<BaseAllocator, BufferLedger> map = new LowCostIdentityHashMap<>();\n-  private final ReadWriteLock lock = new ReentrantReadWriteLock();\n-  private final AutoCloseableLock readLock = new AutoCloseableLock(lock.readLock());\n-  private final AutoCloseableLock writeLock = new AutoCloseableLock(lock.writeLock());\n   private final long amCreationTime = System.nanoTime();\n \n   private volatile BufferLedger owningLedger;\n@@ -115,9 +109,8 @@ private BufferLedger associate(final BaseAllocator allocator, final boolean reta\n           \"A buffer can only be associated between two allocators that share the same root.\");\n     }\n \n-    try (AutoCloseableLock read = readLock.open()) {\n-\n-      final BufferLedger ledger = map.get(allocator);\n+    synchronized (this) {\n+      BufferLedger ledger = map.get(allocator);\n       if (ledger != null) {\n         if (retain) {\n           ledger.inc();\n@@ -125,20 +118,7 @@ private BufferLedger associate(final BaseAllocator allocator, final boolean reta\n         return ledger;\n       }\n \n-    }\n-    try (AutoCloseableLock write = writeLock.open()) {\n-      // we have to recheck existing ledger since a second reader => writer could be competing\n-      // with us.\n-\n-      final BufferLedger existingLedger = map.get(allocator);\n-      if (existingLedger != null) {\n-        if (retain) {\n-          existingLedger.inc();\n-        }\n-        return existingLedger;\n-      }\n-\n-      final BufferLedger ledger = new BufferLedger(allocator);\n+      ledger = new BufferLedger(allocator);\n       if (retain) {\n         ledger.inc();\n       }\n@@ -153,7 +133,7 @@ private BufferLedger associate(final BaseAllocator allocator, final boolean reta\n    * The way that a particular BufferLedger communicates back to the AllocationManager that it\n    * now longer needs to hold\n    * a reference to particular piece of memory.\n-   * Can only be called when you already hold the writeLock.\n+   * Can only be called when you already hold the lock.\n    */\n   private void release(final BufferLedger ledger) {\n     final BaseAllocator allocator = ledger.getAllocator();\n@@ -250,7 +230,7 @@ public boolean transferBalance(final BufferLedger target) {\n       // since two balance transfers out from the allocator manager could cause incorrect\n       // accounting, we need to ensure\n       // that this won't happen by synchronizing on the allocator manager instance.\n-      try (AutoCloseableLock write = writeLock.open()) {\n+      synchronized (this) {\n         if (owningLedger != this) {\n           return true;\n         }\n@@ -330,7 +310,7 @@ public int decrement(int decrement) {\n       allocator.assertOpen();\n \n       final int outcome;\n-      try (AutoCloseableLock write = writeLock.open()) {\n+      synchronized (this) {\n         outcome = bufRefCnt.addAndGet(-decrement);\n         if (outcome == 0) {\n           lDestructionTime = System.nanoTime();\n@@ -431,7 +411,7 @@ public int getSize() {\n      * @return Amount of accounted(owned) memory associated with this ledger.\n      */\n     public int getAccountedSize() {\n-      try (AutoCloseableLock read = readLock.open()) {\n+      synchronized (this) {\n         if (owningLedger == this) {\n           return size;\n         } else {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\nindex bc0b77a0ae..f69a9d1754 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n@@ -270,7 +270,7 @@ public boolean allocateNewSafe() {\n     long curAllocationSizeValue = valueAllocationSizeInBytes;\n     long curAllocationSizeValidity = validityAllocationSizeInBytes;\n \n-    if (curAllocationSizeValue > MAX_ALLOCATION_SIZE) {\n+    if (align(curAllocationSizeValue) + curAllocationSizeValidity > MAX_ALLOCATION_SIZE) {\n       throw new OversizedAllocationException(\"Requested amount of memory exceeds limit\");\n     }\n \n@@ -302,7 +302,7 @@ public void allocateNew(int valueCount) {\n       valueBufferSize = validityBufferSize;\n     }\n \n-    if (valueBufferSize > MAX_ALLOCATION_SIZE) {\n+    if (align(valueBufferSize) + validityBufferSize > MAX_ALLOCATION_SIZE) {\n       throw new OversizedAllocationException(\"Requested amount of memory is more than max allowed\");\n     }\n \n@@ -317,6 +317,13 @@ public void allocateNew(int valueCount) {\n     }\n   }\n \n+  /*\n+   * align to a 8-byte value.\n+   */\n+  private long align(long size) {\n+    return ((size + 7) / 8) * 8;\n+  }\n+\n   /**\n    * Actual memory allocation is done by this function. All the calculations\n    * and knowledge about what size to allocate is upto the callers of this\n@@ -327,14 +334,24 @@ public void allocateNew(int valueCount) {\n    * conditions.\n    */\n   private void allocateBytes(final long valueBufferSize, final long validityBufferSize) {\n-    /* allocate data buffer */\n-    int curSize = (int) valueBufferSize;\n-    valueBuffer = allocator.buffer(curSize);\n+    int valueBufferSlice = (int)align(valueBufferSize);\n+    int validityBufferSlice = (int)validityBufferSize;\n+\n+    /* allocate combined buffer */\n+    ArrowBuf buffer = allocator.buffer(valueBufferSlice + validityBufferSlice);\n+\n+    valueAllocationSizeInBytes = valueBufferSlice;\n+    valueBuffer = buffer.slice(0, valueBufferSlice);\n+    valueBuffer.retain();\n     valueBuffer.readerIndex(0);\n-    valueAllocationSizeInBytes = curSize;\n-    /* allocate validity buffer */\n-    allocateValidityBuffer((int) validityBufferSize);\n+\n+    validityAllocationSizeInBytes = validityBufferSlice;\n+    validityBuffer = buffer.slice(valueBufferSlice, validityBufferSlice);\n+    validityBuffer.retain();\n+    validityBuffer.readerIndex(0);\n     zeroVector();\n+\n+    buffer.release();\n   }\n \n   /**\n@@ -422,43 +439,50 @@ public Field getField() {\n    */\n   @Override\n   public void reAlloc() {\n-    valueBuffer = reallocBufferHelper(valueBuffer, true);\n-    validityBuffer = reallocBufferHelper(validityBuffer, false);\n-  }\n-\n-  /**\n-   * Helper method for reallocating a particular internal buffer\n-   * Returns the new buffer.\n-   */\n-  private ArrowBuf reallocBufferHelper(ArrowBuf buffer, final boolean dataBuffer) {\n-    final int currentBufferCapacity = buffer.capacity();\n-    long baseSize = (dataBuffer ? valueAllocationSizeInBytes\n-            : validityAllocationSizeInBytes);\n+    int valueBaseSize = Integer.max(valueBuffer.capacity(), valueAllocationSizeInBytes);\n+    long newValueBufferSlice = align(valueBaseSize * 2L);\n+    long newValidityBufferSlice;\n+    if (typeWidth > 0) {\n+      long targetValueBufferSize = align(BaseAllocator.nextPowerOfTwo(newValueBufferSlice));\n+      long targetValueCount = targetValueBufferSize / typeWidth;\n+      targetValueBufferSize -= getValidityBufferSizeFromCount((int) targetValueCount);\n+      if (newValueBufferSlice < targetValueBufferSize) {\n+        newValueBufferSlice = targetValueBufferSize;\n+      }\n \n-    if (baseSize < (long) currentBufferCapacity) {\n-      baseSize = (long) currentBufferCapacity;\n+      newValidityBufferSlice = getValidityBufferSizeFromCount((int)(newValueBufferSlice / typeWidth));\n+    } else {\n+      newValidityBufferSlice = newValueBufferSlice;\n     }\n \n-    long newAllocationSize = baseSize * 2L;\n-    newAllocationSize = BaseAllocator.nextPowerOfTwo(newAllocationSize);\n+    long newAllocationSize = newValueBufferSlice + newValidityBufferSlice;\n     assert newAllocationSize >= 1;\n \n     if (newAllocationSize > MAX_ALLOCATION_SIZE) {\n       throw new OversizedAllocationException(\"Unable to expand the buffer\");\n     }\n \n-    final ArrowBuf newBuf = allocator.buffer((int) newAllocationSize);\n-    newBuf.setBytes(0, buffer, 0, currentBufferCapacity);\n-    newBuf.setZero(currentBufferCapacity, newBuf.capacity() - currentBufferCapacity);\n-    buffer.release(1);\n-    buffer = newBuf;\n-    if (dataBuffer) {\n-      valueAllocationSizeInBytes = (int) newAllocationSize;\n-    } else {\n-      validityAllocationSizeInBytes = (int) newAllocationSize;\n-    }\n+    final ArrowBuf newBuffer = allocator.buffer((int) newAllocationSize);\n+    final ArrowBuf newValueBuffer = newBuffer.slice(0, (int)newValueBufferSlice);\n+    newValueBuffer.setBytes(0, valueBuffer, 0, valueBuffer.capacity());\n+    newValueBuffer.setZero(valueBuffer.capacity(), (int)newValueBufferSlice - valueBuffer.capacity());\n+    newValueBuffer.retain();\n+    newValueBuffer.readerIndex(0);\n+    valueBuffer.release();\n+    valueBuffer = newValueBuffer;\n+    valueAllocationSizeInBytes = (int)newValueBufferSlice;\n+\n+    final ArrowBuf newValidityBuffer = newBuffer.slice((int)newValueBufferSlice,\n+        (int)newValidityBufferSlice);\n+    newValidityBuffer.setBytes(0, validityBuffer, 0, validityBuffer.capacity());\n+    newValidityBuffer.setZero(validityBuffer.capacity(), (int)newValidityBufferSlice - validityBuffer.capacity());\n+    newValidityBuffer.retain();\n+    newValidityBuffer.readerIndex(0);\n+    validityBuffer.release();\n+    validityBuffer = newValidityBuffer;\n+    validityAllocationSizeInBytes = (int)newValidityBufferSlice;\n \n-    return buffer;\n+    newBuffer.release();\n   }\n \n   @Override\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java b/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java\nindex 48bc8936d9..9165343bfd 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java\n@@ -40,15 +40,14 @@ public void testTransferFixedWidth() {\n     IntVector v1 = new IntVector(\"v1\", childAllocator1);\n     v1.allocateNew();\n     v1.setValueCount(4095);\n+    long totalAllocatedMemory = childAllocator1.getAllocatedMemory();\n \n     IntVector v2 = new IntVector(\"v2\", childAllocator2);\n \n     v1.makeTransferPair(v2).transfer();\n \n     assertEquals(0, childAllocator1.getAllocatedMemory());\n-    int expectedBitVector = 512;\n-    int expectedValueVector = 4096 * 4;\n-    assertEquals(expectedBitVector + expectedValueVector, childAllocator2.getAllocatedMemory());\n+    assertEquals(totalAllocatedMemory, childAllocator2.getAllocatedMemory());\n   }\n \n   @Test\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\nindex 4e8d8f0f39..68102b1c32 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n@@ -774,13 +774,13 @@ public void testSetInitialCapacity() {\n       vector.setInitialCapacity(512);\n       vector.allocateNew();\n       assertEquals(512, vector.getValueCapacity());\n-      assertEquals(4096, vector.getDataVector().getValueCapacity());\n+      assertTrue(vector.getDataVector().getValueCapacity() >= 512 * 5);\n \n       /* use density as 4 */\n       vector.setInitialCapacity(512, 4);\n       vector.allocateNew();\n       assertEquals(512, vector.getValueCapacity());\n-      assertEquals(512 * 4, vector.getDataVector().getValueCapacity());\n+      assertTrue(vector.getDataVector().getValueCapacity() >= 512 * 4);\n \n       /**\n        * inner value capacity we pass to data vector is 512 * 0.1 => 51\n@@ -793,7 +793,7 @@ public void testSetInitialCapacity() {\n       vector.setInitialCapacity(512, 0.1);\n       vector.allocateNew();\n       assertEquals(512, vector.getValueCapacity());\n-      assertEquals(64, vector.getDataVector().getValueCapacity());\n+      assertTrue(vector.getDataVector().getValueCapacity() >= 51);\n \n       /**\n        * inner value capacity we pass to data vector is 512 * 0.01 => 5\n@@ -806,7 +806,7 @@ public void testSetInitialCapacity() {\n       vector.setInitialCapacity(512, 0.01);\n       vector.allocateNew();\n       assertEquals(512, vector.getValueCapacity());\n-      assertEquals(8, vector.getDataVector().getValueCapacity());\n+      assertTrue(vector.getDataVector().getValueCapacity() >= 5);\n \n       /**\n        * inner value capacity we pass to data vector is 5 * 0.1 => 0\n@@ -822,7 +822,7 @@ public void testSetInitialCapacity() {\n       vector.setInitialCapacity(5, 0.1);\n       vector.allocateNew();\n       assertEquals(7, vector.getValueCapacity());\n-      assertEquals(1, vector.getDataVector().getValueCapacity());\n+      assertTrue(vector.getDataVector().getValueCapacity() >= 1);\n     }\n   }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-15T00:18:04.541+0000",
                    "updated": "2018-12-15T00:18:04.541+0000",
                    "started": "2018-12-15T00:18:04.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175642",
                    "issueId": "13118069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118069/worklog/175654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #3121: ARROW-1807: [Java] consolidate bufs to reduce heap\nURL: https://github.com/apache/arrow/pull/3121#issuecomment-447528101\n \n \n   Thanks @siddharthteotia\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-15T02:01:24.511+0000",
                    "updated": "2018-12-15T02:01:24.511+0000",
                    "started": "2018-12-15T02:01:24.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175654",
                    "issueId": "13118069"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1806d524[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50a92df1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74102f6f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6d4f42b9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41a4d6ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@109336fc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@650d08d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@72c0c444[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15b6dda0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1c1b2d3c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11ddcdd1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@654bc94a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "2017-11-13 21:14:25.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-15T00:18:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1807/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2017-11-13T21:14:25.000+0000",
        "updated": "2019-03-12T20:43:33.000+0000",
        "timeoriginalestimate": null,
        "description": "Consolidate buffers for reducing the volume of objects and heap usage\r\n\r\n<validity + data> => single buffer for fixed width\r\n< validity + offsets> = single buffer for var width, list vector",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JAVA] Reduce Heap Usage (Phase 3): consolidate buffers",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mq9r:",
        "customfield_12314139": null
    }
}