{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13434448",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448",
    "key": "ARROW-15965",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15965/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/743441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660\n\n\n   Expose in the Python bindings constructor for RoundToMultipleOptions with a shared_ptr<Scalar>.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T21:36:23.281+0000",
                    "updated": "2022-03-17T21:36:23.281+0000",
                    "started": "2022-03-17T21:36:23.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743441",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/743442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#issuecomment-1071528853\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T21:36:45.760+0000",
                    "updated": "2022-03-17T21:36:45.760+0000",
                    "started": "2022-03-17T21:36:45.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743442",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/743723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r829975339\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions((<double> multiple),\n\nReview comment:\n       Hmm, do we need to do more type checking here? What happens if `multiple` is neither scalar nor double?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions((<double> multiple),\n\nReview comment:\n       Should we add a unit test too?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T12:59:08.150+0000",
                    "updated": "2022-03-18T12:59:08.150+0000",
                    "started": "2022-03-18T12:59:08.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743723",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/743750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r830022660\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions((<double> multiple),\n\nReview comment:\n       Agree, needs improved type support. Thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T13:55:10.563+0000",
                    "updated": "2022-03-18T13:55:10.563+0000",
                    "started": "2022-03-18T13:55:10.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743750",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/743786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660\n\n\n   Expose in the Python bindings constructor for RoundToMultipleOptions with a shared_ptr<Scalar>.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:35:30.094+0000",
                    "updated": "2022-03-18T14:35:30.094+0000",
                    "started": "2022-03-18T14:35:30.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743786",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/743913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r830022660\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions((<double> multiple),\n\nReview comment:\n       Agree, needs improved type support. Thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:47:59.550+0000",
                    "updated": "2022-03-18T14:47:59.550+0000",
                    "started": "2022-03-18T14:47:59.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743913",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/744089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#issuecomment-1071528853\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:04:26.102+0000",
                    "updated": "2022-03-18T15:04:26.102+0000",
                    "started": "2022-03-18T15:04:26.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744089",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/744111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r829975339\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions((<double> multiple),\n\nReview comment:\n       Hmm, do we need to do more type checking here? What happens if `multiple` is neither scalar nor double?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions((<double> multiple),\n\nReview comment:\n       Should we add a unit test too?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:06:55.214+0000",
                    "updated": "2022-03-18T15:06:55.214+0000",
                    "started": "2022-03-18T15:06:55.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744111",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/745521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r831627984\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(<double> multiple,\n+                                            unwrap_round_mode(round_mode))\n+            )\n\nReview comment:\n       After testing and investigating further, I consider the above code is sufficient and is consistent with the other `FunctionOptions` definitions. In the current state, any non-scalar `multiple` that can be casted to `<double>` is valid (e.g., integers, floats, bools). Those values that cannot be coerced trigger the following Python error:\r\n   ```python\r\n   >>> pc.round_to_multiple(2.1, options=pc.RoundToMultipleOptions('one'))\r\n   Traceback (most recent call last):\r\n     File \"<stdin>\", line 1, in <module>\r\n     File \"pyarrow/_compute.pyx\", line 930, in pyarrow._compute.RoundToMultipleOptions.__init__\r\n     File \"pyarrow/_compute.pyx\", line 908, in pyarrow._compute._RoundToMultipleOptions._set_options\r\n   TypeError: must be real number, not str\r\n   \r\n   >>> asin('one')\r\n   Traceback (most recent call last):\r\n     File \"<stdin>\", line 1, in <module>\r\n   TypeError: must be real number, not str\r\n   ```\r\n   \r\n   This is the same behavior as the C++ API which has a constructor with a `double` parameter. Python, C++, and R allow casting boolean to floating-point.\r\n   \r\n   Also, the above `_set_options()` follows the same pattern as all other `FunctionOptions` (and C++) where no type checking in addition to the language's is performed. I do not think we need tests for this one case only.\r\n   cc @lidavidm @jorisvandenbossche \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T23:43:18.781+0000",
                    "updated": "2022-03-21T23:43:18.781+0000",
                    "started": "2022-03-21T23:43:18.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745521",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/745615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r831836585\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(<double> multiple,\n+                                            unwrap_round_mode(round_mode))\n+            )\n\nReview comment:\n       It might not be strictly needed to test that a string errors (this already happens on master as well), but you needed to add additional code to enable a new feature: being able to pass a pyarrow scalar. So to ensure this actually works and keeps working, this requires a python test (note that being able to pass a pyarrow scalar is not something that other option classes actually support in general).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T07:18:48.900+0000",
                    "updated": "2022-03-22T07:18:48.900+0000",
                    "started": "2022-03-22T07:18:48.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745615",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/745640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r831875969\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -898,10 +898,16 @@ class RoundTemporalOptions(_RoundTemporalOptions):\n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n     def _set_options(self, multiple, round_mode):\n-        self.wrapped.reset(\n-            new CRoundToMultipleOptions(multiple,\n-                                        unwrap_round_mode(round_mode))\n-        )\n+        if isinstance(multiple, Scalar):\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(pyarrow_unwrap_scalar(multiple),\n+                                            unwrap_round_mode(round_mode))\n+            )\n+        else:\n+            self.wrapped.reset(\n+                new CRoundToMultipleOptions(<double> multiple,\n+                                            unwrap_round_mode(round_mode))\n+            )\n\nReview comment:\n       Oh, I see. I will add some tests. Thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T08:12:58.952+0000",
                    "updated": "2022-03-22T08:12:58.952+0000",
                    "started": "2022-03-22T08:12:58.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745640",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/756907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#issuecomment-1098992580\n\n   @pitrou If you are interested and have time, feel free to review this PR as well.\n\n\n",
                    "created": "2022-04-14T10:10:58.250+0000",
                    "updated": "2022-04-14T10:10:58.250+0000",
                    "started": "2022-04-14T10:10:58.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756907",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/756934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850336110\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -1567,8 +1568,10 @@ def test_round_to_multiple():\n         assert pc.round_to_multiple(values, multiple,\n                                     \"half_towards_infinity\") == result\n \n-    with pytest.raises(pa.ArrowInvalid, match=\"multiple must be positive\"):\n-        pc.round_to_multiple(values, multiple=-2)\n+    for multiple in [-2, pa.scalar(-10.4)]:\n+        with pytest.raises(pa.ArrowInvalid,\n+                           match=\"multiple must be nonnegative\"):\n+            pc.round_to_multiple(values, multiple=multiple)\n\nReview Comment:\n   Can you also add a test for `TypeError` when the multiple is not convertible to a scalar?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1453,20 +1447,20 @@ struct RoundToMultiple<ArrowType, kRoundMode, enable_if_decimal<ArrowType>> {\n   bool has_halfway_point;\n \n   explicit RoundToMultiple(const State& state, const DataType& out_ty)\n-      : ty(checked_cast<const ArrowType&>(out_ty)) {\n-    const auto& options = state.options;\n-    DCHECK(options.multiple);\n-    DCHECK(options.multiple->is_valid);\n-    DCHECK(options.multiple->type->Equals(out_ty));\n-    multiple = UnboxScalar<ArrowType>::Unbox(*options.multiple);\n-    half_multiple = multiple;\n-    half_multiple /= 2;\n-    neg_half_multiple = -half_multiple;\n-    has_halfway_point = multiple.low_bits() % 2 == 0;\n-  }\n+      : ty(checked_cast<const ArrowType&>(out_ty)),\n+        multiple(UnboxScalar<ArrowType>::Unbox(*state.options.multiple)),\n+        half_multiple(multiple / 2),\n+        neg_half_multiple(-half_multiple),\n+        has_halfway_point(multiple.low_bits() % 2 == 0) {}\n \n   template <typename T = ArrowType, typename CType = typename TypeTraits<T>::CType>\n   enable_if_decimal_value<CType> Call(KernelContext* ctx, CType arg, Status* st) const {\n+    // Return zeros if `multiple` option is zero.\n\nReview Comment:\n   I'm not sure why this is the expected result?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1200,70 +1201,71 @@ template <>\n struct RoundOptionsWrapper<RoundToMultipleOptions>\n     : public OptionsWrapper<RoundToMultipleOptions> {\n   using OptionsType = RoundToMultipleOptions;\n-  using State = RoundOptionsWrapper<OptionsType>;\n   using OptionsWrapper::OptionsWrapper;\n \n   static Result<std::unique_ptr<KernelState>> Init(KernelContext* ctx,\n                                                    const KernelInitArgs& args) {\n-    std::unique_ptr<State> state;\n-    if (auto options = static_cast<const OptionsType*>(args.options)) {\n-      state = ::arrow::internal::make_unique<State>(*options);\n-    } else {\n+    auto options = static_cast<const OptionsType*>(args.options);\n+    if (!options) {\n       return Status::Invalid(\n           \"Attempted to initialize KernelState from null FunctionOptions\");\n     }\n \n-    auto options = Get(*state);\n-    const auto& type = *args.inputs[0].type;\n-    if (!options.multiple || !options.multiple->is_valid) {\n+    const auto& multiple = options->multiple;\n+    if (!multiple || !multiple->is_valid) {\n       return Status::Invalid(\"Rounding multiple must be non-null and valid\");\n     }\n-    if (is_floating(type.id())) {\n-      switch (options.multiple->type->id()) {\n-        case Type::FLOAT: {\n-          if (UnboxScalar<FloatType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DOUBLE: {\n-          if (UnboxScalar<DoubleType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::HALF_FLOAT:\n-          return Status::NotImplemented(\"Half-float values are not supported\");\n-        default:\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+\n+    // Ensure the rounding multiple option matches the kernel's output type.\n+    // The output type is not available here so we use the following rule:\n+    // If `multiple` is neither a floating-point nor a decimal type, then\n+    // cast to float64, else cast to the kernel's input type.\n+    std::shared_ptr<Scalar> resolved_multiple;\n+    const auto& to_type =\n+        (!is_floating(multiple->type->id()) && !is_decimal(multiple->type->id()))\n+            ? float64()\n+            : args.inputs[0].type;\n+    bool is_casted = false;\n+    if (!multiple->type->Equals(to_type)) {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto casted_multiple,\n+          Cast(Datum(multiple), to_type, CastOptions::Safe(), ctx->exec_context()));\n+      resolved_multiple = casted_multiple.scalar();\n+      is_casted = true;\n     } else {\n-      DCHECK(is_decimal(type.id()));\n-      if (!type.Equals(*options.multiple->type)) {\n-        return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                               *options.multiple->type);\n-      }\n-      switch (options.multiple->type->id()) {\n-        case Type::DECIMAL128: {\n-          if (UnboxScalar<Decimal128Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DECIMAL256: {\n-          if (UnboxScalar<Decimal256Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        default:\n-          // This shouldn't happen\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+      resolved_multiple = multiple;\n     }\n-    return std::move(state);\n+\n+    // NOTE: The positive value check can be simplified by using a comparison kernel.\n+    bool is_negative = false;\n+    switch (resolved_multiple->type->id()) {\n\nReview Comment:\n   An interesting way of writing this would be to use `VisitScalarInline`:\r\n   ```c++\r\n   bool IsNegative(const Scalar& scalar) {\r\n     struct IsNegativeVisitor {\r\n       bool result = false;\r\n   \r\n       template <typename... Ts>\r\n       Status Visit(const NumericScalar<Ts...>& scalar) {\r\n         result = scalar.value < 0;\r\n         return Status::OK();\r\n       }\r\n       template <typename... Ts>\r\n       Status Visit(const DecimalScalar<Ts...>& scalar) {\r\n         result = scalar.value < 0;\r\n         return Status::OK();\r\n       }\r\n       Status Visit(const Scalar& scalar) {\r\n         return Status::OK();\r\n       }\r\n     };\r\n     IsNegativeVisitor visitor{};\r\n     std::ignore = VisitScalarInline(scalar, &visitor);\r\n     return visitor.result;\r\n   }\r\n   ```\n\n\n\n",
                    "created": "2022-04-14T11:25:35.032+0000",
                    "updated": "2022-04-14T11:25:35.032+0000",
                    "started": "2022-04-14T11:25:35.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756934",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/756987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850529787\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1453,20 +1447,20 @@ struct RoundToMultiple<ArrowType, kRoundMode, enable_if_decimal<ArrowType>> {\n   bool has_halfway_point;\n \n   explicit RoundToMultiple(const State& state, const DataType& out_ty)\n-      : ty(checked_cast<const ArrowType&>(out_ty)) {\n-    const auto& options = state.options;\n-    DCHECK(options.multiple);\n-    DCHECK(options.multiple->is_valid);\n-    DCHECK(options.multiple->type->Equals(out_ty));\n-    multiple = UnboxScalar<ArrowType>::Unbox(*options.multiple);\n-    half_multiple = multiple;\n-    half_multiple /= 2;\n-    neg_half_multiple = -half_multiple;\n-    has_halfway_point = multiple.low_bits() % 2 == 0;\n-  }\n+      : ty(checked_cast<const ArrowType&>(out_ty)),\n+        multiple(UnboxScalar<ArrowType>::Unbox(*state.options.multiple)),\n+        half_multiple(multiple / 2),\n+        neg_half_multiple(-half_multiple),\n+        has_halfway_point(multiple.low_bits() % 2 == 0) {}\n \n   template <typename T = ArrowType, typename CType = typename TypeTraits<T>::CType>\n   enable_if_decimal_value<CType> Call(KernelContext* ctx, CType arg, Status* st) const {\n+    // Return zeros if `multiple` option is zero.\n\nReview Comment:\n   Good catch. The general form of rounding to a multiple is `round(value / multiple) * multiple` which is not defined for `multiple = 0` (div-by-zero). Nevertheless, `mround` in Excel returns 0 when `multiple = 0`.\r\n   Now, I think we should not support a `multiple = 0` and treat it as an error.\n\n\n\n",
                    "created": "2022-04-14T14:55:19.796+0000",
                    "updated": "2022-04-14T14:55:19.796+0000",
                    "started": "2022-04-14T14:55:19.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756987",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/757001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850537621\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1200,70 +1201,71 @@ template <>\n struct RoundOptionsWrapper<RoundToMultipleOptions>\n     : public OptionsWrapper<RoundToMultipleOptions> {\n   using OptionsType = RoundToMultipleOptions;\n-  using State = RoundOptionsWrapper<OptionsType>;\n   using OptionsWrapper::OptionsWrapper;\n \n   static Result<std::unique_ptr<KernelState>> Init(KernelContext* ctx,\n                                                    const KernelInitArgs& args) {\n-    std::unique_ptr<State> state;\n-    if (auto options = static_cast<const OptionsType*>(args.options)) {\n-      state = ::arrow::internal::make_unique<State>(*options);\n-    } else {\n+    auto options = static_cast<const OptionsType*>(args.options);\n+    if (!options) {\n       return Status::Invalid(\n           \"Attempted to initialize KernelState from null FunctionOptions\");\n     }\n \n-    auto options = Get(*state);\n-    const auto& type = *args.inputs[0].type;\n-    if (!options.multiple || !options.multiple->is_valid) {\n+    const auto& multiple = options->multiple;\n+    if (!multiple || !multiple->is_valid) {\n       return Status::Invalid(\"Rounding multiple must be non-null and valid\");\n     }\n-    if (is_floating(type.id())) {\n-      switch (options.multiple->type->id()) {\n-        case Type::FLOAT: {\n-          if (UnboxScalar<FloatType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DOUBLE: {\n-          if (UnboxScalar<DoubleType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::HALF_FLOAT:\n-          return Status::NotImplemented(\"Half-float values are not supported\");\n-        default:\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+\n+    // Ensure the rounding multiple option matches the kernel's output type.\n+    // The output type is not available here so we use the following rule:\n+    // If `multiple` is neither a floating-point nor a decimal type, then\n+    // cast to float64, else cast to the kernel's input type.\n+    std::shared_ptr<Scalar> resolved_multiple;\n+    const auto& to_type =\n+        (!is_floating(multiple->type->id()) && !is_decimal(multiple->type->id()))\n+            ? float64()\n+            : args.inputs[0].type;\n+    bool is_casted = false;\n+    if (!multiple->type->Equals(to_type)) {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto casted_multiple,\n+          Cast(Datum(multiple), to_type, CastOptions::Safe(), ctx->exec_context()));\n+      resolved_multiple = casted_multiple.scalar();\n+      is_casted = true;\n     } else {\n-      DCHECK(is_decimal(type.id()));\n-      if (!type.Equals(*options.multiple->type)) {\n-        return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                               *options.multiple->type);\n-      }\n-      switch (options.multiple->type->id()) {\n-        case Type::DECIMAL128: {\n-          if (UnboxScalar<Decimal128Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DECIMAL256: {\n-          if (UnboxScalar<Decimal256Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        default:\n-          // This shouldn't happen\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+      resolved_multiple = multiple;\n     }\n-    return std::move(state);\n+\n+    // NOTE: The positive value check can be simplified by using a comparison kernel.\n+    bool is_negative = false;\n+    switch (resolved_multiple->type->id()) {\n\nReview Comment:\n   Yeah, I thought about something like this but couldn't wrap my head around on where to limit its functionality. For example, `IsNegative` could support all Arrow types so that it can be used as an idiom for such comparisons. But then, we can also have `IsPositive`, `IsZero`, or better yet get the threshold value as a parameter. But then it begins to look like the comparison kernels. So why not use the comparison kernels via `Op::Call()`? At the moment these are not visible.\n\n\n\n",
                    "created": "2022-04-14T15:03:21.779+0000",
                    "updated": "2022-04-14T15:03:21.779+0000",
                    "started": "2022-04-14T15:03:21.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757001",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/757005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850539228\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1200,70 +1201,71 @@ template <>\n struct RoundOptionsWrapper<RoundToMultipleOptions>\n     : public OptionsWrapper<RoundToMultipleOptions> {\n   using OptionsType = RoundToMultipleOptions;\n-  using State = RoundOptionsWrapper<OptionsType>;\n   using OptionsWrapper::OptionsWrapper;\n \n   static Result<std::unique_ptr<KernelState>> Init(KernelContext* ctx,\n                                                    const KernelInitArgs& args) {\n-    std::unique_ptr<State> state;\n-    if (auto options = static_cast<const OptionsType*>(args.options)) {\n-      state = ::arrow::internal::make_unique<State>(*options);\n-    } else {\n+    auto options = static_cast<const OptionsType*>(args.options);\n+    if (!options) {\n       return Status::Invalid(\n           \"Attempted to initialize KernelState from null FunctionOptions\");\n     }\n \n-    auto options = Get(*state);\n-    const auto& type = *args.inputs[0].type;\n-    if (!options.multiple || !options.multiple->is_valid) {\n+    const auto& multiple = options->multiple;\n+    if (!multiple || !multiple->is_valid) {\n       return Status::Invalid(\"Rounding multiple must be non-null and valid\");\n     }\n-    if (is_floating(type.id())) {\n-      switch (options.multiple->type->id()) {\n-        case Type::FLOAT: {\n-          if (UnboxScalar<FloatType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DOUBLE: {\n-          if (UnboxScalar<DoubleType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::HALF_FLOAT:\n-          return Status::NotImplemented(\"Half-float values are not supported\");\n-        default:\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+\n+    // Ensure the rounding multiple option matches the kernel's output type.\n+    // The output type is not available here so we use the following rule:\n+    // If `multiple` is neither a floating-point nor a decimal type, then\n+    // cast to float64, else cast to the kernel's input type.\n+    std::shared_ptr<Scalar> resolved_multiple;\n+    const auto& to_type =\n+        (!is_floating(multiple->type->id()) && !is_decimal(multiple->type->id()))\n+            ? float64()\n+            : args.inputs[0].type;\n+    bool is_casted = false;\n+    if (!multiple->type->Equals(to_type)) {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto casted_multiple,\n+          Cast(Datum(multiple), to_type, CastOptions::Safe(), ctx->exec_context()));\n+      resolved_multiple = casted_multiple.scalar();\n+      is_casted = true;\n     } else {\n-      DCHECK(is_decimal(type.id()));\n-      if (!type.Equals(*options.multiple->type)) {\n-        return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                               *options.multiple->type);\n-      }\n-      switch (options.multiple->type->id()) {\n-        case Type::DECIMAL128: {\n-          if (UnboxScalar<Decimal128Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DECIMAL256: {\n-          if (UnboxScalar<Decimal256Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        default:\n-          // This shouldn't happen\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+      resolved_multiple = multiple;\n     }\n-    return std::move(state);\n+\n+    // NOTE: The positive value check can be simplified by using a comparison kernel.\n+    bool is_negative = false;\n+    switch (resolved_multiple->type->id()) {\n\nReview Comment:\n   I think it would be great if primitive kernels (arithmetic, logical, comparisons) were organized in such a way that they can be reused throughout the codebase.\n\n\n\n",
                    "created": "2022-04-14T15:05:01.108+0000",
                    "updated": "2022-04-14T15:05:01.108+0000",
                    "started": "2022-04-14T15:05:01.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757005",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/757017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850555033\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1200,70 +1201,71 @@ template <>\n struct RoundOptionsWrapper<RoundToMultipleOptions>\n     : public OptionsWrapper<RoundToMultipleOptions> {\n   using OptionsType = RoundToMultipleOptions;\n-  using State = RoundOptionsWrapper<OptionsType>;\n   using OptionsWrapper::OptionsWrapper;\n \n   static Result<std::unique_ptr<KernelState>> Init(KernelContext* ctx,\n                                                    const KernelInitArgs& args) {\n-    std::unique_ptr<State> state;\n-    if (auto options = static_cast<const OptionsType*>(args.options)) {\n-      state = ::arrow::internal::make_unique<State>(*options);\n-    } else {\n+    auto options = static_cast<const OptionsType*>(args.options);\n+    if (!options) {\n       return Status::Invalid(\n           \"Attempted to initialize KernelState from null FunctionOptions\");\n     }\n \n-    auto options = Get(*state);\n-    const auto& type = *args.inputs[0].type;\n-    if (!options.multiple || !options.multiple->is_valid) {\n+    const auto& multiple = options->multiple;\n+    if (!multiple || !multiple->is_valid) {\n       return Status::Invalid(\"Rounding multiple must be non-null and valid\");\n     }\n-    if (is_floating(type.id())) {\n-      switch (options.multiple->type->id()) {\n-        case Type::FLOAT: {\n-          if (UnboxScalar<FloatType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DOUBLE: {\n-          if (UnboxScalar<DoubleType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::HALF_FLOAT:\n-          return Status::NotImplemented(\"Half-float values are not supported\");\n-        default:\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+\n+    // Ensure the rounding multiple option matches the kernel's output type.\n+    // The output type is not available here so we use the following rule:\n+    // If `multiple` is neither a floating-point nor a decimal type, then\n+    // cast to float64, else cast to the kernel's input type.\n+    std::shared_ptr<Scalar> resolved_multiple;\n+    const auto& to_type =\n+        (!is_floating(multiple->type->id()) && !is_decimal(multiple->type->id()))\n+            ? float64()\n+            : args.inputs[0].type;\n+    bool is_casted = false;\n+    if (!multiple->type->Equals(to_type)) {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto casted_multiple,\n+          Cast(Datum(multiple), to_type, CastOptions::Safe(), ctx->exec_context()));\n+      resolved_multiple = casted_multiple.scalar();\n+      is_casted = true;\n     } else {\n-      DCHECK(is_decimal(type.id()));\n-      if (!type.Equals(*options.multiple->type)) {\n-        return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                               *options.multiple->type);\n-      }\n-      switch (options.multiple->type->id()) {\n-        case Type::DECIMAL128: {\n-          if (UnboxScalar<Decimal128Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DECIMAL256: {\n-          if (UnboxScalar<Decimal256Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        default:\n-          // This shouldn't happen\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+      resolved_multiple = multiple;\n     }\n-    return std::move(state);\n+\n+    // NOTE: The positive value check can be simplified by using a comparison kernel.\n+    bool is_negative = false;\n+    switch (resolved_multiple->type->id()) {\n\nReview Comment:\n   BTW, I do like the visitor pattern and `xxx.value` idiom.\n\n\n\n",
                    "created": "2022-04-14T15:22:02.741+0000",
                    "updated": "2022-04-14T15:22:02.741+0000",
                    "started": "2022-04-14T15:22:02.741+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757017",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/757088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850635511\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1200,70 +1201,71 @@ template <>\n struct RoundOptionsWrapper<RoundToMultipleOptions>\n     : public OptionsWrapper<RoundToMultipleOptions> {\n   using OptionsType = RoundToMultipleOptions;\n-  using State = RoundOptionsWrapper<OptionsType>;\n   using OptionsWrapper::OptionsWrapper;\n \n   static Result<std::unique_ptr<KernelState>> Init(KernelContext* ctx,\n                                                    const KernelInitArgs& args) {\n-    std::unique_ptr<State> state;\n-    if (auto options = static_cast<const OptionsType*>(args.options)) {\n-      state = ::arrow::internal::make_unique<State>(*options);\n-    } else {\n+    auto options = static_cast<const OptionsType*>(args.options);\n+    if (!options) {\n       return Status::Invalid(\n           \"Attempted to initialize KernelState from null FunctionOptions\");\n     }\n \n-    auto options = Get(*state);\n-    const auto& type = *args.inputs[0].type;\n-    if (!options.multiple || !options.multiple->is_valid) {\n+    const auto& multiple = options->multiple;\n+    if (!multiple || !multiple->is_valid) {\n       return Status::Invalid(\"Rounding multiple must be non-null and valid\");\n     }\n-    if (is_floating(type.id())) {\n-      switch (options.multiple->type->id()) {\n-        case Type::FLOAT: {\n-          if (UnboxScalar<FloatType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DOUBLE: {\n-          if (UnboxScalar<DoubleType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::HALF_FLOAT:\n-          return Status::NotImplemented(\"Half-float values are not supported\");\n-        default:\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+\n+    // Ensure the rounding multiple option matches the kernel's output type.\n+    // The output type is not available here so we use the following rule:\n+    // If `multiple` is neither a floating-point nor a decimal type, then\n+    // cast to float64, else cast to the kernel's input type.\n+    std::shared_ptr<Scalar> resolved_multiple;\n+    const auto& to_type =\n+        (!is_floating(multiple->type->id()) && !is_decimal(multiple->type->id()))\n+            ? float64()\n+            : args.inputs[0].type;\n+    bool is_casted = false;\n+    if (!multiple->type->Equals(to_type)) {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto casted_multiple,\n+          Cast(Datum(multiple), to_type, CastOptions::Safe(), ctx->exec_context()));\n+      resolved_multiple = casted_multiple.scalar();\n+      is_casted = true;\n     } else {\n-      DCHECK(is_decimal(type.id()));\n-      if (!type.Equals(*options.multiple->type)) {\n-        return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                               *options.multiple->type);\n-      }\n-      switch (options.multiple->type->id()) {\n-        case Type::DECIMAL128: {\n-          if (UnboxScalar<Decimal128Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DECIMAL256: {\n-          if (UnboxScalar<Decimal256Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        default:\n-          // This shouldn't happen\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+      resolved_multiple = multiple;\n     }\n-    return std::move(state);\n+\n+    // NOTE: The positive value check can be simplified by using a comparison kernel.\n+    bool is_negative = false;\n+    switch (resolved_multiple->type->id()) {\n\nReview Comment:\n   I think we want to avoid calling a kernel for a simple operation on a scalar, as the kernel execution overhead is large.\n\n\n\n",
                    "created": "2022-04-14T16:58:56.149+0000",
                    "updated": "2022-04-14T16:58:56.149+0000",
                    "started": "2022-04-14T16:58:56.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757088",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/757143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r850702012\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1200,70 +1201,71 @@ template <>\n struct RoundOptionsWrapper<RoundToMultipleOptions>\n     : public OptionsWrapper<RoundToMultipleOptions> {\n   using OptionsType = RoundToMultipleOptions;\n-  using State = RoundOptionsWrapper<OptionsType>;\n   using OptionsWrapper::OptionsWrapper;\n \n   static Result<std::unique_ptr<KernelState>> Init(KernelContext* ctx,\n                                                    const KernelInitArgs& args) {\n-    std::unique_ptr<State> state;\n-    if (auto options = static_cast<const OptionsType*>(args.options)) {\n-      state = ::arrow::internal::make_unique<State>(*options);\n-    } else {\n+    auto options = static_cast<const OptionsType*>(args.options);\n+    if (!options) {\n       return Status::Invalid(\n           \"Attempted to initialize KernelState from null FunctionOptions\");\n     }\n \n-    auto options = Get(*state);\n-    const auto& type = *args.inputs[0].type;\n-    if (!options.multiple || !options.multiple->is_valid) {\n+    const auto& multiple = options->multiple;\n+    if (!multiple || !multiple->is_valid) {\n       return Status::Invalid(\"Rounding multiple must be non-null and valid\");\n     }\n-    if (is_floating(type.id())) {\n-      switch (options.multiple->type->id()) {\n-        case Type::FLOAT: {\n-          if (UnboxScalar<FloatType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DOUBLE: {\n-          if (UnboxScalar<DoubleType>::Unbox(*options.multiple) < 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::HALF_FLOAT:\n-          return Status::NotImplemented(\"Half-float values are not supported\");\n-        default:\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+\n+    // Ensure the rounding multiple option matches the kernel's output type.\n+    // The output type is not available here so we use the following rule:\n+    // If `multiple` is neither a floating-point nor a decimal type, then\n+    // cast to float64, else cast to the kernel's input type.\n+    std::shared_ptr<Scalar> resolved_multiple;\n+    const auto& to_type =\n+        (!is_floating(multiple->type->id()) && !is_decimal(multiple->type->id()))\n+            ? float64()\n+            : args.inputs[0].type;\n+    bool is_casted = false;\n+    if (!multiple->type->Equals(to_type)) {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto casted_multiple,\n+          Cast(Datum(multiple), to_type, CastOptions::Safe(), ctx->exec_context()));\n+      resolved_multiple = casted_multiple.scalar();\n+      is_casted = true;\n     } else {\n-      DCHECK(is_decimal(type.id()));\n-      if (!type.Equals(*options.multiple->type)) {\n-        return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                               *options.multiple->type);\n-      }\n-      switch (options.multiple->type->id()) {\n-        case Type::DECIMAL128: {\n-          if (UnboxScalar<Decimal128Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        case Type::DECIMAL256: {\n-          if (UnboxScalar<Decimal256Type>::Unbox(*options.multiple) <= 0) {\n-            return Status::Invalid(\"Rounding multiple must be positive\");\n-          }\n-          break;\n-        }\n-        default:\n-          // This shouldn't happen\n-          return Status::Invalid(\"Rounding multiple must be a \", type, \" scalar, not \",\n-                                 *options.multiple->type);\n-      }\n+      resolved_multiple = multiple;\n     }\n-    return std::move(state);\n+\n+    // NOTE: The positive value check can be simplified by using a comparison kernel.\n+    bool is_negative = false;\n+    switch (resolved_multiple->type->id()) {\n\nReview Comment:\n   Ok, I am simply trying to reuse code when possible.\r\n   I added a `IsPositive` visitor, but had to move the struct outside of the function (`templates are not allowed in local classes`).\n\n\n\n",
                    "created": "2022-04-14T18:28:45.773+0000",
                    "updated": "2022-04-14T18:28:45.773+0000",
                    "started": "2022-04-14T18:28:45.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757143",
                    "issueId": "13434448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/worklog/757824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12660:\nURL: https://github.com/apache/arrow/pull/12660#discussion_r852039451\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1397,22 +1396,8 @@ struct RoundToMultiple {\n \n   CType multiple;\n \n-  explicit RoundToMultiple(const State& state, const DataType& out_ty) {\n-    const auto& options = state.options;\n-    DCHECK(options.multiple);\n-    DCHECK(options.multiple->is_valid);\n-    DCHECK(is_floating(options.multiple->type->id()));\n-    switch (options.multiple->type->id()) {\n-      case Type::FLOAT:\n-        multiple = static_cast<CType>(UnboxScalar<FloatType>::Unbox(*options.multiple));\n-        break;\n-      case Type::DOUBLE:\n-        multiple = static_cast<CType>(UnboxScalar<DoubleType>::Unbox(*options.multiple));\n-        break;\n-      default:\n-        DCHECK(false);\n-    }\n-  }\n+  explicit RoundToMultiple(const State& state, const DataType& out_ty)\n+      : multiple(UnboxScalar<ArrowType>::Unbox(*state.options.multiple)) {}\n\nReview Comment:\n   Can we still keep the DCHECKs in the constructor body?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc:\n##########\n@@ -2004,21 +2004,19 @@ TEST_F(TestUnaryArithmeticDecimal, RoundToMultipleTowardsInfinity) {\n     set_multiple(ty, 1);\n     CheckScalar(func, {values}, values, &options);\n     set_multiple(ty, 0);\n-    CheckRaises(func, {ArrayFromJSON(ty, R\"([\"99.99\"])\")},\n-                \"Rounding multiple must be positive\", &options);\n+    CheckRaises(func, {values}, \"Rounding multiple must be positive\", &options);\n+    options.multiple =\n+        std::make_shared<Decimal128Scalar>(Decimal128(0), decimal128(4, 2));\n+    CheckRaises(func, {values}, \"Rounding multiple must be positive\", &options);\n     set_multiple(ty, -10);\n     CheckRaises(func, {ArrayFromJSON(ty, R\"([\"99.99\"])\")},\n                 \"Rounding multiple must be positive\", &options);\n     set_multiple(ty, 100);\n     CheckRaises(func, {ArrayFromJSON(ty, R\"([\"99.99\"])\")},\n                 \"Rounded value 100.00 does not fit in precision\", &options);\n     options.multiple = std::make_shared<DoubleScalar>(1.0);\n-    CheckRaises(func, {ArrayFromJSON(ty, R\"([\"99.99\"])\")}, \"scalar, not double\",\n-                &options);\n-    options.multiple =\n-        std::make_shared<Decimal128Scalar>(Decimal128(0), decimal128(3, 0));\n-    CheckRaises(func, {ArrayFromJSON(ty, R\"([\"99.99\"])\")}, \"scalar, not decimal128(3, 0)\",\n-                &options);\n+    CheckRaises(func, {ArrayFromJSON(ty, R\"([\"99.99\"])\")},\n+                \"Rounded value 100.00 does not fit in precision\", &options);\n\nReview Comment:\n   It seems this is the only place where casting the multiple is tested? Can you add a successful rounding test somewhere as well?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_arithmetic.cc:\n##########\n@@ -1453,17 +1438,11 @@ struct RoundToMultiple<ArrowType, kRoundMode, enable_if_decimal<ArrowType>> {\n   bool has_halfway_point;\n \n   explicit RoundToMultiple(const State& state, const DataType& out_ty)\n-      : ty(checked_cast<const ArrowType&>(out_ty)) {\n-    const auto& options = state.options;\n-    DCHECK(options.multiple);\n-    DCHECK(options.multiple->is_valid);\n-    DCHECK(options.multiple->type->Equals(out_ty));\n-    multiple = UnboxScalar<ArrowType>::Unbox(*options.multiple);\n-    half_multiple = multiple;\n-    half_multiple /= 2;\n-    neg_half_multiple = -half_multiple;\n-    has_halfway_point = multiple.low_bits() % 2 == 0;\n-  }\n+      : ty(checked_cast<const ArrowType&>(out_ty)),\n+        multiple(UnboxScalar<ArrowType>::Unbox(*state.options.multiple)),\n+        half_multiple(multiple / 2),\n+        neg_half_multiple(-half_multiple),\n+        has_halfway_point(multiple.low_bits() % 2 == 0) {}\n\nReview Comment:\n   Here as well, keep the DCHECKs?\n\n\n\n",
                    "created": "2022-04-18T10:54:25.909+0000",
                    "updated": "2022-04-18T10:54:25.909+0000",
                    "started": "2022-04-18T10:54:25.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757824",
                    "issueId": "13434448"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@295cb404[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a05a259[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@793c5595[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3e6c3781[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27915910[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@739407dd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@681f74c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3710867a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ae40051[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@491d563f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ab7ba97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6927d4ed[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 18 16:03:27 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-18T16:03:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15965/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-03-17T21:29:50.000+0000",
        "updated": "2022-04-18T20:11:16.000+0000",
        "timeoriginalestimate": null,
        "description": "[RoundToMultipleOptions|https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/api_scalar.h#L126] contains a constructor with a {{shared_ptr<Scalar>}} type but the [Python binding|https://github.com/apache/arrow/blob/master/python/pyarrow/includes/libarrow.pxd#L1959] is missing this constructor variant. This currently prevents using {{Decimal}} types in pyarrow.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python] Add Scalar constructor of RoundToMultipleOptions to Python",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434448/comment/17523771",
                    "id": "17523771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12660\n[https://github.com/apache/arrow/pull/12660]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-04-18T16:03:27.756+0000",
                    "updated": "2022-04-18T16:03:27.756+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z10lf4:",
        "customfield_12314139": null
    }
}