{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13396983",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983",
    "key": "ARROW-13737",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12621700",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621700",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13392633",
                    "key": "ARROW-13501",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392633",
                    "fields": {
                        "summary": "[R] Bindings for count aggregation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13737/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994\n\n\n   Also fixes a major bug in grouped var/std, where multiple batches fed to the same state instance would improperly update state.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-24T22:06:00.853+0000",
                    "updated": "2021-08-24T22:06:00.853+0000",
                    "started": "2021-08-24T22:06:00.852+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641354",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#issuecomment-905008327\n\n\n   https://issues.apache.org/jira/browse/ARROW-13737\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-24T22:06:14.581+0000",
                    "updated": "2021-08-24T22:06:14.581+0000",
                    "started": "2021-08-24T22:06:14.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641355",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695764540\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate_test.cc\n##########\n@@ -206,6 +206,66 @@ Result<Datum> GroupByUsingExecPlan(const std::vector<Datum>& arguments,\n                            plan->sources()[0]->outputs()[0]->output_schema()->fields());\n }\n \n+Result<Datum> GroupByUsingExecPlan(const BatchesWithSchema& input,\n+                                   const std::vector<std::string>& key_names,\n+                                   const std::vector<std::string>& arg_names,\n+                                   const std::vector<internal::Aggregate>& aggregates,\n+                                   bool use_threads, ExecContext* ctx) {\n+  std::vector<FieldRef> keys(key_names.size());\n+  std::vector<FieldRef> targets(aggregates.size());\n+  std::vector<std::string> names(aggregates.size());\n+  for (size_t i = 0; i < aggregates.size(); ++i) {\n+    names[i] = aggregates[i].function;\n+    targets[i] = FieldRef(arg_names[i]);\n+  }\n+  for (size_t i = 0; i < key_names.size(); ++i) {\n+    keys[i] = FieldRef(key_names[i]);\n+  }\n+\n+  ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(ctx));\n\nReview comment:\n       It looks like most of this could be factored out to reuse in both `GroupByUsingExecPlan` overloads.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1547,13 +1641,21 @@ struct GroupedTDigestImpl : public GroupedAggregator {\n \n   Status Consume(const ExecBatch& batch) override {\n     auto g = batch[1].array()->GetValues<uint32_t>(1);\n-    VisitArrayDataInline<Type>(\n-        *batch[0].array(),\n-        [&](typename TypeTraits<Type>::CType value) {\n-          this->tdigests_[*g].NanAdd(value);\n-          ++g;\n-        },\n-        [&] { ++g; });\n+    if (batch[0].is_array()) {\n+      VisitArrayDataInline<Type>(\n+          *batch[0].array(),\n+          [&](typename TypeTraits<Type>::CType value) {\n+            this->tdigests_[*g].NanAdd(value);\n+            ++g;\n+          },\n+          [&] { ++g; });\n+    } else if (batch[0].scalar()->is_valid) {\n+      typename TypeTraits<Type>::CType value =\n+          UnboxScalar<Type>::Unbox(*batch[0].scalar());\n+      for (int64_t i = 0; i < batch.length; i++) {\n+        this->tdigests_[*g++].NanAdd(value);\n+      }\n+    }\n\nReview comment:\n       May be nicer if written as:\r\n   ```c++\r\n     auto consume_value = [&](uint32_t g, CType val) {\r\n       this->tdigests_[g].NanAdd(val);\r\n     };\r\n     VisitGroupedNonNullValues<Type>(batch, std::move(consume_value));\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1833,30 +1951,41 @@ struct GroupedBooleanAggregator : public GroupedAggregator {\n     uint8_t* seen = seen_.mutable_data();\n     uint8_t* no_nulls = no_nulls_.mutable_data();\n     int64_t* counts = counts_.mutable_data();\n-    const auto& input = *batch[0].array();\n     auto g = batch[1].array()->GetValues<uint32_t>(1);\n \n-    if (input.MayHaveNulls()) {\n-      const uint8_t* bitmap = input.buffers[1]->data();\n-      arrow::internal::VisitBitBlocksVoid(\n-          input.buffers[0], input.offset, input.length,\n-          [&](int64_t position) {\n-            counts[*g]++;\n-            Impl::UpdateGroupWith(seen, *g, BitUtil::GetBit(bitmap, position));\n-            g++;\n-          },\n-          [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+    if (batch[0].is_array()) {\n+      const auto& input = *batch[0].array();\n+      if (input.MayHaveNulls()) {\n+        const uint8_t* bitmap = input.buffers[1]->data();\n+        arrow::internal::VisitBitBlocksVoid(\n+            input.buffers[0], input.offset, input.length,\n+            [&](int64_t position) {\n+              counts[*g]++;\n+              Impl::UpdateGroupWith(seen, *g, BitUtil::GetBit(bitmap, position));\n+              g++;\n+            },\n+            [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+      } else {\n+        arrow::internal::VisitBitBlocksVoid(\n+            input.buffers[1], input.offset, input.length,\n+            [&](int64_t) {\n+              Impl::UpdateGroupWith(seen, *g, true);\n+              counts[*g++]++;\n+            },\n+            [&]() {\n+              Impl::UpdateGroupWith(seen, *g, false);\n+              counts[*g++]++;\n+            });\n+      }\n     } else {\n-      arrow::internal::VisitBitBlocksVoid(\n-          input.buffers[1], input.offset, input.length,\n-          [&](int64_t) {\n-            Impl::UpdateGroupWith(seen, *g, true);\n-            counts[*g++]++;\n-          },\n-          [&]() {\n-            Impl::UpdateGroupWith(seen, *g, false);\n-            counts[*g++]++;\n-          });\n+      const auto& input = *batch[0].scalar();\n+      if (input.is_valid) {\n+        const bool value = UnboxScalar<BooleanType>::Unbox(input);\n+        for (int64_t i = 0; i < batch.length; i++) {\n+          Impl::UpdateGroupWith(seen, *g, value);\n+          counts[*g++]++;\n+        }\n+      }\n\nReview comment:\n       Shouldn't the non-valid case be handled as well? e.g. a loop doing `BitUtil::SetBitTo(no_nulls, *g++, false)`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1700,14 +1802,30 @@ struct GroupedMinMaxImpl : public GroupedAggregator {\n     auto raw_mins = reinterpret_cast<CType*>(mins_.mutable_data());\n     auto raw_maxes = reinterpret_cast<CType*>(maxes_.mutable_data());\n \n-    VisitArrayValuesInline<Type>(\n-        *batch[0].array(),\n-        [&](CType val) {\n+    if (batch[0].is_array()) {\n+      VisitArrayValuesInline<Type>(\n+          *batch[0].array(),\n+          [&](CType val) {\n+            raw_maxes[*g] = std::max(raw_maxes[*g], val);\n+            raw_mins[*g] = std::min(raw_mins[*g], val);\n+            BitUtil::SetBit(has_values_.mutable_data(), *g++);\n+          },\n+          [&] { BitUtil::SetBit(has_nulls_.mutable_data(), *g++); });\n+    } else {\n+      const auto& input = *batch[0].scalar();\n+      if (input.is_valid) {\n+        const auto val = UnboxScalar<Type>::Unbox(input);\n+        for (int64_t i = 0; i < batch.length; i++) {\n           raw_maxes[*g] = std::max(raw_maxes[*g], val);\n           raw_mins[*g] = std::min(raw_mins[*g], val);\n           BitUtil::SetBit(has_values_.mutable_data(), *g++);\n-        },\n-        [&] { BitUtil::SetBit(has_nulls_.mutable_data(), *g++); });\n+        }\n+      } else {\n+        for (int64_t i = 0; i < batch.length; i++) {\n+          BitUtil::SetBit(has_nulls_.mutable_data(), *g++);\n+        }\n+      }\n+    }\n\nReview comment:\n       So it seems it would be nicer to write this as:\r\n   ```c++\r\n     auto consume_value = [&](uint32_t g, CType val) {\r\n       raw_maxes[g] = std::max(raw_maxes[g], val);\r\n       raw_mins[g] = std::min(raw_mins[g], val);\r\n       BitUtil::SetBit(has_values_.mutable_data(), g);\r\n     };\r\n     auto consume_null = [&](uint32_t g) {\r\n       BitUtil::SetBit(has_nulls_.mutable_data(), g);\r\n     };\r\n     VisitGroupedValues<Type>(batch, std::move(consume_value), std::move(consume_nulls));\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1211,6 +1249,22 @@ struct GroupedMeanImpl : public GroupedReducingAggregator<Type, GroupedMeanImpl<\n     return Status::OK();\n   }\n \n+  static Status Consume(const Scalar& value, const int64_t count, c_type* reduced,\n+                        int64_t* counts, uint8_t* no_nulls, const uint32_t* g) {\n+    if (value.is_valid) {\n+      const auto v = to_unsigned(static_cast<c_type>(UnboxScalar<Type>::Unbox(value)));\n+      for (int i = 0; i < count; i++) {\n+        reduced[*g] = static_cast<c_type>(to_unsigned(reduced[*g]) + v);\n\nReview comment:\n       Here as well, it would be nice not to have the `static_cast`/`to_unsigned` dance pasted everywhere.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1138,6 +1160,22 @@ struct GroupedProductImpl final\n     return Status::OK();\n   }\n \n+  static Status Consume(const Scalar& value, const int64_t count, c_type* reduced,\n+                        int64_t* counts, uint8_t* no_nulls, const uint32_t* g) {\n+    if (value.is_valid) {\n+      const auto v = to_unsigned(static_cast<c_type>(UnboxScalar<Type>::Unbox(value)));\n+      for (int i = 0; i < count; i++) {\n+        reduced[*g] = static_cast<c_type>(to_unsigned(reduced[*g]) * v);\n\nReview comment:\n       Why doesn't this use `MultiplyTraits<AccType>::Multiply` instead? It seems like copy/pasting is putting us at risk of latent bugs here. Perhaps you can factor out the raw computation routines?\r\n   ```c++\r\n   using InputCType = typename TypeTraits<Type>::CType;\r\n   \r\n   AccType Reduce(const DataType& type, c_type u, InputCType v) {\r\n     return MultiplyTraits<AccType>::Multiply(type, u, static_cast<c_type>(v));\r\n   }\r\n   \r\n   AccType Reduce(const DataType& type, c_type u, c_type v) {\r\n     return MultiplyTraits<AccType>::Multiply(type, u, v);\r\n   }\r\n   ```\r\n   \r\n   Same for summing:\r\n   ```c++\r\n   using InputCType = typename TypeTraits<Type>::CType;\r\n   \r\n   AccType Reduce(const DataType& type, c_type u, InputCType v) {\r\n     return static_cast<c_type>(to_unsigned(u) + to_unsigned(static_cast<c_type>(v)));\r\n   }\r\n   \r\n   AccType Reduce(const DataType& type, c_type u, c_type v) {\r\n     return static_cast<c_type>(to_unsigned(u) + to_unsigned(v));\r\n   }\r\n   ```\r\n   \r\n   Then you may even reconcile the Sum and Product implementations further.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate_test.cc\n##########\n@@ -1032,6 +1169,55 @@ TEST(GroupBy, TDigest) {\n       /*verbose=*/true);\n }\n \n+TEST(GroupBy, StddevVarianceTDigestScalar) {\n+  BatchesWithSchema input;\n+  input.batches = {\n+      ExecBatchFromJSON(\n+          {ValueDescr::Scalar(int32()), ValueDescr::Scalar(float32()), int64()},\n+          \"[[1, 1.0, 1], [1, 1.0, 1], [1, 1.0, 2], [1, 1.0, 3]]\"),\n+      ExecBatchFromJSON(\n+          {ValueDescr::Scalar(int32()), ValueDescr::Scalar(float32()), int64()},\n+          \"[[null, null, 1], [null, null, 1], [null, null, 2], [null, null, 3]]\"),\n+      ExecBatchFromJSON({int32(), float32(), int64()},\n+                        \"[[2, 2.0, 1], [3, 3.0, 2], [4, 4.0, 3]]\"),\n+  };\n+  input.schema = schema(\n+      {field(\"argument\", int32()), field(\"argument1\", float32()), field(\"key\", int64())});\n+\n+  for (bool use_threads : {false}) {\n+    SCOPED_TRACE(use_threads ? \"parallel/merged\" : \"serial\");\n+    ASSERT_OK_AND_ASSIGN(Datum actual,\n+                         GroupByUsingExecPlan(input, {\"key\"},\n+                                              {\"argument\", \"argument\", \"argument\",\n+                                               \"argument1\", \"argument1\", \"argument1\"},\n+                                              {\n+                                                  {\"hash_stddev\", nullptr},\n+                                                  {\"hash_variance\", nullptr},\n+                                                  {\"hash_tdigest\", nullptr},\n+                                                  {\"hash_stddev\", nullptr},\n+                                                  {\"hash_variance\", nullptr},\n+                                                  {\"hash_tdigest\", nullptr},\n+                                              },\n+                                              use_threads, default_exec_context()));\n+    Datum expected =\n+        ArrayFromJSON(struct_({\n+                          field(\"hash_stddev\", float64()),\n+                          field(\"hash_variance\", float64()),\n+                          field(\"hash_tdigest\", fixed_size_list(float64(), 1)),\n+                          field(\"hash_stddev\", float64()),\n+                          field(\"hash_variance\", float64()),\n+                          field(\"hash_tdigest\", fixed_size_list(float64(), 1)),\n+                          field(\"key\", int64()),\n+                      }),\n+                      R\"([\n+         [0.4714045, 0.222222, [1.0], 0.4714045, 0.222222, [1.0], 1],\n+         [1.0,       1.0,      [1.0], 1.0,       1.0,      [1.0], 2],\n+         [1.5,       2.25,     [1.0], 1.5,       2.25,     [1.0], 3]\n\nReview comment:\n       tdigest is supposed to compute the median? I would expect 1.0, 2.0 and 2.5 respectively.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:55:18.026+0000",
                    "updated": "2021-08-25T14:55:18.026+0000",
                    "started": "2021-08-25T14:55:18.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641728",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695832254\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1700,14 +1802,30 @@ struct GroupedMinMaxImpl : public GroupedAggregator {\n     auto raw_mins = reinterpret_cast<CType*>(mins_.mutable_data());\n     auto raw_maxes = reinterpret_cast<CType*>(maxes_.mutable_data());\n \n-    VisitArrayValuesInline<Type>(\n-        *batch[0].array(),\n-        [&](CType val) {\n+    if (batch[0].is_array()) {\n+      VisitArrayValuesInline<Type>(\n+          *batch[0].array(),\n+          [&](CType val) {\n+            raw_maxes[*g] = std::max(raw_maxes[*g], val);\n+            raw_mins[*g] = std::min(raw_mins[*g], val);\n+            BitUtil::SetBit(has_values_.mutable_data(), *g++);\n+          },\n+          [&] { BitUtil::SetBit(has_nulls_.mutable_data(), *g++); });\n+    } else {\n+      const auto& input = *batch[0].scalar();\n+      if (input.is_valid) {\n+        const auto val = UnboxScalar<Type>::Unbox(input);\n+        for (int64_t i = 0; i < batch.length; i++) {\n           raw_maxes[*g] = std::max(raw_maxes[*g], val);\n           raw_mins[*g] = std::min(raw_mins[*g], val);\n           BitUtil::SetBit(has_values_.mutable_data(), *g++);\n-        },\n-        [&] { BitUtil::SetBit(has_nulls_.mutable_data(), *g++); });\n+        }\n+      } else {\n+        for (int64_t i = 0; i < batch.length; i++) {\n+          BitUtil::SetBit(has_nulls_.mutable_data(), *g++);\n+        }\n+      }\n+    }\n\nReview comment:\n       So it seems it would be nicer to write this as:\r\n   ```c++\r\n     auto consume_value = [&](uint32_t g, CType val) {\r\n       raw_maxes[g] = std::max(raw_maxes[g], val);\r\n       raw_mins[g] = std::min(raw_mins[g], val);\r\n       BitUtil::SetBit(has_values_.mutable_data(), g);\r\n     };\r\n     auto consume_null = [&](uint32_t g) {\r\n       BitUtil::SetBit(has_nulls_.mutable_data(), g);\r\n     };\r\n     VisitGroupedValues<Type>(batch, std::move(consume_value), std::move(consume_null));\r\n   ```\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:56:18.536+0000",
                    "updated": "2021-08-25T14:56:18.536+0000",
                    "started": "2021-08-25T14:56:18.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641729",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695853274\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate_test.cc\n##########\n@@ -1032,6 +1169,55 @@ TEST(GroupBy, TDigest) {\n       /*verbose=*/true);\n }\n \n+TEST(GroupBy, StddevVarianceTDigestScalar) {\n+  BatchesWithSchema input;\n+  input.batches = {\n+      ExecBatchFromJSON(\n+          {ValueDescr::Scalar(int32()), ValueDescr::Scalar(float32()), int64()},\n+          \"[[1, 1.0, 1], [1, 1.0, 1], [1, 1.0, 2], [1, 1.0, 3]]\"),\n+      ExecBatchFromJSON(\n+          {ValueDescr::Scalar(int32()), ValueDescr::Scalar(float32()), int64()},\n+          \"[[null, null, 1], [null, null, 1], [null, null, 2], [null, null, 3]]\"),\n+      ExecBatchFromJSON({int32(), float32(), int64()},\n+                        \"[[2, 2.0, 1], [3, 3.0, 2], [4, 4.0, 3]]\"),\n+  };\n+  input.schema = schema(\n+      {field(\"argument\", int32()), field(\"argument1\", float32()), field(\"key\", int64())});\n+\n+  for (bool use_threads : {false}) {\n+    SCOPED_TRACE(use_threads ? \"parallel/merged\" : \"serial\");\n+    ASSERT_OK_AND_ASSIGN(Datum actual,\n+                         GroupByUsingExecPlan(input, {\"key\"},\n+                                              {\"argument\", \"argument\", \"argument\",\n+                                               \"argument1\", \"argument1\", \"argument1\"},\n+                                              {\n+                                                  {\"hash_stddev\", nullptr},\n+                                                  {\"hash_variance\", nullptr},\n+                                                  {\"hash_tdigest\", nullptr},\n+                                                  {\"hash_stddev\", nullptr},\n+                                                  {\"hash_variance\", nullptr},\n+                                                  {\"hash_tdigest\", nullptr},\n+                                              },\n+                                              use_threads, default_exec_context()));\n+    Datum expected =\n+        ArrayFromJSON(struct_({\n+                          field(\"hash_stddev\", float64()),\n+                          field(\"hash_variance\", float64()),\n+                          field(\"hash_tdigest\", fixed_size_list(float64(), 1)),\n+                          field(\"hash_stddev\", float64()),\n+                          field(\"hash_variance\", float64()),\n+                          field(\"hash_tdigest\", fixed_size_list(float64(), 1)),\n+                          field(\"key\", int64()),\n+                      }),\n+                      R\"([\n+         [0.4714045, 0.222222, [1.0], 0.4714045, 0.222222, [1.0], 1],\n+         [1.0,       1.0,      [1.0], 1.0,       1.0,      [1.0], 2],\n+         [1.5,       2.25,     [1.0], 1.5,       2.25,     [1.0], 3]\n\nReview comment:\n       Oddly enough, that is what our tdigest implementation gives, even in the non-grouped case.\r\n   \r\n   ```\r\n   >>> import pyarrow as pa\r\n   >>> import pyarrow.compute as pc\r\n   >>> pa.__version__\r\n   '5.0.0'\r\n   >>> pc.tdigest([1, 1, 2])\r\n   <pyarrow.lib.DoubleArray object at 0x7f916b5bee80>\r\n   [\r\n     1\r\n   ]\r\n   >>> pc.tdigest([1, 4])\r\n   <pyarrow.lib.DoubleArray object at 0x7f916b5d90a0>\r\n   [\r\n     1\r\n   ]\r\n   >>> pc.tdigest([1, 3])\r\n   <pyarrow.lib.DoubleArray object at 0x7f916b5bee80>\r\n   [\r\n     1\r\n   ]\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1138,6 +1160,22 @@ struct GroupedProductImpl final\n     return Status::OK();\n   }\n \n+  static Status Consume(const Scalar& value, const int64_t count, c_type* reduced,\n+                        int64_t* counts, uint8_t* no_nulls, const uint32_t* g) {\n+    if (value.is_valid) {\n+      const auto v = to_unsigned(static_cast<c_type>(UnboxScalar<Type>::Unbox(value)));\n+      for (int i = 0; i < count; i++) {\n+        reduced[*g] = static_cast<c_type>(to_unsigned(reduced[*g]) * v);\n\nReview comment:\n       Yes, this is a bad merge on my part - I will fix.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T15:13:20.429+0000",
                    "updated": "2021-08-25T15:13:20.429+0000",
                    "started": "2021-08-25T15:13:20.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641739",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695892300\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1700,14 +1802,30 @@ struct GroupedMinMaxImpl : public GroupedAggregator {\n     auto raw_mins = reinterpret_cast<CType*>(mins_.mutable_data());\n     auto raw_maxes = reinterpret_cast<CType*>(maxes_.mutable_data());\n \n-    VisitArrayValuesInline<Type>(\n-        *batch[0].array(),\n-        [&](CType val) {\n+    if (batch[0].is_array()) {\n+      VisitArrayValuesInline<Type>(\n+          *batch[0].array(),\n+          [&](CType val) {\n+            raw_maxes[*g] = std::max(raw_maxes[*g], val);\n+            raw_mins[*g] = std::min(raw_mins[*g], val);\n+            BitUtil::SetBit(has_values_.mutable_data(), *g++);\n+          },\n+          [&] { BitUtil::SetBit(has_nulls_.mutable_data(), *g++); });\n+    } else {\n+      const auto& input = *batch[0].scalar();\n+      if (input.is_valid) {\n+        const auto val = UnboxScalar<Type>::Unbox(input);\n+        for (int64_t i = 0; i < batch.length; i++) {\n           raw_maxes[*g] = std::max(raw_maxes[*g], val);\n           raw_mins[*g] = std::min(raw_mins[*g], val);\n           BitUtil::SetBit(has_values_.mutable_data(), *g++);\n-        },\n-        [&] { BitUtil::SetBit(has_nulls_.mutable_data(), *g++); });\n+        }\n+      } else {\n+        for (int64_t i = 0; i < batch.length; i++) {\n+          BitUtil::SetBit(has_nulls_.mutable_data(), *g++);\n+        }\n+      }\n+    }\n\nReview comment:\n       You gave me hope that a helper like this already existed :( But that is a good idea, it would clean things up quite a bit.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T15:56:48.724+0000",
                    "updated": "2021-08-25T15:56:48.724+0000",
                    "started": "2021-08-25T15:56:48.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641767",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "felipeblazing commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695975190\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -933,31 +967,36 @@ struct GroupedReducingAggregator : public GroupedAggregator {\n   }\n \n   Status Consume(const ExecBatch& batch) override {\n-    c_type* reduced = reduced_.mutable_data();\n+    CType* reduced = reduced_.mutable_data();\n     int64_t* counts = counts_.mutable_data();\n     uint8_t* no_nulls = no_nulls_.mutable_data();\n \n-    auto g = batch[1].array()->GetValues<uint32_t>(1);\n-\n-    return Impl::Consume(*batch[0].array(), reduced, counts, no_nulls, g);\n+    VisitGroupedValues<Type>(\n+        batch,\n+        [&](uint32_t g, InputCType value) {\n\nReview comment:\n       can we also capture explicitly here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1833,30 +1853,45 @@ struct GroupedBooleanAggregator : public GroupedAggregator {\n     uint8_t* seen = seen_.mutable_data();\n     uint8_t* no_nulls = no_nulls_.mutable_data();\n     int64_t* counts = counts_.mutable_data();\n-    const auto& input = *batch[0].array();\n     auto g = batch[1].array()->GetValues<uint32_t>(1);\n \n-    if (input.MayHaveNulls()) {\n-      const uint8_t* bitmap = input.buffers[1]->data();\n-      arrow::internal::VisitBitBlocksVoid(\n-          input.buffers[0], input.offset, input.length,\n-          [&](int64_t position) {\n-            counts[*g]++;\n-            Impl::UpdateGroupWith(seen, *g, BitUtil::GetBit(bitmap, position));\n-            g++;\n-          },\n-          [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+    if (batch[0].is_array()) {\n+      const auto& input = *batch[0].array();\n+      if (input.MayHaveNulls()) {\n+        const uint8_t* bitmap = input.buffers[1]->data();\n+        arrow::internal::VisitBitBlocksVoid(\n+            input.buffers[0], input.offset, input.length,\n+            [&](int64_t position) {\n+              counts[*g]++;\n+              Impl::UpdateGroupWith(seen, *g, BitUtil::GetBit(bitmap, position));\n+              g++;\n+            },\n+            [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+      } else {\n+        arrow::internal::VisitBitBlocksVoid(\n+            input.buffers[1], input.offset, input.length,\n+            [&](int64_t) {\n+              Impl::UpdateGroupWith(seen, *g, true);\n\nReview comment:\n       Just a question but could you explain briefly what seen's purpose is here? \n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -824,6 +824,36 @@ Status AddHashAggKernels(\n   return Status::OK();\n }\n \n+template <typename Type, typename ConsumeValue, typename ConsumeNull>\n+void VisitGroupedValues(const ExecBatch& batch, ConsumeValue&& valid_func,\n+                        ConsumeNull&& null_func) {\n+  auto g = batch[1].array()->GetValues<uint32_t>(1);\n+  if (batch[0].is_array()) {\n+    VisitArrayValuesInline<Type>(\n+        *batch[0].array(),\n+        [&](typename TypeTraits<Type>::CType val) { valid_func(*g++, val); },\n\nReview comment:\n       Is there a reason we don't want to be explicit in our capture here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T17:59:09.749+0000",
                    "updated": "2021-08-25T17:59:09.749+0000",
                    "started": "2021-08-25T17:59:09.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641872",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695992451\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -824,6 +824,36 @@ Status AddHashAggKernels(\n   return Status::OK();\n }\n \n+template <typename Type, typename ConsumeValue, typename ConsumeNull>\n+void VisitGroupedValues(const ExecBatch& batch, ConsumeValue&& valid_func,\n+                        ConsumeNull&& null_func) {\n+  auto g = batch[1].array()->GetValues<uint32_t>(1);\n+  if (batch[0].is_array()) {\n+    VisitArrayValuesInline<Type>(\n+        *batch[0].array(),\n+        [&](typename TypeTraits<Type>::CType val) { valid_func(*g++, val); },\n\nReview comment:\n       We may capture explicitly when lifetime is at stake, e.g. an async code where it's important to delineate what exactly needs to survive past the enclosing scope. Here, the callable is just executed synchronously, listing every capture explicitly is more of a nuisance (both for typing and readability-wise).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T18:00:47.920+0000",
                    "updated": "2021-08-25T18:00:47.920+0000",
                    "started": "2021-08-25T18:00:47.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641873",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695992451\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -824,6 +824,36 @@ Status AddHashAggKernels(\n   return Status::OK();\n }\n \n+template <typename Type, typename ConsumeValue, typename ConsumeNull>\n+void VisitGroupedValues(const ExecBatch& batch, ConsumeValue&& valid_func,\n+                        ConsumeNull&& null_func) {\n+  auto g = batch[1].array()->GetValues<uint32_t>(1);\n+  if (batch[0].is_array()) {\n+    VisitArrayValuesInline<Type>(\n+        *batch[0].array(),\n+        [&](typename TypeTraits<Type>::CType val) { valid_func(*g++, val); },\n\nReview comment:\n       We may capture explicitly when lifetime is at stake, e.g. in async code where it's important to delineate what exactly needs to survive past the enclosing scope. Here, the callable is executed synchronously, listing every capture explicitly is more of a nuisance (both for typing and readability-wise).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T18:01:11.058+0000",
                    "updated": "2021-08-25T18:01:11.058+0000",
                    "started": "2021-08-25T18:01:11.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641874",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/641879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r695998614\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1833,30 +1853,45 @@ struct GroupedBooleanAggregator : public GroupedAggregator {\n     uint8_t* seen = seen_.mutable_data();\n     uint8_t* no_nulls = no_nulls_.mutable_data();\n     int64_t* counts = counts_.mutable_data();\n-    const auto& input = *batch[0].array();\n     auto g = batch[1].array()->GetValues<uint32_t>(1);\n \n-    if (input.MayHaveNulls()) {\n-      const uint8_t* bitmap = input.buffers[1]->data();\n-      arrow::internal::VisitBitBlocksVoid(\n-          input.buffers[0], input.offset, input.length,\n-          [&](int64_t position) {\n-            counts[*g]++;\n-            Impl::UpdateGroupWith(seen, *g, BitUtil::GetBit(bitmap, position));\n-            g++;\n-          },\n-          [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+    if (batch[0].is_array()) {\n+      const auto& input = *batch[0].array();\n+      if (input.MayHaveNulls()) {\n+        const uint8_t* bitmap = input.buffers[1]->data();\n+        arrow::internal::VisitBitBlocksVoid(\n+            input.buffers[0], input.offset, input.length,\n+            [&](int64_t position) {\n+              counts[*g]++;\n+              Impl::UpdateGroupWith(seen, *g, BitUtil::GetBit(bitmap, position));\n+              g++;\n+            },\n+            [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+      } else {\n+        arrow::internal::VisitBitBlocksVoid(\n+            input.buffers[1], input.offset, input.length,\n+            [&](int64_t) {\n+              Impl::UpdateGroupWith(seen, *g, true);\n\nReview comment:\n       `seen` is perhaps a poor name (I'll rename it) but it's the current value of the aggregation (i.e. `any_true` or `all_true`).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T18:10:05.715+0000",
                    "updated": "2021-08-25T18:10:05.715+0000",
                    "started": "2021-08-25T18:10:05.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641879",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/642485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r696849172\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate_test.cc\n##########\n@@ -1032,6 +1169,55 @@ TEST(GroupBy, TDigest) {\n       /*verbose=*/true);\n }\n \n+TEST(GroupBy, StddevVarianceTDigestScalar) {\n+  BatchesWithSchema input;\n+  input.batches = {\n+      ExecBatchFromJSON(\n+          {ValueDescr::Scalar(int32()), ValueDescr::Scalar(float32()), int64()},\n+          \"[[1, 1.0, 1], [1, 1.0, 1], [1, 1.0, 2], [1, 1.0, 3]]\"),\n+      ExecBatchFromJSON(\n+          {ValueDescr::Scalar(int32()), ValueDescr::Scalar(float32()), int64()},\n+          \"[[null, null, 1], [null, null, 1], [null, null, 2], [null, null, 3]]\"),\n+      ExecBatchFromJSON({int32(), float32(), int64()},\n+                        \"[[2, 2.0, 1], [3, 3.0, 2], [4, 4.0, 3]]\"),\n+  };\n+  input.schema = schema(\n+      {field(\"argument\", int32()), field(\"argument1\", float32()), field(\"key\", int64())});\n+\n+  for (bool use_threads : {false}) {\n+    SCOPED_TRACE(use_threads ? \"parallel/merged\" : \"serial\");\n+    ASSERT_OK_AND_ASSIGN(Datum actual,\n+                         GroupByUsingExecPlan(input, {\"key\"},\n+                                              {\"argument\", \"argument\", \"argument\",\n+                                               \"argument1\", \"argument1\", \"argument1\"},\n+                                              {\n+                                                  {\"hash_stddev\", nullptr},\n+                                                  {\"hash_variance\", nullptr},\n+                                                  {\"hash_tdigest\", nullptr},\n+                                                  {\"hash_stddev\", nullptr},\n+                                                  {\"hash_variance\", nullptr},\n+                                                  {\"hash_tdigest\", nullptr},\n+                                              },\n+                                              use_threads, default_exec_context()));\n+    Datum expected =\n+        ArrayFromJSON(struct_({\n+                          field(\"hash_stddev\", float64()),\n+                          field(\"hash_variance\", float64()),\n+                          field(\"hash_tdigest\", fixed_size_list(float64(), 1)),\n+                          field(\"hash_stddev\", float64()),\n+                          field(\"hash_variance\", float64()),\n+                          field(\"hash_tdigest\", fixed_size_list(float64(), 1)),\n+                          field(\"key\", int64()),\n+                      }),\n+                      R\"([\n+         [0.4714045, 0.222222, [1.0], 0.4714045, 0.222222, [1.0], 1],\n+         [1.0,       1.0,      [1.0], 1.0,       1.0,      [1.0], 2],\n+         [1.5,       2.25,     [1.0], 1.5,       2.25,     [1.0], 3]\n\nReview comment:\n       Ah, too bad.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T17:45:15.426+0000",
                    "updated": "2021-08-26T17:45:15.426+0000",
                    "started": "2021-08-26T17:45:15.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642485",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/642486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994#discussion_r696850366\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -824,6 +824,36 @@ Status AddHashAggKernels(\n   return Status::OK();\n }\n \n+template <typename Type, typename ConsumeValue, typename ConsumeNull>\n+void VisitGroupedValues(const ExecBatch& batch, ConsumeValue&& valid_func,\n+                        ConsumeNull&& null_func) {\n+  auto g = batch[1].array()->GetValues<uint32_t>(1);\n+  if (batch[0].is_array()) {\n+    VisitArrayValuesInline<Type>(\n+        *batch[0].array(),\n+        [&](typename TypeTraits<Type>::CType val) { valid_func(*g++, val); },\n\nReview comment:\n       @felipeblazing Out of curiosity, why do you think capturing explicitly would be better here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T17:47:13.076+0000",
                    "updated": "2021-08-26T17:47:13.076+0000",
                    "started": "2021-08-26T17:47:13.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642486",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/643543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T16:24:57.757+0000",
                    "updated": "2021-08-30T16:24:57.757+0000",
                    "started": "2021-08-30T16:24:57.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643543",
                    "issueId": "13396983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/worklog/644132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #10994:\nURL: https://github.com/apache/arrow/pull/10994\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T14:51:22.180+0000",
                    "updated": "2021-08-31T14:51:22.180+0000",
                    "started": "2021-08-31T14:51:22.179+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644132",
                    "issueId": "13396983"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@f64f7b7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f460c74[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@155de2cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ac779bc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d0e2e10[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@13e064c0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69d1a7e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@78ca29f6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4408e651[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@545e4c74[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30d457f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@19f85d8c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 30 16:24:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-30T16:24:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13737/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-08-24T17:17:10.000+0000",
        "updated": "2021-08-31T14:51:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Reproducer in R. Works fine without grouping, but segfaults if you group:\r\n\r\n{code}\r\ntab <- Table$create(a=1:4, b=6:9)\r\n\r\ntab %>% \r\n  mutate(counter = 1) %>% \r\n  summarize(count = sum(counter))\r\n\r\nTable\r\n1 rows x 1 columns\r\n$count <double>\r\n\r\ntab %>% \r\n  mutate(counter = 1) %>% \r\n  group_by(a) %>% \r\n  summarize(count = sum(counter))\r\n\r\n *** caught segfault ***\r\naddress 0x0, cause 'invalid permissions'\r\n\r\nTraceback:\r\n 1: .Call(`_arrow_ExecPlan_run`, plan, final_node)\r\n 2: ExecPlan_run(self, node)\r\n 3: plan$Run(final_node)\r\n 4: do_exec_plan(.data, group_vars = dplyr::group_vars(.data))\r\n 5: do_arrow_summarize(.data, ...)\r\n...\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Support scalar columns in hash aggregations (was: hash_sum on scalar column segfaults)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396983/comment/17406820",
                    "id": "17406820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10994\n[https://github.com/apache/arrow/pull/10994]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-30T16:24:49.997+0000",
                    "updated": "2021-08-30T16:24:49.997+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0u7e0:",
        "customfield_12314139": null
    }
}