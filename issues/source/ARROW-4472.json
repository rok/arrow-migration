{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13213728",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728",
    "key": "ARROW-4472",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4472/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553\n \n \n   This blog shows how we were able to significant improve performance and memory use in common cases when converting from the Arrow string memory layout to pandas's native memory model based on NumPy arrays of Python objects. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-04T17:49:52.123+0000",
                    "updated": "2019-02-04T17:49:52.123+0000",
                    "started": "2019-02-04T17:49:52.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194138",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553#issuecomment-460349372\n \n \n   Here's a published version https://wesm.github.io/arrow-site-test/blog/2019/02/04/python-string-memory-0.12/\r\n   \r\n   test publishing the website really isn't that easy, and a number of things are broken...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-04T18:03:48.052+0000",
                    "updated": "2019-02-04T18:03:48.052+0000",
                    "started": "2019-02-04T18:03:48.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194143",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553#issuecomment-460493753\n \n \n   LGTM\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-05T02:45:15.710+0000",
                    "updated": "2019-02-05T02:45:15.710+0000",
                    "started": "2019-02-05T02:45:15.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194365",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553#discussion_r253747791\n \n \n\n ##########\n File path: site/_posts/2019-02-05-python-string-memory-0.12.md\n ##########\n @@ -0,0 +1,246 @@\n+---\n+layout: post\n+title: \"Reducing Python String Memory Use in Apache Arrow 0.12\"\n+date: \"2019-02-04 04:00:00 -0400\"\n+author: wesm\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Python users who upgrade to recently released `pyarrow` 0.12 may find that\n+their applications use significantly less memory when converting Arrow string\n+data to pandas format. This includes using `pyarrow.parquet.read_table` and\n+`pandas.read_parquet`. This article details some of what is going on under the\n+hood, and why Python applications dealing with large amounts of strings are\n+prone to memory use problems.\n+\n+## Why Python strings can use a lot of memory\n+\n+Let's start with some possibly surprising facts. I'm going to create an empty\n+`bytes` object and an empty `str` (unicode) object in Python 3.7:\n+\n+```\n+In [1]: val = b''\n+\n+In [2]: unicode_val = u''\n+```\n+\n+The `sys.getsizeof` function accurately reports the number of bytes used by\n+built-in Python objects. You might be surprised to find that:\n+\n+\n+```\n+In [4]: import sys\n+In [5]: sys.getsizeof(val)\n+Out[5]: 33\n+\n+In [6]: sys.getsizeof(unicode_val)\n+Out[6]: 49\n+```\n+\n+Since strings in Python are nul-terminated, we can infer that a bytes object\n+has 32 bytes of overhead while unicode has 48 bytes. One must also account for\n+`PyObject*` pointer references to the objects, so the actual overhead is 40 and\n+56 bytes, respectively. With large strings and text, this overhead may not\n+matter much, but when you have a lot of small strings, such as those arising\n+from reading a CSV or Apache Parquet file, they can take up an unexpected\n+amount of memory. pandas represents strings in NumPy arrays of `PyObject*`\n+pointers, so the total memory used by a unique unicode string is\n+\n+```\n+8 (PyObject*) + 48 (Python C struct) + string_length + 1\n+```\n+\n+Suppose that we read a CSV file with\n+\n+* 1 column\n+* 1 million rows\n+* Each value in the column is a string with 10 characters\n+\n+On disk this file would take approximately 10MB. Read into memory, however, it\n+could take up over 60MB, as a 10 character string object takes up 67 bytes in a\n+`pandas.Series`.\n+\n+## How Apache Arrow represents strings\n+\n+While a Python unicode string can have 57 bytes of overhead, a string in the\n+Arrow columnar format has only 4 (32 bits) or 4.125 (33 bits) bytes of\n+overhead. 32-bit integer offsets encodes the position and size of a string\n+value in a contiguous chunk of memory:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20190205-arrow-string.png\"\n+     alt=\"Apache Arrow string memory layout\"\n+     width=\"80%\" class=\"img-responsive\">\n+</div>\n+\n+When you call `table.to_pandas()` or `array.to_pandas()` with `pyarrow`, we\n+have to convert this compact string representation back to pandas's\n+Python-based strings. This can use a huge amount of memory when we have a large\n+number of small strings. It is a quite common occurrence when working with web\n+analytics data, which compresses to a compact size when stored in the Parquet\n+columnar file format.\n+\n+Note that the Arrow string memory format has other benefits beyond memory\n+use. It is also much more efficient for analytics due to the guarantee of data\n+locality; all strings are next to each other in memory. In the case of pandas\n+and Python strings, the string data can be located anywhere in the process\n+heap. Arrow PMC member Uwe Korn did some work to [extend pandas with Arrow\n+string arrays][1] for improved performance and memory use.\n+\n+## Reducing pandas memory use when converting from Arrow\n+\n+For many years, the `pandas.read_csv` function has relied on a trick to limit\n+the amount of string memory allocated. Because pandas uses arrays of\n+`PyObject*` pointers to refer to objects in the Python heap, we can avoid\n+creating multiple strings with the same value, instead reusing existing objects\n+and incrementing their reference counts.\n+\n+Schematically, we have the following:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20190205-numpy-string.png\"\n+     alt=\"pandas string memory optimization\"\n+     width=\"80%\" class=\"img-responsive\">\n+</div>\n+\n+In `pyarrow` 0.12, we have implemented this when calling `to_pandas`. It\n+requires using a hash table to deduplicate the Arrow string data as it's being\n+converted to pandas. Hashing data is not free, but counterintuitively it can be\n+faster in addition to being vastly more memory efficient in the common case in\n+analytics where we have table columns with many instances of the same string\n+values.\n+\n+## Memory and Performance Benchmarks\n+\n+We can use the `memory_profiler` Python package to easily get process memory\n+usage within a running Python application.\n+\n+```\n \n Review comment:\n   ```suggestion\r\n   ```python\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-05T06:46:26.038+0000",
                    "updated": "2019-02-05T06:46:26.038+0000",
                    "started": "2019-02-05T06:46:26.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194409",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553#discussion_r253748003\n \n \n\n ##########\n File path: site/_posts/2019-02-05-python-string-memory-0.12.md\n ##########\n @@ -0,0 +1,246 @@\n+---\n+layout: post\n+title: \"Reducing Python String Memory Use in Apache Arrow 0.12\"\n+date: \"2019-02-04 04:00:00 -0400\"\n+author: wesm\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Python users who upgrade to recently released `pyarrow` 0.12 may find that\n+their applications use significantly less memory when converting Arrow string\n+data to pandas format. This includes using `pyarrow.parquet.read_table` and\n+`pandas.read_parquet`. This article details some of what is going on under the\n+hood, and why Python applications dealing with large amounts of strings are\n+prone to memory use problems.\n+\n+## Why Python strings can use a lot of memory\n+\n+Let's start with some possibly surprising facts. I'm going to create an empty\n+`bytes` object and an empty `str` (unicode) object in Python 3.7:\n+\n+```\n+In [1]: val = b''\n+\n+In [2]: unicode_val = u''\n+```\n+\n+The `sys.getsizeof` function accurately reports the number of bytes used by\n+built-in Python objects. You might be surprised to find that:\n+\n+\n+```\n+In [4]: import sys\n+In [5]: sys.getsizeof(val)\n+Out[5]: 33\n+\n+In [6]: sys.getsizeof(unicode_val)\n+Out[6]: 49\n+```\n+\n+Since strings in Python are nul-terminated, we can infer that a bytes object\n+has 32 bytes of overhead while unicode has 48 bytes. One must also account for\n+`PyObject*` pointer references to the objects, so the actual overhead is 40 and\n+56 bytes, respectively. With large strings and text, this overhead may not\n+matter much, but when you have a lot of small strings, such as those arising\n+from reading a CSV or Apache Parquet file, they can take up an unexpected\n+amount of memory. pandas represents strings in NumPy arrays of `PyObject*`\n+pointers, so the total memory used by a unique unicode string is\n+\n+```\n+8 (PyObject*) + 48 (Python C struct) + string_length + 1\n+```\n+\n+Suppose that we read a CSV file with\n+\n+* 1 column\n+* 1 million rows\n+* Each value in the column is a string with 10 characters\n+\n+On disk this file would take approximately 10MB. Read into memory, however, it\n+could take up over 60MB, as a 10 character string object takes up 67 bytes in a\n+`pandas.Series`.\n+\n+## How Apache Arrow represents strings\n+\n+While a Python unicode string can have 57 bytes of overhead, a string in the\n+Arrow columnar format has only 4 (32 bits) or 4.125 (33 bits) bytes of\n+overhead. 32-bit integer offsets encodes the position and size of a string\n+value in a contiguous chunk of memory:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20190205-arrow-string.png\"\n+     alt=\"Apache Arrow string memory layout\"\n+     width=\"80%\" class=\"img-responsive\">\n+</div>\n+\n+When you call `table.to_pandas()` or `array.to_pandas()` with `pyarrow`, we\n+have to convert this compact string representation back to pandas's\n+Python-based strings. This can use a huge amount of memory when we have a large\n+number of small strings. It is a quite common occurrence when working with web\n+analytics data, which compresses to a compact size when stored in the Parquet\n+columnar file format.\n+\n+Note that the Arrow string memory format has other benefits beyond memory\n+use. It is also much more efficient for analytics due to the guarantee of data\n+locality; all strings are next to each other in memory. In the case of pandas\n+and Python strings, the string data can be located anywhere in the process\n+heap. Arrow PMC member Uwe Korn did some work to [extend pandas with Arrow\n+string arrays][1] for improved performance and memory use.\n+\n+## Reducing pandas memory use when converting from Arrow\n+\n+For many years, the `pandas.read_csv` function has relied on a trick to limit\n+the amount of string memory allocated. Because pandas uses arrays of\n+`PyObject*` pointers to refer to objects in the Python heap, we can avoid\n+creating multiple strings with the same value, instead reusing existing objects\n+and incrementing their reference counts.\n+\n+Schematically, we have the following:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20190205-numpy-string.png\"\n+     alt=\"pandas string memory optimization\"\n+     width=\"80%\" class=\"img-responsive\">\n+</div>\n+\n+In `pyarrow` 0.12, we have implemented this when calling `to_pandas`. It\n+requires using a hash table to deduplicate the Arrow string data as it's being\n+converted to pandas. Hashing data is not free, but counterintuitively it can be\n+faster in addition to being vastly more memory efficient in the common case in\n+analytics where we have table columns with many instances of the same string\n+values.\n+\n+## Memory and Performance Benchmarks\n+\n+We can use the `memory_profiler` Python package to easily get process memory\n+usage within a running Python application.\n+\n+```\n+import memory_profiler\n+def mem():\n+    return memory_profiler.memory_usage()[0]\n+```\n+\n+In a new application I have:\n+\n+```\n+In [7]: mem()\n+Out[7]: 86.21875\n+```\n+\n+I will generate approximate 1 gigabyte of string data represented as Python\n+strings with length 10. The `pandas.util.testing` module has a handy `rands`\n+function for generating random strings. Here is the data generation function:\n+\n+```python\n+from pandas.util.testing import rands\n+def generate_strings(length, nunique, string_length=10):\n+    unique_values = [rands(string_length) for i in range(nunique)]\n+    values = unique_values * (length // nunique)\n+    return values\n+```\n+\n+This generates a certain number of unique strings, then duplicates then to\n+yield the desired number of total strings. So I'm going to create 100 million\n+strings with only 10000 unique values:\n+\n+```\n+In [8]: values = generate_strings(100000000, 10000)\n+\n+In [9]: mem()\n+Out[9]: 852.140625\n+```\n+\n+100 million `PyObject*` values is only 745 MB, so this increase of a little\n+over 770 MB is consistent with what we know so far. Now I'm going to convert\n+this to Arrow format:\n+\n+```\n+In [11]: arr = pa.array(values)\n+\n+In [12]: mem()\n+Out[12]: 2276.9609375\n+```\n+\n+Since `pyarrow` exactly accounts for all of its memory allocations, we also\n+check that\n+\n+```\n+In [13]: pa.total_allocated_bytes()\n+Out[13]: 1416777280\n+```\n+\n+Since each string takes about 14 bytes (10 bytes plus 4 bytes of overhead),\n+this is what we expect.\n+\n+Now, converting `arr` back to pandas is where things get tricky. The _minimum_\n+amount of memory that pandas can use is a little under 800 MB as above as we\n+need 100 million `PyObject*` values, which are 8 bytes each.\n+\n+```\n+In [14]: arr_as_pandas = arr.to_pandas()\n+\n+In [15]: mem()\n+Out[15]: 3041.78125\n+```\n+\n+Doing the math, we used 765 MB which seems right. We can disable the string\n+deduplication logic by passing `deduplicate_objects=False` to `to_pandas`:\n+\n+```\n+In [16]: arr_as_pandas_no_dedup = arr.to_pandas(deduplicate_objects=False)\n+\n+In [17]: mem()\n+Out[17]: 10006.95703125\n+```\n+\n+Without object deduplication, we use 6965 megabytes, or an average of 73 bytes\n+per value. This is a little bit higher than the theoretical size of 67 bytes\n+computed above.\n+\n+One of the more surprising results is that the new behavior is about twice as fast:\n+\n+```\n+In [18]: %time arr_as_pandas_time = arr.to_pandas()\n+CPU times: user 2.94 s, sys: 213 ms, total: 3.15 s\n+Wall time: 3.14 s\n+\n+In [19]: %time arr_as_pandas_no_dedup_time = arr.to_pandas(deduplicate_objects=False)\n+CPU times: user 4.19 s, sys: 2.04 s, total: 6.23 s\n+Wall time: 6.21 s\n+```\n+\n+The reason for this is that creating so many Python objects is more expensive\n+than hashing the 10 byte values and looking them up in a hash table.\n+\n+Note that when you convert Arrow data with mostly unique values back to pandas,\n+the memory use benefits here won't have as much of an impact.\n+\n+## Takeaways\n+\n+In Apache Arrow, our goal is to develop computational tools to operate natively\n+on the cache- and SIMD-friendly efficient Arrow columnar format. In the\n+meantime, though, we recognize that users have legacy applications using the\n+native memory layout of pandas or other analytics tools. We will do our best to\n+provide fast and memory-efficient interoperability with pandas and other\n+popular libraries.\n+\n+[1]: https://www.slideshare.net/xhochy/extending-pandas-using-apache-arrow-and-numba\n \n Review comment:\n   ```suggestion\r\n   [1]: https://www.slideshare.net/xhochy/extending-pandas-using-apache-arrow-and-numba\r\n   [2]: https://pypi.org/project/memory-profiler/\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-05T06:46:26.065+0000",
                    "updated": "2019-02-05T06:46:26.065+0000",
                    "started": "2019-02-05T06:46:26.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194410",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553#discussion_r253747966\n \n \n\n ##########\n File path: site/_posts/2019-02-05-python-string-memory-0.12.md\n ##########\n @@ -0,0 +1,246 @@\n+---\n+layout: post\n+title: \"Reducing Python String Memory Use in Apache Arrow 0.12\"\n+date: \"2019-02-04 04:00:00 -0400\"\n+author: wesm\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Python users who upgrade to recently released `pyarrow` 0.12 may find that\n+their applications use significantly less memory when converting Arrow string\n+data to pandas format. This includes using `pyarrow.parquet.read_table` and\n+`pandas.read_parquet`. This article details some of what is going on under the\n+hood, and why Python applications dealing with large amounts of strings are\n+prone to memory use problems.\n+\n+## Why Python strings can use a lot of memory\n+\n+Let's start with some possibly surprising facts. I'm going to create an empty\n+`bytes` object and an empty `str` (unicode) object in Python 3.7:\n+\n+```\n+In [1]: val = b''\n+\n+In [2]: unicode_val = u''\n+```\n+\n+The `sys.getsizeof` function accurately reports the number of bytes used by\n+built-in Python objects. You might be surprised to find that:\n+\n+\n+```\n+In [4]: import sys\n+In [5]: sys.getsizeof(val)\n+Out[5]: 33\n+\n+In [6]: sys.getsizeof(unicode_val)\n+Out[6]: 49\n+```\n+\n+Since strings in Python are nul-terminated, we can infer that a bytes object\n+has 32 bytes of overhead while unicode has 48 bytes. One must also account for\n+`PyObject*` pointer references to the objects, so the actual overhead is 40 and\n+56 bytes, respectively. With large strings and text, this overhead may not\n+matter much, but when you have a lot of small strings, such as those arising\n+from reading a CSV or Apache Parquet file, they can take up an unexpected\n+amount of memory. pandas represents strings in NumPy arrays of `PyObject*`\n+pointers, so the total memory used by a unique unicode string is\n+\n+```\n+8 (PyObject*) + 48 (Python C struct) + string_length + 1\n+```\n+\n+Suppose that we read a CSV file with\n+\n+* 1 column\n+* 1 million rows\n+* Each value in the column is a string with 10 characters\n+\n+On disk this file would take approximately 10MB. Read into memory, however, it\n+could take up over 60MB, as a 10 character string object takes up 67 bytes in a\n+`pandas.Series`.\n+\n+## How Apache Arrow represents strings\n+\n+While a Python unicode string can have 57 bytes of overhead, a string in the\n+Arrow columnar format has only 4 (32 bits) or 4.125 (33 bits) bytes of\n+overhead. 32-bit integer offsets encodes the position and size of a string\n+value in a contiguous chunk of memory:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20190205-arrow-string.png\"\n+     alt=\"Apache Arrow string memory layout\"\n+     width=\"80%\" class=\"img-responsive\">\n+</div>\n+\n+When you call `table.to_pandas()` or `array.to_pandas()` with `pyarrow`, we\n+have to convert this compact string representation back to pandas's\n+Python-based strings. This can use a huge amount of memory when we have a large\n+number of small strings. It is a quite common occurrence when working with web\n+analytics data, which compresses to a compact size when stored in the Parquet\n+columnar file format.\n+\n+Note that the Arrow string memory format has other benefits beyond memory\n+use. It is also much more efficient for analytics due to the guarantee of data\n+locality; all strings are next to each other in memory. In the case of pandas\n+and Python strings, the string data can be located anywhere in the process\n+heap. Arrow PMC member Uwe Korn did some work to [extend pandas with Arrow\n+string arrays][1] for improved performance and memory use.\n+\n+## Reducing pandas memory use when converting from Arrow\n+\n+For many years, the `pandas.read_csv` function has relied on a trick to limit\n+the amount of string memory allocated. Because pandas uses arrays of\n+`PyObject*` pointers to refer to objects in the Python heap, we can avoid\n+creating multiple strings with the same value, instead reusing existing objects\n+and incrementing their reference counts.\n+\n+Schematically, we have the following:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20190205-numpy-string.png\"\n+     alt=\"pandas string memory optimization\"\n+     width=\"80%\" class=\"img-responsive\">\n+</div>\n+\n+In `pyarrow` 0.12, we have implemented this when calling `to_pandas`. It\n+requires using a hash table to deduplicate the Arrow string data as it's being\n+converted to pandas. Hashing data is not free, but counterintuitively it can be\n+faster in addition to being vastly more memory efficient in the common case in\n+analytics where we have table columns with many instances of the same string\n+values.\n+\n+## Memory and Performance Benchmarks\n+\n+We can use the `memory_profiler` Python package to easily get process memory\n \n Review comment:\n   ```suggestion\r\n   We can use the [`memory_profiler`][2] Python package to easily get process memory\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-05T06:46:26.106+0000",
                    "updated": "2019-02-05T06:46:26.106+0000",
                    "started": "2019-02-05T06:46:26.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194411",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-05T14:41:46.089+0000",
                    "updated": "2019-02-05T14:41:46.089+0000",
                    "started": "2019-02-05T14:41:46.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194544",
                    "issueId": "13213728"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/worklog/194573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3553: ARROW-4472: [Website][Python] Blog post about string memory use work in Arrow 0.12\nURL: https://github.com/apache/arrow/pull/3553#issuecomment-460671928\n \n \n   Oops sorry I missed these edits @xhochy \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-05T15:07:46.009+0000",
                    "updated": "2019-02-05T15:07:46.009+0000",
                    "started": "2019-02-05T15:07:46.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "194573",
                    "issueId": "13213728"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@751544ff[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c24cd0b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76ea5bf5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4c9c9cb6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c83919b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2b1765fd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f86b699[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@27d7e2f3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@778a0db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@17500544[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d585b49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3500f46b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 05 14:41:35 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-05T14:41:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4472/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-02-04T17:48:35.000+0000",
        "updated": "2019-02-05T15:07:46.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Website][Python] Blog post about Python string memory use improvements in 0.12",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213728/comment/16760875",
                    "id": "16760875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3553\n[https://github.com/apache/arrow/pull/3553]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-05T14:41:35.562+0000",
                    "updated": "2019-02-05T14:41:35.562+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0n0g:",
        "customfield_12314139": null
    }
}