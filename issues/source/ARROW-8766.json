{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13304150",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150",
    "key": "ARROW-8766",
    "fields": {
        "parent": {
            "id": "13267196",
            "key": "ARROW-7102",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13267196",
            "fields": {
                "summary": "[Python] Make filesystems compatible with fsspec",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset-dask-integration",
            "filesystem",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8766/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/441252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T12:41:26.654+0000",
                    "updated": "2020-06-04T12:41:26.654+0000",
                    "started": "2020-06-04T12:41:26.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441252",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/441254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#issuecomment-638825160\n\n\n   https://issues.apache.org/jira/browse/ARROW-8766\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T12:46:56.558+0000",
                    "updated": "2020-06-04T12:46:56.558+0000",
                    "started": "2020-06-04T12:46:56.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441254",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/441487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#issuecomment-639062788\n\n\n   A first test case is working, using fsspec's in-memory filesystem:\r\n   \r\n   ```\r\n   In [1]: import pyarrow.parquet as pq\r\n      ...: import pyarrow.dataset as ds\r\n      ...:\r\n      ...: from pyarrow.fs import PyFileSystem\r\n      ...: from pyarrow.tests.test_fs import FSSpecHandler\r\n   \r\n   In [2]: import fsspec\r\n   \r\n   In [3]: memfs = fsspec.filesystem(\"memory\")\r\n   \r\n   In [4]: table = pa.table({'a': [1, 2, 3]})\r\n   \r\n   In [5]: with memfs.open(\"test\", \"wb\") as f:\r\n      ...:     pq.write_table(table, f)\r\n      ...:\r\n   \r\n   In [6]: dataset = ds.dataset(\"test\", filesystem=PyFileSystem(FSSpecHandler(memfs)))\r\n   \r\n   In [7]: dataset.to_table(filter=ds.field('a') > 1).to_pandas()\r\n   Out[7]:\r\n      a\r\n   0  2\r\n   1  3\r\n   ```\r\n   \r\n   I only have a bit trouble finding a robust way to get a file handle for an open file from the fsspec filesystem, but so that is not related to this PR ;) For the rest it was quite easy to get this working!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T19:15:01.273+0000",
                    "updated": "2020-06-04T19:15:01.273+0000",
                    "started": "2020-06-04T19:15:01.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441487",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/441489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#discussion_r435496748\n\n\n\n##########\nFile path: python/pyarrow/_fs.pyx\n##########\n@@ -55,24 +56,56 @@ def _normalize_path(FileSystem filesystem, path):\n     return frombytes(c_path_normalized)\n \n \n+cdef object _wrap_file_type(CFileType ty):\n+    return FileType(<int8_t> ty)\n+\n+\n+cdef CFileType _unwrap_file_type(FileType ty) except *:\n+    if ty == FileType.Unknown:\n+        return CFileType_Unknown\n+    elif ty == FileType.NotFound:\n+        return CFileType_NotFound\n+    elif ty == FileType.File:\n+        return CFileType_File\n+    elif ty == FileType.Directory:\n+        return CFileType_Directory\n+    assert 0\n+\n+\n cdef class FileInfo:\n     \"\"\"\n     FileSystem entry info.\n     \"\"\"\n \n-    def __init__(self):\n-        raise TypeError(\"FileInfo cannot be instantiated directly, use \"\n-                        \"FileSystem.get_file_info method instead.\")\n+    def __init__(self, path, FileType type=FileType.Unknown, *,\n+                 mtime=None, size=None):\n+        self.info.set_path(tobytes(path))\n+        self.info.set_type(_unwrap_file_type(type))\n+        if mtime is not None:\n+            if isinstance(mtime, datetime):\n+                self.info.set_mtime(PyDateTime_to_TimePoint(\n+                    <PyDateTime_DateTime*> mtime))\n+            else:\n+                self.info.set_mtime(TimePoint_from_ns(mtime))\n\nReview comment:\n       Note to self: should instead add a separate `mtime_ns` argument.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T19:23:31.604+0000",
                    "updated": "2020-06-04T19:23:31.604+0000",
                    "started": "2020-06-04T19:23:31.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441489",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/442801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#discussion_r437373988\n\n\n\n##########\nFile path: python/pyarrow/_fs.pyx\n##########\n@@ -685,3 +756,234 @@ cdef class _MockFileSystem(FileSystem):\n     cdef init(self, const shared_ptr[CFileSystem]& wrapped):\n         FileSystem.init(self, wrapped)\n         self.mockfs = <CMockFileSystem*> wrapped.get()\n+\n+\n+cdef class PyFileSystem(FileSystem):\n+    \"\"\"\n+    A FileSystem with behavior implemented in Python.\n+\n+    A PyFileSystem is backed by a FileSystemHandler instance.\n+    \"\"\"\n+\n+    def __init__(self, handler):\n+        cdef:\n+            CPyFileSystemVtable vtable\n+            shared_ptr[CPyFileSystem] wrapped\n+\n+        if not isinstance(handler, FileSystemHandler):\n+            raise TypeError(\"Expected a FileSystemHandler instance, got {0}\"\n+                            .format(type(handler)))\n+\n+        vtable.get_type_name = _cb_get_type_name\n+        vtable.equals = _cb_equals\n+        vtable.get_file_info = _cb_get_file_info\n+        vtable.get_file_info_vector = _cb_get_file_info_vector\n+        vtable.get_file_info_selector = _cb_get_file_info_selector\n+        vtable.create_dir = _cb_create_dir\n+        vtable.delete_dir = _cb_delete_dir\n+        vtable.delete_dir_contents = _cb_delete_dir_contents\n+        vtable.delete_file = _cb_delete_file\n+        vtable.move = _cb_move\n+        vtable.copy_file = _cb_copy_file\n+        vtable.open_input_stream = _cb_open_input_stream\n+        vtable.open_input_file = _cb_open_input_file\n+        vtable.open_output_stream = _cb_open_output_stream\n+        vtable.open_append_stream = _cb_open_append_stream\n+\n+        wrapped = CPyFileSystem.Make(handler, move(vtable))\n+        self.init(<shared_ptr[CFileSystem]> wrapped)\n+\n+    cdef init(self, const shared_ptr[CFileSystem]& wrapped):\n+        FileSystem.init(self, wrapped)\n+        self.pyfs = <CPyFileSystem*> wrapped.get()\n+\n+    @property\n+    def handler(self):\n+        \"\"\"\n+        The filesystem's underlying handler.\n+\n+        Returns\n+        -------\n+        handler : FileSystemHandler\n+        \"\"\"\n+        return <object> self.pyfs.handler()\n+\n+    def __reduce__(self):\n+        return PyFileSystem, (self.handler,)\n+\n+\n+class FileSystemHandler(ABC):\n+    \"\"\"\n+    An abstract class exposing methods to implement PyFileSystem's behavior.\n+    \"\"\"\n+\n+    @abstractmethod\n+    def get_type_name(self):\n+        \"\"\"\n+        Implement PyFileSystem.type_name.\n+        \"\"\"\n+\n+    @abstractmethod\n+    def get_file_info(self, paths):\n+        \"\"\"\n+        Implement PyFileSystem.get_file_info(paths).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def get_file_info_selector(self, selector):\n+        \"\"\"\n+        Implement PyFileSystem.get_file_info(selector).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def create_dir(self, path, recursive):\n+        \"\"\"\n+        Implement PyFileSystem.create_dir(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def delete_dir(self, path):\n+        \"\"\"\n+        Implement PyFileSystem.delete_dir(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def delete_dir_contents(self, path):\n+        \"\"\"\n+        Implement PyFileSystem.delete_dir_contents(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def delete_file(self, path):\n+        \"\"\"\n+        Implement PyFileSystem.delete_file(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def move(self, src, dest):\n+        \"\"\"\n+        Implement PyFileSystem.move(...).\n\nReview comment:\n       I suppose methods like this are expected to just raise the appropriate FileNotFoundError in case `src` does not exist?\n\n##########\nFile path: cpp/src/arrow/python/filesystem.h\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/visibility.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace py {\n+namespace fs {\n+\n+class ARROW_PYTHON_EXPORT PyFileSystemVtable {\n+ public:\n+  std::function<void(PyObject*, std::string* out)> get_type_name;\n+  std::function<bool(PyObject*, const arrow::fs::FileSystem& other)> equals;\n+\n+  std::function<void(PyObject*, const std::string& path, arrow::fs::FileInfo* out)>\n+      get_file_info;\n+  std::function<void(PyObject*, const std::vector<std::string>& paths,\n+                     std::vector<arrow::fs::FileInfo>* out)>\n+      get_file_info_vector;\n+  std::function<void(PyObject*, const arrow::fs::FileSelector&,\n+                     std::vector<arrow::fs::FileInfo>* out)>\n+      get_file_info_selector;\n+\n+  std::function<void(PyObject*, const std::string& path, bool)> create_dir;\n+  std::function<void(PyObject*, const std::string& path)> delete_dir;\n+  std::function<void(PyObject*, const std::string& path)> delete_dir_contents;\n+  std::function<void(PyObject*, const std::string& path)> delete_file;\n+  std::function<void(PyObject*, const std::string& src, const std::string& dest)> move;\n+  std::function<void(PyObject*, const std::string& src, const std::string& dest)>\n+      copy_file;\n+\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::InputStream>* out)>\n+      open_input_stream;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::RandomAccessFile>* out)>\n+      open_input_file;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::OutputStream>* out)>\n+      open_output_stream;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::OutputStream>* out)>\n+      open_append_stream;\n+};\n+\n+class ARROW_PYTHON_EXPORT PyFileSystem : public arrow::fs::FileSystem {\n\nReview comment:\n       Does this need some doc comments? (I don't know how \"public\" this is, in the end it is only to be used in the python bindings I think, and there the PyFileSystem class has docstrings for python users, so that might be sufficient)\n\n##########\nFile path: cpp/src/arrow/python/filesystem.h\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/visibility.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace py {\n+namespace fs {\n+\n+class ARROW_PYTHON_EXPORT PyFileSystemVtable {\n+ public:\n+  std::function<void(PyObject*, std::string* out)> get_type_name;\n+  std::function<bool(PyObject*, const arrow::fs::FileSystem& other)> equals;\n+\n+  std::function<void(PyObject*, const std::string& path, arrow::fs::FileInfo* out)>\n+      get_file_info;\n+  std::function<void(PyObject*, const std::vector<std::string>& paths,\n+                     std::vector<arrow::fs::FileInfo>* out)>\n+      get_file_info_vector;\n+  std::function<void(PyObject*, const arrow::fs::FileSelector&,\n+                     std::vector<arrow::fs::FileInfo>* out)>\n+      get_file_info_selector;\n+\n+  std::function<void(PyObject*, const std::string& path, bool)> create_dir;\n+  std::function<void(PyObject*, const std::string& path)> delete_dir;\n+  std::function<void(PyObject*, const std::string& path)> delete_dir_contents;\n+  std::function<void(PyObject*, const std::string& path)> delete_file;\n+  std::function<void(PyObject*, const std::string& src, const std::string& dest)> move;\n+  std::function<void(PyObject*, const std::string& src, const std::string& dest)>\n+      copy_file;\n+\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::InputStream>* out)>\n+      open_input_stream;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::RandomAccessFile>* out)>\n+      open_input_file;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::OutputStream>* out)>\n+      open_output_stream;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::OutputStream>* out)>\n+      open_append_stream;\n+};\n+\n+class ARROW_PYTHON_EXPORT PyFileSystem : public arrow::fs::FileSystem {\n\nReview comment:\n       Maybe just one-liner indicating this is only used to implement pyarrow.fs.PyFileSystem could be added then, but not that important\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T15:59:43.155+0000",
                    "updated": "2020-06-09T15:59:43.155+0000",
                    "started": "2020-06-09T15:59:43.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442801",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/442813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#issuecomment-641187317\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:01:01.790+0000",
                    "updated": "2020-06-09T16:01:01.790+0000",
                    "started": "2020-06-09T16:01:01.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442813",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/443034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#discussion_r437451340\n\n\n\n##########\nFile path: cpp/src/arrow/python/filesystem.h\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/visibility.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace py {\n+namespace fs {\n+\n+class ARROW_PYTHON_EXPORT PyFileSystemVtable {\n+ public:\n+  std::function<void(PyObject*, std::string* out)> get_type_name;\n+  std::function<bool(PyObject*, const arrow::fs::FileSystem& other)> equals;\n+\n+  std::function<void(PyObject*, const std::string& path, arrow::fs::FileInfo* out)>\n+      get_file_info;\n+  std::function<void(PyObject*, const std::vector<std::string>& paths,\n+                     std::vector<arrow::fs::FileInfo>* out)>\n+      get_file_info_vector;\n+  std::function<void(PyObject*, const arrow::fs::FileSelector&,\n+                     std::vector<arrow::fs::FileInfo>* out)>\n+      get_file_info_selector;\n+\n+  std::function<void(PyObject*, const std::string& path, bool)> create_dir;\n+  std::function<void(PyObject*, const std::string& path)> delete_dir;\n+  std::function<void(PyObject*, const std::string& path)> delete_dir_contents;\n+  std::function<void(PyObject*, const std::string& path)> delete_file;\n+  std::function<void(PyObject*, const std::string& src, const std::string& dest)> move;\n+  std::function<void(PyObject*, const std::string& src, const std::string& dest)>\n+      copy_file;\n+\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::InputStream>* out)>\n+      open_input_stream;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::RandomAccessFile>* out)>\n+      open_input_file;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::OutputStream>* out)>\n+      open_output_stream;\n+  std::function<void(PyObject*, const std::string& path,\n+                     std::shared_ptr<io::OutputStream>* out)>\n+      open_append_stream;\n+};\n+\n+class ARROW_PYTHON_EXPORT PyFileSystem : public arrow::fs::FileSystem {\n\nReview comment:\n       It's not public as a C++ API, indeed, but if there's some stuff there that needs explaining, feel free to point it out and I'll add some comments.\n\n##########\nFile path: python/pyarrow/_fs.pyx\n##########\n@@ -685,3 +756,234 @@ cdef class _MockFileSystem(FileSystem):\n     cdef init(self, const shared_ptr[CFileSystem]& wrapped):\n         FileSystem.init(self, wrapped)\n         self.mockfs = <CMockFileSystem*> wrapped.get()\n+\n+\n+cdef class PyFileSystem(FileSystem):\n+    \"\"\"\n+    A FileSystem with behavior implemented in Python.\n+\n+    A PyFileSystem is backed by a FileSystemHandler instance.\n+    \"\"\"\n+\n+    def __init__(self, handler):\n+        cdef:\n+            CPyFileSystemVtable vtable\n+            shared_ptr[CPyFileSystem] wrapped\n+\n+        if not isinstance(handler, FileSystemHandler):\n+            raise TypeError(\"Expected a FileSystemHandler instance, got {0}\"\n+                            .format(type(handler)))\n+\n+        vtable.get_type_name = _cb_get_type_name\n+        vtable.equals = _cb_equals\n+        vtable.get_file_info = _cb_get_file_info\n+        vtable.get_file_info_vector = _cb_get_file_info_vector\n+        vtable.get_file_info_selector = _cb_get_file_info_selector\n+        vtable.create_dir = _cb_create_dir\n+        vtable.delete_dir = _cb_delete_dir\n+        vtable.delete_dir_contents = _cb_delete_dir_contents\n+        vtable.delete_file = _cb_delete_file\n+        vtable.move = _cb_move\n+        vtable.copy_file = _cb_copy_file\n+        vtable.open_input_stream = _cb_open_input_stream\n+        vtable.open_input_file = _cb_open_input_file\n+        vtable.open_output_stream = _cb_open_output_stream\n+        vtable.open_append_stream = _cb_open_append_stream\n+\n+        wrapped = CPyFileSystem.Make(handler, move(vtable))\n+        self.init(<shared_ptr[CFileSystem]> wrapped)\n+\n+    cdef init(self, const shared_ptr[CFileSystem]& wrapped):\n+        FileSystem.init(self, wrapped)\n+        self.pyfs = <CPyFileSystem*> wrapped.get()\n+\n+    @property\n+    def handler(self):\n+        \"\"\"\n+        The filesystem's underlying handler.\n+\n+        Returns\n+        -------\n+        handler : FileSystemHandler\n+        \"\"\"\n+        return <object> self.pyfs.handler()\n+\n+    def __reduce__(self):\n+        return PyFileSystem, (self.handler,)\n+\n+\n+class FileSystemHandler(ABC):\n+    \"\"\"\n+    An abstract class exposing methods to implement PyFileSystem's behavior.\n+    \"\"\"\n+\n+    @abstractmethod\n+    def get_type_name(self):\n+        \"\"\"\n+        Implement PyFileSystem.type_name.\n+        \"\"\"\n+\n+    @abstractmethod\n+    def get_file_info(self, paths):\n+        \"\"\"\n+        Implement PyFileSystem.get_file_info(paths).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def get_file_info_selector(self, selector):\n+        \"\"\"\n+        Implement PyFileSystem.get_file_info(selector).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def create_dir(self, path, recursive):\n+        \"\"\"\n+        Implement PyFileSystem.create_dir(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def delete_dir(self, path):\n+        \"\"\"\n+        Implement PyFileSystem.delete_dir(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def delete_dir_contents(self, path):\n+        \"\"\"\n+        Implement PyFileSystem.delete_dir_contents(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def delete_file(self, path):\n+        \"\"\"\n+        Implement PyFileSystem.delete_file(...).\n+        \"\"\"\n+\n+    @abstractmethod\n+    def move(self, src, dest):\n+        \"\"\"\n+        Implement PyFileSystem.move(...).\n\nReview comment:\n       Right.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:24:28.311+0000",
                    "updated": "2020-06-09T16:24:28.311+0000",
                    "started": "2020-06-09T16:24:28.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443034",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/443226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349#issuecomment-641322746\n\n\n   > Recognizing append mode as a \"write\" mode seems to work:\r\n   \r\n   You'll have to check that writing indeed appends at the end rather than e.g. truncating.\r\n   \r\n   More generally, while I originally added the append-open method, I'm not sure it will ever be useful, so in the meantime if an implementation wants to raise `NotImplementedError`, it's fine to me.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:43:49.185+0000",
                    "updated": "2020-06-09T16:43:49.185+0000",
                    "started": "2020-06-09T16:43:49.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443226",
                    "issueId": "13304150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/worklog/443282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #7349:\nURL: https://github.com/apache/arrow/pull/7349\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T17:01:48.690+0000",
                    "updated": "2020-06-09T17:01:48.690+0000",
                    "started": "2020-06-09T17:01:48.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443282",
                    "issueId": "13304150"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3b1ae022[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6aeef9a2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57effe7b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4ad13ecd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@186fc5b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@639a0aa2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bae2c8c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@84a4462[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e6e7aa1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5d92a2d4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67e22fa6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3dd10e6c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 09 17:01:42 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-09T17:01:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8766/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-05-11T15:44:10.000+0000",
        "updated": "2020-06-09T17:01:49.000+0000",
        "timeoriginalestimate": null,
        "description": "The new {{pyarrow.fs}} filesystems are now actual C++ objects, and no longer \"just\" a python interface. So they can't easily be expanded from the Python side, and the existing integration with {{fsspec}} filesystems is therefore also not working anymore. \r\n\r\nOne possible solution is  to have a C++ filesystem that calls back into a python object for each of its methods (possibly similar to how you can implement a flight server in Python, I suppose). \r\n\r\nSuch a FileSystem implementation would allow to make a {{pyarrow.fs}} wrapper for {{fsspec}} filesystems, and thus allow such filesystems to be used in pyarrow where new filesystems are expected.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] A FileSystem implementation based on Python callbacks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/comment/17124011",
                    "id": "17124011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "cc [~apitrou]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-06-02T16:28:30.262+0000",
                    "updated": "2020-06-02T16:28:30.262+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304150/comment/17129627",
                    "id": "17129627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 7349\n[https://github.com/apache/arrow/pull/7349]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-06-09T17:01:42.113+0000",
                    "updated": "2020-06-09T17:01:42.113+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0elqo:",
        "customfield_12314139": null
    }
}