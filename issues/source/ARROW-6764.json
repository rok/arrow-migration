{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13260090",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090",
    "key": "ARROW-6764",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12571608",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12571608",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13036368",
                    "key": "ARROW-501",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368",
                    "fields": {
                        "summary": "[C++] Implement concurrent / buffering InputStream for streaming data use cases",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6764/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/322823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573\n \n \n   Convert the JSON reader to use it.  Performance is unchanged or a bit better.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:17:55.770+0000",
                    "updated": "2019-10-03T18:17:55.770+0000",
                    "started": "2019-10-03T18:17:55.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322823",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/322835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#issuecomment-538069680\n \n \n   https://issues.apache.org/jira/browse/ARROW-6764\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:31:18.284+0000",
                    "updated": "2019-10-03T18:31:18.284+0000",
                    "started": "2019-10-03T18:31:18.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322835",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/322943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#issuecomment-538119485\n \n \n   @bkietz \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:41:18.339+0000",
                    "updated": "2019-10-03T20:41:18.339+0000",
                    "started": "2019-10-03T20:41:18.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322943",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/323301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r331427833\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.h\n ##########\n @@ -312,4 +314,128 @@ Iterator<T> MakeFlattenIterator(Iterator<Iterator<T>> it) {\n   return Iterator<T>(FlattenIterator<T>(std::move(it)));\n }\n \n+namespace detail {\n+\n+// A type-erased promise object for ReadaheadQueue.\n+struct ARROW_EXPORT ReadaheadPromise {\n+  virtual ~ReadaheadPromise();\n+  virtual void Call() = 0;\n+};\n+\n+template <typename T>\n+struct ReadaheadIteratorPromise : ReadaheadPromise {\n+  ~ReadaheadIteratorPromise() override {}\n+\n+  explicit ReadaheadIteratorPromise(Iterator<T>* it) : it_(it) {}\n+\n+  void Call() override {\n+    assert(!called_);\n+    status_ = it_->Next(&out_);\n+    called_ = true;\n+  }\n+\n+  Iterator<T>* it_;\n+  Status status_;\n+  T out_ = IterationTraits<T>::End();\n+  bool called_ = false;\n+};\n+\n+class ARROW_EXPORT ReadaheadQueue {\n+ public:\n+  explicit ReadaheadQueue(int readahead_queue_size);\n+  ~ReadaheadQueue();\n+\n+  Status Append(std::unique_ptr<ReadaheadPromise>);\n+  Status PopDone(std::unique_ptr<ReadaheadPromise>*);\n+  Status Pump(std::function<std::unique_ptr<ReadaheadPromise>()> factory);\n+  Status Shutdown();\n+  void EnsureShutdownOrDie();\n+\n+ protected:\n+  class Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+}  // namespace detail\n+\n+/// \\brief Readahead iterator that iterates on the underlying iterator in a\n+/// separate thread, getting up to N values in advance.\n+template <typename T>\n+class ReadaheadIterator {\n+  using PromiseType = typename detail::ReadaheadIteratorPromise<T>;\n+\n+ public:\n+  // Public default constructor creates an empty iterator\n+  ReadaheadIterator() : done_(true) {}\n+\n+  ~ReadaheadIterator() {\n+    if (queue_) {\n+      // Make sure the queue doesn't call any promises after this object\n+      // is destroyed.\n+      queue_->EnsureShutdownOrDie();\n+    }\n+  }\n+\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(ReadaheadIterator);\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(ReadaheadIterator);\n+\n+  Status Next(T* out) {\n+    if (done_) {\n+      *out = IterationTraits<T>::End();\n+      return Status::OK();\n+    }\n+\n+    std::unique_ptr<detail::ReadaheadPromise> promise;\n+    ARROW_RETURN_NOT_OK(queue_->PopDone(&promise));\n+    auto it_promise = static_cast<PromiseType*>(promise.get());\n+\n+    ARROW_RETURN_NOT_OK(queue_->Append(MakePromise()));\n+\n+    ARROW_RETURN_NOT_OK(it_promise->status_);\n+    *out = std::move(it_promise->out_);\n+    if (*out == IterationTraits<T>::End()) {\n+      done_ = true;\n+      // Shutdown the queue, but it may still have requested a couple more values\n+      // in the meantime.\n+      ARROW_RETURN_NOT_OK(queue_->Shutdown());\n \n Review comment:\n   Note to self: no need to actually shutdown the queue (`Shutdown(wait=true)` may take some time to return, and `Shutdown(wait=false)` is unsafe here).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T09:58:58.420+0000",
                    "updated": "2019-10-04T09:58:58.420+0000",
                    "started": "2019-10-04T09:58:58.420+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323301",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/324789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r332294543\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.cc\n ##########\n @@ -0,0 +1,175 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/iterator.h\"\n+\n+#include <condition_variable>\n+#include <cstdint>\n+#include <deque>\n+#include <mutex>\n+#include <thread>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace detail {\n+\n+ReadaheadPromise::~ReadaheadPromise() {}\n+\n+class ReadaheadQueue::Impl : public std::enable_shared_from_this<ReadaheadQueue::Impl> {\n+ public:\n+  explicit Impl(int64_t readahead_queue_size) : max_readahead_(readahead_queue_size) {}\n+\n+  ~Impl() { EnsureShutdownOrDie(false); }\n+\n+  void Start() {\n+    // Cannot do this in constructor as shared_from_this() would throw\n+    DCHECK(!thread_.joinable());\n+    auto self = shared_from_this();\n+    thread_ = std::thread([self]() { self->DoWork(); });\n+    DCHECK(thread_.joinable());\n+  }\n+\n+  void EnsureShutdownOrDie(bool wait = true) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (!please_shutdown_) {\n+      ARROW_CHECK_OK(ShutdownUnlocked(std::move(lock), wait));\n+    }\n+    DCHECK(!thread_.joinable());\n+  }\n+\n+  Status Append(std::unique_ptr<ReadaheadPromise> promise) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    todo_.push_back(std::move(promise));\n+    if (static_cast<int64_t>(todo_.size()) == 1) {\n \n Review comment:\n   I assume if there were tasks in todo_ already then the worker will be woken up by design\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T00:44:06.175+0000",
                    "updated": "2019-10-08T00:44:06.175+0000",
                    "started": "2019-10-08T00:44:06.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324789",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/324790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r332294234\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.cc\n ##########\n @@ -0,0 +1,175 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/iterator.h\"\n+\n+#include <condition_variable>\n+#include <cstdint>\n+#include <deque>\n+#include <mutex>\n+#include <thread>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace detail {\n+\n+ReadaheadPromise::~ReadaheadPromise() {}\n+\n+class ReadaheadQueue::Impl : public std::enable_shared_from_this<ReadaheadQueue::Impl> {\n+ public:\n+  explicit Impl(int64_t readahead_queue_size) : max_readahead_(readahead_queue_size) {}\n+\n+  ~Impl() { EnsureShutdownOrDie(false); }\n+\n+  void Start() {\n+    // Cannot do this in constructor as shared_from_this() would throw\n+    DCHECK(!thread_.joinable());\n+    auto self = shared_from_this();\n+    thread_ = std::thread([self]() { self->DoWork(); });\n+    DCHECK(thread_.joinable());\n+  }\n+\n+  void EnsureShutdownOrDie(bool wait = true) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (!please_shutdown_) {\n+      ARROW_CHECK_OK(ShutdownUnlocked(std::move(lock), wait));\n+    }\n+    DCHECK(!thread_.joinable());\n+  }\n+\n+  Status Append(std::unique_ptr<ReadaheadPromise> promise) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    todo_.push_back(std::move(promise));\n+    if (static_cast<int64_t>(todo_.size()) == 1) {\n+      // Signal there's more work to do\n+      lock.unlock();\n+      worker_wakeup_.notify_one();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status PopDone(std::unique_ptr<ReadaheadPromise>* out) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    work_done_.wait(lock, [this]() { return done_.size() > 0; });\n+    *out = std::move(done_.front());\n+    done_.pop_front();\n+    if (static_cast<int64_t>(done_.size()) < max_readahead_) {\n+      // Signal there's more work to do\n+      lock.unlock();\n+      worker_wakeup_.notify_one();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Pump(std::function<std::unique_ptr<ReadaheadPromise>()> factory) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    while (static_cast<int64_t>(done_.size() + todo_.size()) < max_readahead_) {\n+      todo_.push_back(factory());\n \n Review comment:\n   It's possible that the initial pump could exhaust the iterator (for example, creating 5 tasks but only say 2 can be completed). I suppose it doesn't cause that much harm if the iterator's Next method can be called repeatedly after iteration has completed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T00:44:06.485+0000",
                    "updated": "2019-10-08T00:44:06.485+0000",
                    "started": "2019-10-08T00:44:06.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324790",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/324792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r332294543\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.cc\n ##########\n @@ -0,0 +1,175 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/iterator.h\"\n+\n+#include <condition_variable>\n+#include <cstdint>\n+#include <deque>\n+#include <mutex>\n+#include <thread>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace detail {\n+\n+ReadaheadPromise::~ReadaheadPromise() {}\n+\n+class ReadaheadQueue::Impl : public std::enable_shared_from_this<ReadaheadQueue::Impl> {\n+ public:\n+  explicit Impl(int64_t readahead_queue_size) : max_readahead_(readahead_queue_size) {}\n+\n+  ~Impl() { EnsureShutdownOrDie(false); }\n+\n+  void Start() {\n+    // Cannot do this in constructor as shared_from_this() would throw\n+    DCHECK(!thread_.joinable());\n+    auto self = shared_from_this();\n+    thread_ = std::thread([self]() { self->DoWork(); });\n+    DCHECK(thread_.joinable());\n+  }\n+\n+  void EnsureShutdownOrDie(bool wait = true) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (!please_shutdown_) {\n+      ARROW_CHECK_OK(ShutdownUnlocked(std::move(lock), wait));\n+    }\n+    DCHECK(!thread_.joinable());\n+  }\n+\n+  Status Append(std::unique_ptr<ReadaheadPromise> promise) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    todo_.push_back(std::move(promise));\n+    if (static_cast<int64_t>(todo_.size()) == 1) {\n \n Review comment:\n   I assume if there were tasks in todo_ already then the worker will be woken up by design\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T00:44:18.537+0000",
                    "updated": "2019-10-08T00:44:18.537+0000",
                    "started": "2019-10-08T00:44:18.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324792",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/324906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r332370214\n \n \n\n ##########\n File path: cpp/src/arrow/util/iterator.cc\n ##########\n @@ -0,0 +1,175 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/iterator.h\"\n+\n+#include <condition_variable>\n+#include <cstdint>\n+#include <deque>\n+#include <mutex>\n+#include <thread>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace detail {\n+\n+ReadaheadPromise::~ReadaheadPromise() {}\n+\n+class ReadaheadQueue::Impl : public std::enable_shared_from_this<ReadaheadQueue::Impl> {\n+ public:\n+  explicit Impl(int64_t readahead_queue_size) : max_readahead_(readahead_queue_size) {}\n+\n+  ~Impl() { EnsureShutdownOrDie(false); }\n+\n+  void Start() {\n+    // Cannot do this in constructor as shared_from_this() would throw\n+    DCHECK(!thread_.joinable());\n+    auto self = shared_from_this();\n+    thread_ = std::thread([self]() { self->DoWork(); });\n+    DCHECK(thread_.joinable());\n+  }\n+\n+  void EnsureShutdownOrDie(bool wait = true) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (!please_shutdown_) {\n+      ARROW_CHECK_OK(ShutdownUnlocked(std::move(lock), wait));\n+    }\n+    DCHECK(!thread_.joinable());\n+  }\n+\n+  Status Append(std::unique_ptr<ReadaheadPromise> promise) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    todo_.push_back(std::move(promise));\n+    if (static_cast<int64_t>(todo_.size()) == 1) {\n+      // Signal there's more work to do\n+      lock.unlock();\n+      worker_wakeup_.notify_one();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status PopDone(std::unique_ptr<ReadaheadPromise>* out) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    work_done_.wait(lock, [this]() { return done_.size() > 0; });\n+    *out = std::move(done_.front());\n+    done_.pop_front();\n+    if (static_cast<int64_t>(done_.size()) < max_readahead_) {\n+      // Signal there's more work to do\n+      lock.unlock();\n+      worker_wakeup_.notify_one();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Pump(std::function<std::unique_ptr<ReadaheadPromise>()> factory) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (please_shutdown_) {\n+      return Status::Invalid(\"Shutdown requested\");\n+    }\n+    while (static_cast<int64_t>(done_.size() + todo_.size()) < max_readahead_) {\n+      todo_.push_back(factory());\n \n Review comment:\n   Yes, it shouldn't be a problem.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T07:36:02.451+0000",
                    "updated": "2019-10-08T07:36:02.451+0000",
                    "started": "2019-10-08T07:36:02.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324906",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#issuecomment-539495368\n \n \n   @bkietz Would you like to take a look?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T12:45:13.655+0000",
                    "updated": "2019-10-08T12:45:13.655+0000",
                    "started": "2019-10-08T12:45:13.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325034",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r331193280\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -39,6 +40,31 @@ FileInterface::~FileInterface() = default;\n \n Status FileInterface::Abort() { return Close(); }\n \n+class InputStreamBlockIterator {\n+ public:\n+  InputStreamBlockIterator(std::shared_ptr<InputStream> stream, int64_t block_size)\n+      : stream_(stream), block_size_(block_size) {}\n+\n+  Status Next(std::shared_ptr<Buffer>* out) {\n+    if (done_) {\n \n Review comment:\n   ```suggestion\r\n       if (stream_ == nullptr) {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T14:35:39.098+0000",
                    "updated": "2019-10-08T14:35:39.098+0000",
                    "started": "2019-10-08T14:35:39.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325112",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r331194193\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -51,6 +77,16 @@ Status InputStream::Peek(int64_t ARROW_ARG_UNUSED(nbytes),\n \n bool InputStream::supports_zero_copy() const { return false; }\n \n+Status MakeInputStreamIterator(std::shared_ptr<InputStream> stream, int64_t block_size,\n+                               Iterator<std::shared_ptr<Buffer>>* out) {\n+  if (stream->closed()) {\n+    return Status::Invalid(\"Cannot take iterator on closed stream\");\n+  }\n+  DCHECK_GT(block_size, 0);\n+  *out = Iterator<std::shared_ptr<Buffer>>(InputStreamBlockIterator(stream, block_size));\n \n Review comment:\n   Not required by any means, but: if you'd prefer to avoid defining InputStreamBlockIterator then you could probably write this with a labmda and MakeFunctionIterator\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T14:35:39.103+0000",
                    "updated": "2019-10-08T14:35:39.103+0000",
                    "started": "2019-10-08T14:35:39.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325113",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r332657627\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -39,6 +40,31 @@ FileInterface::~FileInterface() = default;\n \n Status FileInterface::Abort() { return Close(); }\n \n+class InputStreamBlockIterator {\n+ public:\n+  InputStreamBlockIterator(std::shared_ptr<InputStream> stream, int64_t block_size)\n+      : stream_(stream), block_size_(block_size) {}\n+\n+  Status Next(std::shared_ptr<Buffer>* out) {\n+    if (done_) {\n \n Review comment:\n   The current code shows the intent better.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T18:11:46.510+0000",
                    "updated": "2019-10-08T18:11:46.510+0000",
                    "started": "2019-10-08T18:11:46.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325239",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#discussion_r332658083\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -51,6 +77,16 @@ Status InputStream::Peek(int64_t ARROW_ARG_UNUSED(nbytes),\n \n bool InputStream::supports_zero_copy() const { return false; }\n \n+Status MakeInputStreamIterator(std::shared_ptr<InputStream> stream, int64_t block_size,\n+                               Iterator<std::shared_ptr<Buffer>>* out) {\n+  if (stream->closed()) {\n+    return Status::Invalid(\"Cannot take iterator on closed stream\");\n+  }\n+  DCHECK_GT(block_size, 0);\n+  *out = Iterator<std::shared_ptr<Buffer>>(InputStreamBlockIterator(stream, block_size));\n \n Review comment:\n   My guess is that it would be less readable (the lambda would mutate outer variables).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T18:12:44.109+0000",
                    "updated": "2019-10-08T18:12:44.109+0000",
                    "started": "2019-10-08T18:12:44.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325242",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325245",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#issuecomment-539636432\n \n \n   Rebased.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T18:13:05.469+0000",
                    "updated": "2019-10-08T18:13:05.469+0000",
                    "started": "2019-10-08T18:13:05.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325245",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573#issuecomment-539666825\n \n \n   AppVeyor: https://ci.appveyor.com/project/pitrou/arrow/builds/27968010\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T19:31:17.160+0000",
                    "updated": "2019-10-08T19:31:17.160+0000",
                    "started": "2019-10-08T19:31:17.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325290",
                    "issueId": "13260090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/worklog/325603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5573: ARROW-6764: [C++] Create a readahead iterator\nURL: https://github.com/apache/arrow/pull/5573\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T09:42:57.940+0000",
                    "updated": "2019-10-09T09:42:57.940+0000",
                    "started": "2019-10-09T09:42:57.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325603",
                    "issueId": "13260090"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@120cd9e8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4759eea5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51a164ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5905849d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14cb602e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@19d6dc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ac47521[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2f102388[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6015fc54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2ef479bc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57607c3e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@79c21939[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 09 09:42:57 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-09T09:42:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6764/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-10-02T10:56:25.000+0000",
        "updated": "2019-10-09T09:54:03.000+0000",
        "timeoriginalestimate": null,
        "description": "This could replace the current ad-hoc ReadaheadSpooler, at least for JSON.\r\nCSV currently uses non-zero padding, but it could switch to the same strategy as JSON (i.e. keep track of partial / completion blocks).\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add readahead iterator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090/comment/16947492",
                    "id": "16947492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5573\n[https://github.com/apache/arrow/pull/5573]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-10-09T09:42:57.793+0000",
                    "updated": "2019-10-09T09:42:57.793+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0786g:",
        "customfield_12314139": null
    }
}