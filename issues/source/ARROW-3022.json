{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13177639",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639",
    "key": "ARROW-3022",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3022/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/132898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet opened a new pull request #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-09T10:47:13.582+0000",
                    "updated": "2018-08-09T10:47:13.582+0000",
                    "started": "2018-08-09T10:47:13.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132898",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/132899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-411716962\n \n \n   @stuartcarnie PTAL.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-09T10:47:33.141+0000",
                    "updated": "2018-08-09T10:47:33.141+0000",
                    "started": "2018-08-09T10:47:33.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132899",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/132903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-411718022\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=h1) Report\n   > Merging [#2411](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/6e5bfe272c5a7e061c00299e1404e0fea84031e3?src=pr&el=desc) will **decrease** coverage by `39.68%`.\n   > The diff coverage is `76.69%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2411/graphs/tree.svg?token=LpTCFbqVT1&src=pr&height=150&width=650)](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2411       +/-   ##\n   ===========================================\n   - Coverage    84.8%   45.12%   -39.69%     \n   ===========================================\n     Files         296       48      -248     \n     Lines       45646     2163    -43483     \n   ===========================================\n   - Hits        38711      976    -37735     \n   + Misses       6890     1135     -5755     \n   - Partials       45       52        +7\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `61.98% <0%> (+3.15%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.66% <100%> (+0.17%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `66.66% <65.78%> (-4.77%)` | :arrow_down: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `82.6% <82.6%> (\u00f8)` | |\n   | [cpp/src/arrow/status-test.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9zdGF0dXMtdGVzdC5jYw==) | | |\n   | [cpp/src/arrow/util/hash-util.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2hhc2gtdXRpbC5o) | | |\n   | [cpp/src/arrow/io/interfaces.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9pbnRlcmZhY2VzLmNj) | | |\n   | [cpp/src/arrow/ipc/dictionary.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvZGljdGlvbmFyeS5o) | | |\n   | [python/pyarrow/tests/test\\_plasma.py](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWEucHk=) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | ... and [250 more](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=footer). Last update [6e5bfe2...3a3d260](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-09T10:52:00.109+0000",
                    "updated": "2018-08-09T10:52:00.109+0000",
                    "started": "2018-08-09T10:52:00.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132903",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/133557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-412066148\n \n \n   hum... could someone restart the build?\r\n   for some reason, travis gave us a build with Go-1.7.x, instead of the requested Go-1.10.x (hence the error about the missing `\"math/bits\"` package that was only introduced with - IIRC - 1.8.x)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T12:22:04.491+0000",
                    "updated": "2018-08-10T12:22:04.491+0000",
                    "started": "2018-08-10T12:22:04.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133557",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/133559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-411718022\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=h1) Report\n   > Merging [#2411](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5a97cb77415713f0d504a7bad3d6287e94694c8?src=pr&el=desc) will **decrease** coverage by `39.44%`.\n   > The diff coverage is `76.69%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2411/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2411       +/-   ##\n   ===========================================\n   - Coverage   84.57%   45.12%   -39.45%     \n   ===========================================\n     Files         298       48      -250     \n     Lines       45500     2163    -43337     \n   ===========================================\n   - Hits        38480      976    -37504     \n   + Misses       6975     1135     -5840     \n   - Partials       45       52        +7\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `61.98% <0%> (+3.15%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.66% <100%> (+0.17%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `66.66% <65.78%> (-4.77%)` | :arrow_down: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `82.6% <82.6%> (\u00f8)` | |\n   | [python/pyarrow/parquet.py](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcGFycXVldC5weQ==) | | |\n   | [python/pyarrow/tests/test\\_types.py](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90eXBlcy5weQ==) | | |\n   | [cpp/src/arrow/util/decimal.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuY2M=) | | |\n   | [cpp/src/arrow/memory\\_pool.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC5jYw==) | | |\n   | [python/pyarrow/\\_\\_init\\_\\_.py](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX19pbml0X18ucHk=) | | |\n   | [cpp/src/plasma/common.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY29tbW9uLmg=) | | |\n   | ... and [252 more](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=footer). Last update [b5a97cb...abfee73](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T12:25:21.452+0000",
                    "updated": "2018-08-10T12:25:21.452+0000",
                    "started": "2018-08-10T12:25:21.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133559",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/133564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-412070291\n \n \n   Restarted\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T12:40:08.379+0000",
                    "updated": "2018-08-10T12:40:08.379+0000",
                    "started": "2018-08-10T12:40:08.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133564",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/133565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-411718022\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=h1) Report\n   > Merging [#2411](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5a97cb77415713f0d504a7bad3d6287e94694c8?src=pr&el=desc) will **decrease** coverage by `38.98%`.\n   > The diff coverage is `76.69%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2411/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2411       +/-   ##\n   ===========================================\n   - Coverage   84.57%   45.58%   -38.99%     \n   ===========================================\n     Files         298       48      -250     \n     Lines       45500     2163    -43337     \n   ===========================================\n   - Hits        38480      986    -37494     \n   + Misses       6975     1129     -5846     \n   - Partials       45       48        +3\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `61.98% <0%> (+3.15%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.66% <100%> (+0.17%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `66.66% <65.78%> (-4.77%)` | :arrow_down: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `82.6% <82.6%> (\u00f8)` | |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [265 more](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=footer). Last update [b5a97cb...abfee73](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T12:43:06.451+0000",
                    "updated": "2018-08-10T12:43:06.451+0000",
                    "started": "2018-08-10T12:43:06.450+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133565",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/133570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-411718022\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=h1) Report\n   > Merging [#2411](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5a97cb77415713f0d504a7bad3d6287e94694c8?src=pr&el=desc) will **decrease** coverage by `39.12%`.\n   > The diff coverage is `80.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2411/graphs/tree.svg?src=pr&token=LpTCFbqVT1&width=650&height=150)](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2411       +/-   ##\n   ===========================================\n   - Coverage   84.57%   45.44%   -39.13%     \n   ===========================================\n     Files         298       48      -250     \n     Lines       45500     2163    -43337     \n   ===========================================\n   - Hits        38480      983    -37497     \n   + Misses       6975     1130     -5845     \n   - Partials       45       50        +5\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `61.98% <0%> (+3.15%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.66% <100%> (+0.17%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `82.22% <78.94%> (+10.79%)` | :arrow_up: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `82.6% <82.6%> (\u00f8)` | |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | | |\n   | [cpp/src/arrow/adapters/orc/adapter.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hZGFwdGVycy9vcmMvYWRhcHRlci5jYw==) | | |\n   | [python/pyarrow/tests/test\\_jvm.py](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9qdm0ucHk=) | | |\n   | [cpp/src/plasma/events.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvZXZlbnRzLmg=) | | |\n   | [python/pyarrow/tests/test\\_convert\\_pandas.py](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jb252ZXJ0X3BhbmRhcy5weQ==) | | |\n   | [cpp/src/arrow/tensor.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZW5zb3IuaA==) | | |\n   | ... and [253 more](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=footer). Last update [b5a97cb...ee871d9](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T12:59:43.780+0000",
                    "updated": "2018-08-10T12:59:43.780+0000",
                    "started": "2018-08-10T12:59:43.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133570",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/134153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-411718022\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=h1) Report\n   > Merging [#2411](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ed3306b589d825dc63e2517ab3ebc23edecb7cf1?src=pr&el=desc) will **decrease** coverage by `38.68%`.\n   > The diff coverage is `80.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2411/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2411       +/-   ##\n   ==========================================\n   - Coverage   84.59%   45.9%   -38.69%     \n   ==========================================\n     Files         298      48      -250     \n     Lines       45500    2163    -43337     \n   ==========================================\n   - Hits        38490     993    -37497     \n   + Misses       6969    1124     -5845     \n   - Partials       41      46        +5\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `61.98% <0%> (+3.15%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.66% <100%> (+0.17%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `82.22% <78.94%> (+10.79%)` | :arrow_up: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `82.6% <82.6%> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/json-internal.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1pbnRlcm5hbC5jYw==) | | |\n   | [cpp/src/arrow/public-api-test.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wdWJsaWMtYXBpLXRlc3QuY2M=) | | |\n   | [cpp/src/arrow/python/builtin\\_convert.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vYnVpbHRpbl9jb252ZXJ0Lmg=) | | |\n   | [cpp/src/arrow/util/decimal-test.cc](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwtdGVzdC5jYw==) | | |\n   | [cpp/src/plasma/common.h](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY29tbW9uLmg=) | | |\n   | [python/pyarrow/builder.pxi](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYnVpbGRlci5weGk=) | | |\n   | ... and [253 more](https://codecov.io/gh/apache/arrow/pull/2411/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=footer). Last update [ed3306b...101752a](https://codecov.io/gh/apache/arrow/pull/2411?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T15:07:37.315+0000",
                    "updated": "2018-08-13T15:07:37.315+0000",
                    "started": "2018-08-13T15:07:37.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134153",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/134154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-412551708\n \n \n   rebased on top of latest `master`.\r\n   (nice side-effect: travis is having a better day, and the CI tests are green :P)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T15:08:03.622+0000",
                    "updated": "2018-08-13T15:08:03.622+0000",
                    "started": "2018-08-13T15:08:03.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134154",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/134201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-412602025\n \n \n   @pitrou or @cpcloud can you help merge the Go PRs that have been approved? I am away from internet until tomorrow\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T17:39:40.260+0000",
                    "updated": "2018-08-13T17:39:40.260+0000",
                    "started": "2018-08-13T17:39:40.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134201",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/134213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-412608711\n \n \n   @wesm Will do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T17:59:54.255+0000",
                    "updated": "2018-08-13T17:59:54.255+0000",
                    "started": "2018-08-13T17:59:54.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134213",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/134215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/README.md b/go/README.md\nindex e4d349de95..da1893794d 100644\n--- a/go/README.md\n+++ b/go/README.md\n@@ -143,8 +143,8 @@ them internally in the [ifql][] execution engine and storage layers of [InfluxDB\n - [ ] Time64 (microseconds or nanoseconds since midnight)\n - [ ] Decimal (128-bit)\n - [ ] Fixed-sized binary\n-- [ ] List\n-- [ ] Struct\n+- [x] List\n+- [x] Struct\n - [ ] Union\n     - [ ] Dense\n     - [ ] Sparse\n@@ -171,4 +171,4 @@ Serialization is planned for a future iteration.\n [arrow]:    https://arrow.apache.org\n [ifql]:     https://github.com/influxdata/ifql\n [InfluxDB]: https://github.com/influxdata/influxdb\n-[c2goasm]:  https://github.com/minio/c2goasm\n\\ No newline at end of file\n+[c2goasm]:  https://github.com/minio/c2goasm\ndiff --git a/go/arrow/array/array.go b/go/arrow/array/array.go\nindex 61cefac015..f45bec4c4d 100644\n--- a/go/arrow/array/array.go\n+++ b/go/arrow/array/array.go\n@@ -186,4 +186,5 @@ func MakeFromData(data *Data) Interface {\n \n func init() {\n \tmakeArrayFn[arrow.LIST] = func(data *Data) Interface { return NewListData(data) }\n+\tmakeArrayFn[arrow.STRUCT] = func(data *Data) Interface { return NewStructData(data) }\n }\ndiff --git a/go/arrow/array/array_test.go b/go/arrow/array/array_test.go\nindex cd051eefb8..b442c7620a 100644\n--- a/go/arrow/array/array_test.go\n+++ b/go/arrow/array/array_test.go\n@@ -66,6 +66,12 @@ func TestMakeFromData(t *testing.T) {\n \t\t\tarray.NewData(&testDataType{arrow.INT64}, 0, make([]*memory.Buffer, 4), nil, 0),\n \t\t}},\n \n+\t\t{name: \"struct\", d: &testDataType{arrow.STRUCT}},\n+\t\t{name: \"struct\", d: &testDataType{arrow.STRUCT}, child: []*array.Data{\n+\t\t\tarray.NewData(&testDataType{arrow.INT64}, 0, make([]*memory.Buffer, 4), nil, 0),\n+\t\t\tarray.NewData(&testDataType{arrow.INT64}, 0, make([]*memory.Buffer, 4), nil, 0),\n+\t\t}},\n+\n \t\t// invalid types\n \t\t{name: \"invalid(-1)\", d: &testDataType{arrow.Type(-1)}, expPanic: true, expError: \"invalid data type: Type(-1)\"},\n \t\t{name: \"invalid(28)\", d: &testDataType{arrow.Type(28)}, expPanic: true, expError: \"invalid data type: Type(28)\"},\ndiff --git a/go/arrow/array/builder.go b/go/arrow/array/builder.go\nindex a20c30369b..2e237f4516 100644\n--- a/go/arrow/array/builder.go\n+++ b/go/arrow/array/builder.go\n@@ -44,10 +44,16 @@ type Builder interface {\n \t// NullN returns the number of null values in the array builder.\n \tNullN() int\n \n+\t// AppendNull adds a new null value to the array being built.\n+\tAppendNull()\n+\n \t// NewArray creates a new array from the memory buffers used\n \t// by the builder and resets the Builder so it can be used to build\n \t// a new array.\n \tNewArray() Interface\n+\n+\tinit(capacity int)\n+\tresize(newBits int, init func(int))\n }\n \n // builder provides common functionality for managing the validity bitmap (nulls) when building arrays.\n@@ -227,6 +233,8 @@ func newBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n \t\ttyp := dtype.(*arrow.ListType)\n \t\treturn NewListBuilder(mem, typ.Elem())\n \tcase arrow.STRUCT:\n+\t\ttyp := dtype.(*arrow.StructType)\n+\t\treturn NewStructBuilder(mem, typ)\n \tcase arrow.UNION:\n \tcase arrow.DICTIONARY:\n \tcase arrow.MAP:\ndiff --git a/go/arrow/array/struct.go b/go/arrow/array/struct.go\nnew file mode 100644\nindex 0000000000..9e0c1aa094\n--- /dev/null\n+++ b/go/arrow/array/struct.go\n@@ -0,0 +1,201 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/internal/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Struct represents an ordered sequence of relative types.\n+type Struct struct {\n+\tarray\n+\tfields []Interface\n+}\n+\n+// NewStructData returns a new Struct array value from data.\n+func NewStructData(data *Data) *Struct {\n+\ta := &Struct{}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+func (a *Struct) NumField() int         { return len(a.fields) }\n+func (a *Struct) Field(i int) Interface { return a.fields[i] }\n+\n+func (a *Struct) setData(data *Data) {\n+\ta.array.setData(data)\n+\ta.fields = make([]Interface, len(data.childData))\n+\tfor i, child := range data.childData {\n+\t\ta.fields[i] = MakeFromData(child)\n+\t}\n+}\n+\n+func (a *Struct) Release() {\n+\ta.array.Release()\n+\tfor _, f := range a.fields {\n+\t\tf.Release()\n+\t}\n+}\n+\n+type StructBuilder struct {\n+\tbuilder\n+\n+\tdtype  arrow.DataType\n+\tfields []Builder\n+}\n+\n+// NewStructBuilder returns a builder, using the provided memory allocator.\n+func NewStructBuilder(mem memory.Allocator, dtype *arrow.StructType) *StructBuilder {\n+\tb := &StructBuilder{\n+\t\tbuilder: builder{refCount: 1, mem: mem},\n+\t\tdtype:   dtype,\n+\t\tfields:  make([]Builder, len(dtype.Fields())),\n+\t}\n+\tfor i, f := range dtype.Fields() {\n+\t\tb.fields[i] = newBuilder(b.mem, f.Type)\n+\t}\n+\treturn b\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+func (b *StructBuilder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tif b.nullBitmap != nil {\n+\t\t\tb.nullBitmap.Release()\n+\t\t\tb.nullBitmap = nil\n+\t\t}\n+\t}\n+\n+\tfor _, f := range b.fields {\n+\t\tf.Release()\n+\t}\n+}\n+\n+func (b *StructBuilder) Append(v bool) {\n+\tb.Reserve(1)\n+\tb.unsafeAppendBoolToBitmap(v)\n+\tif !v {\n+\t\tfor _, f := range b.fields {\n+\t\t\tf.AppendNull()\n+\t\t}\n+\t}\n+}\n+\n+func (b *StructBuilder) AppendValues(valids []bool) {\n+\tb.Reserve(len(valids))\n+\tb.builder.unsafeAppendBoolsToBitmap(valids, len(valids))\n+}\n+\n+func (b *StructBuilder) AppendNull() { b.Append(false) }\n+\n+func (b *StructBuilder) unsafeAppend(v bool) {\n+\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\tb.length++\n+}\n+\n+func (b *StructBuilder) unsafeAppendBoolToBitmap(isValid bool) {\n+\tif isValid {\n+\t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\t} else {\n+\t\tb.nulls++\n+\t}\n+\tb.length++\n+}\n+\n+func (b *StructBuilder) init(capacity int) {\n+\tb.builder.init(capacity)\n+\tfor _, f := range b.fields {\n+\t\tf.init(capacity)\n+\t}\n+}\n+\n+// Reserve ensures there is enough space for appending n elements\n+// by checking the capacity and calling Resize if necessary.\n+func (b *StructBuilder) Reserve(n int) {\n+\tb.builder.reserve(n, b.Resize)\n+}\n+\n+// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+func (b *StructBuilder) Resize(n int) {\n+\tif n < minBuilderCapacity {\n+\t\tn = minBuilderCapacity\n+\t}\n+\n+\tif b.capacity == 0 {\n+\t\tb.init(n)\n+\t} else {\n+\t\tb.builder.resize(n, b.builder.init)\n+\t\tfor _, f := range b.fields {\n+\t\t\tf.resize(n, f.init)\n+\t\t}\n+\t}\n+}\n+\n+func (b *StructBuilder) NumField() int              { return len(b.fields) }\n+func (b *StructBuilder) FieldBuilder(i int) Builder { return b.fields[i] }\n+\n+// NewArray creates a Struct array from the memory buffers used by the builder and resets the StructBuilder\n+// so it can be used to build a new array.\n+func (b *StructBuilder) NewArray() Interface {\n+\treturn b.NewStructArray()\n+}\n+\n+// NewStructArray creates a Struct array from the memory buffers used by the builder and resets the StructBuilder\n+// so it can be used to build a new array.\n+func (b *StructBuilder) NewStructArray() (a *Struct) {\n+\tdata := b.newData()\n+\ta = NewStructData(data)\n+\tdata.Release()\n+\treturn\n+}\n+\n+func (b *StructBuilder) newData() (data *Data) {\n+\tfields := make([]*Data, len(b.fields))\n+\tfor i, f := range b.fields {\n+\t\tarr := f.NewArray()\n+\t\tdefer arr.Release()\n+\t\tfields[i] = arr.Data()\n+\t}\n+\n+\tdata = NewData(\n+\t\tb.dtype, b.length,\n+\t\t[]*memory.Buffer{\n+\t\t\tb.nullBitmap,\n+\t\t\tnil, // FIXME(sbinet)\n+\t\t},\n+\t\tfields,\n+\t\tb.nulls,\n+\t)\n+\tb.reset()\n+\n+\treturn\n+}\n+\n+var (\n+\t_ Interface = (*Struct)(nil)\n+\t_ Builder   = (*StructBuilder)(nil)\n+)\ndiff --git a/go/arrow/array/struct_test.go b/go/arrow/array/struct_test.go\nnew file mode 100644\nindex 0000000000..6265299956\n--- /dev/null\n+++ b/go/arrow/array/struct_test.go\n@@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+func TestStructArray(t *testing.T) {\n+\tvar (\n+\t\tpool = memory.NewGoAllocator()\n+\t\tf1s  = []byte{'j', 'o', 'e', 'b', 'o', 'b', 'm', 'a', 'r', 'k'}\n+\t\tf2s  = []int32{1, 2, 3, 4}\n+\n+\t\tf1Lengths = []int{3, 0, 3, 4}\n+\t\tf1Offsets = []int32{0, 3, 3, 6, 10}\n+\t\tf1Valids  = []bool{true, false, true, true}\n+\n+\t\tisValid = []bool{true, true, true, true}\n+\n+\t\tfields = []arrow.Field{\n+\t\t\t{Name: \"f1\", Type: arrow.ListOf(arrow.PrimitiveTypes.Uint8)},\n+\t\t\t{Name: \"f2\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t}\n+\t\tdtype = arrow.StructOf(fields...)\n+\t)\n+\n+\tsb := array.NewStructBuilder(pool, dtype)\n+\tdefer sb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tf1b := sb.FieldBuilder(0).(*array.ListBuilder)\n+\t\tf1vb := f1b.ValueBuilder().(*array.Uint8Builder)\n+\t\tf2b := sb.FieldBuilder(1).(*array.Int32Builder)\n+\n+\t\tif got, want := sb.NumField(), 2; got != want {\n+\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t}\n+\n+\t\tsb.Resize(len(f1Lengths))\n+\t\tf1vb.Resize(len(f1s))\n+\t\tf2b.Resize(len(f2s))\n+\n+\t\tpos := 0\n+\t\tfor i, length := range f1Lengths {\n+\t\t\tf1b.Append(f1Valids[i])\n+\t\t\tfor j := 0; j < length; j++ {\n+\t\t\t\tf1vb.Append(f1s[pos])\n+\t\t\t\tpos++\n+\t\t\t}\n+\t\t\tf2b.Append(f2s[i])\n+\t\t}\n+\n+\t\tfor _, valid := range isValid {\n+\t\t\tsb.Append(valid)\n+\t\t}\n+\n+\t\tarr := sb.NewArray().(*array.Struct)\n+\t\tdefer arr.Release()\n+\n+\t\tif got, want := arr.DataType().ID(), arrow.STRUCT; got != want {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t}\n+\t\tif got, want := arr.Len(), len(isValid); got != want {\n+\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t}\n+\t\tfor i, valid := range isValid {\n+\t\t\tif got, want := arr.IsValid(i), valid; got != want {\n+\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t}\n+\t\t}\n+\n+\t\t{\n+\t\t\tf1arr := arr.Field(0).(*array.List)\n+\t\t\tif got, want := f1arr.Len(), len(f1Lengths); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tfor i := range f1Lengths {\n+\t\t\t\tif got, want := f1arr.IsValid(i), f1Valids[i]; got != want {\n+\t\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t\t}\n+\t\t\t\tif got, want := f1arr.IsNull(i), f1Lengths[i] == 0; got != want {\n+\t\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n+\t\t\tif got, want := f1arr.Offsets(), f1Offsets; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\n+\t\t\tvarr := f1arr.ListValues().(*array.Uint8)\n+\t\t\tif got, want := varr.Uint8Values(), f1s; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t}\n+\n+\t\t{\n+\t\t\tf2arr := arr.Field(1).(*array.Int32)\n+\t\t\tif got, want := f2arr.Len(), len(f2s); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := f2arr.Int32Values(), f2s; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+func TestStructArrayEmpty(t *testing.T) {\n+\tpool := memory.NewGoAllocator()\n+\tsb := array.NewStructBuilder(pool, arrow.StructOf())\n+\tdefer sb.Release()\n+\n+\tif got, want := sb.NumField(), 0; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tarr := sb.NewArray().(*array.Struct)\n+\n+\tif got, want := arr.Len(), 0; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NumField(), 0; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+}\n+\n+func TestStructArrayBulkAppend(t *testing.T) {\n+\tvar (\n+\t\tpool = memory.NewGoAllocator()\n+\t\tf1s  = []byte{'j', 'o', 'e', 'b', 'o', 'b', 'm', 'a', 'r', 'k'}\n+\t\tf2s  = []int32{1, 2, 3, 4}\n+\n+\t\tf1Lengths = []int{3, 0, 3, 4}\n+\t\tf1Offsets = []int32{0, 3, 3, 6, 10}\n+\t\tf1Valids  = []bool{true, false, true, true}\n+\n+\t\tisValid = []bool{true, true, true, true}\n+\n+\t\tfields = []arrow.Field{\n+\t\t\t{Name: \"f1\", Type: arrow.ListOf(arrow.PrimitiveTypes.Uint8)},\n+\t\t\t{Name: \"f2\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t}\n+\t\tdtype = arrow.StructOf(fields...)\n+\t)\n+\n+\tsb := array.NewStructBuilder(pool, dtype)\n+\tdefer sb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tf1b := sb.FieldBuilder(0).(*array.ListBuilder)\n+\t\tf1vb := f1b.ValueBuilder().(*array.Uint8Builder)\n+\t\tf2b := sb.FieldBuilder(1).(*array.Int32Builder)\n+\n+\t\tif got, want := sb.NumField(), 2; got != want {\n+\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t}\n+\n+\t\tsb.Resize(len(f1Lengths))\n+\t\tf1vb.Resize(len(f1s))\n+\t\tf2b.Resize(len(f2s))\n+\n+\t\tsb.AppendValues(isValid)\n+\t\tf1b.AppendValues(f1Offsets, f1Valids)\n+\t\tf1vb.AppendValues(f1s, nil)\n+\t\tf2b.AppendValues(f2s, nil)\n+\n+\t\tarr := sb.NewArray().(*array.Struct)\n+\t\tdefer arr.Release()\n+\n+\t\tif got, want := arr.DataType().ID(), arrow.STRUCT; got != want {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t}\n+\t\tif got, want := arr.Len(), len(isValid); got != want {\n+\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t}\n+\t\tfor i, valid := range isValid {\n+\t\t\tif got, want := arr.IsValid(i), valid; got != want {\n+\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t}\n+\t\t}\n+\n+\t\t{\n+\t\t\tf1arr := arr.Field(0).(*array.List)\n+\t\t\tif got, want := f1arr.Len(), len(f1Lengths); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tfor i := range f1Lengths {\n+\t\t\t\tif got, want := f1arr.IsValid(i), f1Valids[i]; got != want {\n+\t\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t\t}\n+\t\t\t\tif got, want := f1arr.IsNull(i), f1Lengths[i] == 0; got != want {\n+\t\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n+\t\t\tif got, want := f1arr.Offsets(), f1Offsets; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\n+\t\t\tvarr := f1arr.ListValues().(*array.Uint8)\n+\t\t\tif got, want := varr.Uint8Values(), f1s; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t}\n+\n+\t\t{\n+\t\t\tf2arr := arr.Field(1).(*array.Int32)\n+\t\t\tif got, want := f2arr.Len(), len(f2s); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := f2arr.Int32Values(), f2s; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t}\n+\t}\n+}\ndiff --git a/go/arrow/datatype_nested.go b/go/arrow/datatype_nested.go\nindex d34c096576..e91e586ab5 100644\n--- a/go/arrow/datatype_nested.go\n+++ b/go/arrow/datatype_nested.go\n@@ -16,6 +16,8 @@\n \n package arrow\n \n+import \"fmt\"\n+\n // ListType describes a nested type in which each array slot contains\n // a variable-size sequence of values, all having the same relative type.\n type ListType struct {\n@@ -39,6 +41,91 @@ func (*ListType) Name() string { return \"list\" }\n // Elem returns the ListType's element type.\n func (t *ListType) Elem() DataType { return t.elem }\n \n+// StructType describes a nested type parameterized by an ordered sequence\n+// of relative types, called its fields.\n+type StructType struct {\n+\tfields []Field\n+\tindex  map[string]int\n+\tmeta   KeyValueMetadata\n+}\n+\n+// StructOf returns the struct type with fields fs.\n+//\n+// StructOf panics if there are duplicated fields.\n+// StructOf panics if there is a field with an invalid DataType.\n+func StructOf(fs ...Field) *StructType {\n+\tn := len(fs)\n+\tif n == 0 {\n+\t\treturn &StructType{}\n+\t}\n+\n+\tt := &StructType{\n+\t\tfields: make([]Field, n),\n+\t\tindex:  make(map[string]int, n),\n+\t}\n+\tfor i, f := range fs {\n+\t\tif f.Type == nil {\n+\t\t\tpanic(\"arrow: field with nil DataType\")\n+\t\t}\n+\t\tt.fields[i] = Field{\n+\t\t\tName:     f.Name,\n+\t\t\tType:     f.Type,\n+\t\t\tNullable: f.Nullable,\n+\t\t\tMetadata: f.Metadata.clone(),\n+\t\t}\n+\t\tif _, dup := t.index[f.Name]; dup {\n+\t\t\tpanic(fmt.Errorf(\"arrow: duplicate field with name %q\", f.Name))\n+\t\t}\n+\t\tt.index[f.Name] = i\n+\t}\n+\n+\treturn t\n+}\n+\n+func (*StructType) ID() Type     { return STRUCT }\n+func (*StructType) Name() string { return \"struct\" }\n+\n+func (t *StructType) Fields() []Field   { return t.fields }\n+func (t *StructType) Field(i int) Field { return t.fields[i] }\n+\n+func (t *StructType) FieldByName(name string) (Field, bool) {\n+\ti, ok := t.index[name]\n+\tif !ok {\n+\t\treturn Field{}, false\n+\t}\n+\treturn t.fields[i], true\n+}\n+\n+type Field struct {\n+\tName     string           // Field name\n+\tType     DataType         // The field's data type\n+\tNullable bool             // Fields can be nullable\n+\tMetadata KeyValueMetadata // The field's metadata, if any\n+}\n+\n+func (f Field) HasMetadata() bool { return len(f.Metadata.keys) != 0 }\n+\n+type KeyValueMetadata struct {\n+\tkeys   []string\n+\tvalues []string\n+}\n+\n+func (kv KeyValueMetadata) clone() KeyValueMetadata {\n+\tif len(kv.keys) == 0 {\n+\t\treturn KeyValueMetadata{}\n+\t}\n+\n+\to := KeyValueMetadata{\n+\t\tkeys:   make([]string, len(kv.keys)),\n+\t\tvalues: make([]string, len(kv.values)),\n+\t}\n+\tcopy(o.keys, kv.keys)\n+\tcopy(o.values, kv.values)\n+\n+\treturn o\n+}\n+\n var (\n \t_ DataType = (*ListType)(nil)\n+\t_ DataType = (*StructType)(nil)\n )\ndiff --git a/go/arrow/datatype_nested_test.go b/go/arrow/datatype_nested_test.go\nindex 54ffb029bc..8b3f5b7ff5 100644\n--- a/go/arrow/datatype_nested_test.go\n+++ b/go/arrow/datatype_nested_test.go\n@@ -34,6 +34,8 @@ func TestListOf(t *testing.T) {\n \t\tPrimitiveTypes.Uint64,\n \t\tPrimitiveTypes.Float32,\n \t\tPrimitiveTypes.Float64,\n+\t\tListOf(PrimitiveTypes.Int32),\n+\t\tStructOf(),\n \t} {\n \t\tt.Run(tc.Name(), func(t *testing.T) {\n \t\t\tgot := ListOf(tc)\n@@ -55,4 +57,187 @@ func TestListOf(t *testing.T) {\n \t\t\t}\n \t\t})\n \t}\n+\n+\tfor _, dtype := range []DataType{\n+\t\tnil,\n+\t\t// (*Int32Type)(nil), // FIXME(sbinet): should we make sure this is actually caught?\n+\t\t// (*ListType)(nil), // FIXME(sbinet): should we make sure this is actually caught?\n+\t\t// (*StructType)(nil), // FIXME(sbinet): should we make sure this is actually caught?\n+\t} {\n+\t\tt.Run(\"invalid\", func(t *testing.T) {\n+\t\t\tdefer func() {\n+\t\t\t\te := recover()\n+\t\t\t\tif e == nil {\n+\t\t\t\t\tt.Fatalf(\"test should have panicked but did not\")\n+\t\t\t\t}\n+\t\t\t}()\n+\n+\t\t\t_ = ListOf(dtype)\n+\t\t})\n+\t}\n+}\n+\n+func TestStructOf(t *testing.T) {\n+\tfor _, tc := range []struct {\n+\t\tfields []Field\n+\t\twant   DataType\n+\t}{\n+\t\t{\n+\t\t\tfields: nil,\n+\t\t\twant:   &StructType{fields: nil, index: nil},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{{Name: \"f1\", Type: PrimitiveTypes.Int32}},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{{Name: \"f1\", Type: PrimitiveTypes.Int32}},\n+\t\t\t\tindex:  map[string]int{\"f1\": 0},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{{Name: \"f1\", Type: PrimitiveTypes.Int32, Nullable: true}},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{{Name: \"f1\", Type: PrimitiveTypes.Int32, Nullable: true}},\n+\t\t\t\tindex:  map[string]int{\"f1\": 0},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"\", Type: PrimitiveTypes.Int64},\n+\t\t\t},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{\n+\t\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t\t{Name: \"\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t},\n+\t\t\t\tindex: map[string]int{\"f1\": 0, \"\": 1},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{\n+\t\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t},\n+\t\t\t\tindex: map[string]int{\"f1\": 0, \"f2\": 1},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t{Name: \"f3\", Type: ListOf(PrimitiveTypes.Float64)},\n+\t\t\t},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{\n+\t\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t\t{Name: \"f3\", Type: ListOf(PrimitiveTypes.Float64)},\n+\t\t\t\t},\n+\t\t\t\tindex: map[string]int{\"f1\": 0, \"f2\": 1, \"f3\": 2},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t{Name: \"f3\", Type: ListOf(ListOf(PrimitiveTypes.Float64))},\n+\t\t\t},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{\n+\t\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t\t{Name: \"f3\", Type: ListOf(ListOf(PrimitiveTypes.Float64))},\n+\t\t\t\t},\n+\t\t\t\tindex: map[string]int{\"f1\": 0, \"f2\": 1, \"f3\": 2},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t{Name: \"f3\", Type: ListOf(ListOf(StructOf(Field{Name: \"f1\", Type: PrimitiveTypes.Float64})))},\n+\t\t\t},\n+\t\t\twant: &StructType{\n+\t\t\t\tfields: []Field{\n+\t\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t\t\t{Name: \"f3\", Type: ListOf(ListOf(StructOf(Field{Name: \"f1\", Type: PrimitiveTypes.Float64})))},\n+\t\t\t\t},\n+\t\t\t\tindex: map[string]int{\"f1\": 0, \"f2\": 1, \"f3\": 2},\n+\t\t\t},\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tgot := StructOf(tc.fields...)\n+\t\t\tif !reflect.DeepEqual(got, tc.want) {\n+\t\t\t\tt.Fatalf(\"got=%#v, want=%#v\", got, tc.want)\n+\t\t\t}\n+\n+\t\t\tif got, want := got.ID(), STRUCT; got != want {\n+\t\t\t\tt.Fatalf(\"invalid ID. got=%v, want=%v\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := got.Name(), \"struct\"; got != want {\n+\t\t\t\tt.Fatalf(\"invalid name. got=%q, want=%q\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := len(got.Fields()), len(tc.fields); got != want {\n+\t\t\t\tt.Fatalf(\"invalid number of fields. got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\t_, ok := got.FieldByName(\"not-there\")\n+\t\t\tif ok {\n+\t\t\t\tt.Fatalf(\"expected an error\")\n+\t\t\t}\n+\n+\t\t\tif len(tc.fields) > 0 {\n+\t\t\t\tf1, ok := got.FieldByName(\"f1\")\n+\t\t\t\tif !ok {\n+\t\t\t\t\tt.Fatalf(\"could not retrieve field 'f1'\")\n+\t\t\t\t}\n+\t\t\t\tif f1.HasMetadata() {\n+\t\t\t\t\tt.Fatalf(\"field 'f1' should not have metadata\")\n+\t\t\t\t}\n+\n+\t\t\t\tfor i := range tc.fields {\n+\t\t\t\t\tf := got.Field(i)\n+\t\t\t\t\tif f.Name != tc.fields[i].Name {\n+\t\t\t\t\t\tt.Fatalf(\"incorrect named for field[%d]: got=%q, want=%q\", i, f.Name, tc.fields[i].Name)\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t})\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\tfields []Field\n+\t}{\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"\", Type: PrimitiveTypes.Int32},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"x\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"x\", Type: PrimitiveTypes.Int32},\n+\t\t\t},\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tdefer func() {\n+\t\t\t\te := recover()\n+\t\t\t\tif e == nil {\n+\t\t\t\t\tt.Fatalf(\"should have panicked\")\n+\t\t\t\t}\n+\t\t\t}()\n+\t\t\t_ = StructOf(tc.fields...)\n+\t\t})\n+\t}\n }\ndiff --git a/go/arrow/example_test.go b/go/arrow/example_test.go\nindex 19a663096c..70aadbb2a7 100644\n--- a/go/arrow/example_test.go\n+++ b/go/arrow/example_test.go\n@@ -191,3 +191,93 @@ func Example_listArray() {\n \t// List[5]   = (null)\n \t// List[6]   = [9]\n }\n+\n+// This example shows how to create a Struct array.\n+// The resulting array should be:\n+//  [{\u2018joe\u2019, 1}, {null, 2}, null, {\u2018mark\u2019, 4}]\n+func Example_structArray() {\n+\tpool := memory.NewGoAllocator()\n+\tdtype := arrow.StructOf([]arrow.Field{\n+\t\t{Name: \"f1\", Type: arrow.ListOf(arrow.PrimitiveTypes.Uint8)},\n+\t\t{Name: \"f2\", Type: arrow.PrimitiveTypes.Int32},\n+\t}...)\n+\n+\tsb := array.NewStructBuilder(pool, dtype)\n+\tdefer sb.Release()\n+\n+\tf1b := sb.FieldBuilder(0).(*array.ListBuilder)\n+\tdefer f1b.Release()\n+\tf1vb := f1b.ValueBuilder().(*array.Uint8Builder)\n+\tdefer f1vb.Release()\n+\n+\tf2b := sb.FieldBuilder(1).(*array.Int32Builder)\n+\tdefer f2b.Release()\n+\n+\tsb.Reserve(4)\n+\tf1vb.Reserve(7)\n+\tf2b.Reserve(3)\n+\n+\tsb.Append(true)\n+\tf1b.Append(true)\n+\tf1vb.AppendValues([]byte(\"joe\"), nil)\n+\tf2b.Append(1)\n+\n+\tsb.Append(true)\n+\tf1b.AppendNull()\n+\tf2b.Append(2)\n+\n+\tsb.AppendNull()\n+\n+\tsb.Append(true)\n+\tf1b.Append(true)\n+\tf1vb.AppendValues([]byte(\"mark\"), nil)\n+\tf2b.Append(4)\n+\n+\tarr := sb.NewArray().(*array.Struct)\n+\tdefer arr.Release()\n+\n+\tfmt.Printf(\"NullN() = %d\\n\", arr.NullN())\n+\tfmt.Printf(\"Len()   = %d\\n\", arr.Len())\n+\n+\tlist := arr.Field(0).(*array.List)\n+\tdefer list.Release()\n+\n+\toffsets := list.Offsets()\n+\n+\tvarr := list.ListValues().(*array.Uint8)\n+\tdefer varr.Release()\n+\n+\tints := arr.Field(1).(*array.Int32)\n+\tdefer ints.Release()\n+\n+\tfor i := 0; i < arr.Len(); i++ {\n+\t\tif !arr.IsValid(i) {\n+\t\t\tfmt.Printf(\"Struct[%d] = (null)\\n\", i)\n+\t\t\tcontinue\n+\t\t}\n+\t\tfmt.Printf(\"Struct[%d] = [\", i)\n+\t\tpos := int(offsets[i])\n+\t\tswitch {\n+\t\tcase list.IsValid(pos):\n+\t\t\tfmt.Printf(\"[\")\n+\t\t\tfor j := offsets[i]; j < offsets[i+1]; j++ {\n+\t\t\t\tif j != offsets[i] {\n+\t\t\t\t\tfmt.Printf(\", \")\n+\t\t\t\t}\n+\t\t\t\tfmt.Printf(\"%v\", string(varr.Value(int(j))))\n+\t\t\t}\n+\t\t\tfmt.Printf(\"], \")\n+\t\tdefault:\n+\t\t\tfmt.Printf(\"(null), \")\n+\t\t}\n+\t\tfmt.Printf(\"%d]\\n\", ints.Value(i))\n+\t}\n+\n+\t// Output:\n+\t// NullN() = 1\n+\t// Len()   = 4\n+\t// Struct[0] = [[j, o, e], 1]\n+\t// Struct[1] = [[], 2]\n+\t// Struct[2] = (null)\n+\t// Struct[3] = [[m, a, r, k], 4]\n+}\ndiff --git a/go/arrow/metadata/schema.go b/go/arrow/metadata/schema.go\nindex 021b6ee536..2dad1901bf 100644\n--- a/go/arrow/metadata/schema.go\n+++ b/go/arrow/metadata/schema.go\n@@ -19,19 +19,7 @@ package metadata\n import \"github.com/apache/arrow/go/arrow\"\n \n type Schema struct {\n-\tfields      []Field\n+\tfields      []arrow.Field\n \tnameToIndex map[string]int\n-\tmetadata    KeyValueMetadata\n-}\n-\n-type Field struct {\n-\tname     string           // Field name\n-\ttyp      arrow.DataType   // The field's data type\n-\tnullable bool             // Fields can be nullable\n-\tmetadata KeyValueMetadata // The field's metadata, if any\n-}\n-\n-type KeyValueMetadata struct {\n-\tkeys   []string\n-\tvalues []string\n+\tmetadata    arrow.KeyValueMetadata\n }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T18:00:13.923+0000",
                    "updated": "2018-08-13T18:00:13.923+0000",
                    "started": "2018-08-13T18:00:13.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134215",
                    "issueId": "13177639"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/worklog/134217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2411: ARROW-3022: [Go] add support for Struct arrays\nURL: https://github.com/apache/arrow/pull/2411#issuecomment-412609143\n \n \n   Thanks @sbinet for doing this :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T18:01:05.848+0000",
                    "updated": "2018-08-13T18:01:05.848+0000",
                    "started": "2018-08-13T18:01:05.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134217",
                    "issueId": "13177639"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5485fac0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6137f944[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3085f82a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6e26daa7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28ee50fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@921db74[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@167a26d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4ed12558[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14e2e5ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@139f765d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54948e4a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@13289a65[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 13 18:00:11 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-13T18:00:11.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3022/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-08T10:07:21.000+0000",
        "updated": "2018-08-13T18:01:05.000+0000",
        "timeoriginalestimate": null,
        "description": "go-arrow should have support for creating Struct arrays.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] support for Struct",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177639/comment/16578718",
                    "id": "16578718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 2411\n[https://github.com/apache/arrow/pull/2411]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-08-13T18:00:11.052+0000",
                    "updated": "2018-08-13T18:00:11.052+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wtmn:",
        "customfield_12314139": null
    }
}