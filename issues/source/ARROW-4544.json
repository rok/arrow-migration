{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13215272",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272",
    "key": "ARROW-4544",
    "fields": {
        "parent": {
            "id": "13215112",
            "key": "ARROW-4534",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13215112",
            "fields": {
                "summary": "[Rust] Build JSON reader for reading record batches from line-delimited JSON files",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4544/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788\n\n\n   This allows reading nested JSON data provided in a schema. If the expected value doesn't exist, or is not an object, it is deemed to be null.\r\n   \r\n   I tested that the implementation correctly creates a null bitmap for the struct.\r\n   \r\n   This does not include schema inference.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T22:28:37.332+0000",
                    "updated": "2020-11-27T22:28:37.332+0000",
                    "started": "2020-11-27T22:28:37.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517467",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788#issuecomment-735002962\n\n\n   CC @houqp \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T22:29:01.381+0000",
                    "updated": "2020-11-27T22:29:01.381+0000",
                    "started": "2020-11-27T22:29:01.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517468",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788#issuecomment-735003554\n\n\n   https://issues.apache.org/jira/browse/ARROW-4544\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T22:33:24.833+0000",
                    "updated": "2020-11-27T22:33:24.833+0000",
                    "started": "2020-11-27T22:33:24.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517469",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788#discussion_r531799717\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -1022,6 +846,228 @@ impl<R: Read> Reader<R> {\n         Ok(Arc::new(builder.finish()))\n     }\n \n+    fn build_struct_array(\n+        &self,\n+        rows: &[Value],\n+        struct_fields: &[Field],\n+        projection: &[String],\n+    ) -> Result<Vec<ArrayRef>> {\n+        let arrays: Result<Vec<ArrayRef>> =\n+            struct_fields\n+                .iter()\n+                .filter(|field| {\n+                    if projection.is_empty() {\n+                        return true;\n+                    }\n+                    projection.contains(field.name())\n+                })\n+                .map(|field| {\n+                    match field.data_type() {\n+                        DataType::Null => unimplemented!(),\n+                        DataType::Boolean => self.build_boolean_array(rows, field.name()),\n+                        DataType::Float64 => {\n+                            self.build_primitive_array::<Float64Type>(rows, field.name())\n+                        }\n+                        DataType::Float32 => {\n+                            self.build_primitive_array::<Float32Type>(rows, field.name())\n+                        }\n+                        DataType::Int64 => {\n+                            self.build_primitive_array::<Int64Type>(rows, field.name())\n+                        }\n+                        DataType::Int32 => {\n+                            self.build_primitive_array::<Int32Type>(rows, field.name())\n+                        }\n+                        DataType::Int16 => {\n+                            self.build_primitive_array::<Int16Type>(rows, field.name())\n+                        }\n+                        DataType::Int8 => {\n+                            self.build_primitive_array::<Int8Type>(rows, field.name())\n+                        }\n+                        DataType::UInt64 => {\n+                            self.build_primitive_array::<UInt64Type>(rows, field.name())\n+                        }\n+                        DataType::UInt32 => {\n+                            self.build_primitive_array::<UInt32Type>(rows, field.name())\n+                        }\n+                        DataType::UInt16 => {\n+                            self.build_primitive_array::<UInt16Type>(rows, field.name())\n+                        }\n+                        DataType::UInt8 => {\n+                            self.build_primitive_array::<UInt8Type>(rows, field.name())\n+                        }\n+                        DataType::Timestamp(unit, _) => match unit {\n+                            TimeUnit::Second => self\n+                                .build_primitive_array::<TimestampSecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Microsecond => self\n+                                .build_primitive_array::<TimestampMicrosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Millisecond => self\n+                                .build_primitive_array::<TimestampMillisecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Nanosecond => self\n+                                .build_primitive_array::<TimestampNanosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                        },\n+                        DataType::Date64(_) => {\n+                            self.build_primitive_array::<Date64Type>(rows, field.name())\n+                        }\n+                        DataType::Date32(_) => {\n+                            self.build_primitive_array::<Date32Type>(rows, field.name())\n+                        }\n+                        DataType::Time64(unit) => match unit {\n+                            TimeUnit::Microsecond => self\n+                                .build_primitive_array::<Time64MicrosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Nanosecond => self\n+                                .build_primitive_array::<Time64NanosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            _ => unimplemented!(),\n+                        },\n+                        DataType::Time32(unit) => match unit {\n+                            TimeUnit::Second => self\n+                                .build_primitive_array::<Time32SecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Millisecond => self\n+                                .build_primitive_array::<Time32MillisecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            _ => unimplemented!(),\n+                        },\n+                        DataType::Utf8 => {\n+                            let mut builder = StringBuilder::new(rows.len());\n+                            for row in rows {\n+                                if let Some(value) = row.get(field.name()) {\n+                                    if let Some(str_v) = value.as_str() {\n+                                        builder.append_value(str_v)?\n+                                    } else {\n+                                        builder.append(false)?\n+                                    }\n+                                } else {\n+                                    builder.append(false)?\n+                                }\n+                            }\n+                            Ok(Arc::new(builder.finish()) as ArrayRef)\n+                        }\n+                        DataType::List(ref t) => {\n+                            match t.data_type() {\n+                                DataType::Int8 => {\n+                                    self.build_list_array::<Int8Type>(rows, field.name())\n+                                }\n+                                DataType::Int16 => {\n+                                    self.build_list_array::<Int16Type>(rows, field.name())\n+                                }\n+                                DataType::Int32 => {\n+                                    self.build_list_array::<Int32Type>(rows, field.name())\n+                                }\n+                                DataType::Int64 => {\n+                                    self.build_list_array::<Int64Type>(rows, field.name())\n+                                }\n+                                DataType::UInt8 => {\n+                                    self.build_list_array::<UInt8Type>(rows, field.name())\n+                                }\n+                                DataType::UInt16 => self\n+                                    .build_list_array::<UInt16Type>(rows, field.name()),\n+                                DataType::UInt32 => self\n+                                    .build_list_array::<UInt32Type>(rows, field.name()),\n+                                DataType::UInt64 => self\n+                                    .build_list_array::<UInt64Type>(rows, field.name()),\n+                                DataType::Float32 => self\n+                                    .build_list_array::<Float32Type>(rows, field.name()),\n+                                DataType::Float64 => self\n+                                    .build_list_array::<Float64Type>(rows, field.name()),\n+                                DataType::Null => unimplemented!(),\n+                                DataType::Boolean => {\n+                                    self.build_boolean_list_array(rows, field.name())\n+                                }\n+                                ref dtype @ DataType::Utf8 => {\n+                                    // UInt64Type passed down below is a fake type for dictionary builder.\n+                                    // It is there to make compiler happy.\n+                                    self.list_array_string_array_builder::<UInt64Type>(\n+                                        &dtype,\n+                                        field.name(),\n+                                        rows,\n+                                    )\n+                                }\n+                                DataType::Dictionary(ref key_ty, _) => self\n+                                    .build_wrapped_list_array(rows, field.name(), key_ty),\n+                                ref e => Err(ArrowError::JsonError(format!(\n+                            \"Data type is currently not supported in a list : {:?}\",\n+                            e\n+                        ))),\n+                            }\n+                        }\n+                        DataType::Dictionary(ref key_ty, ref val_ty) => self\n+                            .build_string_dictionary_array(\n+                                rows,\n+                                field.name(),\n+                                key_ty,\n+                                val_ty,\n+                            ),\n+                        DataType::Struct(fields) => {\n\nReview comment:\n       This is the main change, we recurse into the `build_struct_array` function\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -1022,6 +846,228 @@ impl<R: Read> Reader<R> {\n         Ok(Arc::new(builder.finish()))\n     }\n \n+    fn build_struct_array(\n+        &self,\n+        rows: &[Value],\n+        struct_fields: &[Field],\n+        projection: &[String],\n+    ) -> Result<Vec<ArrayRef>> {\n+        let arrays: Result<Vec<ArrayRef>> =\n+            struct_fields\n+                .iter()\n+                .filter(|field| {\n+                    if projection.is_empty() {\n+                        return true;\n+                    }\n+                    projection.contains(field.name())\n+                })\n+                .map(|field| {\n+                    match field.data_type() {\n+                        DataType::Null => unimplemented!(),\n+                        DataType::Boolean => self.build_boolean_array(rows, field.name()),\n+                        DataType::Float64 => {\n+                            self.build_primitive_array::<Float64Type>(rows, field.name())\n+                        }\n+                        DataType::Float32 => {\n+                            self.build_primitive_array::<Float32Type>(rows, field.name())\n+                        }\n+                        DataType::Int64 => {\n+                            self.build_primitive_array::<Int64Type>(rows, field.name())\n+                        }\n+                        DataType::Int32 => {\n+                            self.build_primitive_array::<Int32Type>(rows, field.name())\n+                        }\n+                        DataType::Int16 => {\n+                            self.build_primitive_array::<Int16Type>(rows, field.name())\n+                        }\n+                        DataType::Int8 => {\n+                            self.build_primitive_array::<Int8Type>(rows, field.name())\n+                        }\n+                        DataType::UInt64 => {\n+                            self.build_primitive_array::<UInt64Type>(rows, field.name())\n+                        }\n+                        DataType::UInt32 => {\n+                            self.build_primitive_array::<UInt32Type>(rows, field.name())\n+                        }\n+                        DataType::UInt16 => {\n+                            self.build_primitive_array::<UInt16Type>(rows, field.name())\n+                        }\n+                        DataType::UInt8 => {\n+                            self.build_primitive_array::<UInt8Type>(rows, field.name())\n+                        }\n+                        DataType::Timestamp(unit, _) => match unit {\n+                            TimeUnit::Second => self\n+                                .build_primitive_array::<TimestampSecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Microsecond => self\n+                                .build_primitive_array::<TimestampMicrosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Millisecond => self\n+                                .build_primitive_array::<TimestampMillisecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Nanosecond => self\n+                                .build_primitive_array::<TimestampNanosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                        },\n+                        DataType::Date64(_) => {\n+                            self.build_primitive_array::<Date64Type>(rows, field.name())\n+                        }\n+                        DataType::Date32(_) => {\n+                            self.build_primitive_array::<Date32Type>(rows, field.name())\n+                        }\n+                        DataType::Time64(unit) => match unit {\n+                            TimeUnit::Microsecond => self\n+                                .build_primitive_array::<Time64MicrosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Nanosecond => self\n+                                .build_primitive_array::<Time64NanosecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            _ => unimplemented!(),\n+                        },\n+                        DataType::Time32(unit) => match unit {\n+                            TimeUnit::Second => self\n+                                .build_primitive_array::<Time32SecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            TimeUnit::Millisecond => self\n+                                .build_primitive_array::<Time32MillisecondType>(\n+                                    rows,\n+                                    field.name(),\n+                                ),\n+                            _ => unimplemented!(),\n+                        },\n+                        DataType::Utf8 => {\n+                            let mut builder = StringBuilder::new(rows.len());\n+                            for row in rows {\n+                                if let Some(value) = row.get(field.name()) {\n+                                    if let Some(str_v) = value.as_str() {\n+                                        builder.append_value(str_v)?\n+                                    } else {\n+                                        builder.append(false)?\n+                                    }\n+                                } else {\n+                                    builder.append(false)?\n+                                }\n+                            }\n+                            Ok(Arc::new(builder.finish()) as ArrayRef)\n+                        }\n+                        DataType::List(ref t) => {\n+                            match t.data_type() {\n+                                DataType::Int8 => {\n+                                    self.build_list_array::<Int8Type>(rows, field.name())\n+                                }\n+                                DataType::Int16 => {\n+                                    self.build_list_array::<Int16Type>(rows, field.name())\n+                                }\n+                                DataType::Int32 => {\n+                                    self.build_list_array::<Int32Type>(rows, field.name())\n+                                }\n+                                DataType::Int64 => {\n+                                    self.build_list_array::<Int64Type>(rows, field.name())\n+                                }\n+                                DataType::UInt8 => {\n+                                    self.build_list_array::<UInt8Type>(rows, field.name())\n+                                }\n+                                DataType::UInt16 => self\n+                                    .build_list_array::<UInt16Type>(rows, field.name()),\n+                                DataType::UInt32 => self\n+                                    .build_list_array::<UInt32Type>(rows, field.name()),\n+                                DataType::UInt64 => self\n+                                    .build_list_array::<UInt64Type>(rows, field.name()),\n+                                DataType::Float32 => self\n+                                    .build_list_array::<Float32Type>(rows, field.name()),\n+                                DataType::Float64 => self\n+                                    .build_list_array::<Float64Type>(rows, field.name()),\n+                                DataType::Null => unimplemented!(),\n+                                DataType::Boolean => {\n+                                    self.build_boolean_list_array(rows, field.name())\n+                                }\n+                                ref dtype @ DataType::Utf8 => {\n+                                    // UInt64Type passed down below is a fake type for dictionary builder.\n+                                    // It is there to make compiler happy.\n+                                    self.list_array_string_array_builder::<UInt64Type>(\n+                                        &dtype,\n+                                        field.name(),\n+                                        rows,\n+                                    )\n+                                }\n+                                DataType::Dictionary(ref key_ty, _) => self\n+                                    .build_wrapped_list_array(rows, field.name(), key_ty),\n+                                ref e => Err(ArrowError::JsonError(format!(\n+                            \"Data type is currently not supported in a list : {:?}\",\n+                            e\n+                        ))),\n+                            }\n+                        }\n+                        DataType::Dictionary(ref key_ty, ref val_ty) => self\n+                            .build_string_dictionary_array(\n+                                rows,\n+                                field.name(),\n+                                key_ty,\n+                                val_ty,\n+                            ),\n+                        DataType::Struct(fields) => {\n+                            // TODO: add a check limiting recursion\n+                            let len = rows.len();\n+                            let num_bytes = bit_util::ceil(len, 8);\n+                            let mut null_buffer = MutableBuffer::new(num_bytes)\n+                                .with_bitset(num_bytes, false);\n+                            let struct_rows = rows\n+                                .iter()\n+                                .enumerate()\n+                                .map(|(i, row)| {\n+                                    (\n+                                        i,\n+                                        row.as_object()\n+                                            .map(|v| v.get(field.name()))\n+                                            .flatten(),\n+                                    )\n+                                })\n+                                .map(|(i, v)| match v {\n+                                    // we want the field as an object, if it's not, we treat as null\n+                                    Some(Value::Object(value)) => {\n+                                        bit_util::set_bit(null_buffer.data_mut(), i);\n\nReview comment:\n       It should be more optimal to set all values as true, then only set the non-objects to false. I was struggling to get this right though, don't know why the test was failing.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T22:35:48.501+0000",
                    "updated": "2020-11-27T22:35:48.501+0000",
                    "started": "2020-11-27T22:35:48.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517470",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788#issuecomment-735015949\n\n\n   I haven't reviewed in detail but the changes look logical and make sense to me.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-28T00:14:57.848+0000",
                    "updated": "2020-11-28T00:14:57.848+0000",
                    "started": "2020-11-28T00:14:57.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517474",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788#discussion_r532035806\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -1559,6 +1608,54 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_nested_struct_json_arrays() {\n\nReview comment:\n       This is a pretty cool test case demonstrating what is going on -- TIL I learn that we have a JSON schema extractor in arrow! \n\n##########\nFile path: rust/arrow/test/data/nested_structs.json\n##########\n@@ -0,0 +1,4 @@\n+{\"a\": {\"b\": true, \"c\": {\"d\": \"text\"}}}\n\nReview comment:\n       Given the size of this file (very small) I wonder if the test case itself would be more readable if the contents were inlined directly into the rust source code. I don't see any issues with it being in its own file, this is more a style comment\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-28T12:41:04.278+0000",
                    "updated": "2020-11-28T12:41:04.278+0000",
                    "started": "2020-11-28T12:41:04.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517526",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788#discussion_r532161786\n\n\n\n##########\nFile path: rust/arrow/test/data/nested_structs.json\n##########\n@@ -0,0 +1,4 @@\n+{\"a\": {\"b\": true, \"c\": {\"d\": \"text\"}}}\n\nReview comment:\n       I opened https://issues.apache.org/jira/browse/ARROW-10764\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-29T06:13:47.734+0000",
                    "updated": "2020-11-29T06:13:47.734+0000",
                    "started": "2020-11-29T06:13:47.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517582",
                    "issueId": "13215272"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/worklog/517583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #8788:\nURL: https://github.com/apache/arrow/pull/8788\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-29T06:15:01.685+0000",
                    "updated": "2020-11-29T06:15:01.685+0000",
                    "started": "2020-11-29T06:15:01.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517583",
                    "issueId": "13215272"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4350d799[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bdd8c68[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@687ba4f0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3f12cb5b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f2df1c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3056864c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53fe892[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2cdea37d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c1dcce8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@487d47c1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@327c4d24[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6b60c55d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Nov 29 06:14:50 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-29T06:14:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4544/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-02-12T15:13:02.000+0000",
        "updated": "2020-11-29T06:15:02.000+0000",
        "timeoriginalestimate": null,
        "description": "_Adding this as a separate task as it's a bit involved._\r\n\r\nAdd the ability to read in JSON structs that are children of the JSON record being read.\r\nThe main concern here is deeply nested structures, which will require a performant and reusable basic JSON reader before dealing with recursion.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Read nested JSON structs into StructArrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/comment/17091969",
                    "id": "17091969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jkelleyrtp",
                        "name": "jkelleyrtp",
                        "key": "jkelleyrtp",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Jonathan Kelley",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Is there a particular direction this would need to take that doesn't follow recursion?\r\n\r\nI'd like to contribute this feature but if recursion is not the recommended way, it would be nice to know up front.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jkelleyrtp",
                        "name": "jkelleyrtp",
                        "key": "jkelleyrtp",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Jonathan Kelley",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-04-24T23:25:49.268+0000",
                    "updated": "2020-04-24T23:25:49.268+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/comment/17092145",
                    "id": "17092145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Hi [~jkelleyrtp], I haven't given thought to how we'd do it without recursion, so any approach is fine, we could look at performance later. Your contribution would be appreciated, thanks.\u00a0\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-04-25T09:05:05.322+0000",
                    "updated": "2020-04-25T09:05:05.322+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215272/comment/17240187",
                    "id": "17240187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8788\n[https://github.com/apache/arrow/pull/8788]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-11-29T06:14:50.732+0000",
                    "updated": "2020-11-29T06:14:50.732+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0wi8:",
        "customfield_12314139": null
    }
}