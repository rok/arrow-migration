{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13169439",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169439",
    "key": "ARROW-2779",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342901",
                "id": "12342901",
                "description": "",
                "name": "JS-0.4.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-02-11"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2779/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 4,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169439/worklog/118029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt opened a new pull request #2201: [ARROW-2779]: [JS] stream reader fixes\nURL: https://github.com/apache/arrow/pull/2201\n \n \n   This is a stop-gap fix for node-stream compatibility. Some APIs (like node's `http` module) still only accept Buffer instances, so this PR emits those if we're in node. Also includes a small fix in `fromReadableStream` to ensure it doesn't try to read the length if there's not enough bytes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-02T02:48:04.805+0000",
                    "updated": "2018-07-02T02:48:04.805+0000",
                    "started": "2018-07-02T02:48:04.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "118029",
                    "issueId": "13169439"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169439/worklog/118765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #2201: ARROW-2779: [JS] stream reader fixes\nURL: https://github.com/apache/arrow/pull/2201#discussion_r199874991\n \n \n\n ##########\n File path: js/src/data.ts\n ##########\n @@ -180,8 +180,8 @@ export class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n         this.childData = childData;\n         this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount) as any;\n \n Review comment:\n   Does this have something to do with TS 2.9? I noticed some odd type errors when I tried building with 2.9\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-03T16:46:21.703+0000",
                    "updated": "2018-07-03T16:46:21.703+0000",
                    "started": "2018-07-03T16:46:21.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "118765",
                    "issueId": "13169439"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169439/worklog/118773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #2201: ARROW-2779: [JS] stream reader fixes\nURL: https://github.com/apache/arrow/pull/2201#discussion_r199882776\n \n \n\n ##########\n File path: js/src/data.ts\n ##########\n @@ -180,8 +180,8 @@ export class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n         this.childData = childData;\n         this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount) as any;\n \n Review comment:\n   Yeah it does. Seems their contravariant type checking is a bit stricter now, so have to use `any` as an escape hatch in a few places. This is one of the motivations behind slimming this class down, as I was able to remove a ton of these sorts of things.\r\n   \r\n   I mentioned in slack, but can cross-post here: I've started a tentative branch that simplifies the Data down to one class ([example here](https://gist.github.com/trxcllnt/97c4332cf9d67b3eb1fcccdccadfdc0a)), and realized the two biggest hurdles is the DictionaryData and ChunkedData -- I remember why we did them, but now I'm convinced we can move their functionality to a higher level of abstraction. Going with the slim Data class brings us closer in line to the C++ implementation, and lets us remove a bunch of typings hacks along the way. Let me know your thoughts\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-03T17:01:29.199+0000",
                    "updated": "2018-07-03T17:01:29.199+0000",
                    "started": "2018-07-03T17:01:29.199+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "118773",
                    "issueId": "13169439"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169439/worklog/119541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit closed pull request #2201: ARROW-2779: [JS] stream reader fixes\nURL: https://github.com/apache/arrow/pull/2201\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/integration/integration_test.py b/integration/integration_test.py\nindex 173fe54909..89145804f3 100644\n--- a/integration/integration_test.py\n+++ b/integration/integration_test.py\n@@ -1123,21 +1123,21 @@ def validate(self, json_path, arrow_path):\n         return self._run(self.VALIDATE, arrow_path, json_path, 'VALIDATE')\n \n     def json_to_file(self, json_path, arrow_path):\n-        cmd = ['node', self.JSON_TO_ARROW, '-a', arrow_path, '-j', json_path]\n+        cmd = ['node', '--no-warnings', self.JSON_TO_ARROW, '-a', arrow_path, '-j', json_path]\n         cmd = ' '.join(cmd)\n         if self.debug:\n             print(cmd)\n         os.system(cmd)\n \n     def stream_to_file(self, stream_path, file_path):\n-        cmd = ['cat', stream_path, '|', 'node', self.STREAM_TO_FILE, '>', file_path]\n+        cmd = ['cat', stream_path, '|', 'node', '--no-warnings', self.STREAM_TO_FILE, '>', file_path]\n         cmd = ' '.join(cmd)\n         if self.debug:\n             print(cmd)\n         os.system(cmd)\n \n     def file_to_stream(self, file_path, stream_path):\n-        cmd = ['cat', file_path, '|', 'node', self.FILE_TO_STREAM, '>', stream_path]\n+        cmd = ['cat', file_path, '|', 'node', '--no-warnings', self.FILE_TO_STREAM, '>', stream_path]\n         cmd = ' '.join(cmd)\n         if self.debug:\n             print(cmd)\ndiff --git a/js/lerna.json b/js/lerna.json\nindex 0bf16fdfd5..c8e1051f62 100644\n--- a/js/lerna.json\n+++ b/js/lerna.json\n@@ -1,5 +1,5 @@\n {\n-  \"lerna\": \"2.0.0\",\n+  \"lerna\": \"2.11.0\",\n   \"version\": \"0.1.1\",\n   \"packages\": [\n     \"targets/ts\",\ndiff --git a/js/package.json b/js/package.json\nindex 15869394f1..60129e3ccd 100644\n--- a/js/package.json\n+++ b/js/package.json\n@@ -53,15 +53,15 @@\n     \"npm-release.sh\"\n   ],\n   \"dependencies\": {\n-    \"@types/flatbuffers\": \"1.6.5\",\n-    \"@types/node\": \"10.0.8\",\n+    \"@types/flatbuffers\": \"1.9.0\",\n+    \"@types/node\": \"10.5.1\",\n     \"@types/text-encoding-utf-8\": \"1.0.1\",\n-    \"command-line-args\": \"5.0.1\",\n-    \"command-line-usage\": \"4.1.0\",\n-    \"flatbuffers\": \"trxcllnt/flatbuffers-esm\",\n+    \"command-line-args\": \"5.0.2\",\n+    \"command-line-usage\": \"5.0.5\",\n+    \"flatbuffers\": \"1.9.0\",\n     \"json-bignum\": \"0.0.3\",\n     \"text-encoding-utf-8\": \"1.0.2\",\n-    \"tslib\": \"1.9.0\"\n+    \"tslib\": \"1.9.3\"\n   },\n   \"devDependencies\": {\n     \"@std/esm\": \"0.26.0\",\n@@ -69,37 +69,37 @@\n     \"@types/jest\": \"22.2.3\",\n     \"babel-jest\": \"22.4.3\",\n     \"benchmark\": \"2.1.4\",\n-    \"coveralls\": \"3.0.0\",\n+    \"coveralls\": \"3.0.2\",\n     \"del\": \"3.0.0\",\n     \"glob\": \"7.1.2\",\n-    \"google-closure-compiler\": \"20180506.0.0\",\n+    \"google-closure-compiler\": \"20180610.0.2\",\n     \"gulp\": \"github:gulpjs/gulp#6d71a658c61edb3090221579d8f97dbe086ba2ed\",\n     \"gulp-json-transform\": \"0.4.5\",\n-    \"gulp-rename\": \"1.2.2\",\n-    \"gulp-sourcemaps\": \"2.6.3\",\n-    \"gulp-typescript\": \"3.2.4\",\n-    \"ix\": \"2.3.4\",\n+    \"gulp-rename\": \"1.3.0\",\n+    \"gulp-sourcemaps\": \"2.6.4\",\n+    \"gulp-typescript\": \"4.0.2\",\n+    \"ix\": \"2.3.5\",\n     \"jest\": \"22.4.3\",\n     \"jest-environment-node-debug\": \"2.0.0\",\n     \"json\": \"9.0.6\",\n-    \"lerna\": \"2.7.1\",\n-    \"lint-staged\": \"6.0.1\",\n-    \"merge2\": \"1.2.1\",\n+    \"lerna\": \"2.11.0\",\n+    \"lint-staged\": \"7.2.0\",\n+    \"merge2\": \"1.2.2\",\n     \"mkdirp\": \"0.5.1\",\n-    \"npm-run-all\": \"4.1.2\",\n-    \"pump\": \"1.0.2\",\n+    \"npm-run-all\": \"4.1.3\",\n+    \"pump\": \"3.0.0\",\n     \"rimraf\": \"2.6.2\",\n     \"rxjs\": \"5.5.6\",\n-    \"shx\": \"0.2.2\",\n+    \"shx\": \"0.3.1\",\n     \"source-map-loader\": \"0.2.3\",\n-    \"trash\": \"4.2.1\",\n+    \"trash\": \"4.3.0\",\n     \"ts-jest\": \"22.4.6\",\n-    \"ts-node\": \"6.0.3\",\n-    \"tslint\": \"5.9.1\",\n-    \"typedoc\": \"0.10.0\",\n-    \"typescript\": \"2.7.1\",\n+    \"ts-node\": \"7.0.0\",\n+    \"tslint\": \"5.10.0\",\n+    \"typedoc\": \"0.11.1\",\n+    \"typescript\": \"2.9.2\",\n     \"uglifyjs-webpack-plugin\": \"1.1.6\",\n-    \"webpack\": \"3.10.0\",\n+    \"webpack\": \"4.14.0\",\n     \"xml2js\": \"0.4.19\"\n   },\n   \"@std/esm\": {\ndiff --git a/js/src/data.ts b/js/src/data.ts\nindex 963a6a476b..5a117594bc 100644\n--- a/js/src/data.ts\n+++ b/js/src/data.ts\n@@ -86,8 +86,8 @@ export class BaseData<T extends DataType = DataType> implements VectorLike {\n         }\n         return nullCount;\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new BaseData(type, length, offset, nullCount);\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new BaseData(type, length, offset, nullCount) as any;\n     }\n     public slice(offset: number, length: number) {\n         return length <= 0 ? this : this.sliceInternal(this.clone(\n@@ -180,8 +180,8 @@ export class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n         this.childData = childData;\n         this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount) as any;\n     }\n     protected sliceInternal(clone: this, offset: number, length: number) {\n         if (!this[VectorType.OFFSET]) {\n@@ -208,20 +208,24 @@ export class ListData<T extends ListType> extends SingleNestedData<T> {\n         super(type, length, nullBitmap, valueChildData, offset, nullCount);\n         this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new ListData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount);\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new ListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount) as any;\n     }\n }\n \n export class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n     public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n     public get typeIds() { return this[VectorType.TYPE]; }\n+    public readonly typeIdToChildIndex: { [key: number]: number };\n     constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n         super(type, length, nullBitmap, childData, offset, nullCount);\n         this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n+        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n+            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n+        }, Object.create(null) as { [key: number]: number });\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount) as any;\n     }\n }\n \n@@ -229,7 +233,7 @@ export class SparseUnionData extends UnionData<SparseUnion> {\n     constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n         super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n     }\n-    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n+    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n         return new SparseUnionData(\n             type,\n             length,\n@@ -237,7 +241,7 @@ export class SparseUnionData extends UnionData<SparseUnion> {\n             this[VectorType.TYPE],\n             this.childData,\n             offset, nullCount\n-        ) as any as UnionData<R>;\n+        ) as any;\n     }\n }\n \n@@ -248,7 +252,7 @@ export class DenseUnionData extends UnionData<DenseUnion> {\n         super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n         this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n     }\n-    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n+    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n         return new DenseUnionData(\n             type,\n             length,\n@@ -257,7 +261,7 @@ export class DenseUnionData extends UnionData<DenseUnion> {\n             this[VectorType.OFFSET],\n             this.childData,\n             offset, nullCount\n-        ) as any as UnionData<R>;\n+        ) as any;\n     }\n }\n \n@@ -284,12 +288,12 @@ export class ChunkedData<T extends DataType> extends BaseData<T> {\n         }\n         return nullCount;\n     }\n-    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n-        return new ChunkedData<R>(\n+    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n+        return new ChunkedData(\n             type, length,\n             this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n             offset, nullCount, this._chunkOffsets\n-        );\n+        ) as any;\n     }\n     protected sliceInternal(clone: this, offset: number, length: number) {\n         const chunks = this._chunkVectors;\ndiff --git a/js/src/ipc/reader/json.ts b/js/src/ipc/reader/json.ts\nindex 67bb5ca2d6..e8ab498f9a 100644\n--- a/js/src/ipc/reader/json.ts\n+++ b/js/src/ipc/reader/json.ts\n@@ -76,6 +76,7 @@ function flattenDataSources(xs: any[]): any[][] {\n         ...buffers,\n         ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n         ...(column['OFFSET'] && [column['OFFSET']] || []),\n+        ...(column['TYPE'] && [column['TYPE']] || []),\n         ...(column['DATA'] && [column['DATA']] || []),\n         ...flattenDataSources(column['children'])\n     ], [] as any[][]);\n@@ -156,6 +157,7 @@ import * as Schema_ from '../../fb/Schema';\n import Type = Schema_.org.apache.arrow.flatbuf.Type;\n import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\n import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\n+import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\n import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\n import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\n import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n@@ -209,6 +211,7 @@ function buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetad\n         const column = xs[i];\n         column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n         column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n+        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));\n         column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n         buffers = buffersFromJSON(column['children'], buffers);\n     }\n@@ -293,31 +296,31 @@ function typeFromJSON(t: any, children?: Field[]) {\n     throw new Error(`Unrecognized type ${t['name']}`);\n }\n \n-function nullFromJSON           (_type: any)                    { return new Null();                                                                  }\n+function nullFromJSON           (_type: any)                    { return new Null();                                                                               }\n function intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                       case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                       case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                       case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                       case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                   }\n-                                                                  return null;                                                                        }\n+                                                                  return null;                                                                                     }\n function floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                       case Precision.HALF: return new Float16();\n                                                                       case Precision.SINGLE: return new Float32();\n                                                                       case Precision.DOUBLE: return new Float64();\n                                                                   }\n-                                                                  return null;                                                                        }\n-function binaryFromJSON         (_type: any)                    { return new Binary();                                                                }\n-function utf8FromJSON           (_type: any)                    { return new Utf8();                                                                  }\n-function boolFromJSON           (_type: any)                    { return new Bool();                                                                  }\n-function decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                             }\n-function dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                   }\n-function timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\n-function timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);            }\n-function intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                            }\n-function listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                          }\n-function structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                        }\n-function unionFromJSON          (_type: any, children: Field[]) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[], children); }\n-function fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                     }\n-function fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                              }\n-function mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                     }\n+                                                                  return null;                                                                                     }\n+function binaryFromJSON         (_type: any)                    { return new Binary();                                                                             }\n+function utf8FromJSON           (_type: any)                    { return new Utf8();                                                                               }\n+function boolFromJSON           (_type: any)                    { return new Bool();                                                                               }\n+function decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                                          }\n+function dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                                }\n+function timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth);              }\n+function timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);                         }\n+function intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                                         }\n+function listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                                       }\n+function structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                                     }\n+function unionFromJSON          (_type: any, children: Field[]) { return new Union(UnionMode[_type['mode']] as any, (_type['typeIds'] || []) as Type[], children); }\n+function fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                                  }\n+function fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                                           }\n+function mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                                  }\ndiff --git a/js/src/ipc/reader/node.ts b/js/src/ipc/reader/node.ts\nindex 7fbd7bfbbf..8a455e900d 100644\n--- a/js/src/ipc/reader/node.ts\n+++ b/js/src/ipc/reader/node.ts\n@@ -50,7 +50,7 @@ export async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n             return yield bytes;\n         }\n \n-        if (messageLength <= 0) {\n+        if (bytes.byteLength > 0 && messageLength <= 0) {\n             messageLength = new DataView(bytes.buffer).getInt32(0, true);\n         }\n \n@@ -66,7 +66,7 @@ export async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n             bytesRead += messageLength + PADDING;\n             yield bytes.subarray(0, messageLength + PADDING);\n             bytes = bytes.subarray(messageLength + PADDING);\n-            messageLength = bytes.byteLength <= 0 ? 0 :\n+            messageLength = bytes.byteLength < 4 ? 0 :\n                 new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n             message = null;\n         }\ndiff --git a/js/src/type.ts b/js/src/type.ts\nindex 370be0def0..26686c74b5 100644\n--- a/js/src/type.ts\n+++ b/js/src/type.ts\n@@ -372,9 +372,11 @@ export class Union<TType extends Type = any> extends DataType<TType> {\n     constructor(public readonly mode: UnionMode,\n                 public readonly typeIds: ArrowType[],\n                 public readonly children: Field[]) {\n-        super(<TType> (mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n+        super(<TType> Type.Union, children);\n     }\n-    public toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n+    public toString() { return `${this[Symbol.toStringTag]}<${\n+        this.children.map((x) => `${x.type}`).join(` | `)\n+    }>`; }\n     protected static [Symbol.toStringTag] = ((proto: Union) => {\n         (<any> proto).ArrayType = Int8Array;\n         return proto[Symbol.toStringTag] = 'Union';\ndiff --git a/js/src/util/node.ts b/js/src/util/node.ts\nindex 857765c1b6..e588cb7e35 100644\n--- a/js/src/util/node.ts\n+++ b/js/src/util/node.ts\n@@ -27,7 +27,7 @@ export class PipeIterator<T> implements IterableIterator<T> {\n                     if ((res = this.next()).done) break;\n                 } while (emit(stream, encoding, res.value));\n             }\n-            return wait(stream, encoding, res && res.done, write);\n+            return wait(stream, res && res.done, write);\n         };\n         write();\n         return stream;\n@@ -62,23 +62,32 @@ export class AsyncPipeIterator<T> implements AsyncIterableIterator<T> {\n                     if ((res = await this.next()).done) break;\n                 } while (emit(stream, encoding, res.value));\n             }\n-            return wait(stream, encoding, res && res.done, write);\n+            return wait(stream, res && res.done, write);\n         };\n         write();\n         return stream;\n     }\n }\n \n+const toBufferOrUint8Array = (() => {\n+    // If in node, convert Uint8Arrays to Buffer instances. This is necessary\n+    // because some node APIs ('http' etc.) don't work unless you give them Buffers.\n+    // This eval also defeats closure-compiler, which doesn't recognize the Buffer constructor.\n+    const BufferCtor = eval('typeof Buffer !== \"undefined\" ? Buffer : null');\n+    return !BufferCtor ? (arr: Uint8Array) => arr :\n+        (arr: Uint8Array) => BufferCtor.from(arr.buffer, arr.byteOffset, arr.byteLength);\n+})();\n+\n function emit(stream: NodeJS.WritableStream, encoding: string, value: any) {\n-    return stream['write']((encoding === 'utf8' ? value + '\\n' : value) as any, encoding);\n+    return stream['write']((encoding === 'utf8' ? value + '\\n' : toBufferOrUint8Array(value)) as any, encoding);\n }\n \n-function wait(stream: NodeJS.WritableStream, encoding: string, done: boolean, write: (x?: any) => void) {\n+function wait(stream: NodeJS.WritableStream, done: boolean, write: (x?: any) => void) {\n     const p = eval('process'); // defeat closure compiler\n     if (!done) {\n         stream['once']('error', write);\n         stream['once']('drain', write);\n     } else if (!(!p || stream === p.stdout) && !(stream as any)['isTTY']) {\n-        stream['end'](<any> (encoding === 'utf8' ? '\\n' : new Uint8Array(0)));\n+        stream['end'](<any> null);\n     }\n }\ndiff --git a/js/src/vector.ts b/js/src/vector.ts\nindex 40d8faa2a9..8eb591bc45 100644\n--- a/js/src/vector.ts\n+++ b/js/src/vector.ts\n@@ -49,7 +49,7 @@ export class Vector<T extends DataType = any> implements VectorLike, View<T>, Vi\n         this.length = data.length;\n         let nulls: Uint8Array;\n         if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n-            this.view = new ChunkedView(data);\n+            this.view = new ChunkedView(data as any) as any;\n         } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n             this.view = new ValidityView(data, view);\n         } else {\n@@ -159,12 +159,12 @@ export abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n             return data as Data<any>[];\n         } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n             // If data isn't chunked, cache and return NestedData's childData\n-            return this._childData = (data as NestedData<T>).childData;\n+            return this._childData = data.childData;\n         }\n         // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n         // to construct a single chunked Vector for each column. Then return the ChunkedData\n         // instance from each unified chunked column as the childData of a chunked NestedVector\n-        const chunks = ((data as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n+        const chunks = ((data as any as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n         return this._childData = chunks\n             .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n             .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n@@ -197,7 +197,7 @@ export class NullVector extends Vector<Null> {\n \n export class BoolVector extends Vector<Bool> {\n     public static from(data: IterableArrayLike<boolean>) {\n-        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n+        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)) as Data<Bool>);\n     }\n     public get values() { return this.data.values; }\n     constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n@@ -360,7 +360,7 @@ export class Utf8Vector extends ListVectorBase<Utf8> {\n export class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n     // @ts-ignore\n     public readonly view: ListView<T>;\n-    constructor(data: Data<T>, view: View<List<T>> = new ListView(data)) {\n+    constructor(data: Data<List<T>>, view: ListView<T> = new ListView<T>(data as any)) {\n         super(data, view);\n     }\n     public getChildAt(index: number): Vector<T> | null {\n@@ -439,22 +439,22 @@ export const createVector = ((VectorLoader: new <T extends DataType>(data: Data<\n     <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n ))(class VectorLoader<T extends DataType> extends TypeVisitor {\n     constructor(private data: Data<T>) { super(); }\n-    visitNull           (_type: Null)            { return new NullVector(this.data);            }\n-    visitInt            (_type: Int)             { return new IntVector(this.data);             }\n-    visitFloat          (_type: Float)           { return new FloatVector(this.data);           }\n-    visitBinary         (_type: Binary)          { return new BinaryVector(this.data);          }\n-    visitUtf8           (_type: Utf8)            { return new Utf8Vector(this.data);            }\n-    visitBool           (_type: Bool)            { return new BoolVector(this.data);            }\n-    visitDecimal        (_type: Decimal)         { return new DecimalVector(this.data);         }\n-    visitDate           (_type: Date_)           { return new DateVector(this.data);            }\n-    visitTime           (_type: Time)            { return new TimeVector(this.data);            }\n-    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(this.data);       }\n-    visitInterval       (_type: Interval)        { return new IntervalVector(this.data);        }\n-    visitList           (_type: List)            { return new ListVector(this.data);            }\n-    visitStruct         (_type: Struct)          { return new StructVector(this.data);          }\n-    visitUnion          (_type: Union)           { return new UnionVector(this.data);           }\n-    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(this.data); }\n-    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(this.data);   }\n-    visitMap            (_type: Map_)            { return new MapVector(this.data);             }\n-    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(this.data);      }\n+    visitNull           (_type: Null)            { return new NullVector(<any> this.data);            }\n+    visitInt            (_type: Int)             { return new IntVector(<any> this.data);             }\n+    visitFloat          (_type: Float)           { return new FloatVector(<any> this.data);           }\n+    visitBinary         (_type: Binary)          { return new BinaryVector(<any> this.data);          }\n+    visitUtf8           (_type: Utf8)            { return new Utf8Vector(<any> this.data);            }\n+    visitBool           (_type: Bool)            { return new BoolVector(<any> this.data);            }\n+    visitDecimal        (_type: Decimal)         { return new DecimalVector(<any> this.data);         }\n+    visitDate           (_type: Date_)           { return new DateVector(<any> this.data);            }\n+    visitTime           (_type: Time)            { return new TimeVector(<any> this.data);            }\n+    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(<any> this.data);       }\n+    visitInterval       (_type: Interval)        { return new IntervalVector(<any> this.data);        }\n+    visitList           (_type: List)            { return new ListVector(<any> this.data);            }\n+    visitStruct         (_type: Struct)          { return new StructVector(<any> this.data);          }\n+    visitUnion          (_type: Union)           { return new UnionVector(<any> this.data);           }\n+    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(<any> this.data); }\n+    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(<any> this.data);   }\n+    visitMap            (_type: Map_)            { return new MapVector(<any> this.data);             }\n+    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(<any> this.data);      }\n });\ndiff --git a/js/src/vector/chunked.ts b/js/src/vector/chunked.ts\nindex 7876bbae57..8e96d34803 100644\n--- a/js/src/vector/chunked.ts\n+++ b/js/src/vector/chunked.ts\n@@ -15,7 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { ChunkedData } from '../data';\n+import { ChunkedData, Data } from '../data';\n import { View, Vector, NestedVector } from '../vector';\n import { DataType, TypedArray, IterableArrayLike } from '../type';\n \n@@ -28,7 +28,7 @@ export class ChunkedView<T extends DataType> implements View<T> {\n         this.chunkVectors = data.chunkVectors;\n         this.chunkOffsets = data.chunkOffsets;\n     }\n-    public clone(data: ChunkedData<T>): this {\n+    public clone(data: ChunkedData<T> & Data<T>): this {\n         return new ChunkedView(data) as this;\n     }\n     public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\ndiff --git a/js/src/vector/dictionary.ts b/js/src/vector/dictionary.ts\nindex 21f9bac099..7014cdadc4 100644\n--- a/js/src/vector/dictionary.ts\n+++ b/js/src/vector/dictionary.ts\n@@ -26,7 +26,7 @@ export class DictionaryView<T extends DataType> implements View<T> {\n         this.indices = indices;\n         this.dictionary = dictionary;\n     }\n-    public clone(data: Data<Dictionary<T>>): this {\n+    public clone(data: Data<Dictionary<T>> & Data<T>): this {\n         return new DictionaryView(data.dictionary, this.indices.clone(data.indices)) as this;\n     }\n     public isValid(index: number): boolean {\ndiff --git a/js/src/vector/list.ts b/js/src/vector/list.ts\nindex f1283f40cf..8e7560eae8 100644\n--- a/js/src/vector/list.ts\n+++ b/js/src/vector/list.ts\n@@ -83,8 +83,8 @@ export abstract class VariableListViewBase<T extends (ListType | FlatListType)>\n export class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n     public values: Vector<T>;\n     constructor(data: Data<T>) {\n-        super(data);\n-        this.values = createVector(data.values);\n+        super(data as any);\n+        this.values = createVector((data as any).values);\n     }\n     public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n         return index === 0 ? (this.values as Vector<R>) : null;\ndiff --git a/js/src/vector/nested.ts b/js/src/vector/nested.ts\nindex 1102fe83b7..fe9f7e96d2 100644\n--- a/js/src/vector/nested.ts\n+++ b/js/src/vector/nested.ts\n@@ -76,31 +76,35 @@ export class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> exten\n     public typeIds: Int8Array;\n     // @ts-ignore\n     public valueOffsets?: Int32Array;\n+    // @ts-ignore\n+    protected typeIdToChildIndex: { [key: number]: number };\n     constructor(data: Data<T>, children?: Vector<any>[]) {\n         super(data, children);\n         this.length = data.length;\n         this.typeIds = data.typeIds;\n+        this.typeIdToChildIndex = data.typeIdToChildIndex;\n     }\n     protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n-        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n+        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n     }\n     protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n-        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n+        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n     }\n-    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets?: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.get(index) : null;\n     }\n-    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets?: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.set(index, value) : null;\n     }\n     public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n         const length = this.length;\n         const get = this.getChildValue;\n+        const { typeIdToChildIndex } = this;\n         const { typeIds, valueOffsets } = this;\n         for (let index = -1; ++index < length;) {\n-            yield get(this, index, typeIds, valueOffsets);\n+            yield get(this, index, typeIds, valueOffsets, typeIdToChildIndex);\n         }\n     }\n }\n@@ -112,14 +116,14 @@ export class DenseUnionView extends UnionView<DenseUnion> {\n         this.valueOffsets = data.valueOffsets;\n     }\n     protected getNested(self: DenseUnionView, index: number): any | null {\n-        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n+        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n     }\n-    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.get(valueOffsets[index]) : null;\n     }\n-    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets?: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.set(valueOffsets[index], value) : null;\n     }\n }\ndiff --git a/js/test/Arrow.ts b/js/test/Arrow.ts\nindex 36f98d4557..4aac952f45 100644\n--- a/js/test/Arrow.ts\n+++ b/js/test/Arrow.ts\n@@ -18,6 +18,8 @@\n /* tslint:disable */\n // Dynamically load an Arrow target build based on command line arguments\n \n+(<any> global).window = (<any> global).window || global;\n+\n // Fix for Jest in node v10.x\n Object.defineProperty(ArrayBuffer, Symbol.hasInstance, {\n     writable: true,\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-05T19:20:07.855+0000",
                    "updated": "2018-07-05T19:20:07.855+0000",
                    "started": "2018-07-05T19:20:07.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "119541",
                    "issueId": "13169439"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@20e9e47f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@644c8c75[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a9f3e29[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1ab0362b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d30ddaf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7f9f556a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c1252c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7883e01[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c8e56fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@59bf6c04[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57b58197[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@110bd556[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 05 19:20:07 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-05T19:20:07.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2779/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-07-02T02:44:07.000+0000",
        "updated": "2018-07-08T14:20:50.000+0000",
        "timeoriginalestimate": null,
        "description": "Emit Buffers not Uint8Arrays, and guard against reading 0-length buffers",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Fix node stream reader/writer compatibility",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169439/comment/16534039",
                    "id": "16534039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "Issue resolved by pull request 2201\n[https://github.com/apache/arrow/pull/2201]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2018-07-05T19:20:07.194+0000",
                    "updated": "2018-07-05T19:20:07.194+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3vfmv:",
        "customfield_12314139": null
    }
}