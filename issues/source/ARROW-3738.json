{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197519",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519",
    "key": "ARROW-3738",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "csv",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3738/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/165586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952\n \n \n   Second granularity is allowed (we might want to add support for fractions of seconds, e.g. in the \"YYYY-MM-DD[T ]hh:mm:ss.ssssss\" format).\r\n   \r\n   Timestamp conversion also participates in CSV type inference, since it's unlikely to produce false positives (e.g. a semantically \"string\" column that would be entirely made of valid timestamp strings).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-13T19:08:54.588+0000",
                    "updated": "2018-11-13T19:08:54.588+0000",
                    "started": "2018-11-13T19:08:54.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165586",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/165588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r233183810\n \n \n\n ##########\n File path: cpp/src/arrow/util/date.h\n ##########\n @@ -285,9 +287,9 @@ class day {\n   explicit CONSTCD11 day(unsigned d) NOEXCEPT;\n \n   CONSTCD14 day& operator++() NOEXCEPT;\n-  CONSTCD14 day  operator++(int) NOEXCEPT;\n+  CONSTCD14 day operator++(int) NOEXCEPT;\n \n Review comment:\n   Looks like `clang-format` ran over this file...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-13T19:12:02.225+0000",
                    "updated": "2018-11-13T19:12:02.225+0000",
                    "started": "2018-11-13T19:12:02.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165588",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/165636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#issuecomment-438433688\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=h1) Report\n   > Merging [#2952](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1ef6c2644b654fa77c49cc20bb9d8fc66d3f0c4f?src=pr&el=desc) will **increase** coverage by `0.94%`.\n   > The diff coverage is `96%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2952/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2952      +/-   ##\n   ==========================================\n   + Coverage   86.51%   87.46%   +0.94%     \n   ==========================================\n     Files         490      422      -68     \n     Lines       68879    63921    -4958     \n   ==========================================\n   - Hits        59590    55907    -3683     \n   + Misses       9201     8014    -1187     \n   + Partials       88        0      -88\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/date.h](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RhdGUuaA==) | `90.32% <\u00f8> (\u00f8)` | |\n   | [cpp/src/gandiva/to\\_date\\_holder.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL3RvX2RhdGVfaG9sZGVyLmNj) | `2.08% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/csv-converter-test.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY3N2LWNvbnZlcnRlci10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `97.29% <100%> (+0.09%)` | :arrow_up: |\n   | [cpp/src/arrow/csv/csv-column-builder-test.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY3N2LWNvbHVtbi1idWlsZGVyLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/parsing-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmctdXRpbC10ZXN0LmNj) | `99.53% <100%> (+0.19%)` | :arrow_up: |\n   | [cpp/src/arrow/csv/converter.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29udmVydGVyLmNj) | `95.33% <100%> (+0.5%)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `74.45% <100%> (-0.12%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_csv.py](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jc3YucHk=) | `97.61% <100%> (+0.08%)` | :arrow_up: |\n   | [cpp/src/arrow/util/parsing.h](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmcuaA==) | `95.6% <87.3%> (-4.4%)` | :arrow_down: |\n   | ... and [70 more](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=footer). Last update [1ef6c26...84071f7](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-13T20:57:15.104+0000",
                    "updated": "2018-11-13T20:57:15.104+0000",
                    "started": "2018-11-13T20:57:15.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165636",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/167203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r234418631\n \n \n\n ##########\n File path: python/pyarrow/tests/test_csv.py\n ##########\n @@ -220,6 +221,18 @@ def test_simple_nulls(self):\n             'e': [b\"3\", b\"nan\", b\"\\xff\"],\n             }\n \n+    def test_simple_timestamps(self):\n+        # Infer a timestamp column\n+        rows = b\"a,b\\n1970,1970-01-01\\n1989,1989-07-14\\n\"\n \n Review comment:\n   Shouldn't this be a `date` column and only a `datetime` column when it includes hours/minutes?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-17T19:32:00.397+0000",
                    "updated": "2018-11-17T19:32:00.397+0000",
                    "started": "2018-11-17T19:32:00.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167203",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/167228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r234437274\n \n \n\n ##########\n File path: python/pyarrow/tests/test_csv.py\n ##########\n @@ -220,6 +221,18 @@ def test_simple_nulls(self):\n             'e': [b\"3\", b\"nan\", b\"\\xff\"],\n             }\n \n+    def test_simple_timestamps(self):\n+        # Infer a timestamp column\n+        rows = b\"a,b\\n1970,1970-01-01\\n1989,1989-07-14\\n\"\n \n Review comment:\n   Perhaps. The original issue was about inferring timpestamp columns, though, and date-only timestamps are a valid kind of timestamps ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-18T10:21:35.781+0000",
                    "updated": "2018-11-18T10:21:35.781+0000",
                    "started": "2018-11-18T10:21:35.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167228",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/167258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r234456155\n \n \n\n ##########\n File path: python/pyarrow/tests/test_csv.py\n ##########\n @@ -220,6 +221,18 @@ def test_simple_nulls(self):\n             'e': [b\"3\", b\"nan\", b\"\\xff\"],\n             }\n \n+    def test_simple_timestamps(self):\n+        # Infer a timestamp column\n+        rows = b\"a,b\\n1970,1970-01-01\\n1989,1989-07-14\\n\"\n \n Review comment:\n   What about adding a time to these so that we don't have a test that would break when we add `date` support?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-18T18:35:30.265+0000",
                    "updated": "2018-11-18T18:35:30.265+0000",
                    "started": "2018-11-18T18:35:30.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167258",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/167259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r234456197\n \n \n\n ##########\n File path: python/pyarrow/tests/test_csv.py\n ##########\n @@ -220,6 +221,18 @@ def test_simple_nulls(self):\n             'e': [b\"3\", b\"nan\", b\"\\xff\"],\n             }\n \n+    def test_simple_timestamps(self):\n+        # Infer a timestamp column\n+        rows = b\"a,b\\n1970,1970-01-01\\n1989,1989-07-14\\n\"\n \n Review comment:\n   Well, we can fix the test by then. Right now those are inferred as timestamps, and that's what the test checks for.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-18T18:37:01.512+0000",
                    "updated": "2018-11-18T18:37:01.512+0000",
                    "started": "2018-11-18T18:37:01.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167259",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#issuecomment-440669204\n \n \n   Will merge soon if no CI fail.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T13:53:27.031+0000",
                    "updated": "2018-11-21T13:53:27.031+0000",
                    "started": "2018-11-21T13:53:27.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168281",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#issuecomment-440670338\n \n \n   I'd still like to have a look -- let me have a look this morning and will merge if no issues \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T13:57:11.095+0000",
                    "updated": "2018-11-21T13:57:11.095+0000",
                    "started": "2018-11-21T13:57:11.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168282",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#issuecomment-440876677\n \n \n   Sorry to be a bit delayed -- week of Thanksgiving in the US in always a bit challenging. I will try to rebase this and give it a quick review before merging\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T01:11:29.319+0000",
                    "updated": "2018-11-22T01:11:29.319+0000",
                    "started": "2018-11-22T01:11:29.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168604",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r235603996\n \n \n\n ##########\n File path: cpp/src/arrow/util/parsing.h\n ##########\n @@ -351,6 +358,121 @@ class StringConverter<Int32Type> : public StringToSignedIntConverterMixin<Int32T\n template <>\n class StringConverter<Int64Type> : public StringToSignedIntConverterMixin<Int64Type> {};\n \n+template <>\n+class StringConverter<TimestampType> {\n \n Review comment:\n   Do you have a sense of performance of this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T05:15:00.766+0000",
                    "updated": "2018-11-22T05:15:00.766+0000",
                    "started": "2018-11-22T05:15:00.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168660",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#issuecomment-438433688\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=h1) Report\n   > Merging [#2952](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/7cdab9b06541617ea67ee2ae1694195b8281125a?src=pr&el=desc) will **increase** coverage by `0.81%`.\n   > The diff coverage is `96%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2952/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2952      +/-   ##\n   ==========================================\n   + Coverage   86.65%   87.46%   +0.81%     \n   ==========================================\n     Files         493      422      -71     \n     Lines       69675    63953    -5722     \n   ==========================================\n   - Hits        60375    55939    -4436     \n   + Misses       9204     8014    -1190     \n   + Partials       96        0      -96\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/date.h](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RhdGUuaA==) | `90.32% <\u00f8> (\u00f8)` | |\n   | [cpp/src/gandiva/to\\_date\\_holder.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL3RvX2RhdGVfaG9sZGVyLmNj) | `2.08% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/csv-converter-test.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY3N2LWNvbnZlcnRlci10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `97.4% <100%> (+0.08%)` | :arrow_up: |\n   | [cpp/src/arrow/csv/csv-column-builder-test.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY3N2LWNvbHVtbi1idWlsZGVyLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/parsing-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmctdXRpbC10ZXN0LmNj) | `99.53% <100%> (+0.19%)` | :arrow_up: |\n   | [cpp/src/arrow/csv/converter.cc](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29udmVydGVyLmNj) | `95.33% <100%> (+0.5%)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `74.45% <100%> (-23.55%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_csv.py](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jc3YucHk=) | `97.94% <100%> (+0.06%)` | :arrow_up: |\n   | [cpp/src/arrow/util/parsing.h](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmcuaA==) | `95.6% <87.3%> (-4.4%)` | :arrow_down: |\n   | ... and [117 more](https://codecov.io/gh/apache/arrow/pull/2952/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=footer). Last update [7cdab9b...005a6e3](https://codecov.io/gh/apache/arrow/pull/2952?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T06:00:04.531+0000",
                    "updated": "2018-11-22T06:00:04.531+0000",
                    "started": "2018-11-22T06:00:04.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168667",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#discussion_r235666436\n \n \n\n ##########\n File path: cpp/src/arrow/util/parsing.h\n ##########\n @@ -351,6 +358,121 @@ class StringConverter<Int32Type> : public StringToSignedIntConverterMixin<Int32T\n template <>\n class StringConverter<Int64Type> : public StringToSignedIntConverterMixin<Int64Type> {};\n \n+template <>\n+class StringConverter<TimestampType> {\n \n Review comment:\n   No idea. Hopefully it shouldn't be too slow...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T10:07:50.726+0000",
                    "updated": "2018-11-22T10:07:50.726+0000",
                    "started": "2018-11-22T10:07:50.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168733",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952#issuecomment-441054228\n \n \n   I opened https://issues.apache.org/jira/browse/ARROW-3853 about adding a cast implementation that uses this. We should also add benchmarks once we do that\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T14:56:04.349+0000",
                    "updated": "2018-11-22T14:56:04.349+0000",
                    "started": "2018-11-22T14:56:04.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168812",
                    "issueId": "13197519"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/worklog/168813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2952: ARROW-3738: [C++] Parse ISO8601-like timestamps in CSV columns\nURL: https://github.com/apache/arrow/pull/2952\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/LICENSE.txt b/LICENSE.txt\nindex 2651a135e7..2e6ce20ae2 100644\n--- a/LICENSE.txt\n+++ b/LICENSE.txt\n@@ -717,7 +717,7 @@ See the License for the specific language governing permissions and\n limitations under the License.\n \n --------------------------------------------------------------------------------\n-The file cpp/src/gandiva/precompiled/date.h has the following license (MIT)\n+The file cpp/src/arrow/util/date.h has the following license (MIT)\n \n The MIT License (MIT)\n Copyright (c) 2015, 2016, 2017 Howard Hinnant\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex cfa71be154..8f3ed08287 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -346,10 +346,10 @@ if (UNIX)\n             (item MATCHES \"xxhash.h\") OR\n             (item MATCHES \"xxhash.cc\") OR\n             (item MATCHES \"config.h\") OR\n+            (item MATCHES \"util/date.h\") OR\n             (item MATCHES \"util/string_view/\") OR\n             (item MATCHES \"util/variant\") OR\n             (item MATCHES \"zmalloc.h\") OR\n-            (item MATCHES \"gandiva/precompiled/date.h\") OR\n             (item MATCHES \"ae.h\")))\n       LIST(APPEND FILTERED_LINT_FILES ${item})\n     ENDIF()\ndiff --git a/cpp/build-support/clang_format_exclusions.txt b/cpp/build-support/clang_format_exclusions.txt\nindex 1aeecfadf5..c04523af1d 100644\n--- a/cpp/build-support/clang_format_exclusions.txt\n+++ b/cpp/build-support/clang_format_exclusions.txt\n@@ -4,6 +4,7 @@\n *pyarrow_lib.h\n *python/config.h\n *python/platform.h\n+*util/date.h\n *util/string_view/*\n *util/variant.h\n *util/variant/*\n@@ -11,4 +12,3 @@\n *xxhash.cc\n *xxhash.h\n *RcppExports.cpp*\n-*gandiva/precompiled/date.h\ndiff --git a/cpp/build-support/lint_cpp_cli.py b/cpp/build-support/lint_cpp_cli.py\nindex 993ea2f4f0..2333d7f368 100644\n--- a/cpp/build-support/lint_cpp_cli.py\n+++ b/cpp/build-support/lint_cpp_cli.py\n@@ -70,12 +70,12 @@ def lint_file(path):\n \n EXCLUSIONS = [\n     'arrow/python/iterators.h',\n+    'arrow/util/date.h',\n     'arrow/util/macros.h',\n     'arrow/util/parallel.h',\n     'arrow/util/string_view/string_view.hpp',\n     'gandiva/cache.h',\n     'gandiva/jni',\n-    'gandiva/precompiled/date.h',\n     'test',\n     'internal'\n ]\ndiff --git a/cpp/src/arrow/csv/column-builder.cc b/cpp/src/arrow/csv/column-builder.cc\nindex ba2685f489..28cbad4758 100644\n--- a/cpp/src/arrow/csv/column-builder.cc\n+++ b/cpp/src/arrow/csv/column-builder.cc\n@@ -167,7 +167,7 @@ class InferringColumnBuilder : public ColumnBuilder {\n   std::shared_ptr<Converter> converter_;\n \n   // Current inference status\n-  enum class InferKind { Null, Integer, Real, Text, Binary };\n+  enum class InferKind { Null, Integer, Real, Timestamp, Text, Binary };\n \n   std::shared_ptr<DataType> infer_type_;\n   InferKind infer_kind_;\n@@ -191,6 +191,9 @@ Status InferringColumnBuilder::LoosenType() {\n       infer_kind_ = InferKind::Integer;\n       break;\n     case InferKind::Integer:\n+      infer_kind_ = InferKind::Timestamp;\n+      break;\n+    case InferKind::Timestamp:\n       infer_kind_ = InferKind::Real;\n       break;\n     case InferKind::Real:\n@@ -217,6 +220,11 @@ Status InferringColumnBuilder::UpdateType() {\n       infer_type_ = int64();\n       can_loosen_type_ = true;\n       break;\n+    case InferKind::Timestamp:\n+      // We don't support parsing second fractions for now\n+      infer_type_ = timestamp(TimeUnit::SECOND);\n+      can_loosen_type_ = true;\n+      break;\n     case InferKind::Real:\n       infer_type_ = float64();\n       can_loosen_type_ = true;\ndiff --git a/cpp/src/arrow/csv/converter.cc b/cpp/src/arrow/csv/converter.cc\nindex b959711598..0f056cebdc 100644\n--- a/cpp/src/arrow/csv/converter.cc\n+++ b/cpp/src/arrow/csv/converter.cc\n@@ -329,6 +329,41 @@ Status NumericConverter<T>::Convert(const BlockParser& parser, int32_t col_index\n   return Status::OK();\n }\n \n+/////////////////////////////////////////////////////////////////////////\n+// Concrete Converter for timestamps\n+\n+class TimestampConverter : public ConcreteConverter {\n+ public:\n+  using ConcreteConverter::ConcreteConverter;\n+\n+  Status Convert(const BlockParser& parser, int32_t col_index,\n+                 std::shared_ptr<Array>* out) override {\n+    using value_type = TimestampType::c_type;\n+\n+    TimestampBuilder builder(type_, pool_);\n+    StringConverter<TimestampType> converter(type_);\n+\n+    auto visit = [&](const uint8_t* data, uint32_t size, bool quoted) -> Status {\n+      value_type value;\n+      if (IsNull(data, size, quoted)) {\n+        builder.UnsafeAppendNull();\n+        return Status::OK();\n+      }\n+      if (ARROW_PREDICT_FALSE(\n+              !converter(reinterpret_cast<const char*>(data), size, &value))) {\n+        return GenericConversionError(type_, data, size);\n+      }\n+      builder.UnsafeAppend(value);\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(builder.Resize(parser.num_rows()));\n+    RETURN_NOT_OK(parser.VisitColumn(col_index, visit));\n+    RETURN_NOT_OK(builder.Finish(out));\n+\n+    return Status::OK();\n+  }\n+};\n+\n }  // namespace\n \n /////////////////////////////////////////////////////////////////////////\n@@ -361,6 +396,7 @@ Status Converter::Make(const std::shared_ptr<DataType>& type,\n     CONVERTER_CASE(Type::FLOAT, NumericConverter<FloatType>)\n     CONVERTER_CASE(Type::DOUBLE, NumericConverter<DoubleType>)\n     CONVERTER_CASE(Type::BOOL, NumericConverter<BooleanType>)\n+    CONVERTER_CASE(Type::TIMESTAMP, TimestampConverter)\n     CONVERTER_CASE(Type::BINARY, (VarSizeBinaryConverter<BinaryType, false>))\n     CONVERTER_CASE(Type::FIXED_SIZE_BINARY, FixedSizeBinaryConverter)\n \ndiff --git a/cpp/src/arrow/csv/csv-column-builder-test.cc b/cpp/src/arrow/csv/csv-column-builder-test.cc\nindex 7488ad8051..a039183d49 100644\n--- a/cpp/src/arrow/csv/csv-column-builder-test.cc\n+++ b/cpp/src/arrow/csv/csv-column-builder-test.cc\n@@ -51,7 +51,7 @@ void AssertBuilding(const std::shared_ptr<ColumnBuilder>& builder,\n }\n \n //////////////////////////////////////////////////////////////////////////\n-// Test functions begin here\n+// Tests for fixed-type column builder\n \n TEST(ColumnBuilder, Empty) {\n   auto tg = TaskGroup::MakeSerial();\n@@ -123,6 +123,9 @@ TEST(ColumnBuilder, MultipleChunksParallel) {\n   AssertChunkedEqual(*actual, *expected);\n }\n \n+//////////////////////////////////////////////////////////////////////////\n+// Tests for type-inferring column builder\n+\n TEST(InferringColumnBuilder, Empty) {\n   auto tg = TaskGroup::MakeSerial();\n   std::shared_ptr<ColumnBuilder> builder;\n@@ -214,6 +217,36 @@ TEST(InferringColumnBuilder, MultipleChunkReal) {\n   AssertChunkedEqual(*expected, *actual);\n }\n \n+TEST(InferringColumnBuilder, SingleChunkTimestamp) {\n+  auto tg = TaskGroup::MakeSerial();\n+  std::shared_ptr<ColumnBuilder> builder;\n+  ASSERT_OK(ColumnBuilder::Make(0, ConvertOptions::Defaults(), tg, &builder));\n+\n+  std::shared_ptr<ChunkedArray> actual;\n+  AssertBuilding(builder, {{\"\", \"1970-01-01\", \"2018-11-13 17:11:10\"}}, &actual);\n+\n+  std::shared_ptr<ChunkedArray> expected;\n+  ChunkedArrayFromVector<TimestampType>(timestamp(TimeUnit::SECOND),\n+                                        {{false, true, true}}, {{0, 0, 1542129070}},\n+                                        &expected);\n+  AssertChunkedEqual(*expected, *actual);\n+}\n+\n+TEST(InferringColumnBuilder, MultipleChunkTimestamp) {\n+  auto tg = TaskGroup::MakeSerial();\n+  std::shared_ptr<ColumnBuilder> builder;\n+  ASSERT_OK(ColumnBuilder::Make(0, ConvertOptions::Defaults(), tg, &builder));\n+\n+  std::shared_ptr<ChunkedArray> actual;\n+  AssertBuilding(builder, {{\"\"}, {\"1970-01-01\"}, {\"2018-11-13 17:11:10\"}}, &actual);\n+\n+  std::shared_ptr<ChunkedArray> expected;\n+  ChunkedArrayFromVector<TimestampType>(timestamp(TimeUnit::SECOND),\n+                                        {{false}, {true}, {true}},\n+                                        {{0}, {0}, {1542129070}}, &expected);\n+  AssertChunkedEqual(*expected, *actual);\n+}\n+\n TEST(InferringColumnBuilder, SingleChunkString) {\n   auto tg = TaskGroup::MakeSerial();\n   std::shared_ptr<ColumnBuilder> builder;\ndiff --git a/cpp/src/arrow/csv/csv-converter-test.cc b/cpp/src/arrow/csv/csv-converter-test.cc\nindex 024a54c0a4..2534541d31 100644\n--- a/cpp/src/arrow/csv/csv-converter-test.cc\n+++ b/cpp/src/arrow/csv/csv-converter-test.cc\n@@ -220,6 +220,29 @@ TEST(BooleanConversion, Nulls) {\n                                       {{true, true}, {false, true}});\n }\n \n+TEST(TimestampConversion, Basics) {\n+  auto type = timestamp(TimeUnit::SECOND);\n+\n+  AssertConversion<TimestampType, int64_t>(\n+      type, {\"1970-01-01\\n2000-02-29\\n3989-07-14\\n1900-02-28\\n\"},\n+      {{0, 951782400, 63730281600LL, -2203977600LL}});\n+  AssertConversion<TimestampType, int64_t>(type,\n+                                           {\"2018-11-13 17:11:10\\n1900-02-28 12:34:56\\n\"},\n+                                           {{1542129070, -2203932304LL}});\n+\n+  type = timestamp(TimeUnit::NANO);\n+  AssertConversion<TimestampType, int64_t>(\n+      type, {\"1970-01-01\\n2000-02-29\\n1900-02-28\\n\"},\n+      {{0, 951782400000000000LL, -2203977600000000000LL}});\n+}\n+\n+TEST(TimestampConversion, Nulls) {\n+  auto type = timestamp(TimeUnit::MILLI);\n+  AssertConversion<TimestampType, int64_t>(type, {\"1970-01-01 00:01:00,,N/A\\n\"},\n+                                           {{60000}, {0}, {0}},\n+                                           {{true}, {false}, {false}});\n+}\n+\n TEST(DecimalConversion, NotImplemented) {\n   std::shared_ptr<Converter> converter;\n   ASSERT_RAISES(NotImplemented,\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex 296aa8833d..7cab89ea60 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -222,6 +222,8 @@ Status MakeRandomBuffer(int64_t length, MemoryPool* pool,\n   return Status::OK();\n }\n \n+// ArrayFromVector: construct an Array from vectors of C values\n+\n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n void ArrayFromVector(const std::shared_ptr<DataType>& type,\n                      const std::vector<bool>& is_valid, const std::vector<C_TYPE>& values,\n@@ -261,56 +263,68 @@ void ArrayFromVector(const std::shared_ptr<DataType>& type,\n   ASSERT_OK(builder.Finish(out));\n }\n \n+// Overloads without a DataType argument, for parameterless types\n+\n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n void ArrayFromVector(const std::vector<bool>& is_valid, const std::vector<C_TYPE>& values,\n                      std::shared_ptr<Array>* out) {\n-  typename TypeTraits<TYPE>::BuilderType builder;\n-  DCHECK_EQ(is_valid.size(), values.size());\n-  for (size_t i = 0; i < values.size(); ++i) {\n-    if (is_valid[i]) {\n-      ASSERT_OK(builder.Append(values[i]));\n-    } else {\n-      ASSERT_OK(builder.AppendNull());\n-    }\n-  }\n-  ASSERT_OK(builder.Finish(out));\n+  auto type = TypeTraits<TYPE>::type_singleton();\n+  ArrayFromVector<TYPE, C_TYPE>(type, is_valid, values, out);\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n void ArrayFromVector(const std::vector<C_TYPE>& values, std::shared_ptr<Array>* out) {\n-  typename TypeTraits<TYPE>::BuilderType builder;\n-  for (auto& value : values) {\n-    ASSERT_OK(builder.Append(value));\n-  }\n-  ASSERT_OK(builder.Finish(out));\n+  auto type = TypeTraits<TYPE>::type_singleton();\n+  ArrayFromVector<TYPE, C_TYPE>(type, values, out);\n }\n \n+// ChunkedArrayFromVector: construct a ChunkedArray from vectors of C values\n+\n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ChunkedArrayFromVector(const std::vector<std::vector<bool>>& is_valid,\n+void ChunkedArrayFromVector(const std::shared_ptr<DataType>& type,\n+                            const std::vector<std::vector<bool>>& is_valid,\n                             const std::vector<std::vector<C_TYPE>>& values,\n                             std::shared_ptr<ChunkedArray>* out) {\n   ArrayVector chunks;\n   DCHECK_EQ(is_valid.size(), values.size());\n   for (size_t i = 0; i < values.size(); ++i) {\n     std::shared_ptr<Array> array;\n-    ArrayFromVector<TYPE, C_TYPE>(is_valid[i], values[i], &array);\n+    ArrayFromVector<TYPE, C_TYPE>(type, is_valid[i], values[i], &array);\n     chunks.push_back(array);\n   }\n   *out = std::make_shared<ChunkedArray>(chunks);\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ChunkedArrayFromVector(const std::vector<std::vector<C_TYPE>>& values,\n+void ChunkedArrayFromVector(const std::shared_ptr<DataType>& type,\n+                            const std::vector<std::vector<C_TYPE>>& values,\n                             std::shared_ptr<ChunkedArray>* out) {\n   ArrayVector chunks;\n   for (size_t i = 0; i < values.size(); ++i) {\n     std::shared_ptr<Array> array;\n-    ArrayFromVector<TYPE, C_TYPE>(values[i], &array);\n+    ArrayFromVector<TYPE, C_TYPE>(type, values[i], &array);\n     chunks.push_back(array);\n   }\n   *out = std::make_shared<ChunkedArray>(chunks);\n }\n \n+// Overloads without a DataType argument, for parameterless types\n+\n+template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n+void ChunkedArrayFromVector(const std::vector<std::vector<bool>>& is_valid,\n+                            const std::vector<std::vector<C_TYPE>>& values,\n+                            std::shared_ptr<ChunkedArray>* out) {\n+  auto type = TypeTraits<TYPE>::type_singleton();\n+  ChunkedArrayFromVector<TYPE, C_TYPE>(type, is_valid, values, out);\n+}\n+\n+template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n+void ChunkedArrayFromVector(const std::vector<std::vector<C_TYPE>>& values,\n+                            std::shared_ptr<ChunkedArray>* out) {\n+  auto type = TypeTraits<TYPE>::type_singleton();\n+  ChunkedArrayFromVector<TYPE, C_TYPE>(type, values, out);\n+}\n+\n template <class T, class Builder>\n Status MakeArray(const std::vector<uint8_t>& valid_bytes, const std::vector<T>& values,\n                  int64_t size, Builder* builder, std::shared_ptr<Array>* out) {\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 9f962f43a5..5d813ecdfa 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -34,6 +34,7 @@ install(FILES\n   compression_zlib.h\n   compression_zstd.h\n   cpu-info.h\n+  date.h\n   decimal.h\n   hash-util.h\n   hash.h\ndiff --git a/cpp/src/gandiva/precompiled/date.h b/cpp/src/arrow/util/date.h\nsimilarity index 99%\nrename from cpp/src/gandiva/precompiled/date.h\nrename to cpp/src/arrow/util/date.h\nindex 3c6f874b58..aa7648899b 100644\n--- a/cpp/src/gandiva/precompiled/date.h\n+++ b/cpp/src/arrow/util/date.h\n@@ -1,3 +1,5 @@\n+// Vendored from https://github.com/HowardHinnant/date/\n+\n #ifndef DATE_H\n #define DATE_H\n \n@@ -285,9 +287,9 @@ class day {\n   explicit CONSTCD11 day(unsigned d) NOEXCEPT;\n \n   CONSTCD14 day& operator++() NOEXCEPT;\n-  CONSTCD14 day  operator++(int) NOEXCEPT;\n+  CONSTCD14 day operator++(int) NOEXCEPT;\n   CONSTCD14 day& operator--() NOEXCEPT;\n-  CONSTCD14 day  operator--(int) NOEXCEPT;\n+  CONSTCD14 day operator--(int) NOEXCEPT;\n \n   CONSTCD14 day& operator+=(const days& d) NOEXCEPT;\n   CONSTCD14 day& operator-=(const days& d) NOEXCEPT;\n@@ -322,9 +324,9 @@ class month {\n   explicit CONSTCD11 month(unsigned m) NOEXCEPT;\n \n   CONSTCD14 month& operator++() NOEXCEPT;\n-  CONSTCD14 month  operator++(int) NOEXCEPT;\n+  CONSTCD14 month operator++(int) NOEXCEPT;\n   CONSTCD14 month& operator--() NOEXCEPT;\n-  CONSTCD14 month  operator--(int) NOEXCEPT;\n+  CONSTCD14 month operator--(int) NOEXCEPT;\n \n   CONSTCD14 month& operator+=(const months& m) NOEXCEPT;\n   CONSTCD14 month& operator-=(const months& m) NOEXCEPT;\n@@ -359,9 +361,9 @@ class year {\n   explicit CONSTCD11 year(int y) NOEXCEPT;\n \n   CONSTCD14 year& operator++() NOEXCEPT;\n-  CONSTCD14 year  operator++(int) NOEXCEPT;\n+  CONSTCD14 year operator++(int) NOEXCEPT;\n   CONSTCD14 year& operator--() NOEXCEPT;\n-  CONSTCD14 year  operator--(int) NOEXCEPT;\n+  CONSTCD14 year operator--(int) NOEXCEPT;\n \n   CONSTCD14 year& operator+=(const years& y) NOEXCEPT;\n   CONSTCD14 year& operator-=(const years& y) NOEXCEPT;\n@@ -406,9 +408,9 @@ class weekday {\n   CONSTCD11 explicit weekday(const local_days& dp) NOEXCEPT;\n \n   CONSTCD14 weekday& operator++() NOEXCEPT;\n-  CONSTCD14 weekday  operator++(int) NOEXCEPT;\n+  CONSTCD14 weekday operator++(int) NOEXCEPT;\n   CONSTCD14 weekday& operator--() NOEXCEPT;\n-  CONSTCD14 weekday  operator--(int) NOEXCEPT;\n+  CONSTCD14 weekday operator--(int) NOEXCEPT;\n \n   CONSTCD14 weekday& operator+=(const days& d) NOEXCEPT;\n   CONSTCD14 weekday& operator-=(const days& d) NOEXCEPT;\n@@ -1056,7 +1058,7 @@ struct no_overflow {\n       -((std::intmax_t(1) << (sizeof(std::intmax_t) * CHAR_BIT - 1)) + 1);\n \n   template <std::intmax_t Xp, std::intmax_t Yp, bool overflow>\n-  struct mul  { // overflow == false\n+  struct mul {  // overflow == false\n     static const std::intmax_t value = Xp * Yp;\n   };\n \n@@ -1206,7 +1208,7 @@ CONSTCD14 inline day& day::operator++() NOEXCEPT {\n   ++d_;\n   return *this;\n }\n-CONSTCD14 inline day day:: operator++(int) NOEXCEPT {\n+CONSTCD14 inline day day::operator++(int) NOEXCEPT {\n   auto tmp(*this);\n   ++(*this);\n   return tmp;\n@@ -1215,7 +1217,7 @@ CONSTCD14 inline day& day::operator--() NOEXCEPT {\n   --d_;\n   return *this;\n }\n-CONSTCD14 inline day day:: operator--(int) NOEXCEPT {\n+CONSTCD14 inline day day::operator--(int) NOEXCEPT {\n   auto tmp(*this);\n   --(*this);\n   return tmp;\n@@ -1289,7 +1291,7 @@ CONSTCD14 inline month& month::operator++() NOEXCEPT {\n   *this += months{1};\n   return *this;\n }\n-CONSTCD14 inline month month:: operator++(int) NOEXCEPT {\n+CONSTCD14 inline month month::operator++(int) NOEXCEPT {\n   auto tmp(*this);\n   ++(*this);\n   return tmp;\n@@ -1298,7 +1300,7 @@ CONSTCD14 inline month& month::operator--() NOEXCEPT {\n   *this -= months{1};\n   return *this;\n }\n-CONSTCD14 inline month month:: operator--(int) NOEXCEPT {\n+CONSTCD14 inline month month::operator--(int) NOEXCEPT {\n   auto tmp(*this);\n   --(*this);\n   return tmp;\n@@ -1379,7 +1381,7 @@ CONSTCD14 inline year& year::operator++() NOEXCEPT {\n   ++y_;\n   return *this;\n }\n-CONSTCD14 inline year year:: operator++(int) NOEXCEPT {\n+CONSTCD14 inline year year::operator++(int) NOEXCEPT {\n   auto tmp(*this);\n   ++(*this);\n   return tmp;\n@@ -1388,7 +1390,7 @@ CONSTCD14 inline year& year::operator--() NOEXCEPT {\n   --y_;\n   return *this;\n }\n-CONSTCD14 inline year year:: operator--(int) NOEXCEPT {\n+CONSTCD14 inline year year::operator--(int) NOEXCEPT {\n   auto tmp(*this);\n   --(*this);\n   return tmp;\n@@ -1498,7 +1500,7 @@ CONSTCD14 inline weekday& weekday::operator++() NOEXCEPT {\n   *this += days{1};\n   return *this;\n }\n-CONSTCD14 inline weekday weekday:: operator++(int) NOEXCEPT {\n+CONSTCD14 inline weekday weekday::operator++(int) NOEXCEPT {\n   auto tmp(*this);\n   ++(*this);\n   return tmp;\n@@ -1507,7 +1509,7 @@ CONSTCD14 inline weekday& weekday::operator--() NOEXCEPT {\n   *this -= days{1};\n   return *this;\n }\n-CONSTCD14 inline weekday weekday:: operator--(int) NOEXCEPT {\n+CONSTCD14 inline weekday weekday::operator--(int) NOEXCEPT {\n   auto tmp(*this);\n   --(*this);\n   return tmp;\n@@ -2518,7 +2520,7 @@ inline bool year_month_weekday_last::ok() const NOEXCEPT {\n CONSTCD14\n inline days year_month_weekday_last::to_days() const NOEXCEPT {\n   auto const d = sys_days(y_ / m_ / last);\n-  return (d - (date::weekday {d} - wdl_.weekday())).time_since_epoch();\n+  return (d - (date::weekday{d} - wdl_.weekday())).time_since_epoch();\n }\n \n CONSTCD11\n@@ -3140,7 +3142,7 @@ class time_of_day_storage<std::chrono::duration<Rep, Period>, detail::classify::\n   }\n \n   CONSTCD11 bool in_conventional_range() const NOEXCEPT {\n-    return base::in_conventional_range() && m_ < std::chrono::hours {1};\n+    return base::in_conventional_range() && m_ < std::chrono::hours{1};\n   }\n \n   template <class CharT, class Traits>\n@@ -3219,7 +3221,7 @@ class time_of_day_storage<std::chrono::duration<Rep, Period>, detail::classify::\n   }\n \n   CONSTCD11 bool in_conventional_range() const NOEXCEPT {\n-    return base::in_conventional_range() && m_ < std::chrono::hours {1} &&\n+    return base::in_conventional_range() && m_ < std::chrono::hours{1} &&\n            s_.in_conventional_range();\n   }\n \n@@ -3314,7 +3316,7 @@ class time_of_day_storage<std::chrono::duration<Rep, Period>, detail::classify::\n   }\n \n   CONSTCD11 bool in_conventional_range() const NOEXCEPT {\n-    return base::in_conventional_range() && m_ < std::chrono::hours {1} &&\n+    return base::in_conventional_range() && m_ < std::chrono::hours{1} &&\n            s_.in_conventional_range();\n   }\n \n@@ -3617,14 +3619,14 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n                                              const fields<Duration>& fds,\n                                              const std::string* abbrev,\n                                              const std::chrono::seconds* offset_sec) {\n-  using std::chrono::duration_cast;\n-  using std::chrono::duration;\n-  using std::use_facet;\n-  using std::chrono::hours;\n-  using std::chrono::minutes;\n   using detail::save_ostream;\n   using std::ios;\n   using std::time_put;\n+  using std::use_facet;\n+  using std::chrono::duration;\n+  using std::chrono::duration_cast;\n+  using std::chrono::hours;\n+  using std::chrono::minutes;\n   date::detail::save_ostream<CharT, Traits> ss(os);\n   os.fill(' ');\n   os.flags(std::ios::skipws | std::ios::dec);\n@@ -3715,11 +3717,11 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n               os << month_names().first[extract_month(os, fds) - 1 + 12] << ' ';\n               auto d = static_cast<int>(static_cast<unsigned>(fds.ymd.day()));\n               if (d < 10) {\n-                 os << ' ';\n+                os << ' ';\n               }\n               os << d << ' ' << make_time(duration_cast<seconds>(fds.tod.to_duration()))\n                  << ' ' << fds.ymd.year();\n-            } else { // *fmt == 'x'\n+            } else {  // *fmt == 'x'\n               auto const& ymd = fds.ymd;\n               save_ostream<CharT, Traits> _(os);\n               os.fill('0');\n@@ -4032,10 +4034,10 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n             tm.tm_hour = static_cast<int>(fds.tod.hours().count());\n             facet.put(os, os, os.fill(), &tm, begin(f), end(f));\n #else\n-            if (fds.tod.hours() < hours {12}) {\n+            if (fds.tod.hours() < hours{12}) {\n               os << ampm_names().first[0];\n             } else {\n-                os << ampm_names().first[1];\n+              os << ampm_names().first[1];\n             }\n #endif\n           } else {\n@@ -4044,7 +4046,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'r':\n@@ -4069,10 +4071,10 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n             os.width(2);\n             os << tod.seconds().count() << CharT{' '};\n             tod.make24();\n-            if (tod.hours() < hours {12}) {\n+            if (tod.hours() < hours{12}) {\n               os << ampm_names().first[0];\n             } else {\n-                os << ampm_names().first[1];\n+              os << ampm_names().first[1];\n             }\n #endif\n           } else {\n@@ -4081,16 +4083,22 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'R':\n         if (command) {\n           if (modified == CharT{}) {\n-            if (!fds.has_tod) { os.setstate(std::ios::failbit); }\n-            if (fds.tod.hours() < hours{10}) { os << CharT{'0'}; }\n+            if (!fds.has_tod) {\n+              os.setstate(std::ios::failbit);\n+            }\n+            if (fds.tod.hours() < hours{10}) {\n+              os << CharT{'0'};\n+            }\n             os << fds.tod.hours().count() << CharT{':'};\n-            if (fds.tod.minutes() < minutes{10}) { os << CharT{'0'}; }\n+            if (fds.tod.minutes() < minutes{10}) {\n+              os << CharT{'0'};\n+            }\n             os << fds.tod.minutes().count();\n           } else {\n             os << CharT{'%'} << modified << *fmt;\n@@ -4128,7 +4136,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 't':\n@@ -4141,7 +4149,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           }\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'T':\n@@ -4155,15 +4163,14 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           }\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'u':\n         if (command) {\n           if (modified == CharT{'E'}) {\n             os << CharT{'%'} << modified << *fmt;\n-          }\n-          else {\n+          } else {\n             auto wd = extract_weekday(os, fds);\n #if !ONLY_C_LOCALE\n             if (modified == CharT{})\n@@ -4182,7 +4189,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'U':\n@@ -4221,7 +4228,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'V':\n@@ -4263,7 +4270,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'w':\n@@ -4291,7 +4298,7 @@ std::basic_ostream<CharT, Traits>& to_stream(std::basic_ostream<CharT, Traits>&\n           modified = CharT{};\n           command = nullptr;\n         } else {\n-            os << *fmt;\n+          os << *fmt;\n         }\n         break;\n       case 'W':\n@@ -6364,29 +6371,29 @@ msl(std::ratio<N, D>) {\n \n template <class CharT>\n CONSTCD11 inline string_literal<CharT, 2> msl(std::atto) NOEXCEPT {\n-  return string_literal<CharT, 2> {'a'};\n+  return string_literal<CharT, 2>{'a'};\n }\n \n template <class CharT>\n CONSTCD11 inline string_literal<CharT, 2> msl(std::femto) NOEXCEPT {\n-  return string_literal<CharT, 2> {'f'};\n+  return string_literal<CharT, 2>{'f'};\n }\n \n template <class CharT>\n CONSTCD11 inline string_literal<CharT, 2> msl(std::pico) NOEXCEPT {\n-  return string_literal<CharT, 2> {'p'};\n+  return string_literal<CharT, 2>{'p'};\n }\n \n template <class CharT>\n CONSTCD11 inline string_literal<CharT, 2> msl(std::nano) NOEXCEPT {\n-  return string_literal<CharT, 2> {'n'};\n+  return string_literal<CharT, 2>{'n'};\n }\n \n template <class CharT>\n CONSTCD11 inline typename std::enable_if<std::is_same<CharT, char>::value,\n                                          string_literal<char, 3>>::type\n msl(std::micro) NOEXCEPT {\n-  return string_literal<char, 3> {'\\xC2', '\\xB5'};\n+  return string_literal<char, 3>{'\\xC2', '\\xB5'};\n }\n \n template <class CharT>\n@@ -6398,12 +6405,12 @@ msl(std::micro) NOEXCEPT {\n \n template <class CharT>\n CONSTCD11 inline string_literal<CharT, 2> msl(std::milli) NOEXCEPT {\n-  return string_literal<CharT, 2> {'m'};\n+  return string_literal<CharT, 2>{'m'};\n }\n \n template <class CharT>\n CONSTCD11 inline string_literal<CharT, 2> msl(std::centi) NOEXCEPT {\n-  return string_literal<CharT, 2> {'c'};\n+  return string_literal<CharT, 2>{'c'};\n }\n \n template <class CharT>\ndiff --git a/cpp/src/arrow/util/parsing-util-test.cc b/cpp/src/arrow/util/parsing-util-test.cc\nindex dd7718dc45..ff0621a0b5 100644\n--- a/cpp/src/arrow/util/parsing-util-test.cc\n+++ b/cpp/src/arrow/util/parsing-util-test.cc\n@@ -33,7 +33,7 @@ void AssertConversion(ConverterType& converter, const std::string& s, C_TYPE exp\n   typename ConverterType::value_type out;\n   ASSERT_TRUE(converter(s.data(), s.length(), &out))\n       << \"Conversion failed for '\" << s << \"' (expected to return \" << expected << \")\";\n-  ASSERT_EQ(out, expected);\n+  ASSERT_EQ(out, expected) << \"Conversion failed for '\" << s << \"'\";\n }\n \n template <typename ConverterType>\n@@ -264,4 +264,98 @@ TEST(StringConversion, ToUInt64) {\n   AssertConversionFails(converter, \"e\");\n }\n \n+TEST(StringConversion, ToTimestamp1) {\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::SECOND));\n+\n+    AssertConversion(converter, \"1970-01-01\", 0);\n+    AssertConversion(converter, \"1989-07-14\", 616377600);\n+    AssertConversion(converter, \"2000-02-29\", 951782400);\n+    AssertConversion(converter, \"3989-07-14\", 63730281600LL);\n+    AssertConversion(converter, \"1900-02-28\", -2203977600LL);\n+\n+    AssertConversionFails(converter, \"\");\n+    AssertConversionFails(converter, \"1970\");\n+    AssertConversionFails(converter, \"19700101\");\n+    AssertConversionFails(converter, \"1970/01/01\");\n+    AssertConversionFails(converter, \"1970-01-01 \");\n+    AssertConversionFails(converter, \"1970-01-01Z\");\n+\n+    // Invalid dates\n+    AssertConversionFails(converter, \"1970-00-01\");\n+    AssertConversionFails(converter, \"1970-13-01\");\n+    AssertConversionFails(converter, \"1970-01-32\");\n+    AssertConversionFails(converter, \"1970-02-29\");\n+    AssertConversionFails(converter, \"2100-02-29\");\n+  }\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::MILLI));\n+\n+    AssertConversion(converter, \"1970-01-01\", 0);\n+    AssertConversion(converter, \"1989-07-14\", 616377600000LL);\n+    AssertConversion(converter, \"3989-07-14\", 63730281600000LL);\n+    AssertConversion(converter, \"1900-02-28\", -2203977600000LL);\n+  }\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::MICRO));\n+\n+    AssertConversion(converter, \"1970-01-01\", 0);\n+    AssertConversion(converter, \"1989-07-14\", 616377600000000LL);\n+    AssertConversion(converter, \"3989-07-14\", 63730281600000000LL);\n+    AssertConversion(converter, \"1900-02-28\", -2203977600000000LL);\n+  }\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::NANO));\n+\n+    AssertConversion(converter, \"1970-01-01\", 0);\n+    AssertConversion(converter, \"1989-07-14\", 616377600000000000LL);\n+    AssertConversion(converter, \"2018-11-13\", 1542067200000000000LL);\n+    AssertConversion(converter, \"1900-02-28\", -2203977600000000000LL);\n+  }\n+}\n+\n+TEST(StringConversion, ToTimestamp2) {\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::SECOND));\n+\n+    AssertConversion(converter, \"1970-01-01 00:00:00\", 0);\n+    AssertConversion(converter, \"2018-11-13 17:11:10\", 1542129070);\n+    AssertConversion(converter, \"2018-11-13T17:11:10\", 1542129070);\n+    AssertConversion(converter, \"2018-11-13 17:11:10Z\", 1542129070);\n+    AssertConversion(converter, \"2018-11-13T17:11:10Z\", 1542129070);\n+    AssertConversion(converter, \"1900-02-28 12:34:56\", -2203932304LL);\n+\n+    // Invalid dates\n+    AssertConversionFails(converter, \"1970-02-29 00:00:00\");\n+    AssertConversionFails(converter, \"2100-02-29 00:00:00\");\n+    // Invalid times\n+    AssertConversionFails(converter, \"1970-01-01 24:00:00\");\n+    AssertConversionFails(converter, \"1970-01-01 00:60:00\");\n+    AssertConversionFails(converter, \"1970-01-01 00:00:60\");\n+  }\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::MILLI));\n+\n+    AssertConversion(converter, \"2018-11-13 17:11:10\", 1542129070000LL);\n+    AssertConversion(converter, \"2018-11-13T17:11:10Z\", 1542129070000LL);\n+    AssertConversion(converter, \"3989-07-14T11:22:33Z\", 63730322553000LL);\n+    AssertConversion(converter, \"1900-02-28 12:34:56\", -2203932304000LL);\n+  }\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::MICRO));\n+\n+    AssertConversion(converter, \"2018-11-13 17:11:10\", 1542129070000000LL);\n+    AssertConversion(converter, \"2018-11-13T17:11:10Z\", 1542129070000000LL);\n+    AssertConversion(converter, \"3989-07-14T11:22:33Z\", 63730322553000000LL);\n+    AssertConversion(converter, \"1900-02-28 12:34:56\", -2203932304000000LL);\n+  }\n+  {\n+    StringConverter<TimestampType> converter(timestamp(TimeUnit::NANO));\n+\n+    AssertConversion(converter, \"2018-11-13 17:11:10\", 1542129070000000000LL);\n+    AssertConversion(converter, \"2018-11-13T17:11:10Z\", 1542129070000000000LL);\n+    AssertConversion(converter, \"1900-02-28 12:34:56\", -2203932304000000000LL);\n+  }\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/parsing.h b/cpp/src/arrow/util/parsing.h\nindex 04aff1e68f..aa1f820257 100644\n--- a/cpp/src/arrow/util/parsing.h\n+++ b/cpp/src/arrow/util/parsing.h\n@@ -20,8 +20,11 @@\n #ifndef ARROW_UTIL_PARSING_H\n #define ARROW_UTIL_PARSING_H\n \n+#include <cassert>\n+#include <chrono>\n #include <limits>\n #include <locale>\n+#include <memory>\n #include <sstream>\n #include <string>\n #include <type_traits>\n@@ -30,6 +33,8 @@\n \n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/date.h\"\n \n namespace arrow {\n namespace internal {\n@@ -146,16 +151,18 @@ class StringConverter<DoubleType> : public StringToFloatConverterMixin<DoubleTyp\n \n namespace detail {\n \n-#define PARSE_UNSIGNED_ITERATION(C_TYPE)              \\\n-  if (length > 0) {                                   \\\n-    uint8_t digit = static_cast<uint8_t>(*s++ - '0'); \\\n-    result = static_cast<C_TYPE>(result * 10U);       \\\n-    length--;                                         \\\n-    if (ARROW_PREDICT_FALSE(digit > 9U)) {            \\\n-      /* Non-digit */                                 \\\n-      return false;                                   \\\n-    }                                                 \\\n-    result = static_cast<C_TYPE>(result + digit);     \\\n+inline uint8_t ParseDecimalDigit(char c) { return static_cast<uint8_t>(c - '0'); }\n+\n+#define PARSE_UNSIGNED_ITERATION(C_TYPE)          \\\n+  if (length > 0) {                               \\\n+    uint8_t digit = ParseDecimalDigit(*s++);      \\\n+    result = static_cast<C_TYPE>(result * 10U);   \\\n+    length--;                                     \\\n+    if (ARROW_PREDICT_FALSE(digit > 9U)) {        \\\n+      /* Non-digit */                             \\\n+      return false;                               \\\n+    }                                             \\\n+    result = static_cast<C_TYPE>(result + digit); \\\n   }\n \n #define PARSE_UNSIGNED_ITERATION_LAST(C_TYPE)                                     \\\n@@ -164,7 +171,7 @@ namespace detail {\n       /* Overflow */                                                              \\\n       return false;                                                               \\\n     }                                                                             \\\n-    uint8_t digit = static_cast<uint8_t>(*s++ - '0');                             \\\n+    uint8_t digit = ParseDecimalDigit(*s++);                                      \\\n     result = static_cast<C_TYPE>(result * 10U);                                   \\\n     C_TYPE new_result = static_cast<C_TYPE>(result + digit);                      \\\n     if (ARROW_PREDICT_FALSE(--length > 0)) {                                      \\\n@@ -351,6 +358,121 @@ class StringConverter<Int32Type> : public StringToSignedIntConverterMixin<Int32T\n template <>\n class StringConverter<Int64Type> : public StringToSignedIntConverterMixin<Int64Type> {};\n \n+template <>\n+class StringConverter<TimestampType> {\n+ public:\n+  using value_type = TimestampType::c_type;\n+\n+  explicit StringConverter(const std::shared_ptr<DataType>& type)\n+      : unit_(checked_cast<TimestampType*>(type.get())->unit()) {}\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    // We allow the following formats:\n+    // - \"YYYY-MM-DD\"\n+    // - \"YYYY-MM-DD[ T]hh:mm:ss\"\n+    // - \"YYYY-MM-DD[ T]hh:mm:ssZ\"\n+    // UTC is always assumed, and the DataType's timezone is ignored.\n+    date::year_month_day ymd;\n+    if (ARROW_PREDICT_FALSE(length < 10)) {\n+      return false;\n+    }\n+    if (length == 10) {\n+      if (ARROW_PREDICT_FALSE(!ParseYYYY_MM_DD(s, &ymd))) {\n+        return false;\n+      }\n+      return ConvertTimePoint(date::sys_days(ymd), out);\n+    }\n+    if (ARROW_PREDICT_FALSE(s[10] != ' ') && ARROW_PREDICT_FALSE(s[10] != 'T')) {\n+      return false;\n+    }\n+    if (s[length - 1] == 'Z') {\n+      --length;\n+    }\n+    if (length == 19) {\n+      if (ARROW_PREDICT_FALSE(!ParseYYYY_MM_DD(s, &ymd))) {\n+        return false;\n+      }\n+      std::chrono::duration<value_type> seconds;\n+      if (ARROW_PREDICT_FALSE(!ParseHH_MM_SS(s + 11, &seconds))) {\n+        return false;\n+      }\n+      return ConvertTimePoint(date::sys_days(ymd) + seconds, out);\n+    }\n+    return false;\n+  }\n+\n+ protected:\n+  template <class TimePoint>\n+  bool ConvertTimePoint(TimePoint tp, value_type* out) {\n+    auto duration = tp.time_since_epoch();\n+    switch (unit_) {\n+      case TimeUnit::SECOND:\n+        *out = std::chrono::duration_cast<std::chrono::seconds>(duration).count();\n+        return true;\n+      case TimeUnit::MILLI:\n+        *out = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();\n+        return true;\n+      case TimeUnit::MICRO:\n+        *out = std::chrono::duration_cast<std::chrono::microseconds>(duration).count();\n+        return true;\n+      case TimeUnit::NANO:\n+        *out = std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();\n+        return true;\n+    }\n+    // Unreachable\n+    assert(0);\n+    return true;\n+  }\n+\n+  bool ParseYYYY_MM_DD(const char* s, date::year_month_day* out) {\n+    uint16_t year;\n+    uint8_t month, day;\n+    if (ARROW_PREDICT_FALSE(s[4] != '-') || ARROW_PREDICT_FALSE(s[7] != '-')) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(!detail::ParseUnsigned(s + 0, 4, &year))) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(!detail::ParseUnsigned(s + 5, 2, &month))) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(!detail::ParseUnsigned(s + 8, 2, &day))) {\n+      return false;\n+    }\n+    *out = {date::year{year}, date::month{month}, date::day{day}};\n+    return out->ok();\n+  }\n+\n+  bool ParseHH_MM_SS(const char* s, std::chrono::duration<value_type>* out) {\n+    uint8_t hours, minutes, seconds;\n+    if (ARROW_PREDICT_FALSE(s[2] != ':') || ARROW_PREDICT_FALSE(s[5] != ':')) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(!detail::ParseUnsigned(s + 0, 2, &hours))) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(!detail::ParseUnsigned(s + 3, 2, &minutes))) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(!detail::ParseUnsigned(s + 6, 2, &seconds))) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(hours >= 24)) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(minutes >= 60)) {\n+      return false;\n+    }\n+    if (ARROW_PREDICT_FALSE(seconds >= 60)) {\n+      return false;\n+    }\n+    *out = std::chrono::duration<value_type>(3600U * hours + 60U * minutes + seconds);\n+    return true;\n+  }\n+\n+  const TimeUnit::type unit_;\n+};\n+\n }  // namespace internal\n }  // namespace arrow\n \ndiff --git a/cpp/src/gandiva/precompiled/epoch_time_point.h b/cpp/src/gandiva/precompiled/epoch_time_point.h\nindex aff72b4aaa..dc6340d134 100644\n--- a/cpp/src/gandiva/precompiled/epoch_time_point.h\n+++ b/cpp/src/gandiva/precompiled/epoch_time_point.h\n@@ -19,7 +19,7 @@\n #define GANDIVA_EPOCH_TIME_POINT_H\n \n // TODO(wesm): IR compilation does not have any include directories set\n-#include \"./date.h\"\n+#include \"../../arrow/util/date.h\"\n \n // A point of time measured in millis since epoch.\n class EpochTimePoint {\ndiff --git a/cpp/src/gandiva/precompiled/time_test.cc b/cpp/src/gandiva/precompiled/time_test.cc\nindex fb60b24d3f..b8ee4dc4fb 100644\n--- a/cpp/src/gandiva/precompiled/time_test.cc\n+++ b/cpp/src/gandiva/precompiled/time_test.cc\n@@ -19,7 +19,6 @@\n \n #include <gtest/gtest.h>\n #include \"../execution_context.h\"\n-#include \"gandiva/precompiled/date.h\"\n #include \"gandiva/precompiled/types.h\"\n \n namespace gandiva {\ndiff --git a/cpp/src/gandiva/to_date_holder.cc b/cpp/src/gandiva/to_date_holder.cc\nindex 054e25f2d1..9c85622800 100644\n--- a/cpp/src/gandiva/to_date_holder.cc\n+++ b/cpp/src/gandiva/to_date_holder.cc\n@@ -18,10 +18,11 @@\n #include <algorithm>\n #include <string>\n \n+#include \"arrow/util/date.h\"\n+\n #include \"gandiva/date_utils.h\"\n #include \"gandiva/execution_context.h\"\n #include \"gandiva/node.h\"\n-#include \"gandiva/precompiled/date.h\"\n #include \"gandiva/to_date_holder.h\"\n \n namespace gandiva {\ndiff --git a/python/doc/source/csv.rst b/python/doc/source/csv.rst\nindex 3fff8a856f..f1bcea9e24 100644\n--- a/python/doc/source/csv.rst\n+++ b/python/doc/source/csv.rst\n@@ -29,7 +29,7 @@ The features currently offered are the following:\n   such as ``my_data.csv.gz``)\n * fetching column names from the first row in the CSV file\n * column-wise type inference and conversion to one of ``null``, ``int64``,\n-  ``float64``, ``string`` or ``binary`` data\n+  ``float64``, ``timestamp[s]``, ``string`` or ``binary`` data\n * detecting various spellings of null values such as ``NaN`` or ``#N/A``\n \n Usage\n@@ -75,13 +75,6 @@ Customized conversion\n To alter how CSV data is converted to Arrow types and data, you should create\n a :class:`ConvertOptions` instance and pass it to :func:`read_csv`.\n \n-Limitations\n------------\n-\n-Arrow is not able to detect or convert other data types (such as dates\n-and times) than the five mentioned above.  It is also not possible to\n-choose the data types of columns explicitly.\n-\n Performance\n -----------\n \ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex 7f67a54f63..115595bbb8 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -16,6 +16,7 @@\n # under the License.\n \n import bz2\n+from datetime import datetime\n import gzip\n import io\n import itertools\n@@ -220,6 +221,18 @@ def test_simple_nulls(self):\n             'e': [b\"3\", b\"nan\", b\"\\xff\"],\n             }\n \n+    def test_simple_timestamps(self):\n+        # Infer a timestamp column\n+        rows = b\"a,b\\n1970,1970-01-01\\n1989,1989-07-14\\n\"\n+        table = self.read_bytes(rows)\n+        schema = pa.schema([('a', pa.int64()),\n+                            ('b', pa.timestamp('s'))])\n+        assert table.schema == schema\n+        assert table.to_pydict() == {\n+            'a': [1970, 1989],\n+            'b': [datetime(1970, 1, 1), datetime(1989, 7, 14)],\n+            }\n+\n     def test_column_types(self):\n         # Ask for specific column types in ConvertOptions\n         opts = ConvertOptions(column_types={'b': 'float32',\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T14:56:31.126+0000",
                    "updated": "2018-11-22T14:56:31.126+0000",
                    "started": "2018-11-22T14:56:31.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168813",
                    "issueId": "13197519"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@598b5540[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e86b9a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20f05ade[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@628651e1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b71786b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@9444a16[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bc0c74a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7b19828a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b9b1fa2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@60a4f83d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4df399f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7a495f12[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 22 14:56:17 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-22T14:56:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3738/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2018-11-09T22:19:17.000+0000",
        "updated": "2018-11-22T14:56:31.000+0000",
        "timeoriginalestimate": null,
        "description": "See similar functionality in other libraries. I believe pandas has a fast path for iso8601",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add CSV conversion option to parse ISO8601-like timestamp strings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/comment/16683527",
                    "id": "16683527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "What formats exactly should we allow? I'm leaning towards \"{{YYYY-MM-DD}}\" and \"{{YYYY-MM-DD[ T]hh:mm:ss[Z]}}\".\r\n\r\nAlso, what is the difference between the Arrow \"date64\" and \"timestamp\" types?\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-12T10:29:30.427+0000",
                    "updated": "2018-11-12T10:29:30.427+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/comment/16683886",
                    "id": "16683886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Those sound like the right ones.\r\n\r\ndate64 does not support granularity beyond the resolution of a day. The values are supposed to be a multiple of 86400000. Some things use this millisecond-based representation of calendar dates\r\n\r\nA timestamp considers intraday point in time",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-12T14:45:28.250+0000",
                    "updated": "2018-11-12T14:45:28.250+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/comment/16684181",
                    "id": "16684181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "To keep things simple, I suggest we start using a date library. The following looks good (and is actually the basis for the future C++20 API): https://github.com/HowardHinnant/date\r\n\r\nWe could simply vendor the {{date.h}} file.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-12T18:02:54.066+0000",
                    "updated": "2018-11-12T18:02:54.066+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/comment/16684184",
                    "id": "16684184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It looks like this has already happened in https://github.com/apache/arrow/blob/master/cpp/src/gandiva/precompiled/date.h. I suggest we move {{date.h}} to {{arrow/util}}\r\n\r\n[~pravindra] sound ok?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-12T18:07:08.964+0000",
                    "updated": "2018-11-12T18:07:08.964+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/comment/16684214",
                    "id": "16684214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "I'm fine with moving date.h to arrow/util, [~wesmckinn]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-12T18:23:17.285+0000",
                    "updated": "2018-11-12T18:23:17.285+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197519/comment/16695975",
                    "id": "16695975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2952\n[https://github.com/apache/arrow/pull/2952]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-22T14:56:17.433+0000",
                    "updated": "2018-11-22T14:56:17.433+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|s00cdk:",
        "customfield_12314139": null
    }
}