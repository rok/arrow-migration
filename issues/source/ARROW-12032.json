{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13366503",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503",
    "key": "ARROW-12032",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12032/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 49,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan opened a new pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759\n\n\n   This adds a function `from_trusted_len_iter_bool` to speed up the creation of an array for booleans.\r\n   \r\n   Benchmarks are a bit noisy, but seems to be ~10-20% faster for comparison kernels.\r\n   \r\n   ```\r\n   Gnuplot not found, using plotters backend\r\n   eq Float32              time:   [54.204 us 54.284 us 54.364 us]                       \r\n                           change: [-29.087% -28.838% -28.581%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     5 (5.00%) low mild\r\n     1 (1.00%) high mild\r\n   \r\n   eq scalar Float32       time:   [43.660 us 43.743 us 43.830 us]                               \r\n                           change: [-30.819% -30.545% -30.269%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   neq Float32             time:   [68.726 us 68.893 us 69.048 us]                        \r\n                           change: [-14.045% -13.772% -13.490%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   neq scalar Float32      time:   [46.251 us 46.322 us 46.395 us]                                \r\n                           change: [-12.204% -11.952% -11.702%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) low mild\r\n     5 (5.00%) high mild\r\n   \r\n   lt Float32              time:   [50.264 us 50.438 us 50.613 us]                        \r\n                           change: [-21.300% -20.964% -20.649%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   \r\n   lt scalar Float32       time:   [48.847 us 48.929 us 49.013 us]                               \r\n                           change: [-10.132% -9.9180% -9.6910%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   lt_eq Float32           time:   [46.105 us 46.198 us 46.282 us]                           \r\n                           change: [-21.276% -20.966% -20.703%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 18 outliers among 100 measurements (18.00%)\r\n     2 (2.00%) low severe\r\n     13 (13.00%) low mild\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   lt_eq scalar Float32    time:   [47.359 us 47.456 us 47.593 us]                                  \r\n                           change: [+0.2766% +0.5240% +0.7821%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     8 (8.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   gt Float32              time:   [57.313 us 57.363 us 57.412 us]                       \r\n                           change: [-18.328% -18.177% -18.031%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) low severe\r\n     1 (1.00%) low mild\r\n   \r\n   gt scalar Float32       time:   [44.091 us 44.132 us 44.175 us]                               \r\n                           change: [-9.4233% -9.2747% -9.1273%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     4 (4.00%) low mild\r\n     3 (3.00%) high mild\r\n   \r\n   gt_eq Float32           time:   [55.856 us 55.932 us 56.007 us]                          \r\n                           change: [-7.4997% -7.2656% -7.0334%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n   \r\n   gt_eq scalar Float32    time:   [42.365 us 42.419 us 42.482 us]                                  \r\n                           change: [+0.5289% +0.7174% +0.9116%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T13:24:08.130+0000",
                    "updated": "2021-03-20T13:24:08.130+0000",
                    "started": "2021-03-20T13:24:08.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569249",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#issuecomment-803318441\n\n\n   https://issues.apache.org/jira/browse/ARROW-12032\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T13:24:21.500+0000",
                    "updated": "2021-03-20T13:24:21.500+0000",
                    "started": "2021-03-20T13:24:21.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569250",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#issuecomment-803364250\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=h1) Report\n   > Merging [#9759](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=desc) (1aa7baf) into [master](https://codecov.io/gh/apache/arrow/commit/29feea07fea118ad6ffc4d2615a5798412fe2f19?el=desc) (29feea0) will **decrease** coverage by `0.03%`.\n   > The diff coverage is `77.69%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9759/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9759      +/-   ##\n   ==========================================\n   - Coverage   82.59%   82.55%   -0.04%     \n   ==========================================\n     Files         248      249       +1     \n     Lines       58294    58838     +544     \n   ==========================================\n   + Hits        48149    48576     +427     \n   - Misses      10145    10262     +117     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/examples/flight\\_server.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL2V4YW1wbGVzL2ZsaWdodF9zZXJ2ZXIucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/dataframe\\_impl.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZGF0YWZyYW1lX2ltcGwucnM=) | `87.82% <0.00%> (-2.32%)` | :arrow_down: |\n   | [rust/datafusion/src/optimizer/constant\\_folding.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvY29uc3RhbnRfZm9sZGluZy5ycw==) | `92.30% <0.00%> (-0.36%)` | :arrow_down: |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `53.60% <0.00%> (-1.72%)` | :arrow_down: |\n   | [...t/datafusion/src/optimizer/projection\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvcHJvamVjdGlvbl9wdXNoX2Rvd24ucnM=) | `98.66% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `88.00% <\u00f8> (\u00f8)` | |\n   | [rust/parquet/src/basic.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9iYXNpYy5ycw==) | `88.59% <\u00f8> (+1.36%)` | :arrow_up: |\n   | [rust/parquet/src/schema/parser.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvcGFyc2VyLnJz) | `90.20% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `86.57% <54.47%> (-5.79%)` | :arrow_down: |\n   | [rust/arrow/src/array/array\\_list.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfbGlzdC5ycw==) | `91.59% <63.63%> (-1.48%)` | :arrow_down: |\n   | ... and [21 more](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=footer). Last update [81d6724...1aa7baf](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T14:35:45.940+0000",
                    "updated": "2021-03-20T14:35:45.940+0000",
                    "started": "2021-03-20T14:35:45.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569253",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#issuecomment-803364250\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=h1) Report\n   > Merging [#9759](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=desc) (0e1c8ed) into [master](https://codecov.io/gh/apache/arrow/commit/29feea07fea118ad6ffc4d2615a5798412fe2f19?el=desc) (29feea0) will **decrease** coverage by `0.03%`.\n   > The diff coverage is `77.66%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9759/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9759      +/-   ##\n   ==========================================\n   - Coverage   82.59%   82.55%   -0.04%     \n   ==========================================\n     Files         248      249       +1     \n     Lines       58294    58837     +543     \n   ==========================================\n   + Hits        48149    48574     +425     \n   - Misses      10145    10263     +118     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/examples/flight\\_server.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL2V4YW1wbGVzL2ZsaWdodF9zZXJ2ZXIucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/dataframe\\_impl.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZGF0YWZyYW1lX2ltcGwucnM=) | `87.82% <0.00%> (-2.32%)` | :arrow_down: |\n   | [rust/datafusion/src/optimizer/constant\\_folding.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvY29uc3RhbnRfZm9sZGluZy5ycw==) | `92.30% <0.00%> (-0.36%)` | :arrow_down: |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `53.60% <0.00%> (-1.72%)` | :arrow_down: |\n   | [...t/datafusion/src/optimizer/projection\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvcHJvamVjdGlvbl9wdXNoX2Rvd24ucnM=) | `98.66% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `88.00% <\u00f8> (\u00f8)` | |\n   | [rust/parquet/src/basic.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9iYXNpYy5ycw==) | `88.59% <\u00f8> (+1.36%)` | :arrow_up: |\n   | [rust/parquet/src/schema/parser.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvcGFyc2VyLnJz) | `90.20% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `86.57% <54.47%> (-5.79%)` | :arrow_down: |\n   | [rust/arrow/src/array/array\\_list.rs](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfbGlzdC5ycw==) | `91.59% <63.63%> (-1.48%)` | :arrow_down: |\n   | ... and [22 more](https://codecov.io/gh/apache/arrow/pull/9759/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=footer). Last update [81d6724...0e1c8ed](https://codecov.io/gh/apache/arrow/pull/9759?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T15:13:08.327+0000",
                    "updated": "2021-03-20T15:13:08.327+0000",
                    "started": "2021-03-20T15:13:08.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569257",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#issuecomment-803412964\n\n\n   @jorgecarleitao FYI\r\n   \r\n   I also tried related code from your `arrow2` repo, but got worse performance results there.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T17:03:52.829+0000",
                    "updated": "2021-03-20T17:03:52.829+0000",
                    "started": "2021-03-20T17:03:52.829+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569265",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan edited a comment on pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#issuecomment-803412964\n\n\n   @jorgecarleitao FYI\r\n   \r\n   I also tried related code from your `arrow2` repo, but got worse performance results from the approach taken there.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T17:04:15.808+0000",
                    "updated": "2021-03-20T17:04:15.808+0000",
                    "started": "2021-03-20T17:04:15.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569266",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598154125\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I wonder if the bool iterator could be split into chunks (for example, using https://docs.rs/itertools/0.4.2/itertools/struct.Chunks.html or alternatively using https://doc.rust-lang.org/std/primitive.slice.html#method.chunks) of 8 bool values, then each chunk is mapped into a byte by converting each bool value into a byte, then shifting according to the position in the chunk, and applying in the output byte, and finally the resulting byte iterator would be used to build the buffer directly. This is the fastest implementation I can imagine because it eliminates as many conditions / checks as possible (and conditions are the enemy of fast).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T20:08:13.085+0000",
                    "updated": "2021-03-20T20:08:13.085+0000",
                    "started": "2021-03-20T20:08:13.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569283",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598154125\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I wonder if the bool iterator could be split into chunks (for example, using https://docs.rs/itertools/0.4.2/itertools/struct.Chunks.html or alternatively using https://doc.rust-lang.org/std/primitive.slice.html#method.chunks) of 8 bool values, then each chunk is mapped into a byte by converting each bool value into a byte (for example using std::mem::transmute::<bool, u8>), then shifting according to the position in the chunk, and applying in the output byte, and finally the resulting byte iterator would be used to build the buffer directly. This is the fastest implementation I can imagine because it eliminates as many conditions / checks as possible (and conditions are the enemy of fast).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T20:24:19.329+0000",
                    "updated": "2021-03-20T20:24:19.329+0000",
                    "started": "2021-03-20T20:24:19.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569286",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598156718\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I also think there are some faster ways to speed up the inner loop, yours sounds like a great idea to try out. I was also looking at the arrow2 repository of @jorgecarleitao , but I think I have been looking to an older commit before which turned out to be slower (I expected it to be faster, but sometimes the compiler can be quite surprising in what compiles to efficient code.\r\n   \r\n   I think the latest version is over here:\r\n   \r\n   https://github.com/jorgecarleitao/arrow2/blob/be905f1b1f0293ef427387bc35b2e9956ec3336f/src/bitmap/mutable.rs#L209\r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T20:35:22.324+0000",
                    "updated": "2021-03-20T20:35:22.324+0000",
                    "started": "2021-03-20T20:35:22.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569287",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598168645\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I agree with you all \u2764\ufe0f \r\n   \r\n   I admit I have spent an immoral amount of time trying to optimize bitmaps, but I have unfortunately not yet concluded what is the best way to handle them. I think that we may not being able to express to the compiler what we want it to do (some kind of operation over a single byte). @yordan-pavlov suggestion is a great one in that direction, though.\r\n   \r\n   FWIW, on my computer (a VM on azure), arrow master (not this PR) is giving\r\n   \r\n   ```\r\n   eq Float32              time:   [113.40 us 114.81 us 116.28 us]\r\n   eq scalar Float32       time:   [96.824 us 98.638 us 101.34 us]\r\n   ```\r\n   \r\n   and `arrow2` is giving\r\n   \r\n   ```\r\n   eq Float32              time:   [84.519 us 86.065 us 87.772 us]\r\n   eq scalar Float32       time:   [57.682 us 58.315 us 59.014 us]\r\n   ```\r\n   \r\n   This PR's idea on arrow2 (with corresponding changes) is giving me `-14%` on `eq Float32` and `+35%` on `eq scalar Float32`. I pushed these benches to master there.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T22:42:04.631+0000",
                    "updated": "2021-03-20T22:42:04.631+0000",
                    "started": "2021-03-20T22:42:04.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569294",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598168645\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I agree with you all \u2764\ufe0f \r\n   \r\n   I admit I have spent an immoral amount of time trying to optimize bitmaps, but I have unfortunately not yet concluded what is the best way to handle them. I think that we may not being able to express to the compiler what we want it to do (some kind of operation over a single byte). @yordan-pavlov suggestion is a great one in that direction, though.\r\n   \r\n   FWIW, on my computer (a VM on azure), arrow master (not this PR) is giving\r\n   \r\n   ```\r\n   eq Float32              time:   [113.40 us 114.81 us 116.28 us]\r\n   eq scalar Float32       time:   [96.824 us 98.638 us 101.34 us]\r\n   ```\r\n   \r\n   and `arrow2` is giving\r\n   \r\n   ```\r\n   eq Float32              time:   [84.519 us 86.065 us 87.772 us]\r\n   eq scalar Float32       time:   [57.682 us 58.315 us 59.014 us]\r\n   ```\r\n   \r\n   This PR's idea on arrow2 (with corresponding changes) is giving me `-14%` on `eq Float32` and `+35%` on `eq scalar Float32`. I pushed these benches to master there.\r\n   \r\n   Note the difference between scalar and non-scalar: it is the exact same code on the `trusted_len` function, but a 30% difference in performance between them; imo this indicates that we are fighting with the compiler to try to explain what we are trying to express here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T23:00:09.991+0000",
                    "updated": "2021-03-20T23:00:09.991+0000",
                    "started": "2021-03-20T23:00:09.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569295",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598233831\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       FYI, I wrote a [minimal repo](https://github.com/jorgecarleitao/bitmap_perf_test) to evaluate these things and added a [reddit post](https://www.reddit.com/r/rust/comments/m9qsqe/help_performant_write_of_comparison_to_a_lsb/) to try to get some help / feedback on this.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T07:14:14.126+0000",
                    "updated": "2021-03-21T07:14:14.126+0000",
                    "started": "2021-03-21T07:14:14.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569320",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598240410\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       @yordan-pavlov's idea yields `-50%` on array-to-scalar and `-10%` on array-to-array \ud83d\ude80\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T08:14:25.412+0000",
                    "updated": "2021-03-21T08:14:25.412+0000",
                    "started": "2021-03-21T08:14:25.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569325",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598246516\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I put the latest example from the example repo here https://godbolt.org/z/PKKbfq\r\n   \r\n   Some things I notice in this part\r\n   \r\n   ```\r\n   if chunk[i] == rhs {\r\n                       *byte = set(*byte, i)\r\n                   }\r\n   ```\r\n   \r\n   I am not an export at reading the output from compiler explorer, but  the inner (0..8) loop I would say could maybe benefit from unrolling in the `0..8` loop?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T09:06:48.703+0000",
                    "updated": "2021-03-21T09:06:48.703+0000",
                    "started": "2021-03-21T09:06:48.702+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569327",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569330",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598247289\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       ```rust\r\n               chunk.iter().enumerate().for_each(|(i, &chunk_i)| {\r\n                   if chunk_i == rhs {\r\n                       *byte = set(*byte, i)\r\n                   }\r\n               });\r\n   ```\r\n   \r\n   This seems to generate a bit more efficient code for the outer loop.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T09:13:04.643+0000",
                    "updated": "2021-03-21T09:13:04.643+0000",
                    "started": "2021-03-21T09:13:04.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569330",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598249474\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I also tried (but got similar / slightly worse results):\r\n   \r\n   ```\r\n               *byte = ((chunk[0] == rhs) as u8)\r\n                   | ((chunk[1] == rhs) as u8) << 1u8\r\n                   | ((chunk[2] == rhs) as u8) << 2u8\r\n                   | ((chunk[3] == rhs) as u8) << 3u8\r\n                   | ((chunk[4] == rhs) as u8) << 4u8\r\n                   | ((chunk[5] == rhs) as u8) << 5u8\r\n                   | ((chunk[6] == rhs) as u8) << 6u8\r\n                   | ((chunk[7] == rhs) as u8) << 7u8\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T09:30:37.995+0000",
                    "updated": "2021-03-21T09:30:37.995+0000",
                    "started": "2021-03-21T09:30:37.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569331",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598249474\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       I also tried (but got similar / slightly worse results):\r\n   \r\n   ```rust\r\n               *byte = ((chunk[0] == rhs) as u8)\r\n                   | ((chunk[1] == rhs) as u8) << 1u8\r\n                   | ((chunk[2] == rhs) as u8) << 2u8\r\n                   | ((chunk[3] == rhs) as u8) << 3u8\r\n                   | ((chunk[4] == rhs) as u8) << 4u8\r\n                   | ((chunk[5] == rhs) as u8) << 5u8\r\n                   | ((chunk[6] == rhs) as u8) << 6u8\r\n                   | ((chunk[7] == rhs) as u8) << 7u8\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T09:31:10.992+0000",
                    "updated": "2021-03-21T09:31:10.992+0000",
                    "started": "2021-03-21T09:31:10.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569332",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598252694\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       Last experiment, also gets similar results, suggesting at least there is not much to win from unrolling :\r\n   \r\n   ```rust\r\n               if unsafe { *chunk.get_unchecked(0) == rhs } {\r\n                   *byte = set(*byte, 0)\r\n               }\r\n               if unsafe { *chunk.get_unchecked(1) == rhs } {\r\n                   *byte = set(*byte, 1)\r\n               }\r\n   \r\n               if unsafe { *chunk.get_unchecked(2) == rhs } {\r\n                   *byte = set(*byte, 2)\r\n               }\r\n   \r\n               if unsafe { *chunk.get_unchecked(3) == rhs } {\r\n                   *byte = set(*byte, 3)\r\n               }\r\n   \r\n               if unsafe { *chunk.get_unchecked(4) == rhs } {\r\n                   *byte = set(*byte, 4)\r\n               }\r\n   \r\n               if unsafe { *chunk.get_unchecked(5) == rhs } {\r\n                   *byte = set(*byte, 5)\r\n               }\r\n   \r\n               if unsafe { *chunk.get_unchecked(6) == rhs } {\r\n                   *byte = set(*byte, 6)\r\n               }\r\n   \r\n               if unsafe { *chunk.get_unchecked(7) == rhs } {\r\n                   *byte = set(*byte, 7)\r\n               }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T09:56:47.818+0000",
                    "updated": "2021-03-21T09:56:47.818+0000",
                    "started": "2021-03-21T09:56:47.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569334",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598253116\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       Ah, putting `-C opt-level=3` reveals the compiler is already unrolling the code :)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T10:00:01.134+0000",
                    "updated": "2021-03-21T10:00:01.134+0000",
                    "started": "2021-03-21T10:00:01.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569335",
                    "issueId": "13366503"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/worklog/569336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9759:\nURL: https://github.com/apache/arrow/pull/9759#discussion_r598253409\n\n\n\n##########\nFile path: rust/arrow/src/buffer/mutable.rs\n##########\n@@ -415,6 +415,61 @@ impl MutableBuffer {\n         buffer\n     }\n \n+    /// Creates a [`MutableBuffer`] from a boolean [`Iterator`] with a trusted (upper) length.\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let v = vec![false, true, false];\n+    /// let iter = v.iter().map(|x| *x || true);\n+    /// let buffer = unsafe { MutableBuffer::from_trusted_len_iter_bool(iter) };\n+    /// assert_eq!(buffer.len(), 1) // 3 booleans have 1 byte\n+    /// ```\n+    /// # Safety\n+    /// This method assumes that the iterator's size is correct and is undefined behavior\n+    /// to use it on an iterator that reports an incorrect length.\n+    // This implementation is required for two reasons:\n+    // 1. there is no trait `TrustedLen` in stable rust and therefore\n+    //    we can't specialize `extend` for `TrustedLen` like `Vec` does.\n+    // 2. `from_trusted_len_iter_bool` is faster.\n+    pub unsafe fn from_trusted_len_iter_bool<I: Iterator<Item = bool>>(\n+        mut iterator: I,\n+    ) -> Self {\n+        let (_, upper) = iterator.size_hint();\n+        let upper = upper.expect(\"from_trusted_len_iter requires an upper limit\");\n+\n+        let mut result = {\n+            let byte_capacity: usize = upper.saturating_add(7) / 8;\n+            MutableBuffer::new(byte_capacity)\n+        };\n+\n+        'a: loop {\n+            let mut byte_accum: u8 = 0;\n+            let mut mask: u8 = 1;\n+\n+            //collect (up to) 8 bits into a byte\n+            while mask != 0 {\n+                if let Some(value) = iterator.next() {\n+                    byte_accum |= match value {\n\nReview comment:\n       Thanks a lot, @Dandandan . Note that we are getting the same performance as if we would perform this via a `Vec<bool>` (on the benches on the example repo).\r\n   \r\n   A Reddit comment was in the same direction as yours, and ended up with \"use SIMD\". So, I think that we may be on the edge of what we can do.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T10:02:46.964+0000",
                    "updated": "2021-03-21T10:02:46.964+0000",
                    "started": "2021-03-21T10:02:46.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569336",
                    "issueId": "13366503"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 29400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@433536d3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75ec2d96[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@841048c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1c55188f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58e4a9c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7b423279[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b272cf9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4f82c272[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32d5f8cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@58eed516[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a6c6a16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4324aa7b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 29400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 24 14:59:16 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-24T14:59:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12032/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-20T13:19:56.000+0000",
        "updated": "2021-03-25T10:55:21.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 29400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Optimize comparison kernels using trusted_len iterator for bools",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366503/comment/17307888",
                    "id": "17307888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9759\n[https://github.com/apache/arrow/pull/9759]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-24T14:59:16.584+0000",
                    "updated": "2021-03-24T14:59:16.584+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p094:",
        "customfield_12314139": null
    }
}