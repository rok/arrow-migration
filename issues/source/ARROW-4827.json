{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13220872",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872",
    "key": "ARROW-4827",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12559085",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12559085",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13224856",
                    "key": "ARROW-5071",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13224856",
                    "fields": {
                        "summary": "[Benchmarking] Performs a benchmark run with archery",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12557798",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12557798",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13224852",
                    "key": "ARROW-5070",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13224852",
                    "fields": {
                        "summary": "[Benchmarking] Support for on-demand and automated benchmarks",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 43800,
            "total": 43800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 43800,
            "total": 43800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4827/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 83,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141\n \n \n   This script/library allows comparing revisions/builds.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T15:52:16.976+0000",
                    "updated": "2019-04-11T15:52:16.976+0000",
                    "started": "2019-04-11T15:52:16.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226099",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274501056\n \n \n\n ##########\n File path: docs/source/developers/benchmarks.rst\n ##########\n @@ -0,0 +1,124 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _benchmarks:\n+\n+**********\n+Benchmarks\n+**********\n+\n+Archery\n+=======\n+\n+``archery`` is a python library and command line utility made to interact with\n+Arrow's sources. The main feature is the benchmarking process.\n+\n+Installation\n+~~~~~~~~~~~~\n+\n+The simplest way to install archery is with pip from the top-level directory.\n+It is recommended to use the ``-e,--editable`` flag such that pip don't copy\n+the module files but use the actual sources.\n+\n+.. code-block:: shell\n+\n+  pip install -e dev/archery\n+  archery --help\n+\n+Comparison\n+==========\n+\n+One desire with benchmarks is to detect performance regressions. Thus,\n \n Review comment:\n   ```suggestion\r\n   One goal when benchmarking is to detect performance regressions. To this end\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.250+0000",
                    "updated": "2019-04-11T17:31:25.250+0000",
                    "started": "2019-04-11T17:31:25.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226202",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274500306\n \n \n\n ##########\n File path: docs/source/developers/benchmarks.rst\n ##########\n @@ -0,0 +1,124 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _benchmarks:\n+\n+**********\n+Benchmarks\n+**********\n+\n+Archery\n+=======\n+\n+``archery`` is a python library and command line utility made to interact with\n+Arrow's sources. The main feature is the benchmarking process.\n+\n+Installation\n+~~~~~~~~~~~~\n+\n+The simplest way to install archery is with pip from the top-level directory.\n+It is recommended to use the ``-e,--editable`` flag such that pip don't copy\n \n Review comment:\n   ```suggestion\r\n   It is recommended to use the ``-e,--editable`` flag so that pip doesn't copy\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.384+0000",
                    "updated": "2019-04-11T17:31:25.384+0000",
                    "started": "2019-04-11T17:31:25.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226203",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274506794\n \n \n\n ##########\n File path: docs/source/developers/benchmarks.rst\n ##########\n @@ -0,0 +1,124 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _benchmarks:\n+\n+**********\n+Benchmarks\n+**********\n+\n+Archery\n+=======\n+\n+``archery`` is a python library and command line utility made to interact with\n+Arrow's sources. The main feature is the benchmarking process.\n+\n+Installation\n+~~~~~~~~~~~~\n+\n+The simplest way to install archery is with pip from the top-level directory.\n+It is recommended to use the ``-e,--editable`` flag such that pip don't copy\n+the module files but use the actual sources.\n+\n+.. code-block:: shell\n+\n+  pip install -e dev/archery\n+  archery --help\n+\n+Comparison\n+==========\n+\n+One desire with benchmarks is to detect performance regressions. Thus,\n+``archery`` implements a benchmark comparison facility via the ``benchmark\n+diff`` command.\n+\n+In the default invocation, it will compare the current source (known as the\n+current workspace in git) with local master branch.\n+\n+For more information, invoke the ``archery benchmark diff --help`` command for\n+multiple examples of invocation.\n+\n+Iterating efficiently\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+Iterating with benchmarks development can be a tedious process due to long\n+build time and long run times. ``archery benchmark diff`` provides 2 methods\n+to reduce this overhead.\n+\n+First, the benchmark command supports comparing existing\n+build directories, This can be paired with the ``--preserve`` flag to\n+avoid rebuilding sources from zero.\n+\n+.. code-block:: shell\n+\n+  # First invocation clone and checkouts in a temporary directory. The\n+  # directory is preserved with --preserve\n+  archery benchmark diff --preserve\n+\n+  # Modify C++ sources\n+\n+  # Re-run benchmark in the previously created build directory.\n+  archery benchmark diff /tmp/arrow-bench*/{WORKSPACE,master}/build\n+\n+Second, the benchmark command supports filtering suites (``--suite-filter``)\n+and benchmarks (``--benchmark-filter``), both options supports regular\n+expressions.\n+\n+.. code-block:: shell\n+\n+  # Taking over a previous run, but only filtering for benchmarks matching\n+  # `Kernel` and suite matching `compute-aggregate`.\n+  archery benchmark diff                                       \\\n+    --suite-filter=compute-aggregate --benchmark-filter=Kernel \\\n+    /tmp/arrow-bench*/{WORKSPACE,master}/build\n+\n+Both method can be combined.\n \n Review comment:\n   ```suggestion\r\n   Both methods can be combined.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.666+0000",
                    "updated": "2019-04-11T17:31:25.666+0000",
                    "started": "2019-04-11T17:31:25.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226204",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274508477\n \n \n\n ##########\n File path: dev/archery/archery/utils/source.py\n ##########\n @@ -0,0 +1,128 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import os\n+\n+from .git import git\n+\n+\n+class ArrowSources:\n+    \"\"\" ArrowSources is a companion class representing a directory containing\n+    Apache Arrow's sources.\n+    \"\"\"\n+\n+    def __init__(self, path):\n+        \"\"\" Initialize an ArrowSources\n+\n+        The caller must ensure that path is valid arrow source directory (can\n+        be checked with ArrowSources.valid\n+\n+        Parameters\n+        ----------\n+        path : src\n+        \"\"\"\n+        assert isinstance(path, str) and ArrowSources.valid(path)\n+        self.path = path\n+\n+    @property\n+    def cpp(self):\n+        \"\"\" Returns the cpp directory of an Arrow sources. \"\"\"\n+        return os.path.join(self.path, \"cpp\")\n+\n+    @property\n+    def python(self):\n+        \"\"\" Returns the python directory of an Arrow sources. \"\"\"\n+        return os.path.join(self.path, \"python\")\n+\n+    @property\n+    def git_backed(self):\n+        \"\"\" Indicate if the sources are backed by git. \"\"\"\n+        git_path = os.path.join(self.path, \".git\")\n+        return os.path.exists(git_path)\n+\n+    def at_revision(self, revision, clone_dir):\n+        \"\"\" Return a copy of the current sources for a specified git revision.\n+\n+        This method may return the current object if no checkout is required.\n+        The caller is responsible to remove the cloned repository directory.\n+\n+        Parameters\n+        ----------\n+        revision : str\n+                   Revision to checkout sources at.\n+        clone_dir : str\n+                    Path to checkout the local clone.\n+        \"\"\"\n+        if not self.git_backed:\n+            raise ValueError(f\"{self} is not backed by git\")\n+\n+        # A local clone is required to leave the current sources intact such\n+        # that build depending on said sources are not invalidated (or worse\n+        # slightly affected when re-invoking the generator).\n+        git.clone(\"--local\", self.path, clone_dir)\n+        git.checkout(\"-b\", revision, git_dir=clone_dir)\n+\n+        return ArrowSources(clone_dir)\n+\n+    @staticmethod\n+    def valid(src):\n+        \"\"\" Indicate if current sources are valid. \"\"\"\n+        if isinstance(src, ArrowSources):\n+            return True\n+        if isinstance(src, str):\n+            cpp_path = os.path.join(src, \"cpp\")\n+            cmake_path = os.path.join(cpp_path, \"CMakeLists.txt\")\n+            return os.path.exists(cmake_path)\n+        return False\n+\n+    @staticmethod\n+    def find(path=None):\n+        \"\"\" Infer Arrow sources directory from various method.\n+\n+        The following guesses are done in order until a valid match is found:\n+\n+        1. Checks the given optional parameter.\n+\n+        2. Checks if the environment variable `ARROW_SRC` is defined and use\n+           this.\n+\n+        3. Checks if the current working directory (cwd) contains is an Arrow\n \n Review comment:\n   ```suggestion\r\n           3. Checks if the current working directory (cwd) is an Arrow\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.704+0000",
                    "updated": "2019-04-11T17:31:25.704+0000",
                    "started": "2019-04-11T17:31:25.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226205",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274512085\n \n \n\n ##########\n File path: dev/archery/archery/utils/source.py\n ##########\n @@ -0,0 +1,128 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import os\n+\n+from .git import git\n+\n+\n+class ArrowSources:\n+    \"\"\" ArrowSources is a companion class representing a directory containing\n+    Apache Arrow's sources.\n+    \"\"\"\n+\n+    def __init__(self, path):\n+        \"\"\" Initialize an ArrowSources\n+\n+        The caller must ensure that path is valid arrow source directory (can\n+        be checked with ArrowSources.valid\n \n Review comment:\n   ```suggestion\r\n           be checked with ArrowSources.valid)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.795+0000",
                    "updated": "2019-04-11T17:31:25.795+0000",
                    "started": "2019-04-11T17:31:25.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226206",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274500392\n \n \n\n ##########\n File path: docs/source/developers/benchmarks.rst\n ##########\n @@ -0,0 +1,124 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _benchmarks:\n+\n+**********\n+Benchmarks\n+**********\n+\n+Archery\n+=======\n+\n+``archery`` is a python library and command line utility made to interact with\n+Arrow's sources. The main feature is the benchmarking process.\n+\n+Installation\n+~~~~~~~~~~~~\n+\n+The simplest way to install archery is with pip from the top-level directory.\n+It is recommended to use the ``-e,--editable`` flag such that pip don't copy\n+the module files but use the actual sources.\n \n Review comment:\n   ```suggestion\r\n   the module files but uses the actual sources.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.817+0000",
                    "updated": "2019-04-11T17:31:25.817+0000",
                    "started": "2019-04-11T17:31:25.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226207",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274517694\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n+@click.option(\"--build-type\", default=\"release\", type=build_type,\n+              help=\"CMake's CMAKE_BUILD_TYPE\")\n+@click.option(\"--warn-level\", default=\"production\", type=warn_level_type,\n+              help=\"Controls compiler warnings -W(no-)error.\")\n+# components\n+@click.option(\"--with-tests\", default=True, type=bool,\n+              help=\"Build with tests.\")\n+@click.option(\"--with-benchmarks\", default=False, type=bool,\n+              help=\"Build with benchmarks.\")\n+@click.option(\"--with-python\", default=True, type=bool,\n+              help=\"Build with python extension.\")\n+@click.option(\"--with-parquet\", default=False, type=bool,\n+              help=\"Build with parquet file support.\")\n+@click.option(\"--with-gandiva\", default=False, type=bool,\n+              help=\"Build with Gandiva expression compiler support.\")\n+@click.option(\"--with-plasma\", default=False, type=bool,\n+              help=\"Build with Plasma object store support.\")\n+@click.option(\"--with-flight\", default=False, type=bool,\n+              help=\"Build with Flight rpc support.\")\n+# misc\n+@click.option(\"-f\", \"--force\", type=bool, is_flag=True, default=False,\n+              help=\"Delete existing build directory if found.\")\n+@click.option(\"--targets\", type=str, multiple=True,\n+              help=\"Generator targets to run\")\n+@click.argument(\"build_dir\", type=build_dir_type)\n+@click.pass_context\n+def build(ctx, src, build_dir, force, targets, **kwargs):\n+    \"\"\" Initialize a C++ build directory.\n+\n+    The build command creates a directory initialized with Arrow's cpp source\n+    cmake configuration. It can also optionally invoke the generator to test\n+    the build (and used in scripts).\n+\n+    Note that archery will carry the caller environment. It will also not touch\n+    an existing directory, one must use the `--force` option to remove the\n+    existing directory.\n+\n+    Examples:\n+\n+    \\b\n+    # Initialize build with clang7 and avx2 support in directory `clang7-build`\n+    \\b\n+    archery build --cc=clang-7 --cxx=clang++-7 --cxx_flags=-mavx2 clang7-build\n+\n+    \\b\n+    # Builds and run test\n+    archery build --targets=all --targets=test build\n+    \"\"\"\n+    # Arrow's cpp cmake configuration\n+    conf = CppConfiguration(**kwargs)\n+    # This is a closure around cmake invocation, e.g. calling `def.build()`\n+    # yields a directory ready to be run with the generator\n+    cmake_def = CppCMakeDefinition(src.cpp, conf)\n+    # Create build directory\n+    build = cmake_def.build(build_dir, force=force)\n+\n+    for target in targets:\n+        build.run(target)\n+\n+\n+@contextmanager\n+def tmpdir(preserve, prefix=\"arrow-bench-\"):\n+    if preserve:\n+        yield mkdtemp(prefix=prefix)\n+    else:\n+        with TemporaryDirectory(prefix=prefix) as tmp:\n+            yield tmp\n+\n+\n+DEFAULT_BENCHMARK_CONF = CppConfiguration(\n+    build_type=\"release\", with_tests=True, with_benchmarks=True)\n+\n+\n+def cpp_runner_from_rev_or_path(src, root, rev_or_path):\n+    build = None\n+    if os.path.exists(rev_or_path) and CMakeBuild.is_build_dir(rev_or_path):\n+        build = CMakeBuild.from_path(rev_or_path)\n+    else:\n+        root_rev = os.path.join(root, rev_or_path)\n+        os.mkdir(root_rev)\n+\n+        # Possibly checkout the sources at given revision\n+        src_rev = src\n+        if rev_or_path != Git.WORKSPACE:\n+            root_src = os.path.join(root_rev, \"arrow\")\n+            src_rev = src.at_revision(rev_or_path, root_src)\n+\n+        # TODO: find a way to pass custom configuration without cluttering\n+        # the cli. Ideally via a configuration file that can be shared with the\n+        # `build` sub-command.\n+        cmake_def = CppCMakeDefinition(src_rev.cpp, DEFAULT_BENCHMARK_CONF)\n+        build = cmake_def.build(os.path.join(root_rev, \"build\"))\n+\n+    return CppBenchmarkRunner(build)\n+\n+\n+DEFAULT_BENCHMARK_FILTER = \"^Regression\"\n+\n+\n+@archery.group()\n+@click.pass_context\n+def benchmark(ctx):\n+    \"\"\" Arrow benchmarking.\n+\n+    Use the diff sub-command to benchmake revisions, and/or build directories.\n+    \"\"\"\n+    pass\n+\n+\n+@benchmark.command(name=\"diff\", short_help=\"Run the C++ benchmark suite\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", show_default=True,\n+              default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+@click.option(\"--suite-filter\", metavar=\"<regex>\", show_default=True,\n+              type=str, default=None, help=\"Regex filtering benchmark suites.\")\n+@click.option(\"--benchmark-filter\", metavar=\"<regex>\", show_default=True,\n+              type=str, default=DEFAULT_BENCHMARK_FILTER,\n+              help=\"Regex filtering benchmark suites.\")\n+@click.option(\"--preserve\", type=bool, default=False, show_default=True,\n+              is_flag=True, help=\"Preserve workspace for investigation.\")\n+@click.option(\"--threshold\", type=float, default=0.05, show_default=True,\n+              help=\"Regression failure threshold in percentage.\")\n+@click.argument(\"contender\", metavar=\"[<contender>\", default=Git.WORKSPACE,\n+                required=False)\n+@click.argument(\"baseline\", metavar=\"[<baseline>]]\", default=\"master\",\n+                required=False)\n+@click.pass_context\n+def benchmark_diff(ctx, src, preserve, suite_filter, benchmark_filter,\n+                   threshold, contender, baseline):\n+    \"\"\" Compare (diff) benchmark runs.\n+\n+    This command acts like git-diff but for benchmark results.\n+\n+    The caller can optionally specify both the contender and the baseline. If\n+    unspecified, the contender will default to the current workspace (like git)\n+    and the baseline will default to master.\n+\n+    Each target (contender or baseline) can either be a git object reference\n+    (commit, tag, special values like HEAD) or a cmake build directory. This\n+    allow comparing git commits, and/or different compilers and/or compiler\n+    flags.\n+\n+    When a commit is referenced, a local clone of the arrow sources (specified\n+    via --src) is performed and the proper branch is created. This is done in\n+    a temporary directory which can be left intact with the `---preserve` flag.\n+\n+    The special token \"WORKSPACE\" is reserved to specify the current git\n \n Review comment:\n   It would probably be useful to mention this in benchmarks.rst\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.832+0000",
                    "updated": "2019-04-11T17:31:25.832+0000",
                    "started": "2019-04-11T17:31:25.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226208",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274515050\n \n \n\n ##########\n File path: dev/archery/archery/lang/cpp.py\n ##########\n @@ -0,0 +1,95 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import glob\n+import os\n+\n+from ..benchmark.runner import BenchmarkRunner\n+from ..utils.cmake import CMakeDefinition\n+\n+\n+def thrutifier(value):\n \n Review comment:\n   ```suggestion\r\n   def truthifier(value):\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.872+0000",
                    "updated": "2019-04-11T17:31:25.872+0000",
                    "started": "2019-04-11T17:31:25.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226209",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274521128\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n+@click.option(\"--build-type\", default=\"release\", type=build_type,\n+              help=\"CMake's CMAKE_BUILD_TYPE\")\n+@click.option(\"--warn-level\", default=\"production\", type=warn_level_type,\n+              help=\"Controls compiler warnings -W(no-)error.\")\n+# components\n+@click.option(\"--with-tests\", default=True, type=bool,\n+              help=\"Build with tests.\")\n+@click.option(\"--with-benchmarks\", default=False, type=bool,\n+              help=\"Build with benchmarks.\")\n+@click.option(\"--with-python\", default=True, type=bool,\n+              help=\"Build with python extension.\")\n+@click.option(\"--with-parquet\", default=False, type=bool,\n+              help=\"Build with parquet file support.\")\n+@click.option(\"--with-gandiva\", default=False, type=bool,\n+              help=\"Build with Gandiva expression compiler support.\")\n+@click.option(\"--with-plasma\", default=False, type=bool,\n+              help=\"Build with Plasma object store support.\")\n+@click.option(\"--with-flight\", default=False, type=bool,\n+              help=\"Build with Flight rpc support.\")\n+# misc\n+@click.option(\"-f\", \"--force\", type=bool, is_flag=True, default=False,\n+              help=\"Delete existing build directory if found.\")\n+@click.option(\"--targets\", type=str, multiple=True,\n+              help=\"Generator targets to run\")\n+@click.argument(\"build_dir\", type=build_dir_type)\n+@click.pass_context\n+def build(ctx, src, build_dir, force, targets, **kwargs):\n+    \"\"\" Initialize a C++ build directory.\n+\n+    The build command creates a directory initialized with Arrow's cpp source\n+    cmake configuration. It can also optionally invoke the generator to test\n \n Review comment:\n   ```suggestion\r\n       and cmake configuration. It can also optionally invoke the generator to test\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.947+0000",
                    "updated": "2019-04-11T17:31:25.947+0000",
                    "started": "2019-04-11T17:31:25.947+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226210",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274517644\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n+@click.option(\"--build-type\", default=\"release\", type=build_type,\n+              help=\"CMake's CMAKE_BUILD_TYPE\")\n+@click.option(\"--warn-level\", default=\"production\", type=warn_level_type,\n+              help=\"Controls compiler warnings -W(no-)error.\")\n+# components\n+@click.option(\"--with-tests\", default=True, type=bool,\n+              help=\"Build with tests.\")\n+@click.option(\"--with-benchmarks\", default=False, type=bool,\n+              help=\"Build with benchmarks.\")\n+@click.option(\"--with-python\", default=True, type=bool,\n+              help=\"Build with python extension.\")\n+@click.option(\"--with-parquet\", default=False, type=bool,\n+              help=\"Build with parquet file support.\")\n+@click.option(\"--with-gandiva\", default=False, type=bool,\n+              help=\"Build with Gandiva expression compiler support.\")\n+@click.option(\"--with-plasma\", default=False, type=bool,\n+              help=\"Build with Plasma object store support.\")\n+@click.option(\"--with-flight\", default=False, type=bool,\n+              help=\"Build with Flight rpc support.\")\n+# misc\n+@click.option(\"-f\", \"--force\", type=bool, is_flag=True, default=False,\n+              help=\"Delete existing build directory if found.\")\n+@click.option(\"--targets\", type=str, multiple=True,\n+              help=\"Generator targets to run\")\n+@click.argument(\"build_dir\", type=build_dir_type)\n+@click.pass_context\n+def build(ctx, src, build_dir, force, targets, **kwargs):\n+    \"\"\" Initialize a C++ build directory.\n+\n+    The build command creates a directory initialized with Arrow's cpp source\n+    cmake configuration. It can also optionally invoke the generator to test\n+    the build (and used in scripts).\n+\n+    Note that archery will carry the caller environment. It will also not touch\n+    an existing directory, one must use the `--force` option to remove the\n+    existing directory.\n+\n+    Examples:\n+\n+    \\b\n+    # Initialize build with clang7 and avx2 support in directory `clang7-build`\n+    \\b\n+    archery build --cc=clang-7 --cxx=clang++-7 --cxx_flags=-mavx2 clang7-build\n+\n+    \\b\n+    # Builds and run test\n+    archery build --targets=all --targets=test build\n+    \"\"\"\n+    # Arrow's cpp cmake configuration\n+    conf = CppConfiguration(**kwargs)\n+    # This is a closure around cmake invocation, e.g. calling `def.build()`\n+    # yields a directory ready to be run with the generator\n+    cmake_def = CppCMakeDefinition(src.cpp, conf)\n+    # Create build directory\n+    build = cmake_def.build(build_dir, force=force)\n+\n+    for target in targets:\n+        build.run(target)\n+\n+\n+@contextmanager\n+def tmpdir(preserve, prefix=\"arrow-bench-\"):\n+    if preserve:\n+        yield mkdtemp(prefix=prefix)\n+    else:\n+        with TemporaryDirectory(prefix=prefix) as tmp:\n+            yield tmp\n+\n+\n+DEFAULT_BENCHMARK_CONF = CppConfiguration(\n+    build_type=\"release\", with_tests=True, with_benchmarks=True)\n+\n+\n+def cpp_runner_from_rev_or_path(src, root, rev_or_path):\n+    build = None\n+    if os.path.exists(rev_or_path) and CMakeBuild.is_build_dir(rev_or_path):\n+        build = CMakeBuild.from_path(rev_or_path)\n+    else:\n+        root_rev = os.path.join(root, rev_or_path)\n+        os.mkdir(root_rev)\n+\n+        # Possibly checkout the sources at given revision\n+        src_rev = src\n+        if rev_or_path != Git.WORKSPACE:\n+            root_src = os.path.join(root_rev, \"arrow\")\n+            src_rev = src.at_revision(rev_or_path, root_src)\n+\n+        # TODO: find a way to pass custom configuration without cluttering\n+        # the cli. Ideally via a configuration file that can be shared with the\n+        # `build` sub-command.\n+        cmake_def = CppCMakeDefinition(src_rev.cpp, DEFAULT_BENCHMARK_CONF)\n+        build = cmake_def.build(os.path.join(root_rev, \"build\"))\n+\n+    return CppBenchmarkRunner(build)\n+\n+\n+DEFAULT_BENCHMARK_FILTER = \"^Regression\"\n+\n+\n+@archery.group()\n+@click.pass_context\n+def benchmark(ctx):\n+    \"\"\" Arrow benchmarking.\n+\n+    Use the diff sub-command to benchmake revisions, and/or build directories.\n+    \"\"\"\n+    pass\n+\n+\n+@benchmark.command(name=\"diff\", short_help=\"Run the C++ benchmark suite\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", show_default=True,\n+              default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+@click.option(\"--suite-filter\", metavar=\"<regex>\", show_default=True,\n+              type=str, default=None, help=\"Regex filtering benchmark suites.\")\n+@click.option(\"--benchmark-filter\", metavar=\"<regex>\", show_default=True,\n+              type=str, default=DEFAULT_BENCHMARK_FILTER,\n+              help=\"Regex filtering benchmark suites.\")\n+@click.option(\"--preserve\", type=bool, default=False, show_default=True,\n+              is_flag=True, help=\"Preserve workspace for investigation.\")\n+@click.option(\"--threshold\", type=float, default=0.05, show_default=True,\n+              help=\"Regression failure threshold in percentage.\")\n+@click.argument(\"contender\", metavar=\"[<contender>\", default=Git.WORKSPACE,\n+                required=False)\n+@click.argument(\"baseline\", metavar=\"[<baseline>]]\", default=\"master\",\n+                required=False)\n+@click.pass_context\n+def benchmark_diff(ctx, src, preserve, suite_filter, benchmark_filter,\n+                   threshold, contender, baseline):\n+    \"\"\" Compare (diff) benchmark runs.\n+\n+    This command acts like git-diff but for benchmark results.\n+\n+    The caller can optionally specify both the contender and the baseline. If\n+    unspecified, the contender will default to the current workspace (like git)\n+    and the baseline will default to master.\n+\n+    Each target (contender or baseline) can either be a git object reference\n+    (commit, tag, special values like HEAD) or a cmake build directory. This\n+    allow comparing git commits, and/or different compilers and/or compiler\n+    flags.\n+\n+    When a commit is referenced, a local clone of the arrow sources (specified\n+    via --src) is performed and the proper branch is created. This is done in\n+    a temporary directory which can be left intact with the `---preserve` flag.\n+\n+    The special token \"WORKSPACE\" is reserved to specify the current git\n \n Review comment:\n   It would probably be useful to mention this in benchmarks.rst\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:25.983+0000",
                    "updated": "2019-04-11T17:31:25.983+0000",
                    "started": "2019-04-11T17:31:25.982+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226211",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274544493\n \n \n\n ##########\n File path: dev/archery/archery/benchmark/google.py\n ##########\n @@ -0,0 +1,193 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from itertools import filterfalse, groupby, tee\n+import json\n+import subprocess\n+\n+from .core import Benchmark\n+from ..utils.command import Command\n+from ..utils.git import git\n+\n+\n+def partition(pred, iterable):\n+    # adapted from python's examples\n+    t1, t2 = tee(iterable)\n+    return list(filter(pred, t1)), list(filterfalse(pred, t2))\n+\n+\n+class GoogleBenchmarkCommand(Command):\n+    def __init__(self, benchmark_bin, benchmark_filter=None):\n+        self.bin = benchmark_bin\n+        self.benchmark_filter = benchmark_filter\n+\n+    def list_benchmarks(self):\n+        argv = [\"--benchmark_list_tests\"]\n+        if self.benchmark_filter:\n+            argv.append(f\"--benchmark_filter={self.benchmark_filter}\")\n+        result = self.run(*argv, stdout=subprocess.PIPE,\n+                          stderr=subprocess.PIPE)\n+        return [b for b in result.stdout]\n+\n+    def results(self):\n+        argv = [\"--benchmark_format=json\", \"--benchmark_repetitions=20\"]\n+\n+        if self.benchmark_filter:\n+            argv.append(f\"--benchmark_filter={self.benchmark_filter}\")\n+\n \n Review comment:\n   It'd be useful to provide some progress output as each test is run so users know nothing is hung.\r\n   \r\n   Maybe benchmarks could be run one at a time with messages naming each?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.000+0000",
                    "updated": "2019-04-11T17:31:26.000+0000",
                    "started": "2019-04-11T17:31:26.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226212",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274501410\n \n \n\n ##########\n File path: docs/source/developers/benchmarks.rst\n ##########\n @@ -0,0 +1,124 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _benchmarks:\n+\n+**********\n+Benchmarks\n+**********\n+\n+Archery\n+=======\n+\n+``archery`` is a python library and command line utility made to interact with\n+Arrow's sources. The main feature is the benchmarking process.\n+\n+Installation\n+~~~~~~~~~~~~\n+\n+The simplest way to install archery is with pip from the top-level directory.\n+It is recommended to use the ``-e,--editable`` flag such that pip don't copy\n+the module files but use the actual sources.\n+\n+.. code-block:: shell\n+\n+  pip install -e dev/archery\n+  archery --help\n+\n+Comparison\n+==========\n+\n+One desire with benchmarks is to detect performance regressions. Thus,\n+``archery`` implements a benchmark comparison facility via the ``benchmark\n+diff`` command.\n+\n+In the default invocation, it will compare the current source (known as the\n+current workspace in git) with local master branch.\n+\n+For more information, invoke the ``archery benchmark diff --help`` command for\n+multiple examples of invocation.\n+\n+Iterating efficiently\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+Iterating with benchmarks development can be a tedious process due to long\n \n Review comment:\n   ```suggestion\r\n   Iterating with benchmark development can be a tedious process due to long\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.002+0000",
                    "updated": "2019-04-11T17:31:26.002+0000",
                    "started": "2019-04-11T17:31:26.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226213",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274517812\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n+@click.option(\"--build-type\", default=\"release\", type=build_type,\n+              help=\"CMake's CMAKE_BUILD_TYPE\")\n+@click.option(\"--warn-level\", default=\"production\", type=warn_level_type,\n+              help=\"Controls compiler warnings -W(no-)error.\")\n+# components\n+@click.option(\"--with-tests\", default=True, type=bool,\n+              help=\"Build with tests.\")\n+@click.option(\"--with-benchmarks\", default=False, type=bool,\n+              help=\"Build with benchmarks.\")\n+@click.option(\"--with-python\", default=True, type=bool,\n+              help=\"Build with python extension.\")\n+@click.option(\"--with-parquet\", default=False, type=bool,\n+              help=\"Build with parquet file support.\")\n+@click.option(\"--with-gandiva\", default=False, type=bool,\n+              help=\"Build with Gandiva expression compiler support.\")\n+@click.option(\"--with-plasma\", default=False, type=bool,\n+              help=\"Build with Plasma object store support.\")\n+@click.option(\"--with-flight\", default=False, type=bool,\n+              help=\"Build with Flight rpc support.\")\n+# misc\n+@click.option(\"-f\", \"--force\", type=bool, is_flag=True, default=False,\n+              help=\"Delete existing build directory if found.\")\n+@click.option(\"--targets\", type=str, multiple=True,\n+              help=\"Generator targets to run\")\n+@click.argument(\"build_dir\", type=build_dir_type)\n+@click.pass_context\n+def build(ctx, src, build_dir, force, targets, **kwargs):\n+    \"\"\" Initialize a C++ build directory.\n+\n+    The build command creates a directory initialized with Arrow's cpp source\n+    cmake configuration. It can also optionally invoke the generator to test\n+    the build (and used in scripts).\n+\n+    Note that archery will carry the caller environment. It will also not touch\n+    an existing directory, one must use the `--force` option to remove the\n+    existing directory.\n+\n+    Examples:\n+\n+    \\b\n+    # Initialize build with clang7 and avx2 support in directory `clang7-build`\n+    \\b\n+    archery build --cc=clang-7 --cxx=clang++-7 --cxx_flags=-mavx2 clang7-build\n+\n+    \\b\n+    # Builds and run test\n+    archery build --targets=all --targets=test build\n+    \"\"\"\n+    # Arrow's cpp cmake configuration\n+    conf = CppConfiguration(**kwargs)\n+    # This is a closure around cmake invocation, e.g. calling `def.build()`\n+    # yields a directory ready to be run with the generator\n+    cmake_def = CppCMakeDefinition(src.cpp, conf)\n+    # Create build directory\n+    build = cmake_def.build(build_dir, force=force)\n+\n+    for target in targets:\n+        build.run(target)\n+\n+\n+@contextmanager\n+def tmpdir(preserve, prefix=\"arrow-bench-\"):\n+    if preserve:\n+        yield mkdtemp(prefix=prefix)\n+    else:\n+        with TemporaryDirectory(prefix=prefix) as tmp:\n+            yield tmp\n+\n+\n+DEFAULT_BENCHMARK_CONF = CppConfiguration(\n+    build_type=\"release\", with_tests=True, with_benchmarks=True)\n+\n+\n+def cpp_runner_from_rev_or_path(src, root, rev_or_path):\n+    build = None\n+    if os.path.exists(rev_or_path) and CMakeBuild.is_build_dir(rev_or_path):\n+        build = CMakeBuild.from_path(rev_or_path)\n+    else:\n+        root_rev = os.path.join(root, rev_or_path)\n+        os.mkdir(root_rev)\n+\n+        # Possibly checkout the sources at given revision\n+        src_rev = src\n+        if rev_or_path != Git.WORKSPACE:\n+            root_src = os.path.join(root_rev, \"arrow\")\n+            src_rev = src.at_revision(rev_or_path, root_src)\n+\n+        # TODO: find a way to pass custom configuration without cluttering\n+        # the cli. Ideally via a configuration file that can be shared with the\n+        # `build` sub-command.\n+        cmake_def = CppCMakeDefinition(src_rev.cpp, DEFAULT_BENCHMARK_CONF)\n+        build = cmake_def.build(os.path.join(root_rev, \"build\"))\n+\n+    return CppBenchmarkRunner(build)\n+\n+\n+DEFAULT_BENCHMARK_FILTER = \"^Regression\"\n+\n+\n+@archery.group()\n+@click.pass_context\n+def benchmark(ctx):\n+    \"\"\" Arrow benchmarking.\n+\n+    Use the diff sub-command to benchmake revisions, and/or build directories.\n+    \"\"\"\n+    pass\n+\n+\n+@benchmark.command(name=\"diff\", short_help=\"Run the C++ benchmark suite\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", show_default=True,\n+              default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+@click.option(\"--suite-filter\", metavar=\"<regex>\", show_default=True,\n+              type=str, default=None, help=\"Regex filtering benchmark suites.\")\n+@click.option(\"--benchmark-filter\", metavar=\"<regex>\", show_default=True,\n+              type=str, default=DEFAULT_BENCHMARK_FILTER,\n+              help=\"Regex filtering benchmark suites.\")\n+@click.option(\"--preserve\", type=bool, default=False, show_default=True,\n+              is_flag=True, help=\"Preserve workspace for investigation.\")\n+@click.option(\"--threshold\", type=float, default=0.05, show_default=True,\n+              help=\"Regression failure threshold in percentage.\")\n+@click.argument(\"contender\", metavar=\"[<contender>\", default=Git.WORKSPACE,\n+                required=False)\n+@click.argument(\"baseline\", metavar=\"[<baseline>]]\", default=\"master\",\n+                required=False)\n+@click.pass_context\n+def benchmark_diff(ctx, src, preserve, suite_filter, benchmark_filter,\n+                   threshold, contender, baseline):\n+    \"\"\" Compare (diff) benchmark runs.\n+\n+    This command acts like git-diff but for benchmark results.\n+\n+    The caller can optionally specify both the contender and the baseline. If\n+    unspecified, the contender will default to the current workspace (like git)\n+    and the baseline will default to master.\n+\n+    Each target (contender or baseline) can either be a git object reference\n+    (commit, tag, special values like HEAD) or a cmake build directory. This\n+    allow comparing git commits, and/or different compilers and/or compiler\n+    flags.\n+\n+    When a commit is referenced, a local clone of the arrow sources (specified\n+    via --src) is performed and the proper branch is created. This is done in\n+    a temporary directory which can be left intact with the `---preserve` flag.\n+\n+    The special token \"WORKSPACE\" is reserved to specify the current git\n \n Review comment:\n   It would probably be useful to mention this in benchmarks.rst\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.004+0000",
                    "updated": "2019-04-11T17:31:26.004+0000",
                    "started": "2019-04-11T17:31:26.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226214",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274540321\n \n \n\n ##########\n File path: dev/archery/archery/utils/command.py\n ##########\n @@ -0,0 +1,67 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import os\n+import shutil\n+import subprocess\n+\n+from .logger import logger, ctx\n+\n+\n+def find_exec(executable):\n+    exec_exists = os.path.exists(executable)\n+    return executable if exec_exists else shutil.which(executable)\n+\n+\n+# Decorator running a command and returning stdout\n+class capture_stdout:\n+    def __init__(self, strip=False):\n+        self.strip = strip\n+\n+    def __call__(self, f):\n+        def strip_it(x):\n+            return x.strip() if self.strip else x\n+\n+        def wrapper(*argv, **kwargs):\n+            # Ensure stdout is captured\n+            kwargs[\"stdout\"] = subprocess.PIPE\n+            return strip_it(fn(*argv, **kwargs).stdout)\n+        return wrapper\n+\n+\n+class Command:\n+    def bin(self):\n \n Review comment:\n   elsewhere you seem to be using this as a property\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.019+0000",
                    "updated": "2019-04-11T17:31:26.019+0000",
                    "started": "2019-04-11T17:31:26.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226215",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274521189\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n+@click.option(\"--build-type\", default=\"release\", type=build_type,\n+              help=\"CMake's CMAKE_BUILD_TYPE\")\n+@click.option(\"--warn-level\", default=\"production\", type=warn_level_type,\n+              help=\"Controls compiler warnings -W(no-)error.\")\n+# components\n+@click.option(\"--with-tests\", default=True, type=bool,\n+              help=\"Build with tests.\")\n+@click.option(\"--with-benchmarks\", default=False, type=bool,\n+              help=\"Build with benchmarks.\")\n+@click.option(\"--with-python\", default=True, type=bool,\n+              help=\"Build with python extension.\")\n+@click.option(\"--with-parquet\", default=False, type=bool,\n+              help=\"Build with parquet file support.\")\n+@click.option(\"--with-gandiva\", default=False, type=bool,\n+              help=\"Build with Gandiva expression compiler support.\")\n+@click.option(\"--with-plasma\", default=False, type=bool,\n+              help=\"Build with Plasma object store support.\")\n+@click.option(\"--with-flight\", default=False, type=bool,\n+              help=\"Build with Flight rpc support.\")\n+# misc\n+@click.option(\"-f\", \"--force\", type=bool, is_flag=True, default=False,\n+              help=\"Delete existing build directory if found.\")\n+@click.option(\"--targets\", type=str, multiple=True,\n+              help=\"Generator targets to run\")\n+@click.argument(\"build_dir\", type=build_dir_type)\n+@click.pass_context\n+def build(ctx, src, build_dir, force, targets, **kwargs):\n+    \"\"\" Initialize a C++ build directory.\n+\n+    The build command creates a directory initialized with Arrow's cpp source\n+    cmake configuration. It can also optionally invoke the generator to test\n \n Review comment:\n   ```suggestion\r\n       and cmake configuration. It can also optionally invoke the generator to test\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.068+0000",
                    "updated": "2019-04-11T17:31:26.068+0000",
                    "started": "2019-04-11T17:31:26.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226216",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274527980\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n \n Review comment:\n   You use `-` everywhere else, did you want `cxx-flags`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.105+0000",
                    "updated": "2019-04-11T17:31:26.105+0000",
                    "started": "2019-04-11T17:31:26.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226218",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274511578\n \n \n\n ##########\n File path: dev/archery/archery/utils/source.py\n ##########\n @@ -0,0 +1,128 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import os\n+\n+from .git import git\n+\n+\n+class ArrowSources:\n+    \"\"\" ArrowSources is a companion class representing a directory containing\n+    Apache Arrow's sources.\n+    \"\"\"\n+\n+    def __init__(self, path):\n+        \"\"\" Initialize an ArrowSources\n+\n+        The caller must ensure that path is valid arrow source directory (can\n+        be checked with ArrowSources.valid\n+\n+        Parameters\n+        ----------\n+        path : src\n+        \"\"\"\n+        assert isinstance(path, str) and ArrowSources.valid(path)\n+        self.path = path\n+\n+    @property\n+    def cpp(self):\n+        \"\"\" Returns the cpp directory of an Arrow sources. \"\"\"\n+        return os.path.join(self.path, \"cpp\")\n+\n+    @property\n+    def python(self):\n+        \"\"\" Returns the python directory of an Arrow sources. \"\"\"\n+        return os.path.join(self.path, \"python\")\n+\n+    @property\n+    def git_backed(self):\n+        \"\"\" Indicate if the sources are backed by git. \"\"\"\n+        git_path = os.path.join(self.path, \".git\")\n+        return os.path.exists(git_path)\n+\n+    def at_revision(self, revision, clone_dir):\n+        \"\"\" Return a copy of the current sources for a specified git revision.\n+\n+        This method may return the current object if no checkout is required.\n+        The caller is responsible to remove the cloned repository directory.\n+\n+        Parameters\n+        ----------\n+        revision : str\n+                   Revision to checkout sources at.\n+        clone_dir : str\n+                    Path to checkout the local clone.\n+        \"\"\"\n+        if not self.git_backed:\n+            raise ValueError(f\"{self} is not backed by git\")\n+\n+        # A local clone is required to leave the current sources intact such\n+        # that build depending on said sources are not invalidated (or worse\n \n Review comment:\n   ```suggestion\r\n           # that builds depending on said sources are not invalidated (or worse\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T17:31:26.105+0000",
                    "updated": "2019-04-11T17:31:26.105+0000",
                    "started": "2019-04-11T17:31:26.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226217",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274625636\n \n \n\n ##########\n File path: dev/archery/archery/cli.py\n ##########\n @@ -0,0 +1,304 @@\n+#!/usr/bin/env python3\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import click\n+from contextlib import contextmanager\n+import json\n+import logging\n+import os\n+import re\n+from tempfile import mkdtemp, TemporaryDirectory\n+\n+\n+from .benchmark.core import BenchmarkComparator\n+from .benchmark.runner import CppBenchmarkRunner\n+from .lang.cpp import CppCMakeDefinition, CppConfiguration\n+from .utils.cmake import CMakeBuild\n+from .utils.git import Git\n+from .utils.logger import logger, ctx as log_ctx\n+from .utils.source import ArrowSources\n+\n+\n+@click.group()\n+@click.option(\"--debug\", type=bool, is_flag=True, default=False,\n+              help=\"Increase logging with debugging output.\")\n+@click.option(\"-q\", \"--quiet\", type=bool, is_flag=True, default=False,\n+              help=\"Silence executed commands.\")\n+@click.pass_context\n+def archery(ctx, debug, quiet):\n+    \"\"\" Apache Arrow developer utilities.\n+\n+    See sub-commands help with `archery <cmd> --help`.\n+\n+    \"\"\"\n+    # Ensure ctx.obj exists\n+    ctx.ensure_object(dict)\n+\n+    log_ctx.quiet = quiet\n+    if debug:\n+        logger.setLevel(logging.DEBUG)\n+\n+\n+def validate_arrow_sources(ctx, param, src):\n+    \"\"\" Ensure a directory contains Arrow cpp sources. \"\"\"\n+    if isinstance(src, str):\n+        if not ArrowSources.valid(src):\n+            raise click.BadParameter(f\"No Arrow C++ sources found in {src}.\")\n+        src = ArrowSources(src)\n+    return src\n+\n+\n+build_dir_type = click.Path(dir_okay=True, file_okay=False, resolve_path=True)\n+# Supported build types\n+build_type = click.Choice([\"debug\", \"relwithdebinfo\", \"release\"],\n+                          case_sensitive=False)\n+# Supported warn levels\n+warn_level_type = click.Choice([\"everything\", \"checkin\", \"production\"],\n+                               case_sensitive=False)\n+\n+\n+@archery.command(short_help=\"Initialize an Arrow C++ build\")\n+@click.option(\"--src\", metavar=\"<arrow_src>\", default=ArrowSources.find(),\n+              callback=validate_arrow_sources,\n+              help=\"Specify Arrow source directory\")\n+# toolchain\n+@click.option(\"--cc\", metavar=\"<compiler>\", help=\"C compiler.\")\n+@click.option(\"--cxx\", metavar=\"<compiler>\", help=\"C++ compiler.\")\n+@click.option(\"--cxx_flags\", help=\"C++ compiler flags.\")\n \n Review comment:\n   yep.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T19:58:34.304+0000",
                    "updated": "2019-04-11T19:58:34.304+0000",
                    "started": "2019-04-11T19:58:34.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226303",
                    "issueId": "13220872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/worklog/226304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4141: [WIP] ARROW-4827: [C++] Implement benchmark comparison\nURL: https://github.com/apache/arrow/pull/4141#discussion_r274626402\n \n \n\n ##########\n File path: docs/source/developers/benchmarks.rst\n ##########\n @@ -0,0 +1,124 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _benchmarks:\n+\n+**********\n+Benchmarks\n+**********\n+\n+Archery\n+=======\n+\n+``archery`` is a python library and command line utility made to interact with\n+Arrow's sources. The main feature is the benchmarking process.\n+\n+Installation\n+~~~~~~~~~~~~\n+\n+The simplest way to install archery is with pip from the top-level directory.\n+It is recommended to use the ``-e,--editable`` flag such that pip don't copy\n+the module files but use the actual sources.\n+\n+.. code-block:: shell\n+\n+  pip install -e dev/archery\n+  archery --help\n+\n+Comparison\n+==========\n+\n+One desire with benchmarks is to detect performance regressions. Thus,\n \n Review comment:\n   Typical French translated to English :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-11T20:00:31.580+0000",
                    "updated": "2019-04-11T20:00:31.580+0000",
                    "started": "2019-04-11T20:00:31.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "226304",
                    "issueId": "13220872"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 43800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1d9c8458[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c9eea1b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@729f9828[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@59fa6a52[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@565d289f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1e577b10[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1087ee2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a25be92[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25037499[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@a904d2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f704c53[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1896b601[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 43800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 25 15:54:22 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-04-25T15:54:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4827/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-03-11T15:15:31.000+0000",
        "updated": "2019-04-25T15:54:34.000+0000",
        "timeoriginalestimate": null,
        "description": "It would be a good thing to be able to write\r\n\r\n{code}\r\nbenchmark-compare-revisions.sh $HASH1 $HASH2\r\n{code}\r\n\r\nand to be output a table of benchmark before/after/change for each C++ benchmark, to assess the performance impact of patches",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "12h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 43800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement benchmark comparison between two git revisions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13220872/comment/16826196",
                    "id": "16826196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4141\n[https://github.com/apache/arrow/pull/4141]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-04-25T15:54:22.088+0000",
                    "updated": "2019-04-25T15:54:22.088+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z00kj4:",
        "customfield_12314139": null
    }
}