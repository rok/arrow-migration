{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13249322",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322",
    "key": "ARROW-6157",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6157/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892\n \n \n   Add a method ValidateFull() on arrays, batches etc. which does O(N) data validation\r\n   for a few types (list, union, dictionary).\r\n   \r\n   Also, fix the assumptions about union arrays to match official semantics.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T18:15:44.226+0000",
                    "updated": "2019-11-25T18:15:44.226+0000",
                    "started": "2019-11-25T18:15:44.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349242",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#issuecomment-558276607\n \n \n   https://issues.apache.org/jira/browse/ARROW-6157\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T18:15:59.775+0000",
                    "updated": "2019-11-25T18:15:59.775+0000",
                    "started": "2019-11-25T18:15:59.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349243",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350377272\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -1165,12 +1166,21 @@ class ARROW_EXPORT UnionArray : public Array {\n   /// Note that this buffer does not account for any slice offset\n   std::shared_ptr<Buffer> type_ids() const { return data_->buffers[1]; }\n \n+  const type_id_t* raw_type_ids() const { return raw_type_ids_ + data_->offset; }\n \n Review comment:\n   @wesm I was wondering... should we rename these methods to `type_codes` and `raw_type_codes`? There is a bit of a mixed terminology here (`UnionType` uses `type_codes`, also `type_id` is used for something different).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T19:26:16.302+0000",
                    "updated": "2019-11-25T19:26:16.302+0000",
                    "started": "2019-11-25T19:26:16.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349280",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#issuecomment-558303932\n \n \n   cc @wesm For the union changes.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T19:26:38.894+0000",
                    "updated": "2019-11-25T19:26:38.894+0000",
                    "started": "2019-11-25T19:26:38.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349281",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350499606\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -1165,12 +1166,21 @@ class ARROW_EXPORT UnionArray : public Array {\n   /// Note that this buffer does not account for any slice offset\n   std::shared_ptr<Buffer> type_ids() const { return data_->buffers[1]; }\n \n+  const type_id_t* raw_type_ids() const { return raw_type_ids_ + data_->offset; }\n \n Review comment:\n   I'd be in favor of changing the names to be more clear and where relevant, conforming to the specification\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T01:05:56.645+0000",
                    "updated": "2019-11-26T01:05:56.645+0000",
                    "started": "2019-11-26T01:05:56.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349481",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350513311\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -288,13 +288,25 @@ std::string DurationType::ToString() const {\n // ----------------------------------------------------------------------\n // Union type\n \n+constexpr int8_t UnionType::kMaxTypeId;\n+constexpr int UnionType::kInvalidChildId;\n+\n UnionType::UnionType(const std::vector<std::shared_ptr<Field>>& fields,\n-                     const std::vector<uint8_t>& type_codes, UnionMode::type mode)\n-    : NestedType(Type::UNION), mode_(mode), type_codes_(type_codes) {\n+                     const std::vector<int8_t>& type_codes, UnionMode::type mode)\n+    : NestedType(Type::UNION),\n+      mode_(mode),\n+      type_codes_(type_codes),\n+      child_ids_(kMaxTypeId + 1, kInvalidChildId) {\n \n Review comment:\n   Do I have it right that this is adding `sizeof(int) * (kMaxTypeId + 1)` (so 512 or 1024 bytes depending on the system) to the footprint of every UnionType instance?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T02:14:00.923+0000",
                    "updated": "2019-11-26T02:14:00.923+0000",
                    "started": "2019-11-26T02:14:00.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349505",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350508805\n \n \n\n ##########\n File path: cpp/src/arrow/array/validate.cc\n ##########\n @@ -0,0 +1,440 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/validate.h\"\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+///////////////////////////////////////////////////////////////////////////\n+// ValidateArray: cheap validation checks\n+\n+namespace {\n+\n+struct ValidateArrayVisitor {\n+  Status Visit(const NullArray& array) {\n+    ARROW_RETURN_IF(array.null_count() != array.length(),\n+                    Status::Invalid(\"null_count is invalid\"));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const PrimitiveArray& array) {\n+    ARROW_RETURN_IF(array.data()->buffers.size() != 2,\n+                    Status::Invalid(\"number of buffers is != 2\"));\n+\n+    if (array.length() > 0 && array.data()->buffers[1] == nullptr) {\n+      return Status::Invalid(\"values buffer is null\");\n+    }\n+    if (array.length() > 0 && array.values() == nullptr) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Array& array) {\n+    if (array.data()->buffers.size() != 2) {\n+      return Status::Invalid(\"number of buffers is != 2\");\n+    }\n+    if (array.length() > 0 && array.values() == nullptr) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BinaryArray& array) {\n+    if (array.data()->buffers.size() != 3) {\n+      return Status::Invalid(\"number of buffers is != 3\");\n+    }\n+    return ValidateOffsets(array);\n+  }\n+\n+  Status Visit(const LargeBinaryArray& array) {\n+    if (array.data()->buffers.size() != 3) {\n+      return Status::Invalid(\"number of buffers is != 3\");\n+    }\n+    return ValidateOffsets(array);\n+  }\n+\n+  Status Visit(const ListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const LargeListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const MapArray& array) {\n+    if (!array.keys()) {\n+      return Status::Invalid(\"keys is null\");\n+    }\n+    const Status key_valid = ValidateArray(*array.keys());\n+    if (!key_valid.ok()) {\n+      return Status::Invalid(\"key array invalid: \", key_valid.ToString());\n+    }\n+\n+    if (array.length() > 0 && !array.values()) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    const Status values_valid = ValidateArray(*array.values());\n+    if (!values_valid.ok()) {\n+      return Status::Invalid(\"values array invalid: \", values_valid.ToString());\n+    }\n+\n+    const int32_t last_offset = array.value_offset(array.length());\n+    if (array.values()->length() != last_offset) {\n+      return Status::Invalid(\"Final offset invariant not equal to values length: \",\n+                             last_offset, \"!=\", array.values()->length());\n+    }\n+    if (array.keys()->length() != last_offset) {\n+      return Status::Invalid(\"Final offset invariant not equal to keys length: \",\n+                             last_offset, \"!=\", array.keys()->length());\n+    }\n+\n+    return ValidateOffsets(array);\n+  }\n+\n+  Status Visit(const FixedSizeListArray& array) {\n+    if (array.length() > 0 && !array.values()) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    if (array.values()->length() != array.length() * array.value_length()) {\n+      return Status::Invalid(\n+          \"Values Length (\", array.values()->length(), \") is not equal to the length (\",\n+          array.length(), \") multiplied by the list size (\", array.value_length(), \")\");\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructArray& array) {\n+    const auto& struct_type = checked_cast<const StructType&>(*array.type());\n+    // Validate fields\n+    for (int i = 0; i < array.num_fields(); ++i) {\n+      auto it = array.field(i);\n+      if (it->length() != array.length()) {\n+        return Status::Invalid(\"Struct child array #\", i,\n+                               \" has length different from struct array (\", it->length(),\n+                               \" != \", array.length(), \")\");\n+      }\n+\n+      auto it_type = struct_type.child(i)->type();\n+      if (!it->type()->Equals(it_type)) {\n+        return Status::Invalid(\"Struct child array #\", i,\n+                               \" does not match type field: \", it->type()->ToString(),\n+                               \" vs \", it_type->ToString());\n+      }\n+\n+      const Status child_valid = ValidateArray(*it);\n+      if (!child_valid.ok()) {\n+        return Status::Invalid(\"Struct child array #\", i,\n+                               \" invalid: \", child_valid.ToString());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionArray& array) {\n+    const auto& union_type = *array.union_type();\n+    // Validate fields\n+    for (int i = 0; i < array.num_fields(); ++i) {\n+      auto it = array.child(i);\n+      if (union_type.mode() == UnionMode::SPARSE && it->length() != array.length()) {\n+        return Status::Invalid(\"Sparse union child array #\", i,\n+                               \" has length different from union array (\", it->length(),\n+                               \" != \", array.length(), \")\");\n+      }\n+\n+      auto it_type = union_type.child(i)->type();\n+      if (!it->type()->Equals(it_type)) {\n+        return Status::Invalid(\"Union child array #\", i,\n+                               \" does not match type field: \", it->type()->ToString(),\n+                               \" vs \", it_type->ToString());\n+      }\n+\n+      const Status child_valid = ValidateArray(*it);\n+      if (!child_valid.ok()) {\n+        return Status::Invalid(\"Union child array #\", i,\n+                               \" invalid: \", child_valid.ToString());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryArray& array) {\n+    Type::type index_type_id = array.indices()->type()->id();\n+    if (!is_integer(index_type_id)) {\n+      return Status::Invalid(\"Dictionary indices must be integer type\");\n+    }\n+    if (!array.data()->dictionary) {\n+      return Status::Invalid(\"Dictionary values must be non-null\");\n+    }\n+    const Status dict_valid = ValidateArray(*array.data()->dictionary);\n+    if (!dict_valid.ok()) {\n+      return Status::Invalid(\"Dictionary array invalid: \", dict_valid.ToString());\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ExtensionArray& array) {\n+    const auto& ext_type = checked_cast<const ExtensionType&>(*array.type());\n+\n+    if (!array.storage()->type()->Equals(*ext_type.storage_type())) {\n+      return Status::Invalid(\"Extension array of type '\", array.type()->ToString(),\n+                             \"' has storage array of incompatible type '\",\n+                             array.storage()->type()->ToString(), \"'\");\n+    }\n+    return ValidateArray(*array.storage());\n+  }\n+\n+ protected:\n+  template <typename ListArrayType>\n+  Status ValidateListArray(const ListArrayType& array) {\n+    const auto first_offset = array.value_offset(0);\n+    const auto last_offset = array.value_offset(array.length());\n+    const auto data_extent = last_offset - first_offset;\n+    if (data_extent > 0 && !array.values()) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    const auto values_length = array.values()->length();\n+    if (values_length < data_extent) {\n+      return Status::Invalid(\"Length spanned by list offsets (\", data_extent,\n+                             \") larger than values array (length \", values_length, \")\");\n+    }\n+\n+    const Status child_valid = ValidateArray(*array.values());\n+    if (!child_valid.ok()) {\n+      return Status::Invalid(\"List child array invalid: \", child_valid.ToString());\n+    }\n+\n+    return ValidateOffsets(array);\n+  }\n+\n+  template <typename ArrayType>\n+  Status ValidateOffsets(const ArrayType& array) {\n+    using offset_type = typename ArrayType::offset_type;\n+\n+    auto value_offsets = array.value_offsets();\n+    if (value_offsets == nullptr) {\n+      if (array.length() != 0) {\n+        return Status::Invalid(\"non-empty array but value_offsets_ is null\");\n+      }\n+      return Status::OK();\n+    }\n+    if (value_offsets->size() / static_cast<int>(sizeof(offset_type)) < array.length()) {\n+      return Status::Invalid(\"offset buffer size (bytes): \", value_offsets->size(),\n+                             \" isn't large enough for length: \", array.length());\n+    }\n+\n+    auto first_offset = array.value_offset(0);\n+    if (array.offset() == 0 && first_offset != 0) {\n+      return Status::Invalid(\"The first offset isn't zero\");\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+}  // namespace\n+\n+ARROW_EXPORT\n+Status ValidateArray(const Array& array) {\n+  // First check the array layout conforms to the spec\n+  const DataType& type = *array.type();\n+  const auto layout = type.layout();\n+  const ArrayData& data = *array.data();\n+\n+  if (array.length() < 0) {\n+    return Status::Invalid(\"Array length is negative\");\n+  }\n+\n+  if (array.null_count() > array.length()) {\n+    return Status::Invalid(\"Null count exceeds array length\");\n+  }\n+\n+  if (data.buffers.size() != layout.bit_widths.size()) {\n+    return Status::Invalid(\"Expected \", layout.bit_widths.size(),\n+                           \" buffers in array \"\n+                           \"of type \",\n+                           type.ToString(), \", got \", data.buffers.size());\n+  }\n+  if (type.id() != Type::EXTENSION) {\n+    if (data.child_data.size() != static_cast<size_t>(type.num_children())) {\n+      return Status::Invalid(\"Expected \", type.num_children(),\n+                             \" child arrays in array \"\n+                             \"of type \",\n+                             type.ToString(), \", got \", data.child_data.size());\n+    }\n+  }\n+  if (layout.has_dictionary && !data.dictionary) {\n+    return Status::Invalid(\"Array of type \", type.ToString(),\n+                           \" must have dictionary values\");\n+  }\n+  if (!layout.has_dictionary && data.dictionary) {\n+    return Status::Invalid(\"Unexpected dictionary values in array of type \",\n+                           type.ToString());\n+  }\n+\n+  ValidateArrayVisitor visitor;\n+  return VisitArrayInline(array, &visitor);\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+// ValidateArrayData: expensive validation checks\n+\n+namespace {\n+\n+struct BoundsCheckVisitor {\n+  int64_t min_value_;\n+  int64_t max_value_;\n+\n+  Status Visit(const Array& array) {\n+    // Default, should be unreachable\n+    return Status::NotImplemented(\"\");\n+  }\n+\n+  template <typename T>\n+  Status Visit(const NumericArray<T>& array) {\n+    for (int64_t i = 0; i < array.length(); ++i) {\n+      if (!array.IsNull(i)) {\n+        const auto v = static_cast<int64_t>(array.Value(i));\n+        if (v < min_value_ || v > max_value_) {\n+          return Status::Invalid(\"Value at position \", i, \" out of bounds: \", v,\n+                                 \" (should be in [\", min_value_, \", \", max_value_, \"])\");\n+        }\n+      }\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+struct ValidateArrayDataVisitor {\n+  // Fallback\n+  Status Visit(const Array& array) { return Status::OK(); }\n+\n+  Status Visit(const ListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const LargeListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const MapArray& array) {\n+    // TODO check keys and items individually?\n+    return ValidateListArray(array);\n+  }\n+\n+  Status Visit(const UnionArray& array) {\n+    const auto& type_codes = array.union_type()->type_codes();\n+    const auto& child_ids = array.union_type()->child_ids();\n+\n+    const int8_t* type_ids = array.raw_type_ids();\n+    for (int64_t i = 0; i < array.length(); ++i) {\n+      if (array.IsNull(i)) {\n+        continue;\n+      }\n+      const int32_t id = type_ids[i];\n+      if (id < 0 || child_ids[id] == UnionType::kInvalidChildId) {\n+        return Status::Invalid(\"Union value at position \", i, \" has invalid type id \",\n+                               id);\n+      }\n+    }\n+\n+    if (array.mode() == UnionMode::DENSE) {\n+      // Map logical type id to child length\n+      std::vector<int64_t> child_lengths(256);\n+      for (int child_id = 0; child_id < static_cast<int>(type_codes.size()); ++child_id) {\n+        child_lengths[type_codes[child_id]] = array.child(child_id)->length();\n+      }\n+\n+      // Check offsets\n+      const int32_t* offsets = array.raw_value_offsets();\n+      for (int64_t i = 0; i < array.length(); ++i) {\n+        if (array.IsNull(i)) {\n+          continue;\n+        }\n+        const int32_t id = type_ids[i];\n+        const int32_t offset = offsets[i];\n+        if (offset < 0) {\n+          return Status::Invalid(\"Union value at position \", i, \" has negative offset \",\n+                                 offset);\n+        }\n+        if (offset >= child_lengths[id]) {\n+          return Status::Invalid(\"Union value at position \", i,\n+                                 \" has offset larger \"\n+                                 \"than child length (\",\n+                                 offset, \" >= \", child_lengths[id], \")\");\n+        }\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryArray& array) {\n+    const Status indices_status =\n+        CheckBounds(*array.indices(), 0, array.dictionary()->length() - 1);\n+    if (!indices_status.ok()) {\n+      return Status::Invalid(\"Dictionary indices invalid: \", indices_status.ToString());\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ExtensionArray& array) {\n+    return ValidateArrayData(*array.storage());\n+  }\n+\n+ protected:\n+  template <typename ListArrayType>\n+  Status ValidateListArray(const ListArrayType& array) {\n+    const Status child_valid = ValidateArrayData(*array.values());\n+    if (!child_valid.ok()) {\n+      return Status::Invalid(\"List child array invalid: \", child_valid.ToString());\n+    }\n+    return ValidateOffsets(array);\n+  }\n+\n+  template <typename ArrayType>\n+  Status ValidateOffsets(const ArrayType& array) {\n+    auto prev_offset = array.value_offset(0);\n+    for (int64_t i = 1; i <= array.length(); ++i) {\n+      auto current_offset = array.value_offset(i);\n+      if (array.IsNull(i - 1) && current_offset != prev_offset) {\n+        return Status::Invalid(\"Offset invariant failure at: \", i,\n+                               \" inconsistent value_offsets for null slot\",\n+                               current_offset, \"!=\", prev_offset);\n+      }\n \n Review comment:\n   Is this conforming to the specification? My understanding is that we do not place any conditions on the value \"underneath\" a null \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T02:14:00.986+0000",
                    "updated": "2019-11-26T02:14:00.986+0000",
                    "started": "2019-11-26T02:14:00.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349506",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350627300\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -1165,12 +1166,21 @@ class ARROW_EXPORT UnionArray : public Array {\n   /// Note that this buffer does not account for any slice offset\n   std::shared_ptr<Buffer> type_ids() const { return data_->buffers[1]; }\n \n+  const type_id_t* raw_type_ids() const { return raw_type_ids_ + data_->offset; }\n \n Review comment:\n   Well, the specification uses \"types\" and \"type ids\" :-/\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T09:34:07.596+0000",
                    "updated": "2019-11-26T09:34:07.596+0000",
                    "started": "2019-11-26T09:34:07.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349659",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350629395\n \n \n\n ##########\n File path: cpp/src/arrow/array/validate.cc\n ##########\n @@ -0,0 +1,440 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/validate.h\"\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+///////////////////////////////////////////////////////////////////////////\n+// ValidateArray: cheap validation checks\n+\n+namespace {\n+\n+struct ValidateArrayVisitor {\n+  Status Visit(const NullArray& array) {\n+    ARROW_RETURN_IF(array.null_count() != array.length(),\n+                    Status::Invalid(\"null_count is invalid\"));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const PrimitiveArray& array) {\n+    ARROW_RETURN_IF(array.data()->buffers.size() != 2,\n+                    Status::Invalid(\"number of buffers is != 2\"));\n+\n+    if (array.length() > 0 && array.data()->buffers[1] == nullptr) {\n+      return Status::Invalid(\"values buffer is null\");\n+    }\n+    if (array.length() > 0 && array.values() == nullptr) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Array& array) {\n+    if (array.data()->buffers.size() != 2) {\n+      return Status::Invalid(\"number of buffers is != 2\");\n+    }\n+    if (array.length() > 0 && array.values() == nullptr) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BinaryArray& array) {\n+    if (array.data()->buffers.size() != 3) {\n+      return Status::Invalid(\"number of buffers is != 3\");\n+    }\n+    return ValidateOffsets(array);\n+  }\n+\n+  Status Visit(const LargeBinaryArray& array) {\n+    if (array.data()->buffers.size() != 3) {\n+      return Status::Invalid(\"number of buffers is != 3\");\n+    }\n+    return ValidateOffsets(array);\n+  }\n+\n+  Status Visit(const ListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const LargeListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const MapArray& array) {\n+    if (!array.keys()) {\n+      return Status::Invalid(\"keys is null\");\n+    }\n+    const Status key_valid = ValidateArray(*array.keys());\n+    if (!key_valid.ok()) {\n+      return Status::Invalid(\"key array invalid: \", key_valid.ToString());\n+    }\n+\n+    if (array.length() > 0 && !array.values()) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    const Status values_valid = ValidateArray(*array.values());\n+    if (!values_valid.ok()) {\n+      return Status::Invalid(\"values array invalid: \", values_valid.ToString());\n+    }\n+\n+    const int32_t last_offset = array.value_offset(array.length());\n+    if (array.values()->length() != last_offset) {\n+      return Status::Invalid(\"Final offset invariant not equal to values length: \",\n+                             last_offset, \"!=\", array.values()->length());\n+    }\n+    if (array.keys()->length() != last_offset) {\n+      return Status::Invalid(\"Final offset invariant not equal to keys length: \",\n+                             last_offset, \"!=\", array.keys()->length());\n+    }\n+\n+    return ValidateOffsets(array);\n+  }\n+\n+  Status Visit(const FixedSizeListArray& array) {\n+    if (array.length() > 0 && !array.values()) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    if (array.values()->length() != array.length() * array.value_length()) {\n+      return Status::Invalid(\n+          \"Values Length (\", array.values()->length(), \") is not equal to the length (\",\n+          array.length(), \") multiplied by the list size (\", array.value_length(), \")\");\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructArray& array) {\n+    const auto& struct_type = checked_cast<const StructType&>(*array.type());\n+    // Validate fields\n+    for (int i = 0; i < array.num_fields(); ++i) {\n+      auto it = array.field(i);\n+      if (it->length() != array.length()) {\n+        return Status::Invalid(\"Struct child array #\", i,\n+                               \" has length different from struct array (\", it->length(),\n+                               \" != \", array.length(), \")\");\n+      }\n+\n+      auto it_type = struct_type.child(i)->type();\n+      if (!it->type()->Equals(it_type)) {\n+        return Status::Invalid(\"Struct child array #\", i,\n+                               \" does not match type field: \", it->type()->ToString(),\n+                               \" vs \", it_type->ToString());\n+      }\n+\n+      const Status child_valid = ValidateArray(*it);\n+      if (!child_valid.ok()) {\n+        return Status::Invalid(\"Struct child array #\", i,\n+                               \" invalid: \", child_valid.ToString());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionArray& array) {\n+    const auto& union_type = *array.union_type();\n+    // Validate fields\n+    for (int i = 0; i < array.num_fields(); ++i) {\n+      auto it = array.child(i);\n+      if (union_type.mode() == UnionMode::SPARSE && it->length() != array.length()) {\n+        return Status::Invalid(\"Sparse union child array #\", i,\n+                               \" has length different from union array (\", it->length(),\n+                               \" != \", array.length(), \")\");\n+      }\n+\n+      auto it_type = union_type.child(i)->type();\n+      if (!it->type()->Equals(it_type)) {\n+        return Status::Invalid(\"Union child array #\", i,\n+                               \" does not match type field: \", it->type()->ToString(),\n+                               \" vs \", it_type->ToString());\n+      }\n+\n+      const Status child_valid = ValidateArray(*it);\n+      if (!child_valid.ok()) {\n+        return Status::Invalid(\"Union child array #\", i,\n+                               \" invalid: \", child_valid.ToString());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryArray& array) {\n+    Type::type index_type_id = array.indices()->type()->id();\n+    if (!is_integer(index_type_id)) {\n+      return Status::Invalid(\"Dictionary indices must be integer type\");\n+    }\n+    if (!array.data()->dictionary) {\n+      return Status::Invalid(\"Dictionary values must be non-null\");\n+    }\n+    const Status dict_valid = ValidateArray(*array.data()->dictionary);\n+    if (!dict_valid.ok()) {\n+      return Status::Invalid(\"Dictionary array invalid: \", dict_valid.ToString());\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ExtensionArray& array) {\n+    const auto& ext_type = checked_cast<const ExtensionType&>(*array.type());\n+\n+    if (!array.storage()->type()->Equals(*ext_type.storage_type())) {\n+      return Status::Invalid(\"Extension array of type '\", array.type()->ToString(),\n+                             \"' has storage array of incompatible type '\",\n+                             array.storage()->type()->ToString(), \"'\");\n+    }\n+    return ValidateArray(*array.storage());\n+  }\n+\n+ protected:\n+  template <typename ListArrayType>\n+  Status ValidateListArray(const ListArrayType& array) {\n+    const auto first_offset = array.value_offset(0);\n+    const auto last_offset = array.value_offset(array.length());\n+    const auto data_extent = last_offset - first_offset;\n+    if (data_extent > 0 && !array.values()) {\n+      return Status::Invalid(\"values is null\");\n+    }\n+    const auto values_length = array.values()->length();\n+    if (values_length < data_extent) {\n+      return Status::Invalid(\"Length spanned by list offsets (\", data_extent,\n+                             \") larger than values array (length \", values_length, \")\");\n+    }\n+\n+    const Status child_valid = ValidateArray(*array.values());\n+    if (!child_valid.ok()) {\n+      return Status::Invalid(\"List child array invalid: \", child_valid.ToString());\n+    }\n+\n+    return ValidateOffsets(array);\n+  }\n+\n+  template <typename ArrayType>\n+  Status ValidateOffsets(const ArrayType& array) {\n+    using offset_type = typename ArrayType::offset_type;\n+\n+    auto value_offsets = array.value_offsets();\n+    if (value_offsets == nullptr) {\n+      if (array.length() != 0) {\n+        return Status::Invalid(\"non-empty array but value_offsets_ is null\");\n+      }\n+      return Status::OK();\n+    }\n+    if (value_offsets->size() / static_cast<int>(sizeof(offset_type)) < array.length()) {\n+      return Status::Invalid(\"offset buffer size (bytes): \", value_offsets->size(),\n+                             \" isn't large enough for length: \", array.length());\n+    }\n+\n+    auto first_offset = array.value_offset(0);\n+    if (array.offset() == 0 && first_offset != 0) {\n+      return Status::Invalid(\"The first offset isn't zero\");\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+}  // namespace\n+\n+ARROW_EXPORT\n+Status ValidateArray(const Array& array) {\n+  // First check the array layout conforms to the spec\n+  const DataType& type = *array.type();\n+  const auto layout = type.layout();\n+  const ArrayData& data = *array.data();\n+\n+  if (array.length() < 0) {\n+    return Status::Invalid(\"Array length is negative\");\n+  }\n+\n+  if (array.null_count() > array.length()) {\n+    return Status::Invalid(\"Null count exceeds array length\");\n+  }\n+\n+  if (data.buffers.size() != layout.bit_widths.size()) {\n+    return Status::Invalid(\"Expected \", layout.bit_widths.size(),\n+                           \" buffers in array \"\n+                           \"of type \",\n+                           type.ToString(), \", got \", data.buffers.size());\n+  }\n+  if (type.id() != Type::EXTENSION) {\n+    if (data.child_data.size() != static_cast<size_t>(type.num_children())) {\n+      return Status::Invalid(\"Expected \", type.num_children(),\n+                             \" child arrays in array \"\n+                             \"of type \",\n+                             type.ToString(), \", got \", data.child_data.size());\n+    }\n+  }\n+  if (layout.has_dictionary && !data.dictionary) {\n+    return Status::Invalid(\"Array of type \", type.ToString(),\n+                           \" must have dictionary values\");\n+  }\n+  if (!layout.has_dictionary && data.dictionary) {\n+    return Status::Invalid(\"Unexpected dictionary values in array of type \",\n+                           type.ToString());\n+  }\n+\n+  ValidateArrayVisitor visitor;\n+  return VisitArrayInline(array, &visitor);\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+// ValidateArrayData: expensive validation checks\n+\n+namespace {\n+\n+struct BoundsCheckVisitor {\n+  int64_t min_value_;\n+  int64_t max_value_;\n+\n+  Status Visit(const Array& array) {\n+    // Default, should be unreachable\n+    return Status::NotImplemented(\"\");\n+  }\n+\n+  template <typename T>\n+  Status Visit(const NumericArray<T>& array) {\n+    for (int64_t i = 0; i < array.length(); ++i) {\n+      if (!array.IsNull(i)) {\n+        const auto v = static_cast<int64_t>(array.Value(i));\n+        if (v < min_value_ || v > max_value_) {\n+          return Status::Invalid(\"Value at position \", i, \" out of bounds: \", v,\n+                                 \" (should be in [\", min_value_, \", \", max_value_, \"])\");\n+        }\n+      }\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+struct ValidateArrayDataVisitor {\n+  // Fallback\n+  Status Visit(const Array& array) { return Status::OK(); }\n+\n+  Status Visit(const ListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const LargeListArray& array) { return ValidateListArray(array); }\n+\n+  Status Visit(const MapArray& array) {\n+    // TODO check keys and items individually?\n+    return ValidateListArray(array);\n+  }\n+\n+  Status Visit(const UnionArray& array) {\n+    const auto& type_codes = array.union_type()->type_codes();\n+    const auto& child_ids = array.union_type()->child_ids();\n+\n+    const int8_t* type_ids = array.raw_type_ids();\n+    for (int64_t i = 0; i < array.length(); ++i) {\n+      if (array.IsNull(i)) {\n+        continue;\n+      }\n+      const int32_t id = type_ids[i];\n+      if (id < 0 || child_ids[id] == UnionType::kInvalidChildId) {\n+        return Status::Invalid(\"Union value at position \", i, \" has invalid type id \",\n+                               id);\n+      }\n+    }\n+\n+    if (array.mode() == UnionMode::DENSE) {\n+      // Map logical type id to child length\n+      std::vector<int64_t> child_lengths(256);\n+      for (int child_id = 0; child_id < static_cast<int>(type_codes.size()); ++child_id) {\n+        child_lengths[type_codes[child_id]] = array.child(child_id)->length();\n+      }\n+\n+      // Check offsets\n+      const int32_t* offsets = array.raw_value_offsets();\n+      for (int64_t i = 0; i < array.length(); ++i) {\n+        if (array.IsNull(i)) {\n+          continue;\n+        }\n+        const int32_t id = type_ids[i];\n+        const int32_t offset = offsets[i];\n+        if (offset < 0) {\n+          return Status::Invalid(\"Union value at position \", i, \" has negative offset \",\n+                                 offset);\n+        }\n+        if (offset >= child_lengths[id]) {\n+          return Status::Invalid(\"Union value at position \", i,\n+                                 \" has offset larger \"\n+                                 \"than child length (\",\n+                                 offset, \" >= \", child_lengths[id], \")\");\n+        }\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryArray& array) {\n+    const Status indices_status =\n+        CheckBounds(*array.indices(), 0, array.dictionary()->length() - 1);\n+    if (!indices_status.ok()) {\n+      return Status::Invalid(\"Dictionary indices invalid: \", indices_status.ToString());\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ExtensionArray& array) {\n+    return ValidateArrayData(*array.storage());\n+  }\n+\n+ protected:\n+  template <typename ListArrayType>\n+  Status ValidateListArray(const ListArrayType& array) {\n+    const Status child_valid = ValidateArrayData(*array.values());\n+    if (!child_valid.ok()) {\n+      return Status::Invalid(\"List child array invalid: \", child_valid.ToString());\n+    }\n+    return ValidateOffsets(array);\n+  }\n+\n+  template <typename ArrayType>\n+  Status ValidateOffsets(const ArrayType& array) {\n+    auto prev_offset = array.value_offset(0);\n+    for (int64_t i = 1; i <= array.length(); ++i) {\n+      auto current_offset = array.value_offset(i);\n+      if (array.IsNull(i - 1) && current_offset != prev_offset) {\n+        return Status::Invalid(\"Offset invariant failure at: \", i,\n+                               \" inconsistent value_offsets for null slot\",\n+                               current_offset, \"!=\", prev_offset);\n+      }\n \n Review comment:\n   This code is simply moved around from `array.cc`.\r\n   The spec does not spell it out explicitly but the examples are compliant with this expectation:\r\n   https://arrow.apache.org/docs/format/Columnar.html#variable-size-list-layout\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T09:37:53.318+0000",
                    "updated": "2019-11-26T09:37:53.318+0000",
                    "started": "2019-11-26T09:37:53.318+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349662",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#discussion_r350629784\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -288,13 +288,25 @@ std::string DurationType::ToString() const {\n // ----------------------------------------------------------------------\n // Union type\n \n+constexpr int8_t UnionType::kMaxTypeId;\n+constexpr int UnionType::kInvalidChildId;\n+\n UnionType::UnionType(const std::vector<std::shared_ptr<Field>>& fields,\n-                     const std::vector<uint8_t>& type_codes, UnionMode::type mode)\n-    : NestedType(Type::UNION), mode_(mode), type_codes_(type_codes) {\n+                     const std::vector<int8_t>& type_codes, UnionMode::type mode)\n+    : NestedType(Type::UNION),\n+      mode_(mode),\n+      type_codes_(type_codes),\n+      child_ids_(kMaxTypeId + 1, kInvalidChildId) {\n \n Review comment:\n   Yes. I think this is simpler than having to lazily-initialize it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T09:38:29.922+0000",
                    "updated": "2019-11-26T09:38:29.922+0000",
                    "started": "2019-11-26T09:38:29.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349663",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on issue #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#issuecomment-558570549\n \n \n   Should the python constructors do a cheap or a full validation? (since `full=False`is the default, I assume they will now do a cheap validation) \r\n   \r\n   So that means that the initial example in the issue (https://issues.apache.org/jira/browse/ARROW-6157) with `pa.UnionArray.from_dense` can still generate a invalid array that will segfault on certain operations? \r\n   That might be fine (it should probably at least be possible to not do the full validation, in case you know you have valid array data), but maybe we should then update some of those docstrings to note that?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T10:41:05.110+0000",
                    "updated": "2019-11-26T10:41:05.110+0000",
                    "started": "2019-11-26T10:41:05.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349696",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#issuecomment-558573764\n \n \n   Full validation is essentially O(n), so it sounds undesirable to do it by default. I don't know what @wesm thinks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T10:49:28.621+0000",
                    "updated": "2019-11-26T10:49:28.621+0000",
                    "started": "2019-11-26T10:49:28.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349702",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/349703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#issuecomment-558573764\n \n \n   Full validation is essentially O(n), so it sounds undesirable to do it by default in Python constructors. I don't know what @wesm thinks about it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T10:49:51.009+0000",
                    "updated": "2019-11-26T10:49:51.009+0000",
                    "started": "2019-11-26T10:49:51.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349703",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/351058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892#issuecomment-559540746\n \n \n   Rebased. Will merge when green.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-28T15:47:52.454+0000",
                    "updated": "2019-11-28T15:47:52.454+0000",
                    "started": "2019-11-28T15:47:52.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "351058",
                    "issueId": "13249322"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/worklog/351291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5892: ARROW-6157: [C++] Array data validation\nURL: https://github.com/apache/arrow/pull/5892\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-29T10:40:42.153+0000",
                    "updated": "2019-11-29T10:40:42.153+0000",
                    "started": "2019-11-29T10:40:42.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "351291",
                    "issueId": "13249322"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4297b559[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2582e5e9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e5ce8b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5c43f537[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@570b1621[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@33a4953d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ab4a2d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@791d02f5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76a8a9e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@61b2d77c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e8f13f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6f14ac77[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 29 10:40:38 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-29T10:40:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6157/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-08-07T10:30:29.000+0000",
        "updated": "2019-11-29T10:40:42.000+0000",
        "timeoriginalestimate": null,
        "description": "From the Python side, you can create an \"invalid\" UnionArray:\r\n\r\n{code}\r\nbinary = pa.array([b'a', b'b', b'c', b'd'], type='binary') \r\nint64 = pa.array([1, 2, 3], type='int64') \r\ntypes = pa.array([0, 1, 0, 0, 2, 1, 0], type='int8')   # <- value of 2 is out of bound for number of childs\r\nvalue_offsets = pa.array([0, 0, 2, 1, 1, 2, 3], type='int32')\r\n\r\na = pa.UnionArray.from_dense(types, value_offsets, [binary, int64])\r\n{code}\r\n\r\nEg on conversion to python this leads to a segfault:\r\n\r\n{code}\r\nIn [7]: a.to_pylist()\r\nSegmentation fault (core dumped)\r\n{code}\r\n\r\nOn the other hand, doing an explicit validation does not give an error:\r\n\r\n{code}\r\nIn [8]: a.validate()\r\n{code}\r\n\r\nShould the validation raise errors for this case? (the C++ {{ValidateVisitor}} for UnionArray does nothing) \r\n\r\n(so that this can be called from the Python API to avoid creating invalid arrays / segfaults there)\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][C++] UnionArray with invalid data passes validation / leads to segfaults",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/comment/16932624",
                    "id": "16932624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It's not obvious whether we want validate() to do a O(N) validation of the data.\r\n\r\n[~wesmckinn]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-18T16:29:35.448+0000",
                    "updated": "2019-09-18T16:29:42.602+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/comment/16932632",
                    "id": "16932632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Not obvious to me either. It seems like there is a dual need\r\n\r\n* Checking very basic validity preconditions\r\n* Actual data validation (boundschecking, checking monotonicity in the case of variable offsets, etc.)\r\n\r\nAFAICT we haven't really implemented much in the way of the latter. I think it'd be useful to have this in C++ but separate from the current {{Array::Validate}} I guess, and something that users can opt in to if they need to sanitize inputs",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-18T16:34:47.745+0000",
                    "updated": "2019-09-18T16:34:47.745+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/comment/16932693",
                    "id": "16932693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Yes, we may need a {{ValidateData}} method that's more thorough.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-18T17:22:59.079+0000",
                    "updated": "2019-09-18T17:22:59.079+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/comment/16932703",
                    "id": "16932703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "The ListArray validation actually does something like the latter (it checks if all offsets are valid), so there is at least _some_ precedent.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2019-09-18T17:39:13.689+0000",
                    "updated": "2019-09-18T17:39:13.689+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/comment/16932715",
                    "id": "16932715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Hmm. Perhaps that validation can be moved to a separate method :-)\r\nThen we'll have to make sure that all tests call the thorough validation method, rather than the light one.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-18T17:53:49.749+0000",
                    "updated": "2019-09-18T17:53:49.749+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249322/comment/16984880",
                    "id": "16984880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5892\n[https://github.com/apache/arrow/pull/5892]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-11-29T10:40:38.842+0000",
                    "updated": "2019-11-29T10:40:38.842+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z05er4:",
        "customfield_12314139": null
    }
}