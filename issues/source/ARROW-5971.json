{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13245550",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550",
    "key": "ARROW-5971",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332543",
                "id": "12332543",
                "name": "Website"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5971/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 50,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35\n \n \n   We will need to make a general documentation \"push\" on Flight but it will be helpful to have some more general high level content about the motivation for the project and some of the ways to use it. \r\n   \r\n   Target publication later this week\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:03:51.411+0000",
                    "updated": "2019-10-14T14:03:51.411+0000",
                    "started": "2019-10-14T14:03:51.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327821",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#issuecomment-541698712\n \n \n   cc @lidavidm @pitrou @jacques-n @rymurr for your comments. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:06:09.943+0000",
                    "updated": "2019-10-14T14:06:09.943+0000",
                    "started": "2019-10-14T14:06:09.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327826",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334516291\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n \n Review comment:\n   Is a verb missing in this sentence?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.631+0000",
                    "updated": "2019-10-14T14:51:17.631+0000",
                    "started": "2019-10-14T14:51:17.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327861",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334507598\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n \n Review comment:\n   Calling it a \"query plan\" might be a bit presomptuous? :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.634+0000",
                    "updated": "2019-10-14T14:51:17.634+0000",
                    "started": "2019-10-14T14:51:17.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327862",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334508954\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n \n Review comment:\n   Why \"extended version\"? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.635+0000",
                    "updated": "2019-10-14T14:51:17.635+0000",
                    "started": "2019-10-14T14:51:17.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327863",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334507895\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n \n Review comment:\n   Is a verb missing in this sentence?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.735+0000",
                    "updated": "2019-10-14T14:51:17.735+0000",
                    "started": "2019-10-14T14:51:17.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327864",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334505988\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n \n Review comment:\n   Not sure it's \"upcoming\" anymore?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.736+0000",
                    "updated": "2019-10-14T14:51:17.736+0000",
                    "started": "2019-10-14T14:51:17.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327865",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334506599\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n \n Review comment:\n   \"For\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.738+0000",
                    "updated": "2019-10-14T14:51:17.738+0000",
                    "started": "2019-10-14T14:51:17.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327866",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334516462\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n+\n+As far as absolute speed, in our C++ data throughput benchmarks, we are seeing\n+end-to-end TCP throughput in excess of 2-3GB/s on localhost without TLS\n+enabled.\n+\n+```shell\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3900466413\n+Speed: 3129.63 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3631432266\n+Speed: 3361.49 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n \n Review comment:\n   I don't think we need to quote three different benchmark runs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.825+0000",
                    "updated": "2019-10-14T14:51:17.825+0000",
                    "started": "2019-10-14T14:51:17.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327867",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334516162\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n \n Review comment:\n   \"eating\"? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.934+0000",
                    "updated": "2019-10-14T14:51:17.934+0000",
                    "started": "2019-10-14T14:51:17.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327868",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334517864\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n+\n+As far as absolute speed, in our C++ data throughput benchmarks, we are seeing\n+end-to-end TCP throughput in excess of 2-3GB/s on localhost without TLS\n+enabled.\n+\n+```shell\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3900466413\n+Speed: 3129.63 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3631432266\n+Speed: 3361.49 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 4730784322\n+Speed: 2580.34 MB/s\n+```\n+\n+From this we can conclude that the machinery of Flight and gRPC adds relatively\n+little overhead, and it suggests that many real-world applications of Flight\n+will be bottlenecked on network bandwidth.\n+\n+## Horizontal Scalability: Parallel and Partitioned Data Access\n+\n+Many distributed database-type systems make use of a architectural pattern\n+where the results of client requests are routed through a \"coordinator\" and\n+sent to the client. Aside from the obvious efficiency issues of transporting a\n+dataset multiple times on its way to a client, it also presents a scalability\n+problem for getting access to very large datasets.\n+\n+We wanted Flight to enable systems to create horizontally scalable data\n+services without this issue. A client request to a dataset using the\n+`GetFlightInfo` RPC returns a list of **endpoints**, each of which contains a\n+server location and a **ticket** to send that server in a `DoGet` request to\n+obtain a part of the full dataset. To get access to the entire dataset, all of\n+the endpoints must be consumed.\n+\n+This multiple-endpoint pattern has a number of benefits:\n+\n+* Endpoints can be read by clients in parallel\n+* The service that serves the `GetFlightInfo` \"query planning\" request can\n+  delegate work to sibling services to take advantage of data locality or\n+  simply to help with load balancing\n+* Nodes in a distributed cluster can take on different roles. For example, a\n+  subset of nodes might be responsible for planning queries while other nodes\n+  exclusively fulfill data stream (\"DoGet\") requests\n+\n+Here is an example diagram of a multi-node architecture with split service\n+roles:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_complex.png\"\n+     alt=\"Flight Complex Architecture\"\n+     width=\"60%\" class=\"img-responsive\">\n+</div>\n+\n+## Actions: Extending Flight with application business logic\n+\n+While the `GetFlightInfo` request supports sending opaque serialized commands\n+when requesting a dataset, a client may need to be able to ask a server to\n+perform other kinds of operations. For example, a client may request for a\n+particular dataset to be \"pinned\" in memory so that subsequent requests from\n+other clients are served faster.\n+\n+A Flight service can thus optionally define \"actions\" which are carried out by\n+the `DoAction` RPC. An action request contains the name of the action being\n+performed and optional serialized data containing further needed\n+information. The result of an action is a gRPC stream of opaque binary results.\n+\n+An example action would be the command `'ListDatasets'` which could return a\n+stream of dataset names that are available on that server.\n+\n+Note that it is not required for a server to implement any actions, and actions\n+need not return results.\n+\n+## Encryption and Authentication\n+\n+Flight supports encryption out of the box using gRPC's built in TLS / OpenSSL\n+capabilities.\n+\n+For authentication, there are extensible authentication handlers for the client\n+and server that permit simple authentication schemes (like user and password)\n+as well as more involved authentication such as Kerberos. The Flight protocol\n+comes with a built-in `BasicAuth` so that user/password authentication out of\n+the box without custom development.\n \n Review comment:\n   Is a verb missing here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:17.940+0000",
                    "updated": "2019-10-14T14:51:17.940+0000",
                    "started": "2019-10-14T14:51:17.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327869",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334520735\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n+\n+As far as absolute speed, in our C++ data throughput benchmarks, we are seeing\n+end-to-end TCP throughput in excess of 2-3GB/s on localhost without TLS\n+enabled.\n+\n+```shell\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3900466413\n+Speed: 3129.63 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3631432266\n+Speed: 3361.49 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 4730784322\n+Speed: 2580.34 MB/s\n+```\n+\n+From this we can conclude that the machinery of Flight and gRPC adds relatively\n+little overhead, and it suggests that many real-world applications of Flight\n+will be bottlenecked on network bandwidth.\n+\n+## Horizontal Scalability: Parallel and Partitioned Data Access\n+\n+Many distributed database-type systems make use of a architectural pattern\n+where the results of client requests are routed through a \"coordinator\" and\n+sent to the client. Aside from the obvious efficiency issues of transporting a\n+dataset multiple times on its way to a client, it also presents a scalability\n+problem for getting access to very large datasets.\n+\n+We wanted Flight to enable systems to create horizontally scalable data\n+services without this issue. A client request to a dataset using the\n+`GetFlightInfo` RPC returns a list of **endpoints**, each of which contains a\n+server location and a **ticket** to send that server in a `DoGet` request to\n+obtain a part of the full dataset. To get access to the entire dataset, all of\n+the endpoints must be consumed.\n+\n+This multiple-endpoint pattern has a number of benefits:\n+\n+* Endpoints can be read by clients in parallel\n+* The service that serves the `GetFlightInfo` \"query planning\" request can\n+  delegate work to sibling services to take advantage of data locality or\n+  simply to help with load balancing\n+* Nodes in a distributed cluster can take on different roles. For example, a\n+  subset of nodes might be responsible for planning queries while other nodes\n+  exclusively fulfill data stream (\"DoGet\") requests\n+\n+Here is an example diagram of a multi-node architecture with split service\n+roles:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_complex.png\"\n+     alt=\"Flight Complex Architecture\"\n+     width=\"60%\" class=\"img-responsive\">\n+</div>\n+\n+## Actions: Extending Flight with application business logic\n+\n+While the `GetFlightInfo` request supports sending opaque serialized commands\n+when requesting a dataset, a client may need to be able to ask a server to\n+perform other kinds of operations. For example, a client may request for a\n+particular dataset to be \"pinned\" in memory so that subsequent requests from\n+other clients are served faster.\n+\n+A Flight service can thus optionally define \"actions\" which are carried out by\n+the `DoAction` RPC. An action request contains the name of the action being\n+performed and optional serialized data containing further needed\n+information. The result of an action is a gRPC stream of opaque binary results.\n+\n+An example action would be the command `'ListDatasets'` which could return a\n+stream of dataset names that are available on that server.\n+\n+Note that it is not required for a server to implement any actions, and actions\n+need not return results.\n+\n+## Encryption and Authentication\n+\n+Flight supports encryption out of the box using gRPC's built in TLS / OpenSSL\n+capabilities.\n+\n+For authentication, there are extensible authentication handlers for the client\n+and server that permit simple authentication schemes (like user and password)\n+as well as more involved authentication such as Kerberos. The Flight protocol\n+comes with a built-in `BasicAuth` so that user/password authentication out of\n+the box without custom development.\n+\n+## Middleware and Tracing\n+\n+gRPC has the concept of \"interceptors\" which have allowed us to develop\n+developer-defined \"middleware\" that can provide instrumentation of or telemetry\n+for incoming and outgoing requests. One such framework for such instrumentation\n+is the [OpenTracing][6] framework\n+\n+## gRPC, but not only gRPC\n+\n+We specify server locations for `DoGet` requests using RFC 3986 compliant\n+URIs. For example, TLS-secured gRPC may be specified like\n+`grpc+tls://$HOST:$PORT`.\n+\n+While we think that using gRPC for the \"command\" layer of Flight servers makes\n+sense, we may wish to support transport layers other than gRPC for data\n+transfer. One example is [RDMA][7].\n+\n+## Getting Started\n+\n+Documentation for Flight users is a work in progress, but the libraries\n+themselves are mature enough for beta user that are tolerant of some minor API\n \n Review comment:\n   \"beta users\" perhaps?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:18.033+0000",
                    "updated": "2019-10-14T14:51:18.033+0000",
                    "started": "2019-10-14T14:51:18.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327870",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334517343\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n+\n+As far as absolute speed, in our C++ data throughput benchmarks, we are seeing\n+end-to-end TCP throughput in excess of 2-3GB/s on localhost without TLS\n+enabled.\n+\n+```shell\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3900466413\n+Speed: 3129.63 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3631432266\n+Speed: 3361.49 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 4730784322\n+Speed: 2580.34 MB/s\n+```\n+\n+From this we can conclude that the machinery of Flight and gRPC adds relatively\n+little overhead, and it suggests that many real-world applications of Flight\n+will be bottlenecked on network bandwidth.\n+\n+## Horizontal Scalability: Parallel and Partitioned Data Access\n+\n+Many distributed database-type systems make use of a architectural pattern\n+where the results of client requests are routed through a \"coordinator\" and\n+sent to the client. Aside from the obvious efficiency issues of transporting a\n+dataset multiple times on its way to a client, it also presents a scalability\n+problem for getting access to very large datasets.\n+\n+We wanted Flight to enable systems to create horizontally scalable data\n+services without this issue. A client request to a dataset using the\n+`GetFlightInfo` RPC returns a list of **endpoints**, each of which contains a\n+server location and a **ticket** to send that server in a `DoGet` request to\n+obtain a part of the full dataset. To get access to the entire dataset, all of\n+the endpoints must be consumed.\n \n Review comment:\n   Ah... I thought the locations were alternative locations. The batches in the dataset are not ordered?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:18.035+0000",
                    "updated": "2019-10-14T14:51:18.035+0000",
                    "started": "2019-10-14T14:51:18.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327871",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334516072\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n \n Review comment:\n   Hmm... I think protobuf does its own buffer reassembly under the hood which probably does memory copies? @lidavidm do you know about that?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:18.131+0000",
                    "updated": "2019-10-14T14:51:18.131+0000",
                    "started": "2019-10-14T14:51:18.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327872",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334520627\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n+\n+As far as absolute speed, in our C++ data throughput benchmarks, we are seeing\n+end-to-end TCP throughput in excess of 2-3GB/s on localhost without TLS\n+enabled.\n+\n+```shell\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3900466413\n+Speed: 3129.63 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3631432266\n+Speed: 3361.49 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 4730784322\n+Speed: 2580.34 MB/s\n+```\n+\n+From this we can conclude that the machinery of Flight and gRPC adds relatively\n+little overhead, and it suggests that many real-world applications of Flight\n+will be bottlenecked on network bandwidth.\n+\n+## Horizontal Scalability: Parallel and Partitioned Data Access\n+\n+Many distributed database-type systems make use of a architectural pattern\n+where the results of client requests are routed through a \"coordinator\" and\n+sent to the client. Aside from the obvious efficiency issues of transporting a\n+dataset multiple times on its way to a client, it also presents a scalability\n+problem for getting access to very large datasets.\n+\n+We wanted Flight to enable systems to create horizontally scalable data\n+services without this issue. A client request to a dataset using the\n+`GetFlightInfo` RPC returns a list of **endpoints**, each of which contains a\n+server location and a **ticket** to send that server in a `DoGet` request to\n+obtain a part of the full dataset. To get access to the entire dataset, all of\n+the endpoints must be consumed.\n+\n+This multiple-endpoint pattern has a number of benefits:\n+\n+* Endpoints can be read by clients in parallel\n+* The service that serves the `GetFlightInfo` \"query planning\" request can\n+  delegate work to sibling services to take advantage of data locality or\n+  simply to help with load balancing\n+* Nodes in a distributed cluster can take on different roles. For example, a\n+  subset of nodes might be responsible for planning queries while other nodes\n+  exclusively fulfill data stream (\"DoGet\") requests\n+\n+Here is an example diagram of a multi-node architecture with split service\n+roles:\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_complex.png\"\n+     alt=\"Flight Complex Architecture\"\n+     width=\"60%\" class=\"img-responsive\">\n+</div>\n+\n+## Actions: Extending Flight with application business logic\n+\n+While the `GetFlightInfo` request supports sending opaque serialized commands\n+when requesting a dataset, a client may need to be able to ask a server to\n+perform other kinds of operations. For example, a client may request for a\n+particular dataset to be \"pinned\" in memory so that subsequent requests from\n+other clients are served faster.\n+\n+A Flight service can thus optionally define \"actions\" which are carried out by\n+the `DoAction` RPC. An action request contains the name of the action being\n+performed and optional serialized data containing further needed\n+information. The result of an action is a gRPC stream of opaque binary results.\n+\n+An example action would be the command `'ListDatasets'` which could return a\n+stream of dataset names that are available on that server.\n+\n+Note that it is not required for a server to implement any actions, and actions\n+need not return results.\n+\n+## Encryption and Authentication\n+\n+Flight supports encryption out of the box using gRPC's built in TLS / OpenSSL\n+capabilities.\n+\n+For authentication, there are extensible authentication handlers for the client\n+and server that permit simple authentication schemes (like user and password)\n+as well as more involved authentication such as Kerberos. The Flight protocol\n+comes with a built-in `BasicAuth` so that user/password authentication out of\n+the box without custom development.\n+\n+## Middleware and Tracing\n+\n+gRPC has the concept of \"interceptors\" which have allowed us to develop\n+developer-defined \"middleware\" that can provide instrumentation of or telemetry\n+for incoming and outgoing requests. One such framework for such instrumentation\n+is the [OpenTracing][6] framework\n+\n+## gRPC, but not only gRPC\n+\n+We specify server locations for `DoGet` requests using RFC 3986 compliant\n+URIs. For example, TLS-secured gRPC may be specified like\n+`grpc+tls://$HOST:$PORT`.\n+\n+While we think that using gRPC for the \"command\" layer of Flight servers makes\n+sense, we may wish to support transport layers other than gRPC for data\n+transfer. One example is [RDMA][7].\n \n Review comment:\n   Is RDMA a layer at the same level as gRPC? It would seem it's more at the Ethernet (or perhaps IP) level. i.e. you still need some RPC protocol over that.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T14:51:18.183+0000",
                    "updated": "2019-10-14T14:51:18.183+0000",
                    "started": "2019-10-14T14:51:18.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327873",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#issuecomment-541736362\n \n \n   I hadn't proofread yet so I'll fix up these issues now =) \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:09:24.860+0000",
                    "updated": "2019-10-14T15:09:24.860+0000",
                    "started": "2019-10-14T15:09:24.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327886",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334535206\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n \n Review comment:\n   We're intercepting the payloads before protobuf can touch the messages -- that's part of the wily code that was required to trick gRPC into invoking our custom deserializer in serialization_internal.cc, for example.\r\n   \r\n   I'm adding a sentence here to clarify. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:32:36.418+0000",
                    "updated": "2019-10-14T15:32:36.418+0000",
                    "started": "2019-10-14T15:32:36.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327893",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334530422\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n \n Review comment:\n   fixed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:32:36.430+0000",
                    "updated": "2019-10-14T15:32:36.430+0000",
                    "started": "2019-10-14T15:32:36.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327894",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334530565\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n \n Review comment:\n   fixed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:32:36.433+0000",
                    "updated": "2019-10-14T15:32:36.433+0000",
                    "started": "2019-10-14T15:32:36.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327895",
                    "issueId": "13245550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/worklog/327896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #35: ARROW-5971: [Website] Blog post introducing Arrow Flight\nURL: https://github.com/apache/arrow-site/pull/35#discussion_r334537169\n \n \n\n ##########\n File path: _posts/2019-09-30-introducing-arrow-flight.md\n ##########\n @@ -0,0 +1,260 @@\n+---\n+layout: post\n+title: \"Introducing Apache Arrow Flight: A Framework for Fast Data Transport\"\n+description: \"This post introduces Arrow Flight, a framework for building high\n+performance data services. We have been building Flight over the last 18 months\n+and are looking for developers and users to get involved.\"\n+date: \"2019-10-13 00:00:00 -0600\"\n+author: Wes McKinney\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Over the last 18 months, the Apache Arrow community has been busy designing and\n+implementing **Flight**, a new general-purpose client-server framework to\n+simplify high performance transport of large datasets over network interfaces.\n+\n+Flight initially is focused on optimized transport of the Arrow columnar format\n+(i.e. \"Arrow record batches\") over [gRPC][1], Google's popular HTTP/2-based\n+general-purpose RPC library and framework. While we have focused on integration\n+with gRPC, as a development framework Flight is not intended to be exclusive to\n+gRPC.\n+\n+In the upcoming 0.15.0 Apache Arrow release, we have developed Flight\n+implementations in C++ (with Python bindings) and Java. These libraries are\n+ready for beta users who are comfortable being on the bleeding edge while we\n+continue to refine some low-level details in the Flight internals.\n+\n+## Motivation\n+\n+Many people have experienced the pain associated with accessing large datasets\n+over a network. There are many different transfer protocols and tools for\n+reading datasets from remote data services, such as ODBC and JDBC. Over the\n+last 10 years, file-based data warehousing in formats like CSV, Avro, and\n+Parquet has become popular, but this also presents challenges as raw data must\n+be transferred to local hosts before being deserialized.\n+\n+The work we have done since the beginning of Apache Arrow holds exciting\n+promise for accelerating data transport in a number of ways. The [Arrow\n+columnar format][2] has key features that can help us:\n+\n+* It is an \"on-the-wire\" representation of tabular data that does not require\n+  deserialization on receipt\n+* Its natural mode is that of \"streaming batches\", larger datasets are\n+  transported a batch of rows at a time (called \"record batches\" in Arrow\n+  parlance). In this post we will talk about \"data streams\", these are\n+  sequences of Arrow record batches using the project's binary protocol\n+* The format is language-independent and now has library support in 11\n+  languages and counting. For\n+\n+Implementations of standard protocols like ODBC generally implement their own\n+custom on-wire binary protocols that must be marshalled to and from each\n+library's public interface. The performance of ODBC or JDBC libraries varies\n+greatly from case to case.\n+\n+Our design goal for Flight is to create a new protocol for data services that\n+uses the Arrow columnar format as both the over-the-wire data representation as\n+well as the public API presented to developers. In doing so, we reduce or\n+remove the serialization costs associated with data transport and increase the\n+overall efficiency of distributed data systems. Additionally, two systems that\n+are already using Apache Arrow for other purposes can communicate data to each\n+other with extreme efficiency.\n+\n+## Flight Basics\n+\n+The Arrow Flight libraries provide a development framework for implementing a\n+service that can send and receive data streams. A Flight server supports\n+several basic kinds of requests:\n+\n+* **ListFlights**: return a list of available data streams\n+* **GetSchema**: return the schema for a data stream\n+* **GetFlightInfo**: return a \"query plan\" for a dataset of interest, possibly\n+  requiring consuming multiple data streams. This request can accept custom\n+  serialized commands containing, for example, your specific application\n+  parameters.\n+* **DoGet**: send a data stream to a client\n+* **DoPut**: receive a data stream from a client\n+* **DoAction**: a perform an implementation-specific action and\n+  return any results, i.e. a generalized function call\n+* **ListActions**: return a list of available action types\n+\n+A simple Flight setup might consist of a single server to which clients connect\n+and make DoGet requests.\n+\n+<div align=\"center\">\n+<img src=\"{{ site.baseurl }}/img/20191014_flight_simple.png\"\n+     alt=\"Flight Simple Architecture\"\n+     width=\"50%\" class=\"img-responsive\">\n+</div>\n+\n+## Optimizing Data Throughput over gRPC\n+\n+While using a general-purpose messaging library like gRPC has numerous specific\n+benefits beyond the obvious ones (taking advantage of all the engineering that\n+Google has done on the problem).\n+\n+The best-supported way to use gRPC is to define services using an extended\n+version of [Protocol Buffers][3] aka \"Protobuf\". A Protobuf plugin for gRPC\n+generates a gRPC service that you can implement in your applications. RPC\n+commands and data messages are serialized using the [Protobuf wire\n+format][4]. Because we use \"vanilla gRPC and Protocol Buffers\", gRPC clients\n+that are ignorant of the Arrow columnar format can still interact with Flight\n+services and handle the Arrow data opaquely.\n+\n+The main data-related Protobuf type in Flight is called `FlightData`. Reading\n+and writing Protobuf messages in general is not free, so we implemented some\n+low-level optimizations in gRPC in both C++ and Java to do the following:\n+\n+* Generate the Protobuf wire format for `FlightData` including the Arrow record\n+  batch being sent without going through any intermediate memory copying or\n+  serialization steps.\n+* Reconstruct a Arrow record batch from the Protobuf representation of\n+  `FlightData` without any memory copying or deserialization.\n+\n+In a sense we are \"having our cake and eat it, too\". Flight implementations\n+having these optimizations will have better performance, while naive gRPC\n+clients talking to the Flight service and use a Protobuf library to deserialize\n+`FlightData` (though with some performance penalty).\n+\n+As far as absolute speed, in our C++ data throughput benchmarks, we are seeing\n+end-to-end TCP throughput in excess of 2-3GB/s on localhost without TLS\n+enabled.\n+\n+```shell\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3900466413\n+Speed: 3129.63 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 3631432266\n+Speed: 3361.49 MB/s\n+\n+$ ./arrow-flight-benchmark --records_per_stream 100000000\n+Bytes read: 12800000000\n+Nanos: 4730784322\n+Speed: 2580.34 MB/s\n+```\n+\n+From this we can conclude that the machinery of Flight and gRPC adds relatively\n+little overhead, and it suggests that many real-world applications of Flight\n+will be bottlenecked on network bandwidth.\n+\n+## Horizontal Scalability: Parallel and Partitioned Data Access\n+\n+Many distributed database-type systems make use of a architectural pattern\n+where the results of client requests are routed through a \"coordinator\" and\n+sent to the client. Aside from the obvious efficiency issues of transporting a\n+dataset multiple times on its way to a client, it also presents a scalability\n+problem for getting access to very large datasets.\n+\n+We wanted Flight to enable systems to create horizontally scalable data\n+services without this issue. A client request to a dataset using the\n+`GetFlightInfo` RPC returns a list of **endpoints**, each of which contains a\n+server location and a **ticket** to send that server in a `DoGet` request to\n+obtain a part of the full dataset. To get access to the entire dataset, all of\n+the endpoints must be consumed.\n \n Review comment:\n   Correct, they are not alternatives. \r\n   \r\n   By default the streams are not ordered. You can use the `app_metadata` field in `FlightData` to include ordinal information if it's needed. I added a sentence to clarify\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:32:36.516+0000",
                    "updated": "2019-10-14T15:32:36.516+0000",
                    "started": "2019-10-14T15:32:36.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327896",
                    "issueId": "13245550"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1bf6f0e7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e187923[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b8ae64a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@26d65379[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ef7624c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4361e1aa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fa5f73a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2bfc362c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6edcc41d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@227c14dd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32f03b8f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@78f726ab[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 15 14:32:43 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-15T14:32:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5971/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-07-17T15:35:09.000+0000",
        "updated": "2019-10-15T14:32:43.000+0000",
        "timeoriginalestimate": null,
        "description": "I think it's a good time to be bringing more attention to our work over the last 12-14 months on Arrow Flight. \r\n\r\nI would be OK to draft an initial version of the blog post, and I can circulate to others for review / edit / comment. If there are particular benchmarks you would like to see included, contributing code for that would also be helpful. My plan would be to show tcp throughput on localhost, and node-to-node throughput on a local gigabit ethernet network. I think the localhost throughput is important to show that Flight is a tool that you would want to reach for for faster throughput in high performance networking (e.g. 10/40 gigabit)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Website] Blog post introducing Arrow Flight",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/comment/16887246",
                    "id": "16887246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'd be happy to look over anything. We're also working on a post of our own, though that probably won't come in the near future.\r\n\r\nIt might be interesting to show Python numbers as well - it actually performs better than Java in our tests (don't think I can share actual data though).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-07-17T17:05:55.841+0000",
                    "updated": "2019-07-17T17:05:55.841+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/comment/16887257",
                    "id": "16887257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yeah I was thinking to use Python for all the benchmarking, both server and client. Good dogfooding exercise",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-07-17T17:16:11.959+0000",
                    "updated": "2019-07-17T17:16:11.959+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13245550/comment/16951968",
                    "id": "16951968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 35\n[https://github.com/apache/arrow-site/pull/35]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-15T14:32:43.106+0000",
                    "updated": "2019-10-15T14:32:43.106+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z04rig:",
        "customfield_12314139": null
    }
}