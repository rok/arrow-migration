{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13361955",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955",
    "key": "ARROW-11843",
    "fields": {
        "parent": {
            "id": "13360743",
            "key": "ARROW-11770",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13360743",
            "fields": {
                "summary": "[C++] Add asynchronous read to readers",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616538",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616538",
                "type": {
                    "id": "12310360",
                    "name": "Dependent",
                    "inward": "Dependent",
                    "outward": "Dependent",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310360"
                },
                "inwardIssue": {
                    "id": "13381461",
                    "key": "ARROW-12916",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381461",
                    "fields": {
                        "summary": "[C++][Parquet] Always transfer to executor in Parquet AsyncGenerator",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12616975",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616975",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13375829",
                    "key": "ARROW-12597",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829",
                    "fields": {
                        "summary": "[C++] Implement OptionalParallelForAsync",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 33000,
            "total": 33000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 33000,
            "total": 33000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11843/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 55,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/560125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620\n\n\n   This provides an async Parquet reader where the unit of concurrency is a single row group. \r\n   \r\n   There are some caveats still:\r\n   - [ ] This implementation is unsafe if pre_buffer=True in ArrowReaderProperties. Instead, the user needs to manually call file_reader()->parquet_reader()->PreBuffer(). I expect the kind of application using the async reader would also want to control this anyways, so I'd lean towards just failing the call if the user has pre_buffer=True, but the other commit in this PR provides a version that is safe with pre_buffer=True at the cost of some code duplication.\r\n   - [ ] There are some TODOs scattered around for after #9607 is merged.\r\n   - [ ] Docstrings need writing.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T20:41:32.548+0000",
                    "updated": "2021-03-02T20:41:32.548+0000",
                    "started": "2021-03-02T20:41:32.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560125",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/560182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-789283600\n\n\n   https://issues.apache.org/jira/browse/ARROW-11843\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T22:56:44.882+0000",
                    "updated": "2021-03-02T22:56:44.882+0000",
                    "started": "2021-03-02T22:56:44.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560182",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-795970642\n\n\n   CC @westonpace here as well. `AsyncGenerator<vector<shared_ptr<RecordBatch>>>` might be a little annoying to work with if the target type is `AsyncGenerator<shared_ptr<RecordBatch>>`, thoughts?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T19:38:06.275+0000",
                    "updated": "2021-03-10T19:38:06.275+0000",
                    "started": "2021-03-10T19:38:06.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564013",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591875021\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n+                              &ReadOneRowGroup, self, row_group, column_indices));\n+    return fut;\n+  }\n+\n+ private:\n+  static ::arrow::Result<Item> ReadOneRowGroup(FileReaderImpl* self, const int row_group,\n+                                               const std::vector<int>& column_indices) {\n+    std::shared_ptr<::arrow::Table> table;\n+    // Call the version that skips bound checks/pre-buffering, since we've done that\n+    // already\n+    RETURN_NOT_OK(self->ReadRowGroupsImpl({row_group}, column_indices, &table));\n+    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+    ::arrow::RecordBatchVector batches;\n+    while (true) {\n+      std::shared_ptr<::arrow::RecordBatch> batch;\n+      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n+      if (!batch) {\n+        break;\n+      }\n+      batches.push_back(batch);\n+    }\n+    return ::arrow::util::make_optional<::arrow::RecordBatchVector>(std::move(batches));\n+  }\n+\n+  FileReaderImpl* self_;\n+  size_t index_;\n+  std::vector<int> row_groups_;\n+  std::vector<int> column_indices_;\n+};\n+\n+::arrow::Result<\n+    ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+FileReaderImpl::GetRecordBatchGenerator(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices) {\n+  RETURN_NOT_OK(BoundsCheck(row_groups, column_indices));\n+  if (reader_properties_.pre_buffer()) {\n+    // PARQUET-1698/PARQUET-1820: pre-buffer row groups/column chunks if enabled\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    reader_->PreBuffer(row_groups, column_indices, reader_properties_.io_context(),\n+                       reader_properties_.cache_options());\n+    END_PARQUET_CATCH_EXCEPTIONS\n+  }\n+  // N.B. we (and underlying Parquet reader) must outlive generator\n+  return RowGroupGenerator(this, row_groups, column_indices);\n\nReview comment:\n       Hmm, historically that hasn't been the precedent for the generators.  They keep an ownership stake in their resources.  Is there some reason the generator can't have a shared pointer to the reader?\r\n   \r\n   Consider the dataset scanning example.  The scan tasks will be asked for a generator and the scanner will keep track of the generator but the scanner will have no idea what the reader is.  Who is keeping track of the reader there?  What if the scanner simply discarded the scan task after it got a generator from it.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n\nReview comment:\n       This will be a problem.  I think this task will block (I'm assuming `ReadRowGroupsImpl` is synchronous and blocking?)  Blocking tasks should not be on the CPU pool.  You could put it on the I/O pool but that isn't necessarily ideal either as it complicates sizing the I/O pool.\r\n   \r\n   Ideally you want something like `reader_->PreBuffer(row_groups, ...).Then(NonBlockingReadRowGroupsImpl)`.\r\n   \r\n   I think you might kind of get away with it because the task they are waiting on is on the I/O thread pool (I assume the prebuffering tasks are on the I/O pool) so you won't have the nested deadlock problem.\r\n   \r\n   However, it will not have ideal performance.  If you are reading a bunch of files you will have some CPU threads tied up waiting that could be doing work.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.h\n##########\n@@ -175,6 +177,22 @@ class PARQUET_EXPORT FileReader {\n       const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n       std::unique_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n+  /// \\brief Return a generator of record batch vectors, where each vector represents\n+  ///     the contents of a row group from row_group_indices, whose columns are selected\n+  ///     by column_indices.\n+  ///\n+  /// An empty optional indicates the end of the generator.\n+  ///\n+  /// Note that the ordering in row_group_indices and column_indices matter. FileReaders\n+  /// must outlive their generators.\n+  ///\n+  /// \\returns error Result if either row_group_indices or column_indices contains an\n+  ///     invalid index\n+  virtual ::arrow::Result<\n\nReview comment:\n       Answering your question I agree it would be better to have `AsyncGenerator<RecordBatch>` for consistency with the other readers.  You can use `MakeVectorGenerator` to get `AsyncGenerator<AsyncGenerator<RecordBatch>>`.  Then apply `MakeConcatMapGenerator` to the result to get to `AsyncGenerator<RecordBatch>`\n\n##########\nFile path: cpp/src/parquet/arrow/reader.h\n##########\n@@ -175,6 +177,22 @@ class PARQUET_EXPORT FileReader {\n       const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n       std::unique_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n+  /// \\brief Return a generator of record batch vectors, where each vector represents\n+  ///     the contents of a row group from row_group_indices, whose columns are selected\n+  ///     by column_indices.\n+  ///\n+  /// An empty optional indicates the end of the generator.\n+  ///\n+  /// Note that the ordering in row_group_indices and column_indices matter. FileReaders\n+  /// must outlive their generators.\n+  ///\n+  /// \\returns error Result if either row_group_indices or column_indices contains an\n+  ///     invalid index\n+  virtual ::arrow::Result<\n+      ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+  GetRecordBatchGenerator(const std::vector<int>& row_group_indices,\n\nReview comment:\n       Would the scan task be the thing providing the `row_group_indices`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T21:26:42.526+0000",
                    "updated": "2021-03-10T21:26:42.526+0000",
                    "started": "2021-03-10T21:26:42.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564054",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591890348\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n\nReview comment:\n       Ah, ok - I was envisioning that the caller would explicitly buffer beforehand (since we had been talking about splitting up ScanTask in that way) but we can have this manage buffering internally as well. (Either way, either the IPC reader or the Parquet reader will need some refactoring to meet Datasets' needs.)\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n+                              &ReadOneRowGroup, self, row_group, column_indices));\n+    return fut;\n+  }\n+\n+ private:\n+  static ::arrow::Result<Item> ReadOneRowGroup(FileReaderImpl* self, const int row_group,\n+                                               const std::vector<int>& column_indices) {\n+    std::shared_ptr<::arrow::Table> table;\n+    // Call the version that skips bound checks/pre-buffering, since we've done that\n+    // already\n+    RETURN_NOT_OK(self->ReadRowGroupsImpl({row_group}, column_indices, &table));\n+    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+    ::arrow::RecordBatchVector batches;\n+    while (true) {\n+      std::shared_ptr<::arrow::RecordBatch> batch;\n+      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n+      if (!batch) {\n+        break;\n+      }\n+      batches.push_back(batch);\n+    }\n+    return ::arrow::util::make_optional<::arrow::RecordBatchVector>(std::move(batches));\n+  }\n+\n+  FileReaderImpl* self_;\n+  size_t index_;\n+  std::vector<int> row_groups_;\n+  std::vector<int> column_indices_;\n+};\n+\n+::arrow::Result<\n+    ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+FileReaderImpl::GetRecordBatchGenerator(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices) {\n+  RETURN_NOT_OK(BoundsCheck(row_groups, column_indices));\n+  if (reader_properties_.pre_buffer()) {\n+    // PARQUET-1698/PARQUET-1820: pre-buffer row groups/column chunks if enabled\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    reader_->PreBuffer(row_groups, column_indices, reader_properties_.io_context(),\n+                       reader_properties_.cache_options());\n+    END_PARQUET_CATCH_EXCEPTIONS\n+  }\n+  // N.B. we (and underlying Parquet reader) must outlive generator\n+  return RowGroupGenerator(this, row_groups, column_indices);\n\nReview comment:\n       Note that it's true for the RecordBatchReader for Parquet as well; if you look at ParquetScanTask in dataset/file_parquet.cc, there's a similar note there. I think it's solely because we don't have enable_shared_from_this for the Parquet readers, I'm not sure if there's a reason why we omit that.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T21:37:59.001+0000",
                    "updated": "2021-03-10T21:37:59.001+0000",
                    "started": "2021-03-10T21:37:59.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564063",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591890623\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.h\n##########\n@@ -175,6 +177,22 @@ class PARQUET_EXPORT FileReader {\n       const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n       std::unique_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n+  /// \\brief Return a generator of record batch vectors, where each vector represents\n+  ///     the contents of a row group from row_group_indices, whose columns are selected\n+  ///     by column_indices.\n+  ///\n+  /// An empty optional indicates the end of the generator.\n+  ///\n+  /// Note that the ordering in row_group_indices and column_indices matter. FileReaders\n+  /// must outlive their generators.\n+  ///\n+  /// \\returns error Result if either row_group_indices or column_indices contains an\n+  ///     invalid index\n+  virtual ::arrow::Result<\n+      ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+  GetRecordBatchGenerator(const std::vector<int>& row_group_indices,\n\nReview comment:\n       Yes, currently scan tasks know which row group index they correspond to. As part of this we may want to make scan tasks less granular than a single row group as discussed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T21:38:21.925+0000",
                    "updated": "2021-03-10T21:38:21.925+0000",
                    "started": "2021-03-10T21:38:21.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564064",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591935894\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n\nReview comment:\n       Ok, if you plan to do that buffering elsewhere then this is fine.  I guess I misunderstood then.  So the point in breaking things into tasks here is to allow for parallelism?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T23:02:22.925+0000",
                    "updated": "2021-03-10T23:02:22.925+0000",
                    "started": "2021-03-10T23:02:22.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564127",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591937851\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n+                              &ReadOneRowGroup, self, row_group, column_indices));\n+    return fut;\n+  }\n+\n+ private:\n+  static ::arrow::Result<Item> ReadOneRowGroup(FileReaderImpl* self, const int row_group,\n+                                               const std::vector<int>& column_indices) {\n+    std::shared_ptr<::arrow::Table> table;\n+    // Call the version that skips bound checks/pre-buffering, since we've done that\n+    // already\n+    RETURN_NOT_OK(self->ReadRowGroupsImpl({row_group}, column_indices, &table));\n+    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+    ::arrow::RecordBatchVector batches;\n+    while (true) {\n+      std::shared_ptr<::arrow::RecordBatch> batch;\n+      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n+      if (!batch) {\n+        break;\n+      }\n+      batches.push_back(batch);\n+    }\n+    return ::arrow::util::make_optional<::arrow::RecordBatchVector>(std::move(batches));\n+  }\n+\n+  FileReaderImpl* self_;\n+  size_t index_;\n+  std::vector<int> row_groups_;\n+  std::vector<int> column_indices_;\n+};\n+\n+::arrow::Result<\n+    ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+FileReaderImpl::GetRecordBatchGenerator(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices) {\n+  RETURN_NOT_OK(BoundsCheck(row_groups, column_indices));\n+  if (reader_properties_.pre_buffer()) {\n+    // PARQUET-1698/PARQUET-1820: pre-buffer row groups/column chunks if enabled\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    reader_->PreBuffer(row_groups, column_indices, reader_properties_.io_context(),\n+                       reader_properties_.cache_options());\n+    END_PARQUET_CATCH_EXCEPTIONS\n+  }\n+  // N.B. we (and underlying Parquet reader) must outlive generator\n+  return RowGroupGenerator(this, row_groups, column_indices);\n\nReview comment:\n       Ok, I might be breaking this.  The current Scanner::ToTable keeps the scan task alive while it iterates the batches...\r\n   ```\r\n   ARROW_ASSIGN_OR_RAISE(auto batch_it, scan_task->Execute());\r\n   ARROW_ASSIGN_OR_RAISE(auto local, batch_it.ToVector());\r\n   state->Emplace(std::move(local), id);\r\n   ```\r\n   However, the async version does not...\r\n   ```\r\n   ARROW_ASSIGN_OR_RAISE(auto batch_gen, scan_task->ExecuteAsync());\r\n   auto fut =\r\n       CollectAsyncGenerator(std::move(batch_gen))\r\n           .Then([state, id](const RecordBatchVector& rbs) -> util::optional<bool> {\r\n             state->Emplace(rbs, id);\r\n             return true;\r\n           });\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T23:06:31.621+0000",
                    "updated": "2021-03-10T23:06:31.621+0000",
                    "started": "2021-03-10T23:06:31.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564134",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591937851\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n+                              &ReadOneRowGroup, self, row_group, column_indices));\n+    return fut;\n+  }\n+\n+ private:\n+  static ::arrow::Result<Item> ReadOneRowGroup(FileReaderImpl* self, const int row_group,\n+                                               const std::vector<int>& column_indices) {\n+    std::shared_ptr<::arrow::Table> table;\n+    // Call the version that skips bound checks/pre-buffering, since we've done that\n+    // already\n+    RETURN_NOT_OK(self->ReadRowGroupsImpl({row_group}, column_indices, &table));\n+    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+    ::arrow::RecordBatchVector batches;\n+    while (true) {\n+      std::shared_ptr<::arrow::RecordBatch> batch;\n+      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n+      if (!batch) {\n+        break;\n+      }\n+      batches.push_back(batch);\n+    }\n+    return ::arrow::util::make_optional<::arrow::RecordBatchVector>(std::move(batches));\n+  }\n+\n+  FileReaderImpl* self_;\n+  size_t index_;\n+  std::vector<int> row_groups_;\n+  std::vector<int> column_indices_;\n+};\n+\n+::arrow::Result<\n+    ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+FileReaderImpl::GetRecordBatchGenerator(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices) {\n+  RETURN_NOT_OK(BoundsCheck(row_groups, column_indices));\n+  if (reader_properties_.pre_buffer()) {\n+    // PARQUET-1698/PARQUET-1820: pre-buffer row groups/column chunks if enabled\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    reader_->PreBuffer(row_groups, column_indices, reader_properties_.io_context(),\n+                       reader_properties_.cache_options());\n+    END_PARQUET_CATCH_EXCEPTIONS\n+  }\n+  // N.B. we (and underlying Parquet reader) must outlive generator\n+  return RowGroupGenerator(this, row_groups, column_indices);\n\nReview comment:\n       Ok, I might be breaking this.  The current Scanner::ToTable keeps the scan task alive while it iterates the batches...\r\n   ```\r\n   ARROW_ASSIGN_OR_RAISE(auto batch_it, scan_task->Execute());\r\n   ARROW_ASSIGN_OR_RAISE(auto local, batch_it.ToVector());\r\n   state->Emplace(std::move(local), id);\r\n   ```\r\n   However, the async version does not...\r\n   ```\r\n   ARROW_ASSIGN_OR_RAISE(auto batch_gen, scan_task->ExecuteAsync());\r\n   return CollectAsyncGenerator(std::move(batch_gen))\r\n           .Then([state, id](const RecordBatchVector& rbs) -> util::optional<bool> {\r\n             state->Emplace(rbs, id);\r\n             return true;\r\n           });\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T23:06:47.227+0000",
                    "updated": "2021-03-10T23:06:47.227+0000",
                    "started": "2021-03-10T23:06:47.226+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564135",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591938334\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n+                              &ReadOneRowGroup, self, row_group, column_indices));\n+    return fut;\n+  }\n+\n+ private:\n+  static ::arrow::Result<Item> ReadOneRowGroup(FileReaderImpl* self, const int row_group,\n+                                               const std::vector<int>& column_indices) {\n+    std::shared_ptr<::arrow::Table> table;\n+    // Call the version that skips bound checks/pre-buffering, since we've done that\n+    // already\n+    RETURN_NOT_OK(self->ReadRowGroupsImpl({row_group}, column_indices, &table));\n+    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+    ::arrow::RecordBatchVector batches;\n+    while (true) {\n+      std::shared_ptr<::arrow::RecordBatch> batch;\n+      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n+      if (!batch) {\n+        break;\n+      }\n+      batches.push_back(batch);\n+    }\n+    return ::arrow::util::make_optional<::arrow::RecordBatchVector>(std::move(batches));\n+  }\n+\n+  FileReaderImpl* self_;\n+  size_t index_;\n+  std::vector<int> row_groups_;\n+  std::vector<int> column_indices_;\n+};\n+\n+::arrow::Result<\n+    ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+FileReaderImpl::GetRecordBatchGenerator(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices) {\n+  RETURN_NOT_OK(BoundsCheck(row_groups, column_indices));\n+  if (reader_properties_.pre_buffer()) {\n+    // PARQUET-1698/PARQUET-1820: pre-buffer row groups/column chunks if enabled\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    reader_->PreBuffer(row_groups, column_indices, reader_properties_.io_context(),\n+                       reader_properties_.cache_options());\n+    END_PARQUET_CATCH_EXCEPTIONS\n+  }\n+  // N.B. we (and underlying Parquet reader) must outlive generator\n+  return RowGroupGenerator(this, row_groups, column_indices);\n\nReview comment:\n       I can go ahead and copy the scan task into the `Then` callback to preserve its lifetime but can you add a comment to `ScanTask` explaining this requirement?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T23:07:24.053+0000",
                    "updated": "2021-03-10T23:07:24.053+0000",
                    "started": "2021-03-10T23:07:24.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564136",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591953537\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n\nReview comment:\n       Yes, this is to allow for parallelism when scanning a Parquet file. Though as I think about it, maybe this isn't necessary? We can do the parallelism at the scan task level already.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T23:30:07.514+0000",
                    "updated": "2021-03-10T23:30:07.514+0000",
                    "started": "2021-03-10T23:30:07.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564150",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/564151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#discussion_r591953765\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n\nReview comment:\n       Maybe we can hold this until ARROW-7001 is through and then we can see what exactly we need to be reentrant to get the pipeline we want.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -967,6 +978,74 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_groups,\n   return Status::OK();\n }\n \n+/// Given a file reader and a list of row groups, this is a generator of record\n+/// batch vectors (where each vector is the contents of a single row group).\n+class RowGroupGenerator {\n+ public:\n+  using Item = ::arrow::util::optional<::arrow::RecordBatchVector>;\n+\n+  explicit RowGroupGenerator(FileReaderImpl* self, std::vector<int> row_groups,\n+                             std::vector<int> column_indices)\n+      : self_(self),\n+        index_(0),\n+        row_groups_(std::move(row_groups)),\n+        column_indices_(std::move(column_indices)) {}\n+\n+  ::arrow::Future<Item> operator()() {\n+    if (index_ >= row_groups_.size()) {\n+      return ::arrow::Future<Item>::MakeFinished(::arrow::util::nullopt);\n+    }\n+    int row_group = row_groups_[index_++];\n+    FileReaderImpl* self = self_;\n+    std::vector<int> column_indices = column_indices_;\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          ::arrow::internal::GetCpuThreadPool()->Submit(\n+                              &ReadOneRowGroup, self, row_group, column_indices));\n+    return fut;\n+  }\n+\n+ private:\n+  static ::arrow::Result<Item> ReadOneRowGroup(FileReaderImpl* self, const int row_group,\n+                                               const std::vector<int>& column_indices) {\n+    std::shared_ptr<::arrow::Table> table;\n+    // Call the version that skips bound checks/pre-buffering, since we've done that\n+    // already\n+    RETURN_NOT_OK(self->ReadRowGroupsImpl({row_group}, column_indices, &table));\n+    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+    ::arrow::RecordBatchVector batches;\n+    while (true) {\n+      std::shared_ptr<::arrow::RecordBatch> batch;\n+      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n+      if (!batch) {\n+        break;\n+      }\n+      batches.push_back(batch);\n+    }\n+    return ::arrow::util::make_optional<::arrow::RecordBatchVector>(std::move(batches));\n+  }\n+\n+  FileReaderImpl* self_;\n+  size_t index_;\n+  std::vector<int> row_groups_;\n+  std::vector<int> column_indices_;\n+};\n+\n+::arrow::Result<\n+    ::arrow::AsyncGenerator<::arrow::util::optional<::arrow::RecordBatchVector>>>\n+FileReaderImpl::GetRecordBatchGenerator(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices) {\n+  RETURN_NOT_OK(BoundsCheck(row_groups, column_indices));\n+  if (reader_properties_.pre_buffer()) {\n+    // PARQUET-1698/PARQUET-1820: pre-buffer row groups/column chunks if enabled\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    reader_->PreBuffer(row_groups, column_indices, reader_properties_.io_context(),\n+                       reader_properties_.cache_options());\n+    END_PARQUET_CATCH_EXCEPTIONS\n+  }\n+  // N.B. we (and underlying Parquet reader) must outlive generator\n+  return RowGroupGenerator(this, row_groups, column_indices);\n\nReview comment:\n       I think _that's_ supposed to be ok: iterating the scan task should implicitly keep the scan task alive, what I meant is that the scan task is explicitly keeping the Parquet reader alive.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T23:30:41.183+0000",
                    "updated": "2021-03-10T23:30:41.183+0000",
                    "started": "2021-03-10T23:30:41.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564151",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/575746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812174345\n\n\n   (FWIW, I'm currently reworking this so that it gives just `AsyncGenerator<RecordBatch>`, and to manage pre-buffering internally so that the user doesn't have to worry about it, similar to CSV and IPC. The granularity of pre-buffering will be per-row-group which is not ideal for small row groups, but that could be improved.)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T21:10:17.948+0000",
                    "updated": "2021-04-01T21:10:17.948+0000",
                    "started": "2021-04-01T21:10:17.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575746",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/575772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812194926\n\n\n   What I pushed is still not quite what I want. Ideally, we'd be able to ask the read cache for a future that finishes when all I/O for the given row group has completed. That way, we can then kick off a decoding task. On master, currently, you just spawn a bunch of tasks that block and wait for I/O and then proceed (wasting threads), and in this PR, we have hijinks to manually pre-buffer each row group separately (wasting the effectiveness of pre-buffering).\r\n   \r\n   Also, the range cache will have to be swappable for something that just does normal file I/O for the non-S3 case so that local file scans are still reasonable.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T21:56:14.049+0000",
                    "updated": "2021-04-01T21:56:14.049+0000",
                    "started": "2021-04-01T21:56:14.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575772",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/575774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812194926\n\n\n   What I pushed is still not quite what I want. Ideally, we'd be able to ask the read cache for a future that finishes when all I/O for the given row group has completed. That way, we can then kick off a decoding task. On master, currently, you just spawn a bunch of tasks that block and wait for I/O and then proceed (wasting threads), and in this PR, we have hijinks to manually pre-buffer each row group separately (wasting the effectiveness of pre-buffering).\r\n   \r\n   That is, we should be able to say\r\n   \r\n   ```\r\n   reader->PreBuffer(row_groups, columns)\r\n   ...\r\n   // I/O generator\r\n   return reader->WhenBuffered({current_row_group}, {columns});\r\n   \r\n   // Decoding generator\r\n   return cpu_executor_->Transfer(io_generator()).Then([]() { return ReadRowGroup(current_row_group); });\r\n   ```\r\n   \r\n   and this will let us coalesce read ranges across row groups while only performing work on the CPU pool when it's truly ready.\r\n   \r\n   Also, the range cache will have to be swappable for something that just does normal file I/O for the non-S3 case so that local file scans are still reasonable.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T21:59:26.652+0000",
                    "updated": "2021-04-01T21:59:26.652+0000",
                    "started": "2021-04-01T21:59:26.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575774",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/576121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812552565\n\n\n   Ok, something wonky is going on here, but\u2026\r\n   ```\r\n   --------------------------------------------------------------------------------------------\r\n   Benchmark                                  Time             CPU   Iterations UserCounters...\r\n   --------------------------------------------------------------------------------------------\r\n   BM_ReadMultipleRowGroups            38393176 ns     38392591 ns           14 bytes_per_second=2.0349G/s items_per_second=2.18495G/s\r\n   BM_ReadMultipleRowGroupsGenerator   37526258 ns       123436 ns          100 bytes_per_second=632.918G/s items_per_second=679.59G/s\r\n   ```\r\n   I confirmed that both benchmarks read the same number of rows/columns, but this still seems rather unbelievable/there must be some sort of measurement error.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T14:23:45.181+0000",
                    "updated": "2021-04-02T14:23:45.181+0000",
                    "started": "2021-04-02T14:23:45.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576121",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/576276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812679493\n\n\n   The benchmark discrepancy is simply because the generator was putting each row group on its own thread. The difference goes away if we don't force transfer onto a background thread. \r\n   \r\n   With that fixed, here are benchmarks of reentrant Parquet + ARROW-7001 on EC2:\r\n   \r\n   ![Local Median Scan Time](https://user-images.githubusercontent.com/327919/113447613-37922900-93c8-11eb-97af-82daaa2520a1.png)\r\n   (note that Arrow 3.0 didn't have pre-buffering, so the results are duplicated here)\r\n   ![S3 Median Scan Time](https://user-images.githubusercontent.com/327919/113447615-382abf80-93c8-11eb-8507-5a6782b97edf.png)\r\n   \r\n   - Prebuffering appears to have no impact locally, so maybe we should always enable it.\r\n   - Non-prebuffered cases (except Arrow 3.0) are omitted from the S3 graphs because it's so much slower and skews the graphs. That is, ARROW-7001 without prebuffering took about ~75 seconds to read 16 files from S3, which is a significant regression from even the non-prebuffered Arrow 3.0 case.\r\n   - Local files have heavily regressed and need more investigation.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T19:35:01.593+0000",
                    "updated": "2021-04-02T19:35:01.593+0000",
                    "started": "2021-04-02T19:35:01.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576276",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/576306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812679493\n\n\n   The benchmark discrepancy is simply because the generator was putting each row group on its own thread. The difference goes away if we don't force transfer onto a background thread. \r\n   \r\n   (snipped when I realized I had benchmarked the wrong code for this PR)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T20:22:43.288+0000",
                    "updated": "2021-04-02T20:22:43.288+0000",
                    "started": "2021-04-02T20:22:43.288+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576306",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/576312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-812701516\n\n\n   Okay, now that I've actually checked out the right branch\u2026\r\n   \r\n   So long as pre-buffering is enabled, this PR in conjunction with ARROW-7001 is either a big win (for S3) or no effect (locally). Hence I'd argue we should just always enable pre-buffer. (The reason is that without refactoring the Parquet reader heavily, without enabling pre-buffer, the generator is effectively synchronous. I could go through and do the refactor, but pre-buffering gives us an 'easy' way to convert the I/O to be async. If we want, we could change the read range cache to optionally be lazy, which would effectively be the same as refactoring the Parquet reader.)\r\n   \r\n   Also, this changes the ParquetScanTask so that it manages intra-file concurrency internally. Hence, ParquetFileFragment only needs to generate one scan task now and doesn't have to do anything complicated around pre-buffering.\r\n   \r\n   ![Local Median Scan Time (1)](https://user-images.githubusercontent.com/327919/113451950-13871580-93d1-11eb-9150-d88917c5c66d.png)\r\n   ![S3 Median Scan Time (1)](https://user-images.githubusercontent.com/327919/113451953-15e96f80-93d1-11eb-9bca-94360a5e94f4.png)\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T20:36:48.044+0000",
                    "updated": "2021-04-02T20:36:48.044+0000",
                    "started": "2021-04-02T20:36:48.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576312",
                    "issueId": "13361955"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/worklog/577851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9620:\nURL: https://github.com/apache/arrow/pull/9620#issuecomment-814393897\n\n\n   Properly implementing OpenAsync mostly fixes the discrepancy between prebuffer/no prebuffer on local files, so it seems most of the bottleneck there was just synchronously opening files.\r\n   \r\n   ![Local Median Scan Time (2)](https://user-images.githubusercontent.com/327919/113769583-2199a680-96ef-11eb-87d3-f7e52d8cbd93.png)\r\n   ![S3 Median Scan Time (2)](https://user-images.githubusercontent.com/327919/113769586-22cad380-96ef-11eb-99e1-a302fa18c56a.png)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T19:47:10.953+0000",
                    "updated": "2021-04-06T19:47:10.953+0000",
                    "started": "2021-04-06T19:47:10.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577851",
                    "issueId": "13361955"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 33000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4ae01792[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ea647bb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@539f5868[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7fa8463f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@248a8835[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@71547718[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58212d42[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@658511c7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@153ee662[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4780af6a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@161ac1e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5bdce1c8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 33000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 07 17:11:05 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-07T17:11:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11843/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-02T20:35:44.000+0000",
        "updated": "2021-06-08T14:27:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Allow reading\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 33000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add asynchronous read to parquet::arrow::FileReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955/comment/17358730",
                    "id": "17358730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9620\n[https://github.com/apache/arrow/pull/9620]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-07T17:11:05.162+0000",
                    "updated": "2021-06-07T17:11:05.162+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0o8bc:",
        "customfield_12314139": null
    }
}