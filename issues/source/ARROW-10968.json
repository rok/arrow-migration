{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13346875",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875",
    "key": "ARROW-10968",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10968/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan opened a new pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965\n\n\n   This PR changes to not build an index for the probe side of the join. \r\n   \r\n   This has big impact on join performance, e.g. query 12 has a >3x speedup.\r\n   \r\n   FYI @andygrove @jorgecarleitao  \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T22:54:39.114+0000",
                    "updated": "2020-12-18T22:54:39.114+0000",
                    "started": "2020-12-18T22:54:39.114+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526173",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#issuecomment-748359398\n\n\n   https://issues.apache.org/jira/browse/ARROW-10968\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T22:57:16.472+0000",
                    "updated": "2020-12-18T22:57:16.472+0000",
                    "started": "2020-12-18T22:57:16.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526174",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#issuecomment-748366419\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=h1) Report\n   > Merging [#8965](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=desc) (7c03853) into [master](https://codecov.io/gh/apache/arrow/commit/d65ba4ec5daeb93ca5031f883d08d559b68753b2?el=desc) (d65ba4e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `100.00%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8965/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff           @@\n   ##           master    #8965   +/-   ##\n   =======================================\n     Coverage   83.25%   83.26%           \n   =======================================\n     Files         196      196           \n     Lines       48116    48196   +80     \n   =======================================\n   + Hits        40059    40128   +69     \n   - Misses       8057     8068   +11     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/physical\\_plan/hash\\_join.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2hhc2hfam9pbi5ycw==) | `92.19% <100.00%> (+0.09%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `77.00% <0.00%> (-0.56%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.31% <0.00%> (-0.50%)` | :arrow_down: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/file/statistics.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL3N0YXRpc3RpY3MucnM=) | `93.80% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/array\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfYmluYXJ5LnJz) | `90.73% <0.00%> (+0.21%)` | :arrow_up: |\n   | [rust/parquet/src/schema/types.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvdHlwZXMucnM=) | `90.19% <0.00%> (+0.26%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `95.62% <0.00%> (+0.30%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd19yZWFkZXIucnM=) | `91.25% <0.00%> (+0.66%)` | :arrow_up: |\n   | [rust/parquet/src/file/metadata.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL21ldGFkYXRhLnJz) | `91.82% <0.00%> (+0.77%)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=footer). Last update [d65ba4e...5159ef2](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T23:12:14.603+0000",
                    "updated": "2020-12-18T23:12:14.603+0000",
                    "started": "2020-12-18T23:12:14.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526183",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#discussion_r546142043\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_join.rs\n##########\n@@ -423,71 +419,87 @@ fn build_batch(\n // (1, 0)     (1, 2)\n fn build_join_indexes(\n     left: &JoinHashMap,\n-    right: &JoinHashMap,\n+    right: &RecordBatch,\n     join_type: &JoinType,\n+    on: &HashSet<String>,\n ) -> Result<Vec<(JoinIndex, JoinIndex)>> {\n+    let keys_values = on\n+        .iter()\n+        .map(|name| Ok(col(name).evaluate(right)?.into_array(right.num_rows())))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let mut key = Vec::with_capacity(keys_values.len());\n+\n     match join_type {\n         JoinType::Inner => {\n-            // inner => key intersection\n-            // unfortunately rust does not support intersection of map keys :(\n-            let left_set: HashSet<Vec<u8>> = left.keys().cloned().collect();\n-            let left_right: HashSet<Vec<u8>> = right.keys().cloned().collect();\n-            let inner = left_set.intersection(&left_right);\n-\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for key in inner {\n-                // the unwrap never happens by construction of the key\n-                let left_indexes = left.get(key).unwrap();\n-                let right_indexes = right.get(key).unwrap();\n+\n+            // Visit all of the right rows\n+            for row in 0..right.num_rows() {\n+                // Get the key and find it in the build index\n+                create_key(&keys_values, row, &mut key)?;\n+                let left_indexes = left.get(&key);\n \n                 // for every item on the left and right with this key, add the respective pair\n-                left_indexes.iter().for_each(|x| {\n-                    right_indexes.iter().for_each(|y| {\n-                        // on an inner join, left and right indices are present\n-                        indexes.push((Some(*x), Some(*y)));\n-                    })\n+                left_indexes.unwrap_or(&vec![]).iter().for_each(|x| {\n+                    // on an inner join, left and right indices are present\n+                    indexes.push((Some(*x), Some((0, row))));\n                 })\n             }\n             Ok(indexes)\n         }\n         JoinType::Left => {\n-            // left => left keys\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for (key, left_indexes) in left {\n-                // for every item on the left and right with this key, add the respective pair\n-                if let Some(right_indexes) = right.get(key) {\n-                    left_indexes.iter().for_each(|x| {\n-                        right_indexes.iter().for_each(|y| {\n-                            // on an inner join, left and right indices are present\n-                            indexes.push((Some(*x), Some(*y)));\n+\n+            // Keep track of which item is visited in the build input\n+            // TODO: this can be stored more efficiently with a marker\n+            let mut is_visited = HashSet::new();\n+\n+            // First visit all of the rows\n+            for row in 0..right.num_rows() {\n+                create_key(&keys_values, row, &mut key)?;\n+                // the unwrap never happens by construction of the key\n+                let left_indexes = left.get(&key);\n+\n+                match left_indexes {\n+                    Some(indices) => {\n+                        is_visited.insert(key.clone());\n+\n+                        indices.iter().for_each(|x| {\n+                            indexes.push((Some(*x), Some((0, row))));\n                         })\n-                    })\n-                } else {\n-                    // key not on the right => push Nones\n-                    left_indexes.iter().for_each(|x| {\n\nReview comment:\n       Isn't this wrong already? Shouldn't it visit all batches before adding nulls for the left side?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T23:17:40.087+0000",
                    "updated": "2020-12-18T23:17:40.087+0000",
                    "started": "2020-12-18T23:17:40.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526184",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#discussion_r546142043\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_join.rs\n##########\n@@ -423,71 +419,87 @@ fn build_batch(\n // (1, 0)     (1, 2)\n fn build_join_indexes(\n     left: &JoinHashMap,\n-    right: &JoinHashMap,\n+    right: &RecordBatch,\n     join_type: &JoinType,\n+    on: &HashSet<String>,\n ) -> Result<Vec<(JoinIndex, JoinIndex)>> {\n+    let keys_values = on\n+        .iter()\n+        .map(|name| Ok(col(name).evaluate(right)?.into_array(right.num_rows())))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let mut key = Vec::with_capacity(keys_values.len());\n+\n     match join_type {\n         JoinType::Inner => {\n-            // inner => key intersection\n-            // unfortunately rust does not support intersection of map keys :(\n-            let left_set: HashSet<Vec<u8>> = left.keys().cloned().collect();\n-            let left_right: HashSet<Vec<u8>> = right.keys().cloned().collect();\n-            let inner = left_set.intersection(&left_right);\n-\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for key in inner {\n-                // the unwrap never happens by construction of the key\n-                let left_indexes = left.get(key).unwrap();\n-                let right_indexes = right.get(key).unwrap();\n+\n+            // Visit all of the right rows\n+            for row in 0..right.num_rows() {\n+                // Get the key and find it in the build index\n+                create_key(&keys_values, row, &mut key)?;\n+                let left_indexes = left.get(&key);\n \n                 // for every item on the left and right with this key, add the respective pair\n-                left_indexes.iter().for_each(|x| {\n-                    right_indexes.iter().for_each(|y| {\n-                        // on an inner join, left and right indices are present\n-                        indexes.push((Some(*x), Some(*y)));\n-                    })\n+                left_indexes.unwrap_or(&vec![]).iter().for_each(|x| {\n+                    // on an inner join, left and right indices are present\n+                    indexes.push((Some(*x), Some((0, row))));\n                 })\n             }\n             Ok(indexes)\n         }\n         JoinType::Left => {\n-            // left => left keys\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for (key, left_indexes) in left {\n-                // for every item on the left and right with this key, add the respective pair\n-                if let Some(right_indexes) = right.get(key) {\n-                    left_indexes.iter().for_each(|x| {\n-                        right_indexes.iter().for_each(|y| {\n-                            // on an inner join, left and right indices are present\n-                            indexes.push((Some(*x), Some(*y)));\n+\n+            // Keep track of which item is visited in the build input\n+            // TODO: this can be stored more efficiently with a marker\n+            let mut is_visited = HashSet::new();\n+\n+            // First visit all of the rows\n+            for row in 0..right.num_rows() {\n+                create_key(&keys_values, row, &mut key)?;\n+                // the unwrap never happens by construction of the key\n+                let left_indexes = left.get(&key);\n+\n+                match left_indexes {\n+                    Some(indices) => {\n+                        is_visited.insert(key.clone());\n+\n+                        indices.iter().for_each(|x| {\n+                            indexes.push((Some(*x), Some((0, row))));\n                         })\n-                    })\n-                } else {\n-                    // key not on the right => push Nones\n-                    left_indexes.iter().for_each(|x| {\n\nReview comment:\n       Isn't this wrong already? Shouldn't it visit all batches before adding nulls for the left side that had no matches at all?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T23:18:37.054+0000",
                    "updated": "2020-12-18T23:18:37.054+0000",
                    "started": "2020-12-18T23:18:37.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526185",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#issuecomment-748366419\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=h1) Report\n   > Merging [#8965](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=desc) (5159ef2) into [master](https://codecov.io/gh/apache/arrow/commit/d65ba4ec5daeb93ca5031f883d08d559b68753b2?el=desc) (d65ba4e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `100.00%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8965/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff           @@\n   ##           master    #8965   +/-   ##\n   =======================================\n     Coverage   83.25%   83.26%           \n   =======================================\n     Files         196      196           \n     Lines       48116    48196   +80     \n   =======================================\n   + Hits        40059    40129   +70     \n   - Misses       8057     8067   +10     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/physical\\_plan/hash\\_join.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2hhc2hfam9pbi5ycw==) | `92.19% <100.00%> (+0.09%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `77.00% <0.00%> (-0.56%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.31% <0.00%> (-0.50%)` | :arrow_down: |\n   | [rust/parquet/src/file/statistics.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL3N0YXRpc3RpY3MucnM=) | `93.80% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/array\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfYmluYXJ5LnJz) | `90.73% <0.00%> (+0.21%)` | :arrow_up: |\n   | [rust/parquet/src/schema/types.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvdHlwZXMucnM=) | `90.19% <0.00%> (+0.26%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `95.62% <0.00%> (+0.30%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd19yZWFkZXIucnM=) | `91.25% <0.00%> (+0.66%)` | :arrow_up: |\n   | [rust/parquet/src/file/metadata.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL21ldGFkYXRhLnJz) | `91.82% <0.00%> (+0.77%)` | :arrow_up: |\n   | [rust/datafusion/src/physical\\_plan/parquet.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BhcnF1ZXQucnM=) | `79.56% <0.00%> (+0.91%)` | :arrow_up: |\n   | ... and [1 more](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=footer). Last update [d65ba4e...5159ef2](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T23:19:21.147+0000",
                    "updated": "2020-12-18T23:19:21.147+0000",
                    "started": "2020-12-18T23:19:21.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526186",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#issuecomment-748366419\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=h1) Report\n   > Merging [#8965](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=desc) (1985647) into [master](https://codecov.io/gh/apache/arrow/commit/d65ba4ec5daeb93ca5031f883d08d559b68753b2?el=desc) (d65ba4e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `100.00%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8965/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff           @@\n   ##           master    #8965   +/-   ##\n   =======================================\n     Coverage   83.25%   83.25%           \n   =======================================\n     Files         196      196           \n     Lines       48116    48195   +79     \n   =======================================\n   + Hits        40059    40127   +68     \n   - Misses       8057     8068   +11     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/physical\\_plan/hash\\_join.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2hhc2hfam9pbi5ycw==) | `92.16% <100.00%> (+0.07%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `77.00% <0.00%> (-0.56%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.31% <0.00%> (-0.50%)` | :arrow_down: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/file/statistics.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL3N0YXRpc3RpY3MucnM=) | `93.80% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/array\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfYmluYXJ5LnJz) | `90.73% <0.00%> (+0.21%)` | :arrow_up: |\n   | [rust/parquet/src/schema/types.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvdHlwZXMucnM=) | `90.19% <0.00%> (+0.26%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `95.62% <0.00%> (+0.30%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd19yZWFkZXIucnM=) | `91.25% <0.00%> (+0.66%)` | :arrow_up: |\n   | [rust/parquet/src/file/metadata.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL21ldGFkYXRhLnJz) | `91.82% <0.00%> (+0.77%)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=footer). Last update [d65ba4e...9ed27d5](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:47:52.875+0000",
                    "updated": "2020-12-19T07:47:52.875+0000",
                    "started": "2020-12-19T07:47:52.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526235",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#issuecomment-748366419\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=h1) Report\n   > Merging [#8965](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=desc) (dff61d1) into [master](https://codecov.io/gh/apache/arrow/commit/d65ba4ec5daeb93ca5031f883d08d559b68753b2?el=desc) (d65ba4e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `100.00%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8965/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff           @@\n   ##           master    #8965   +/-   ##\n   =======================================\n     Coverage   83.25%   83.25%           \n   =======================================\n     Files         196      196           \n     Lines       48116    48195   +79     \n   =======================================\n   + Hits        40059    40127   +68     \n   - Misses       8057     8068   +11     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/physical\\_plan/hash\\_join.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2hhc2hfam9pbi5ycw==) | `92.16% <100.00%> (+0.07%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `77.00% <0.00%> (-0.56%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.31% <0.00%> (-0.50%)` | :arrow_down: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/file/statistics.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL3N0YXRpc3RpY3MucnM=) | `93.80% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/array\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfYmluYXJ5LnJz) | `90.73% <0.00%> (+0.21%)` | :arrow_up: |\n   | [rust/parquet/src/schema/types.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvdHlwZXMucnM=) | `90.19% <0.00%> (+0.26%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `95.62% <0.00%> (+0.30%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd19yZWFkZXIucnM=) | `91.25% <0.00%> (+0.66%)` | :arrow_up: |\n   | [rust/parquet/src/file/metadata.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL21ldGFkYXRhLnJz) | `91.82% <0.00%> (+0.77%)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=footer). Last update [d65ba4e...9ed27d5](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:49:15.903+0000",
                    "updated": "2020-12-19T07:49:15.903+0000",
                    "started": "2020-12-19T07:49:15.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526236",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#issuecomment-748366419\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=h1) Report\n   > Merging [#8965](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=desc) (9ed27d5) into [master](https://codecov.io/gh/apache/arrow/commit/d65ba4ec5daeb93ca5031f883d08d559b68753b2?el=desc) (d65ba4e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `100.00%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8965/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff           @@\n   ##           master    #8965   +/-   ##\n   =======================================\n     Coverage   83.25%   83.25%           \n   =======================================\n     Files         196      196           \n     Lines       48116    48195   +79     \n   =======================================\n   + Hits        40059    40127   +68     \n   - Misses       8057     8068   +11     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/physical\\_plan/hash\\_join.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2hhc2hfam9pbi5ycw==) | `92.16% <100.00%> (+0.07%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `77.00% <0.00%> (-0.56%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.31% <0.00%> (-0.50%)` | :arrow_down: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/file/statistics.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL3N0YXRpc3RpY3MucnM=) | `93.80% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/array\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfYmluYXJ5LnJz) | `90.73% <0.00%> (+0.21%)` | :arrow_up: |\n   | [rust/parquet/src/schema/types.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9zY2hlbWEvdHlwZXMucnM=) | `90.19% <0.00%> (+0.26%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `95.62% <0.00%> (+0.30%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd19yZWFkZXIucnM=) | `91.25% <0.00%> (+0.66%)` | :arrow_up: |\n   | [rust/parquet/src/file/metadata.rs](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL21ldGFkYXRhLnJz) | `91.82% <0.00%> (+0.77%)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/8965/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=footer). Last update [d65ba4e...9ed27d5](https://codecov.io/gh/apache/arrow/pull/8965?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:52:09.947+0000",
                    "updated": "2020-12-19T07:52:09.947+0000",
                    "started": "2020-12-19T07:52:09.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526237",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#discussion_r546142043\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_join.rs\n##########\n@@ -423,71 +419,87 @@ fn build_batch(\n // (1, 0)     (1, 2)\n fn build_join_indexes(\n     left: &JoinHashMap,\n-    right: &JoinHashMap,\n+    right: &RecordBatch,\n     join_type: &JoinType,\n+    on: &HashSet<String>,\n ) -> Result<Vec<(JoinIndex, JoinIndex)>> {\n+    let keys_values = on\n+        .iter()\n+        .map(|name| Ok(col(name).evaluate(right)?.into_array(right.num_rows())))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let mut key = Vec::with_capacity(keys_values.len());\n+\n     match join_type {\n         JoinType::Inner => {\n-            // inner => key intersection\n-            // unfortunately rust does not support intersection of map keys :(\n-            let left_set: HashSet<Vec<u8>> = left.keys().cloned().collect();\n-            let left_right: HashSet<Vec<u8>> = right.keys().cloned().collect();\n-            let inner = left_set.intersection(&left_right);\n-\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for key in inner {\n-                // the unwrap never happens by construction of the key\n-                let left_indexes = left.get(key).unwrap();\n-                let right_indexes = right.get(key).unwrap();\n+\n+            // Visit all of the right rows\n+            for row in 0..right.num_rows() {\n+                // Get the key and find it in the build index\n+                create_key(&keys_values, row, &mut key)?;\n+                let left_indexes = left.get(&key);\n \n                 // for every item on the left and right with this key, add the respective pair\n-                left_indexes.iter().for_each(|x| {\n-                    right_indexes.iter().for_each(|y| {\n-                        // on an inner join, left and right indices are present\n-                        indexes.push((Some(*x), Some(*y)));\n-                    })\n+                left_indexes.unwrap_or(&vec![]).iter().for_each(|x| {\n+                    // on an inner join, left and right indices are present\n+                    indexes.push((Some(*x), Some((0, row))));\n                 })\n             }\n             Ok(indexes)\n         }\n         JoinType::Left => {\n-            // left => left keys\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for (key, left_indexes) in left {\n-                // for every item on the left and right with this key, add the respective pair\n-                if let Some(right_indexes) = right.get(key) {\n-                    left_indexes.iter().for_each(|x| {\n-                        right_indexes.iter().for_each(|y| {\n-                            // on an inner join, left and right indices are present\n-                            indexes.push((Some(*x), Some(*y)));\n+\n+            // Keep track of which item is visited in the build input\n+            // TODO: this can be stored more efficiently with a marker\n+            let mut is_visited = HashSet::new();\n+\n+            // First visit all of the rows\n+            for row in 0..right.num_rows() {\n+                create_key(&keys_values, row, &mut key)?;\n+                // the unwrap never happens by construction of the key\n+                let left_indexes = left.get(&key);\n+\n+                match left_indexes {\n+                    Some(indices) => {\n+                        is_visited.insert(key.clone());\n+\n+                        indices.iter().for_each(|x| {\n+                            indexes.push((Some(*x), Some((0, row))));\n                         })\n-                    })\n-                } else {\n-                    // key not on the right => push Nones\n-                    left_indexes.iter().for_each(|x| {\n\nReview comment:\n       Isn't this wrong already? Shouldn't it visit all right batches before adding nulls for the left side that had no matches at all?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:55:52.563+0000",
                    "updated": "2020-12-19T07:55:52.563+0000",
                    "started": "2020-12-19T07:55:52.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526240",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#discussion_r546209575\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_join.rs\n##########\n@@ -423,71 +419,87 @@ fn build_batch(\n // (1, 0)     (1, 2)\n fn build_join_indexes(\n     left: &JoinHashMap,\n-    right: &JoinHashMap,\n+    right: &RecordBatch,\n     join_type: &JoinType,\n+    on: &HashSet<String>,\n ) -> Result<Vec<(JoinIndex, JoinIndex)>> {\n+    let keys_values = on\n+        .iter()\n+        .map(|name| Ok(col(name).evaluate(right)?.into_array(right.num_rows())))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let mut key = Vec::with_capacity(keys_values.len());\n+\n     match join_type {\n         JoinType::Inner => {\n-            // inner => key intersection\n-            // unfortunately rust does not support intersection of map keys :(\n-            let left_set: HashSet<Vec<u8>> = left.keys().cloned().collect();\n-            let left_right: HashSet<Vec<u8>> = right.keys().cloned().collect();\n-            let inner = left_set.intersection(&left_right);\n-\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for key in inner {\n-                // the unwrap never happens by construction of the key\n-                let left_indexes = left.get(key).unwrap();\n-                let right_indexes = right.get(key).unwrap();\n+\n+            // Visit all of the right rows\n+            for row in 0..right.num_rows() {\n+                // Get the key and find it in the build index\n+                create_key(&keys_values, row, &mut key)?;\n+                let left_indexes = left.get(&key);\n \n                 // for every item on the left and right with this key, add the respective pair\n-                left_indexes.iter().for_each(|x| {\n-                    right_indexes.iter().for_each(|y| {\n-                        // on an inner join, left and right indices are present\n-                        indexes.push((Some(*x), Some(*y)));\n-                    })\n+                left_indexes.unwrap_or(&vec![]).iter().for_each(|x| {\n+                    // on an inner join, left and right indices are present\n+                    indexes.push((Some(*x), Some((0, row))));\n                 })\n             }\n             Ok(indexes)\n         }\n         JoinType::Left => {\n-            // left => left keys\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for (key, left_indexes) in left {\n-                // for every item on the left and right with this key, add the respective pair\n-                if let Some(right_indexes) = right.get(key) {\n-                    left_indexes.iter().for_each(|x| {\n-                        right_indexes.iter().for_each(|y| {\n-                            // on an inner join, left and right indices are present\n-                            indexes.push((Some(*x), Some(*y)));\n+\n+            // Keep track of which item is visited in the build input\n+            // TODO: this can be stored more efficiently with a marker\n+            let mut is_visited = HashSet::new();\n+\n+            // First visit all of the rows\n+            for row in 0..right.num_rows() {\n+                create_key(&keys_values, row, &mut key)?;\n+                // the unwrap never happens by construction of the key\n+                let left_indexes = left.get(&key);\n+\n+                match left_indexes {\n+                    Some(indices) => {\n+                        is_visited.insert(key.clone());\n+\n+                        indices.iter().for_each(|x| {\n+                            indexes.push((Some(*x), Some((0, row))));\n                         })\n-                    })\n-                } else {\n-                    // key not on the right => push Nones\n-                    left_indexes.iter().for_each(|x| {\n\nReview comment:\n       But I think this should be resolved in another PR. I think best would to create/keep a bitmap for each index on the left.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T08:15:03.718+0000",
                    "updated": "2020-12-19T08:15:03.718+0000",
                    "started": "2020-12-19T08:15:03.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526242",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#discussion_r546230466\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_join.rs\n##########\n@@ -423,71 +419,87 @@ fn build_batch(\n // (1, 0)     (1, 2)\n fn build_join_indexes(\n     left: &JoinHashMap,\n-    right: &JoinHashMap,\n+    right: &RecordBatch,\n     join_type: &JoinType,\n+    on: &HashSet<String>,\n ) -> Result<Vec<(JoinIndex, JoinIndex)>> {\n+    let keys_values = on\n+        .iter()\n+        .map(|name| Ok(col(name).evaluate(right)?.into_array(right.num_rows())))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let mut key = Vec::with_capacity(keys_values.len());\n+\n     match join_type {\n         JoinType::Inner => {\n-            // inner => key intersection\n-            // unfortunately rust does not support intersection of map keys :(\n-            let left_set: HashSet<Vec<u8>> = left.keys().cloned().collect();\n-            let left_right: HashSet<Vec<u8>> = right.keys().cloned().collect();\n-            let inner = left_set.intersection(&left_right);\n-\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for key in inner {\n-                // the unwrap never happens by construction of the key\n-                let left_indexes = left.get(key).unwrap();\n-                let right_indexes = right.get(key).unwrap();\n+\n+            // Visit all of the right rows\n+            for row in 0..right.num_rows() {\n+                // Get the key and find it in the build index\n+                create_key(&keys_values, row, &mut key)?;\n+                let left_indexes = left.get(&key);\n \n                 // for every item on the left and right with this key, add the respective pair\n-                left_indexes.iter().for_each(|x| {\n-                    right_indexes.iter().for_each(|y| {\n-                        // on an inner join, left and right indices are present\n-                        indexes.push((Some(*x), Some(*y)));\n-                    })\n+                left_indexes.unwrap_or(&vec![]).iter().for_each(|x| {\n+                    // on an inner join, left and right indices are present\n+                    indexes.push((Some(*x), Some((0, row))));\n                 })\n             }\n             Ok(indexes)\n         }\n         JoinType::Left => {\n-            // left => left keys\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for (key, left_indexes) in left {\n-                // for every item on the left and right with this key, add the respective pair\n-                if let Some(right_indexes) = right.get(key) {\n-                    left_indexes.iter().for_each(|x| {\n-                        right_indexes.iter().for_each(|y| {\n-                            // on an inner join, left and right indices are present\n-                            indexes.push((Some(*x), Some(*y)));\n+\n+            // Keep track of which item is visited in the build input\n+            // TODO: this can be stored more efficiently with a marker\n+            let mut is_visited = HashSet::new();\n+\n+            // First visit all of the rows\n+            for row in 0..right.num_rows() {\n+                create_key(&keys_values, row, &mut key)?;\n+                // the unwrap never happens by construction of the key\n+                let left_indexes = left.get(&key);\n+\n+                match left_indexes {\n+                    Some(indices) => {\n+                        is_visited.insert(key.clone());\n+\n+                        indices.iter().for_each(|x| {\n+                            indexes.push((Some(*x), Some((0, row))));\n                         })\n-                    })\n-                } else {\n-                    // key not on the right => push Nones\n-                    left_indexes.iter().for_each(|x| {\n\nReview comment:\n       Opened https://issues.apache.org/jira/browse/ARROW-10971 for this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T12:01:43.838+0000",
                    "updated": "2020-12-19T12:01:43.838+0000",
                    "started": "2020-12-19T12:01:43.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526276",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965#discussion_r546209575\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_join.rs\n##########\n@@ -423,71 +419,87 @@ fn build_batch(\n // (1, 0)     (1, 2)\n fn build_join_indexes(\n     left: &JoinHashMap,\n-    right: &JoinHashMap,\n+    right: &RecordBatch,\n     join_type: &JoinType,\n+    on: &HashSet<String>,\n ) -> Result<Vec<(JoinIndex, JoinIndex)>> {\n+    let keys_values = on\n+        .iter()\n+        .map(|name| Ok(col(name).evaluate(right)?.into_array(right.num_rows())))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let mut key = Vec::with_capacity(keys_values.len());\n+\n     match join_type {\n         JoinType::Inner => {\n-            // inner => key intersection\n-            // unfortunately rust does not support intersection of map keys :(\n-            let left_set: HashSet<Vec<u8>> = left.keys().cloned().collect();\n-            let left_right: HashSet<Vec<u8>> = right.keys().cloned().collect();\n-            let inner = left_set.intersection(&left_right);\n-\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for key in inner {\n-                // the unwrap never happens by construction of the key\n-                let left_indexes = left.get(key).unwrap();\n-                let right_indexes = right.get(key).unwrap();\n+\n+            // Visit all of the right rows\n+            for row in 0..right.num_rows() {\n+                // Get the key and find it in the build index\n+                create_key(&keys_values, row, &mut key)?;\n+                let left_indexes = left.get(&key);\n \n                 // for every item on the left and right with this key, add the respective pair\n-                left_indexes.iter().for_each(|x| {\n-                    right_indexes.iter().for_each(|y| {\n-                        // on an inner join, left and right indices are present\n-                        indexes.push((Some(*x), Some(*y)));\n-                    })\n+                left_indexes.unwrap_or(&vec![]).iter().for_each(|x| {\n+                    // on an inner join, left and right indices are present\n+                    indexes.push((Some(*x), Some((0, row))));\n                 })\n             }\n             Ok(indexes)\n         }\n         JoinType::Left => {\n-            // left => left keys\n             let mut indexes = Vec::new(); // unknown a prior size\n-            for (key, left_indexes) in left {\n-                // for every item on the left and right with this key, add the respective pair\n-                if let Some(right_indexes) = right.get(key) {\n-                    left_indexes.iter().for_each(|x| {\n-                        right_indexes.iter().for_each(|y| {\n-                            // on an inner join, left and right indices are present\n-                            indexes.push((Some(*x), Some(*y)));\n+\n+            // Keep track of which item is visited in the build input\n+            // TODO: this can be stored more efficiently with a marker\n+            let mut is_visited = HashSet::new();\n+\n+            // First visit all of the rows\n+            for row in 0..right.num_rows() {\n+                create_key(&keys_values, row, &mut key)?;\n+                // the unwrap never happens by construction of the key\n+                let left_indexes = left.get(&key);\n+\n+                match left_indexes {\n+                    Some(indices) => {\n+                        is_visited.insert(key.clone());\n+\n+                        indices.iter().for_each(|x| {\n+                            indexes.push((Some(*x), Some((0, row))));\n                         })\n-                    })\n-                } else {\n-                    // key not on the right => push Nones\n-                    left_indexes.iter().for_each(|x| {\n\nReview comment:\n       But I think this should be resolved in another PR. I think best would to create/keep a bitmap for each index on the left during the join.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T12:02:26.954+0000",
                    "updated": "2020-12-19T12:02:26.954+0000",
                    "started": "2020-12-19T12:02:26.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526277",
                    "issueId": "13346875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/worklog/526552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8965:\nURL: https://github.com/apache/arrow/pull/8965\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T18:00:40.646+0000",
                    "updated": "2020-12-20T18:00:40.646+0000",
                    "started": "2020-12-20T18:00:40.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526552",
                    "issueId": "13346875"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@573abbb8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bc9810b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cf28a3b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b648377[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@187e45bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2e66af5e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36dd4bfb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@495d196c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2364e65e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38e3a133[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@643da747[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@450a54d5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Dec 20 18:00:35 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-20T18:00:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10968/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-18T22:49:07.000+0000",
        "updated": "2020-12-20T18:00:41.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Don't build hash table for right side of the join ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346875/comment/17252483",
                    "id": "17252483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8965\n[https://github.com/apache/arrow/pull/8965]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-20T18:00:35.442+0000",
                    "updated": "2020-12-20T18:00:35.442+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lns0:",
        "customfield_12314139": null
    }
}