{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13069845",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845",
    "key": "ARROW-971",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataframe",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589295",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589295",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-971/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/152160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-427758513\n \n \n   This is marked for the 0.12 release. We should rewrite as a kernel\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-08T08:38:46.972+0000",
                    "updated": "2018-10-08T08:38:46.972+0000",
                    "started": "2018-10-08T08:38:46.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152160",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/181268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-451524666\n \n \n   Closing as stale, let us revisit in an upcoming release cycle\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-04T18:17:42.240+0000",
                    "updated": "2019-01-04T18:17:42.240+0000",
                    "started": "2019-01-04T18:17:42.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181268",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/181269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-04T18:17:42.889+0000",
                    "updated": "2019-01-04T18:17:42.889+0000",
                    "started": "2019-01-04T18:17:42.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181269",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410\n\n\n   Also adds a mixin for dead simple specification of randomized scalar kernel tests\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-11T21:14:07.630+0000",
                    "updated": "2020-06-11T21:14:07.630+0000",
                    "started": "2020-06-11T21:14:07.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444562",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#issuecomment-642932267\n\n\n   https://issues.apache.org/jira/browse/ARROW-971\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-11T21:17:09.956+0000",
                    "updated": "2020-06-11T21:17:09.956+0000",
                    "started": "2020-06-11T21:17:09.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444567",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439108275\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -181,8 +180,7 @@ struct GetOutputType<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct GetOutputType<\n-    Type, enable_if_t<is_string_like_type<Type>::value>> {\n+struct GetOutputType<Type, enable_if_t<is_string_like_type<Type>::value>> {\n   using T = std::string;\n };\n\nReview comment:\n       What is going on with all the code reformatting in this patch?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-11T22:36:31.354+0000",
                    "updated": "2020-06-11T22:36:31.354+0000",
                    "started": "2020-06-11T22:36:31.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444610",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439440106\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec.cc\n##########\n@@ -20,6 +20,7 @@\n #include <algorithm>\n #include <cstddef>\n #include <cstdint>\n+#include <iostream>\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   debug code\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T14:06:25.635+0000",
                    "updated": "2020-06-12T14:06:25.635+0000",
                    "started": "2020-06-12T14:06:25.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444900",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439442116\n\n\n\n##########\nFile path: cpp/src/arrow/util/iterator_test.cc\n##########\n@@ -27,6 +27,9 @@\n #include <unordered_set>\n #include <vector>\n \n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   no longer in use\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T14:09:55.876+0000",
                    "updated": "2020-06-12T14:09:55.876+0000",
                    "started": "2020-06-12T14:09:55.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444903",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439442386\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/test_util.h\n##########\n@@ -33,7 +33,9 @@\n #include \"arrow/testing/random.h\"\n #include \"arrow/testing/util.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/iterator.h\"\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T14:10:29.163+0000",
                    "updated": "2020-06-12T14:10:29.163+0000",
                    "started": "2020-06-12T14:10:29.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444904",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/444906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439445910\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -181,8 +180,7 @@ struct GetOutputType<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct GetOutputType<\n-    Type, enable_if_t<is_string_like_type<Type>::value>> {\n+struct GetOutputType<Type, enable_if_t<is_string_like_type<Type>::value>> {\n   using T = std::string;\n };\n\nReview comment:\n       I don't know; very odd. It appears to have only affected this file. `clang-format-8` is being used both locally and in CI\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T14:16:24.381+0000",
                    "updated": "2020-06-12T14:16:24.381+0000",
                    "started": "2020-06-12T14:16:24.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444906",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439676908\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -181,8 +180,7 @@ struct GetOutputType<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct GetOutputType<\n-    Type, enable_if_t<is_string_like_type<Type>::value>> {\n+struct GetOutputType<Type, enable_if_t<is_string_like_type<Type>::value>> {\n   using T = std::string;\n };\n\nReview comment:\n       @wesm found it: `codegen**_internal**.h` is excluded from the `format` target, so it hasn't been touched by clang-format until now. We need a JIRA for this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T23:17:28.310+0000",
                    "updated": "2020-06-12T23:17:28.310+0000",
                    "started": "2020-06-12T23:17:28.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445219",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439696674\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -181,8 +180,7 @@ struct GetOutputType<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct GetOutputType<\n-    Type, enable_if_t<is_string_like_type<Type>::value>> {\n+struct GetOutputType<Type, enable_if_t<is_string_like_type<Type>::value>> {\n   using T = std::string;\n };\n\nReview comment:\n       https://issues.apache.org/jira/browse/ARROW-9120\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T01:29:28.957+0000",
                    "updated": "2020-06-13T01:29:28.957+0000",
                    "started": "2020-06-13T01:29:28.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445251",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439703006\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -181,8 +180,7 @@ struct GetOutputType<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct GetOutputType<\n-    Type, enable_if_t<is_string_like_type<Type>::value>> {\n+struct GetOutputType<Type, enable_if_t<is_string_like_type<Type>::value>> {\n   using T = std::string;\n };\n\nReview comment:\n       Fixed. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T02:58:13.021+0000",
                    "updated": "2020-06-13T02:58:13.021+0000",
                    "started": "2020-06-13T02:58:13.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445266",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#issuecomment-643558658\n\n\n   I rebased after fixing the linting issue ARROW-9120\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T02:58:26.069+0000",
                    "updated": "2020-06-13T02:58:26.069+0000",
                    "started": "2020-06-13T02:58:26.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445267",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439703255\n\n\n\n##########\nFile path: cpp/src/arrow/testing/random.h\n##########\n@@ -250,6 +250,9 @@ class ARROW_EXPORT RandomArrayGenerator {\n                                            int32_t min_length, int32_t max_length,\n                                            double null_probability = 0);\n \n+  std::shared_ptr<Array> Of(std::shared_ptr<DataType> type, int64_t size,\n\nReview comment:\n       docstring\n\n##########\nFile path: cpp/src/arrow/array/builder_base.cc\n##########\n@@ -111,4 +115,43 @@ void ArrayBuilder::UnsafeSetNull(int64_t length) {\n   null_bitmap_builder_.UnsafeAppend(length, false);\n }\n \n+struct ArrayBuilderAppendScalarImpl {\n+  template <typename S,\n+            typename B = typename TypeTraits<typename S::TypeClass>::BuilderType>\n+  B& builder() {\n+    return *internal::checked_cast<B*>(builder_);\n+  }\n+\n+  template <typename S>\n+  auto Visit(const S& scalar) -> decltype(builder<S>().Append(scalar.value)) {\n+    return builder<S>().Append(scalar.value);\n+  }\n+\n+  template <typename S>\n+  enable_if_base_binary<typename S::TypeClass, Status> Visit(const S& scalar) {\n+    return builder<S>().Append(scalar.value->data(), scalar.value->size());\n+  }\n+\n+  Status Visit(const Scalar& scalar) {\n+    return Status::NotImplemented(\"Appending scalars to builders of type \", *scalar.type);\n+  }\n+\n+  Status Finish() && { return VisitScalarInline(scalar_, this); }\n+  ArrayBuilder* builder_;\n+  const Scalar& scalar_;\n+};\n\nReview comment:\n       If this is just to enable the test harness created below I'm not sure it's worth it\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class TestValidityKernels : public ::testing::Test {\n+ protected:\n+  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n+  // testing multiple types seems redundant.\n+  using ArrowType = BooleanType;\n+\n+  using CType = typename ArrowType::c_type;\n+\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<ArrowType>::type_singleton();\n+  }\n+\n+  void AssertUnary(Datum arg, Datum expected) {\n+    ASSERT_OK_AND_ASSIGN(auto actual, func_(arg, nullptr));\n+    ASSERT_EQ(actual.kind(), expected.kind());\n+    if (actual.kind() == Datum::ARRAY) {\n+      ASSERT_OK(actual.make_array()->ValidateFull());\n+      AssertArraysApproxEqual(*expected.make_array(), *actual.make_array());\n+    } else {\n+      AssertScalarsEqual(*expected.scalar(), *actual.scalar());\n+    }\n+  }\n+\n+  void AssertUnary(const std::string& arg_json, const std::string& expected_json) {\n+    AssertUnary(ArrayFromJSON(type_singleton(), arg_json),\n+                ArrayFromJSON(type_singleton(), expected_json));\n+  }\n+\n+  using UnaryFunction = std::function<Result<Datum>(const Datum&, ExecContext*)>;\n+  UnaryFunction func_;\n\nReview comment:\n       Is this meaningfully different from\r\n   \r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/test_util.cc#L33?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class TestValidityKernels : public ::testing::Test {\n+ protected:\n+  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n+  // testing multiple types seems redundant.\n+  using ArrowType = BooleanType;\n+\n+  using CType = typename ArrowType::c_type;\n+\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<ArrowType>::type_singleton();\n+  }\n+\n+  void AssertUnary(Datum arg, Datum expected) {\n+    ASSERT_OK_AND_ASSIGN(auto actual, func_(arg, nullptr));\n+    ASSERT_EQ(actual.kind(), expected.kind());\n+    if (actual.kind() == Datum::ARRAY) {\n+      ASSERT_OK(actual.make_array()->ValidateFull());\n+      AssertArraysApproxEqual(*expected.make_array(), *actual.make_array());\n+    } else {\n+      AssertScalarsEqual(*expected.scalar(), *actual.scalar());\n+    }\n+  }\n+\n+  void AssertUnary(const std::string& arg_json, const std::string& expected_json) {\n+    AssertUnary(ArrayFromJSON(type_singleton(), arg_json),\n+                ArrayFromJSON(type_singleton(), expected_json));\n+  }\n+\n+  using UnaryFunction = std::function<Result<Datum>(const Datum&, ExecContext*)>;\n+  UnaryFunction func_;\n+};\n+\n+TEST_F(TestValidityKernels, ArrayIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[false]\");\n+  this->AssertUnary(\"[1]\", \"[true]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[false, true, true, false]\");\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+  Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n+  ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n+  ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n+}\n+\n+TEST_F(TestValidityKernels, ScalarIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  AssertUnary(Datum(19.7), Datum(true));\n+  AssertUnary(MakeNullScalar(float64()), Datum(false));\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[true]\");\n+  this->AssertUnary(\"[1]\", \"[false]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[true, false, false, true]\");\n+}\n+\n+TEST_F(TestValidityKernels, DISABLED_ScalarIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  AssertUnary(Datum(19.7), Datum(false));\n+  AssertUnary(MakeNullScalar(float64()), Datum(true));\n+}\n+\n+class IsValidProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_valid\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsValidProperty, TestIsValidProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsValidPropertyTest, IsValidProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n+\n+class IsNullProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_null\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(!args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsNullProperty, TestIsNullProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsNullPropertyTest, IsNullProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n\nReview comment:\n       Honestly this seems quite complex / opaque to me -- I am not going to be eager to write unit tests in this fashion. I would personally rather keep things as simple as possible.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T03:17:30.913+0000",
                    "updated": "2020-06-13T03:17:30.913+0000",
                    "started": "2020-06-13T03:17:30.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445269",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439704017\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class TestValidityKernels : public ::testing::Test {\n+ protected:\n+  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n+  // testing multiple types seems redundant.\n+  using ArrowType = BooleanType;\n+\n+  using CType = typename ArrowType::c_type;\n+\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<ArrowType>::type_singleton();\n+  }\n+\n+  void AssertUnary(Datum arg, Datum expected) {\n+    ASSERT_OK_AND_ASSIGN(auto actual, func_(arg, nullptr));\n+    ASSERT_EQ(actual.kind(), expected.kind());\n+    if (actual.kind() == Datum::ARRAY) {\n+      ASSERT_OK(actual.make_array()->ValidateFull());\n+      AssertArraysApproxEqual(*expected.make_array(), *actual.make_array());\n+    } else {\n+      AssertScalarsEqual(*expected.scalar(), *actual.scalar());\n+    }\n+  }\n+\n+  void AssertUnary(const std::string& arg_json, const std::string& expected_json) {\n+    AssertUnary(ArrayFromJSON(type_singleton(), arg_json),\n+                ArrayFromJSON(type_singleton(), expected_json));\n+  }\n+\n+  using UnaryFunction = std::function<Result<Datum>(const Datum&, ExecContext*)>;\n+  UnaryFunction func_;\n+};\n+\n+TEST_F(TestValidityKernels, ArrayIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[false]\");\n+  this->AssertUnary(\"[1]\", \"[true]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[false, true, true, false]\");\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+  Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n+  ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n+  ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n+}\n+\n+TEST_F(TestValidityKernels, ScalarIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  AssertUnary(Datum(19.7), Datum(true));\n+  AssertUnary(MakeNullScalar(float64()), Datum(false));\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[true]\");\n+  this->AssertUnary(\"[1]\", \"[false]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[true, false, false, true]\");\n+}\n+\n+TEST_F(TestValidityKernels, DISABLED_ScalarIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  AssertUnary(Datum(19.7), Datum(false));\n+  AssertUnary(MakeNullScalar(float64()), Datum(true));\n+}\n+\n+class IsValidProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_valid\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsValidProperty, TestIsValidProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsValidPropertyTest, IsValidProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n+\n+class IsNullProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_null\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(!args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsNullProperty, TestIsNullProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsNullPropertyTest, IsNullProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n\nReview comment:\n       Honestly this seems quite complex / opaque to me -- I am not going to be eager to write unit tests in this fashion. I would personally rather keep things as simple and explicit as possible so it's obvious what is being tested. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T03:18:34.156+0000",
                    "updated": "2020-06-13T03:18:34.156+0000",
                    "started": "2020-06-13T03:18:34.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445270",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#issuecomment-643560679\n\n\n   I'm not thrilled about the testing mixin. Can we split all that out into a separate PR (if at all, will see what @pitrou thinks about it) so that these kernels are not held hostage over it? \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T03:20:10.141+0000",
                    "updated": "2020-06-13T03:20:10.141+0000",
                    "started": "2020-06-13T03:20:10.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445271",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r439739768\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -0,0 +1,97 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/common.h\"\n+\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/bitmap_ops.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct IsValid {\n+  static void Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    checked_cast<BooleanScalar*>(out)->value = in.is_valid;\n+  }\n+\n+  static void Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    if (arr.buffers[0] != nullptr && out->offset == arr.offset &&\n+        out->length == arr.length) {\n+      out->buffers[1] = arr.buffers[0];\n+      return;\n+    }\n\nReview comment:\n       If you want to do a zero-copy optimization, you need to configure the kernel to use  `MemAllocation::COMPUTED_NO_PREALLOCATE`. This also makes it so you don't have to check the offset and length. You will however have to allocate memory when the zero copy path is not possible\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T13:34:54.107+0000",
                    "updated": "2020-06-13T13:34:54.107+0000",
                    "started": "2020-06-13T13:34:54.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445341",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r440130579\n\n\n\n##########\nFile path: cpp/src/arrow/testing/random.h\n##########\n@@ -250,6 +250,9 @@ class ARROW_EXPORT RandomArrayGenerator {\n                                            int32_t min_length, int32_t max_length,\n                                            double null_probability = 0);\n \n+  std::shared_ptr<Array> Of(std::shared_ptr<DataType> type, int64_t size,\n\nReview comment:\n       Call it `Array`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/test_util.h\n##########\n@@ -97,5 +99,63 @@ using TestingStringTypes =\n \n static constexpr random::SeedType kRandomSeed = 0x0ff1ce;\n \n+struct ScalarFunctionPropertyTestParam {\n\nReview comment:\n       I'm not sure what the name \"property\" is supposed to refer to.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -0,0 +1,97 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/common.h\"\n+\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/bitmap_ops.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct IsValid {\n+  static void Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    checked_cast<BooleanScalar*>(out)->value = in.is_valid;\n+  }\n+\n+  static void Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    if (arr.buffers[0] != nullptr && out->offset == arr.offset &&\n+        out->length == arr.length) {\n+      out->buffers[1] = arr.buffers[0];\n+      return;\n+    }\n+\n+    if (arr.null_count == 0 || arr.buffers[0] == nullptr) {\n+      BitUtil::SetBitsTo(out->buffers[1]->mutable_data(), out->offset, out->length, true);\n+      return;\n+    }\n+\n+    internal::CopyBitmap(arr.buffers[0]->data(), arr.offset, arr.length,\n+                         out->buffers[1]->mutable_data(), out->offset);\n+  }\n+};\n+\n+struct IsNull {\n+  static void Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+  }\n+\n+  static void Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    if (arr.null_count == 0 || arr.buffers[0] == nullptr) {\n+      BitUtil::SetBitsTo(out->buffers[1]->mutable_data(), out->offset, out->length,\n+                         false);\n+      return;\n+    }\n+\n+    internal::InvertBitmap(arr.buffers[0]->data(), arr.offset, arr.length,\n+                           out->buffers[1]->mutable_data(), out->offset);\n+  }\n+};\n+\n+namespace codegen {\n+\n+void MakeFunction(std::string name, std::vector<InputType> in_types, OutputType out_type,\n+                  ArrayKernelExec exec, FunctionRegistry* registry,\n+                  NullHandling::type null_handling) {\n+  Arity arity{static_cast<int>(in_types.size())};\n+  auto func = std::make_shared<ScalarFunction>(name, arity);\n+\n+  ScalarKernel kernel(std::move(in_types), out_type, exec);\n+  kernel.null_handling = null_handling;\n+  kernel.can_write_into_slices = true;\n+\n+  DCHECK_OK(func->AddKernel(std::move(kernel)));\n+  DCHECK_OK(registry->AddFunction(std::move(func)));\n+}\n+\n+}  // namespace codegen\n\nReview comment:\n       Looks like most of this file should be under the anonymous namespace.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class TestValidityKernels : public ::testing::Test {\n+ protected:\n+  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n+  // testing multiple types seems redundant.\n+  using ArrowType = BooleanType;\n+\n+  using CType = typename ArrowType::c_type;\n+\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<ArrowType>::type_singleton();\n+  }\n+\n+  void AssertUnary(Datum arg, Datum expected) {\n+    ASSERT_OK_AND_ASSIGN(auto actual, func_(arg, nullptr));\n+    ASSERT_EQ(actual.kind(), expected.kind());\n+    if (actual.kind() == Datum::ARRAY) {\n+      ASSERT_OK(actual.make_array()->ValidateFull());\n+      AssertArraysApproxEqual(*expected.make_array(), *actual.make_array());\n+    } else {\n+      AssertScalarsEqual(*expected.scalar(), *actual.scalar());\n+    }\n+  }\n+\n+  void AssertUnary(const std::string& arg_json, const std::string& expected_json) {\n+    AssertUnary(ArrayFromJSON(type_singleton(), arg_json),\n+                ArrayFromJSON(type_singleton(), expected_json));\n+  }\n+\n+  using UnaryFunction = std::function<Result<Datum>(const Datum&, ExecContext*)>;\n+  UnaryFunction func_;\n+};\n+\n+TEST_F(TestValidityKernels, ArrayIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[false]\");\n+  this->AssertUnary(\"[1]\", \"[true]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[false, true, true, false]\");\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+  Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n+  ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n+  ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n+}\n+\n+TEST_F(TestValidityKernels, ScalarIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  AssertUnary(Datum(19.7), Datum(true));\n+  AssertUnary(MakeNullScalar(float64()), Datum(false));\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[true]\");\n+  this->AssertUnary(\"[1]\", \"[false]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[true, false, false, true]\");\n+}\n+\n+TEST_F(TestValidityKernels, DISABLED_ScalarIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  AssertUnary(Datum(19.7), Datum(false));\n+  AssertUnary(MakeNullScalar(float64()), Datum(true));\n+}\n+\n+class IsValidProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_valid\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsValidProperty, TestIsValidProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsValidPropertyTest, IsValidProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n+\n+class IsNullProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_null\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(!args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsNullProperty, TestIsNullProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsNullPropertyTest, IsNullProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n\nReview comment:\n       I agree that this looks over-engineered for what it seems to be doing (I may be misunderstanding) -- basically generating test data and checking expected values.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class TestValidityKernels : public ::testing::Test {\n+ protected:\n+  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n+  // testing multiple types seems redundant.\n+  using ArrowType = BooleanType;\n+\n+  using CType = typename ArrowType::c_type;\n+\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<ArrowType>::type_singleton();\n+  }\n+\n+  void AssertUnary(Datum arg, Datum expected) {\n+    ASSERT_OK_AND_ASSIGN(auto actual, func_(arg, nullptr));\n+    ASSERT_EQ(actual.kind(), expected.kind());\n+    if (actual.kind() == Datum::ARRAY) {\n+      ASSERT_OK(actual.make_array()->ValidateFull());\n+      AssertArraysApproxEqual(*expected.make_array(), *actual.make_array());\n+    } else {\n+      AssertScalarsEqual(*expected.scalar(), *actual.scalar());\n+    }\n+  }\n+\n+  void AssertUnary(const std::string& arg_json, const std::string& expected_json) {\n+    AssertUnary(ArrayFromJSON(type_singleton(), arg_json),\n+                ArrayFromJSON(type_singleton(), expected_json));\n+  }\n+\n+  using UnaryFunction = std::function<Result<Datum>(const Datum&, ExecContext*)>;\n+  UnaryFunction func_;\n+};\n+\n+TEST_F(TestValidityKernels, ArrayIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[false]\");\n+  this->AssertUnary(\"[1]\", \"[true]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[false, true, true, false]\");\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+  Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n+  ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n+  ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n+}\n+\n+TEST_F(TestValidityKernels, ScalarIsValid) {\n+  func_ = arrow::compute::IsValid;\n+\n+  AssertUnary(Datum(19.7), Datum(true));\n+  AssertUnary(MakeNullScalar(float64()), Datum(false));\n+}\n+\n+TEST_F(TestValidityKernels, ArrayIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  this->AssertUnary(\"[]\", \"[]\");\n+  this->AssertUnary(\"[null]\", \"[true]\");\n+  this->AssertUnary(\"[1]\", \"[false]\");\n+  this->AssertUnary(\"[null, 1, 0, null]\", \"[true, false, false, true]\");\n+}\n+\n+TEST_F(TestValidityKernels, DISABLED_ScalarIsNull) {\n+  func_ = arrow::compute::IsNull;\n+\n+  AssertUnary(Datum(19.7), Datum(false));\n+  AssertUnary(MakeNullScalar(float64()), Datum(true));\n+}\n+\n+class IsValidProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_valid\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsValidProperty, TestIsValidProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsValidPropertyTest, IsValidProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n+                         }));\n+\n+class IsNullProperty : public ScalarFunctionPropertyMixin {\n+ public:\n+  std::shared_ptr<ScalarFunction> GetFunction() override {\n+    return internal::checked_pointer_cast<ScalarFunction>(\n+        *GetFunctionRegistry()->GetFunction(\"is_null\"));\n+  }\n+\n+  Result<std::shared_ptr<Scalar>> Contract(const ScalarVector& args,\n+                                           const FunctionOptions*) override {\n+    return std::make_shared<BooleanScalar>(!args[0]->is_valid);\n+  }\n+};\n+\n+TEST_P(IsNullProperty, TestIsNullProperty) { Validate(); }\n+\n+INSTANTIATE_TEST_SUITE_P(IsNullPropertyTest, IsNullProperty,\n+                         ScalarFunctionPropertyTestParam::Values({\n+                             {0, 0.0},\n+                             {1, 0.0},\n+                             {2, 0.0},\n+                             {1024, 0.25},\n\nReview comment:\n       Am I wrong, or is this generating a new test subclass for simply different parameter values? This does not seem sound, especially as it will blow up compile times.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-15T12:19:30.059+0000",
                    "updated": "2020-06-15T12:19:30.059+0000",
                    "started": "2020-06-15T12:19:30.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445809",
                    "issueId": "13069845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/worklog/445837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7410:\nURL: https://github.com/apache/arrow/pull/7410#discussion_r440182319\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -0,0 +1,97 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/common.h\"\n+\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/bitmap_ops.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct IsValid {\n+  static void Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    checked_cast<BooleanScalar*>(out)->value = in.is_valid;\n+  }\n+\n+  static void Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    if (arr.buffers[0] != nullptr && out->offset == arr.offset &&\n+        out->length == arr.length) {\n+      out->buffers[1] = arr.buffers[0];\n+      return;\n+    }\n+\n+    if (arr.null_count == 0 || arr.buffers[0] == nullptr) {\n+      BitUtil::SetBitsTo(out->buffers[1]->mutable_data(), out->offset, out->length, true);\n+      return;\n+    }\n+\n+    internal::CopyBitmap(arr.buffers[0]->data(), arr.offset, arr.length,\n+                         out->buffers[1]->mutable_data(), out->offset);\n+  }\n+};\n+\n+struct IsNull {\n+  static void Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+  }\n+\n+  static void Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    if (arr.null_count == 0 || arr.buffers[0] == nullptr) {\n+      BitUtil::SetBitsTo(out->buffers[1]->mutable_data(), out->offset, out->length,\n+                         false);\n+      return;\n+    }\n+\n+    internal::InvertBitmap(arr.buffers[0]->data(), arr.offset, arr.length,\n+                           out->buffers[1]->mutable_data(), out->offset);\n+  }\n+};\n+\n+namespace codegen {\n+\n+void MakeFunction(std::string name, std::vector<InputType> in_types, OutputType out_type,\n+                  ArrayKernelExec exec, FunctionRegistry* registry,\n+                  NullHandling::type null_handling) {\n+  Arity arity{static_cast<int>(in_types.size())};\n+  auto func = std::make_shared<ScalarFunction>(name, arity);\n+\n+  ScalarKernel kernel(std::move(in_types), out_type, exec);\n+  kernel.null_handling = null_handling;\n+  kernel.can_write_into_slices = true;\n+\n+  DCHECK_OK(func->AddKernel(std::move(kernel)));\n+  DCHECK_OK(registry->AddFunction(std::move(func)));\n+}\n+\n+}  // namespace codegen\n\nReview comment:\n       okay\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-15T13:39:59.100+0000",
                    "updated": "2020-06-15T13:39:59.100+0000",
                    "started": "2020-06-15T13:39:59.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445837",
                    "issueId": "13069845"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 27000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@bd1e9eb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d546caf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a590a82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4762c72[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78c09204[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7f34483a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2deb5044[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@184bec37[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64670d88[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@39cfeca6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e51e2ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@93c9502[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 16 22:03:39 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-16T22:03:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-971/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-05-08T00:55:10.000+0000",
        "updated": "2020-06-17T14:27:55.000+0000",
        "timeoriginalestimate": null,
        "description": "For arrays with nulls, this amounts to returning the validity bitmap. Without nulls, an array of all 1 bits must be constructed. For isnull, the bits must be flipped (in this case, the un-set part of the new bitmap must stay 0, though).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Python] Implement Array.isvalid/notnull/isnull as scalar functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16249741",
                    "id": "16249741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Licht-T",
                        "name": "Licht-T",
                        "key": "licht-t",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=licht-t&avatarId=33236",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=licht-t&avatarId=33236",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=licht-t&avatarId=33236",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=licht-t&avatarId=33236"
                        },
                        "displayName": "Licht Takeuchi",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "[~wesmckinn] Is this already implemented in C++?\r\nhttps://github.com/apache/arrow/blob/e8331f46f8b324271e694557789ea53b082fdc05/cpp/src/arrow/array.h#L185",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Licht-T",
                        "name": "Licht-T",
                        "key": "licht-t",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=licht-t&avatarId=33236",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=licht-t&avatarId=33236",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=licht-t&avatarId=33236",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=licht-t&avatarId=33236"
                        },
                        "displayName": "Licht Takeuchi",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2017-11-13T15:44:24.266+0000",
                    "updated": "2017-11-13T15:44:24.266+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16250018",
                    "id": "16250018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The desired scope for this JIRA was to be like {{pandas.isnull}} or {{pandas.notnull}}, so returning a {{pyarrow.BooleanArray}} result",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-13T19:10:31.258+0000",
                    "updated": "2017-11-13T19:10:31.258+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16274231",
                    "id": "16274231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T opened a new pull request #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378\n \n \n   This closes [ARROW-971](https://issues.apache.org/jira/browse/ARROW-971).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-01T10:40:17.448+0000",
                    "updated": "2017-12-01T10:40:17.448+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16274942",
                    "id": "16274942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-348609023\n \n \n   CI on Windows failed because of `logging.h`.\r\n   ```bash\r\n     c:\\projects\\arrow\\cpp\\src\\arrow\\util\\logging.h(138): error C2220: warning treated as error - no 'object' file generated [C:\\projects\\arrow\\cpp\\build\\src\\arrow\\arrow_static.vcxproj]\r\n   \"C:\\projects\\arrow\\cpp\\build\\INSTALL.vcxproj\" (default target) (1) ->\r\n   \"C:\\projects\\arrow\\cpp\\build\\ALL_BUILD.vcxproj\" (default target) (3) ->\r\n   \"C:\\projects\\arrow\\cpp\\build\\src\\arrow\\python\\arrow_python_shared.vcxproj\" (default target) (17) ->\r\n   \"C:\\projects\\arrow\\cpp\\build\\src\\arrow\\arrow_shared.vcxproj\" (default target) (18) ->\r\n     c:\\projects\\arrow\\cpp\\src\\arrow\\util\\logging.h(138): error C2220: warning treated as error - no 'object' file generated [C:\\projects\\arrow\\cpp\\build\\src\\arrow\\arrow_shared.vcxproj]\r\n       79 Warning(s)\r\n       2 Error(s)\r\n   Time Elapsed 00:13:59.08\r\n   \r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-01T20:41:13.455+0000",
                    "updated": "2017-12-01T20:41:13.455+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16275033",
                    "id": "16275033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-348622201\n \n \n   I need to think a bit about this one. The Python API side is OK, but on the C++ side we might want to make this kernel-like\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-01T21:43:42.627+0000",
                    "updated": "2017-12-01T21:43:42.627+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16275920",
                    "id": "16275920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-348764255\n \n \n   @wesm So you mean this should be implemented so as to be reusable in another component?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T12:50:49.630+0000",
                    "updated": "2017-12-03T12:50:49.630+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16275921",
                    "id": "16275921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-348764255\n \n \n   @wesm So you mean this should be implemented as reusable in another component?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T12:51:23.410+0000",
                    "updated": "2017-12-03T12:51:23.410+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16276890",
                    "id": "16276890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-348984723\n \n \n   Right, this computation might be a unit of work in some more general computational pipeline, so it would be useful for this to be implemented with a similar API to other array kernel functions\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T14:52:44.999+0000",
                    "updated": "2017-12-04T14:52:44.999+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/16348858",
                    "id": "16348858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1378: ARROW-971: [C++/Python] Implement Array.IsValid/IsNull\nURL: https://github.com/apache/arrow/pull/1378#issuecomment-362322022\n \n \n   @Licht-T What's the status of this PR? Do you plan to move this to a kernel?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:32:07.643+0000",
                    "updated": "2018-02-01T16:32:07.643+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/17116043",
                    "id": "17116043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The correct way to implement is now as {{arrow::compute::ScalarFunction}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-25T14:03:13.799+0000",
                    "updated": "2020-05-25T14:03:26.119+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069845/comment/17137953",
                    "id": "17137953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7410\n[https://github.com/apache/arrow/pull/7410]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-16T22:03:39.790+0000",
                    "updated": "2020-06-16T22:03:39.790+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|i3elyf:",
        "customfield_12314139": null
    }
}