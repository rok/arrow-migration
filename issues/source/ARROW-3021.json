{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13177638",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638",
    "key": "ARROW-3021",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3021/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet opened a new pull request #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402\n \n \n   This CL introduces array.Builder, a generic interface to build\r\n   array.Interface.\r\n   It is needed to be able to build Lists' array values.\r\n   \r\n   array.NewListArray and array.NewListBuilder are introduced to,\r\n   respectively, create a new List array value and a builder value to\r\n   populate the contents of a List array.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T10:17:01.900+0000",
                    "updated": "2018-08-08T10:17:01.900+0000",
                    "started": "2018-08-08T10:17:01.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132296",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#issuecomment-411357839\n \n \n   @stuartcarnie PTAL.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T10:17:16.328+0000",
                    "updated": "2018-08-08T10:17:16.328+0000",
                    "started": "2018-08-08T10:17:16.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132297",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#issuecomment-411358426\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=h1) Report\n   > Merging [#2402](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5fda431eb748f2614022143ad3eaa951d00dd10e?src=pr&el=desc) will **decrease** coverage by `46.99%`.\n   > The diff coverage is `49.77%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2402/graphs/tree.svg?src=pr&token=LpTCFbqVT1&height=150&width=650)](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2402      +/-   ##\n   ==========================================\n   - Coverage   84.73%   37.73%     -47%     \n   ==========================================\n     Files         293       47     -246     \n     Lines       45471     2030   -43441     \n   ==========================================\n   - Hits        38529      766   -37763     \n   + Misses       6905     1223    -5682     \n   - Partials       37       41       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `84.61% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/type\\_string.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV9zdHJpbmcuZ28=) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/datatype\\_list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbGlzdC5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `12.77% <10.86%> (+5.72%)` | :arrow_up: |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `74.07% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.48% <100%> (+13.71%)` | :arrow_up: |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `58.82% <16.66%> (-25.18%)` | :arrow_down: |\n   | [go/arrow/array/booleanbuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbmJ1aWxkZXIuZ28=) | `56.52% <33.33%> (-1.69%)` | :arrow_down: |\n   | [go/arrow/array/listbuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdGJ1aWxkZXIuZ28=) | `77.5% <77.5%> (\u00f8)` | |\n   | ... and [270 more](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=footer). Last update [5fda431...5e2bd46](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T10:19:47.562+0000",
                    "updated": "2018-08-08T10:19:47.562+0000",
                    "started": "2018-08-08T10:19:47.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132298",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#issuecomment-411358426\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=h1) Report\n   > Merging [#2402](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5fda431eb748f2614022143ad3eaa951d00dd10e?src=pr&el=desc) will **decrease** coverage by `45.52%`.\n   > The diff coverage is `52.88%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2402/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2402       +/-   ##\n   ===========================================\n   - Coverage   84.73%   39.21%   -45.53%     \n   ===========================================\n     Files         293       47      -246     \n     Lines       45471     2030    -43441     \n   ===========================================\n   - Hits        38529      796    -37733     \n   + Misses       6905     1193     -5712     \n   - Partials       37       41        +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/type\\_string.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV9zdHJpbmcuZ28=) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `84.61% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `13.17% <10.86%> (+6.11%)` | :arrow_up: |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `74.07% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.48% <100%> (+13.71%)` | :arrow_up: |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `58.82% <16.66%> (-25.18%)` | :arrow_down: |\n   | [go/arrow/datatype\\_list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbGlzdC5nbw==) | `28.57% <28.57%> (\u00f8)` | |\n   | [go/arrow/array/booleanbuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbmJ1aWxkZXIuZ28=) | `56.52% <33.33%> (-1.69%)` | :arrow_down: |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `82.14% <83.33%> (+2.97%)` | :arrow_up: |\n   | ... and [259 more](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=footer). Last update [5fda431...b71349a](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T10:54:11.858+0000",
                    "updated": "2018-08-08T10:54:11.858+0000",
                    "started": "2018-08-08T10:54:11.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132306",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#issuecomment-411358426\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=h1) Report\n   > Merging [#2402](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5fda431eb748f2614022143ad3eaa951d00dd10e?src=pr&el=desc) will **decrease** coverage by `45.32%`.\n   > The diff coverage is `54.22%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2402/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2402       +/-   ##\n   ==========================================\n   - Coverage   84.73%   39.4%   -45.33%     \n   ==========================================\n     Files         293      47      -246     \n     Lines       45471    2030    -43441     \n   ==========================================\n   - Hits        38529     800    -37729     \n   + Misses       6905    1185     -5720     \n   - Partials       37      45        +8\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `84.61% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/type\\_string.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV9zdHJpbmcuZ28=) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `13.17% <10.86%> (+6.11%)` | :arrow_up: |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `74.07% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.48% <100%> (+13.71%)` | :arrow_up: |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `58.82% <16.66%> (-25.18%)` | :arrow_down: |\n   | [go/arrow/array/booleanbuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbmJ1aWxkZXIuZ28=) | `56.52% <33.33%> (-1.69%)` | :arrow_down: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `71.42% <71.42%> (\u00f8)` | |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `82.14% <83.33%> (+2.97%)` | :arrow_up: |\n   | ... and [273 more](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=footer). Last update [5fda431...d1c90e6](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T11:05:23.098+0000",
                    "updated": "2018-08-08T11:05:23.098+0000",
                    "started": "2018-08-08T11:05:23.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132307",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#issuecomment-411358426\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=h1) Report\n   > Merging [#2402](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5fda431eb748f2614022143ad3eaa951d00dd10e?src=pr&el=desc) will **decrease** coverage by `44.83%`.\n   > The diff coverage is `54.22%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2402/graphs/tree.svg?width=650&height=150&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2402       +/-   ##\n   ==========================================\n   - Coverage   84.73%   39.9%   -44.84%     \n   ==========================================\n     Files         293      47      -246     \n     Lines       45471    2030    -43441     \n   ==========================================\n   - Hits        38529     810    -37719     \n   + Misses       6905    1179     -5726     \n   - Partials       37      41        +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `84.61% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/type\\_string.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV9zdHJpbmcuZ28=) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `13.17% <10.86%> (+6.11%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.48% <100%> (+13.71%)` | :arrow_up: |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `74.07% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `58.82% <16.66%> (-25.18%)` | :arrow_down: |\n   | [go/arrow/array/booleanbuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbmJ1aWxkZXIuZ28=) | `56.52% <33.33%> (-1.69%)` | :arrow_down: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `71.42% <71.42%> (\u00f8)` | |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `82.14% <83.33%> (+2.97%)` | :arrow_up: |\n   | ... and [260 more](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=footer). Last update [5fda431...264f2bc](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T12:55:41.499+0000",
                    "updated": "2018-08-08T12:55:41.499+0000",
                    "started": "2018-08-08T12:55:41.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132361",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#issuecomment-411358426\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=h1) Report\n   > Merging [#2402](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5fda431eb748f2614022143ad3eaa951d00dd10e?src=pr&el=desc) will **decrease** coverage by `45.32%`.\n   > The diff coverage is `54.22%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2402/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2402       +/-   ##\n   ==========================================\n   - Coverage   84.73%   39.4%   -45.33%     \n   ==========================================\n     Files         293      47      -246     \n     Lines       45471    2030    -43441     \n   ==========================================\n   - Hits        38529     800    -37729     \n   + Misses       6905    1185     -5720     \n   - Partials       37      45        +8\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `84.61% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/type\\_string.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV9zdHJpbmcuZ28=) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `13.17% <10.86%> (+6.11%)` | :arrow_up: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `91.48% <100%> (+13.71%)` | :arrow_up: |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `74.07% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `58.82% <16.66%> (-25.18%)` | :arrow_down: |\n   | [go/arrow/array/booleanbuilder.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbmJ1aWxkZXIuZ28=) | `56.52% <33.33%> (-1.69%)` | :arrow_down: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `71.42% <71.42%> (\u00f8)` | |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `82.14% <83.33%> (+2.97%)` | :arrow_up: |\n   | ... and [273 more](https://codecov.io/gh/apache/arrow/pull/2402/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=footer). Last update [5fda431...255b425](https://codecov.io/gh/apache/arrow/pull/2402?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T14:06:37.284+0000",
                    "updated": "2018-08-08T14:06:37.284+0000",
                    "started": "2018-08-08T14:06:37.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132380",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cristaloleg commented on a change in pull request #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#discussion_r208609624\n \n \n\n ##########\n File path: go/arrow/array/builder.go\n ##########\n @@ -158,7 +181,55 @@ func (b *builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n+\n+func newBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n+\t// FIXME(sbinet): use a type switch on dtype instead?\n+\tswitch dtype.ID() {\n+\tcase arrow.NULL:\n+\tcase arrow.BOOL:\n+\t\treturn NewBooleanBuilder(mem)\n+\tcase arrow.UINT8:\n+\t\treturn NewUint8Builder(mem)\n+\tcase arrow.INT8:\n+\t\treturn NewInt8Builder(mem)\n+\tcase arrow.UINT16:\n+\t\treturn NewUint16Builder(mem)\n+\tcase arrow.INT16:\n+\t\treturn NewInt16Builder(mem)\n+\tcase arrow.UINT32:\n+\t\treturn NewUint32Builder(mem)\n+\tcase arrow.INT32:\n+\t\treturn NewInt32Builder(mem)\n+\tcase arrow.UINT64:\n+\t\treturn NewUint64Builder(mem)\n+\tcase arrow.INT64:\n+\t\treturn NewInt64Builder(mem)\n+\tcase arrow.HALF_FLOAT:\n+\tcase arrow.FLOAT32:\n+\t\treturn NewFloat32Builder(mem)\n+\tcase arrow.FLOAT64:\n+\t\treturn NewFloat64Builder(mem)\n+\tcase arrow.STRING:\n+\tcase arrow.BINARY:\n+\tcase arrow.FIXED_SIZE_BINARY:\n+\tcase arrow.DATE32:\n+\tcase arrow.DATE64:\n+\tcase arrow.TIMESTAMP:\n+\tcase arrow.TIME32:\n+\tcase arrow.TIME64:\n+\tcase arrow.INTERVAL:\n+\tcase arrow.DECIMAL:\n \n Review comment:\n   WDYT about grouping unhandled cases? Ex:\r\n   ```go\r\n   case arrow.STRING, arrow.BINARY, arrow.FIXED_SIZE_BINARY, \r\n   arrow.DATE32, arrow.DATE64, arrow.TIMESTAMP, \r\n   arrow.TIME32, arrow.TIME64, arrow.INTERVAL, \r\n   arrow.DECIMAL:\r\n   \tpanic(fmt.Errorf(\"arrow/array: unsupported builder for %T\", dtype))\r\n   ```\r\n   An same for case above & below \ud83d\ude09 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T14:47:19.485+0000",
                    "updated": "2018-08-08T14:47:19.485+0000",
                    "started": "2018-08-08T14:47:19.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132390",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on a change in pull request #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402#discussion_r208621376\n \n \n\n ##########\n File path: go/arrow/array/builder.go\n ##########\n @@ -158,7 +181,55 @@ func (b *builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n+\n+func newBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n+\t// FIXME(sbinet): use a type switch on dtype instead?\n+\tswitch dtype.ID() {\n+\tcase arrow.NULL:\n+\tcase arrow.BOOL:\n+\t\treturn NewBooleanBuilder(mem)\n+\tcase arrow.UINT8:\n+\t\treturn NewUint8Builder(mem)\n+\tcase arrow.INT8:\n+\t\treturn NewInt8Builder(mem)\n+\tcase arrow.UINT16:\n+\t\treturn NewUint16Builder(mem)\n+\tcase arrow.INT16:\n+\t\treturn NewInt16Builder(mem)\n+\tcase arrow.UINT32:\n+\t\treturn NewUint32Builder(mem)\n+\tcase arrow.INT32:\n+\t\treturn NewInt32Builder(mem)\n+\tcase arrow.UINT64:\n+\t\treturn NewUint64Builder(mem)\n+\tcase arrow.INT64:\n+\t\treturn NewInt64Builder(mem)\n+\tcase arrow.HALF_FLOAT:\n+\tcase arrow.FLOAT32:\n+\t\treturn NewFloat32Builder(mem)\n+\tcase arrow.FLOAT64:\n+\t\treturn NewFloat64Builder(mem)\n+\tcase arrow.STRING:\n+\tcase arrow.BINARY:\n+\tcase arrow.FIXED_SIZE_BINARY:\n+\tcase arrow.DATE32:\n+\tcase arrow.DATE64:\n+\tcase arrow.TIMESTAMP:\n+\tcase arrow.TIME32:\n+\tcase arrow.TIME64:\n+\tcase arrow.INTERVAL:\n+\tcase arrow.DECIMAL:\n \n Review comment:\n   leaving it as is would reduce the diff-noise when the support for each of these arrays lands.\r\n   \r\n   but I can change to what you suggest.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T15:13:42.689+0000",
                    "updated": "2018-08-08T15:13:42.689+0000",
                    "started": "2018-08-08T15:13:42.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132405",
                    "issueId": "13177638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/worklog/132634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2402: ARROW-3021: [Go] add support for List arrays\nURL: https://github.com/apache/arrow/pull/2402\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/array.go b/go/arrow/array/array.go\nindex d897690c5f..61cefac015 100644\n--- a/go/arrow/array/array.go\n+++ b/go/arrow/array/array.go\n@@ -88,14 +88,14 @@ func (a *array) Release() {\n }\n \n // DataType returns the type metadata for this instance.\n-func (a *array) DataType() arrow.DataType { return a.data.typE }\n+func (a *array) DataType() arrow.DataType { return a.data.dtype }\n \n // NullN returns the number of null values in the array.\n func (a *array) NullN() int {\n-\tif a.data.nullN < 0 {\n-\t\ta.data.nullN = a.data.length - bitutil.CountSetBits(a.nullBitmapBytes, a.data.length)\n+\tif a.data.nulls < 0 {\n+\t\ta.data.nulls = a.data.length - bitutil.CountSetBits(a.nullBitmapBytes, a.data.length)\n \t}\n-\treturn a.data.nullN\n+\treturn a.data.nulls\n }\n \n // NullBitmapBytes returns a byte slice of the validity bitmap.\n@@ -172,14 +172,18 @@ var (\n )\n \n func unsupportedArrayType(data *Data) Interface {\n-\tpanic(\"unsupported data type: \" + data.typE.ID().String())\n+\tpanic(\"unsupported data type: \" + data.dtype.ID().String())\n }\n \n func invalidDataType(data *Data) Interface {\n-\tpanic(\"invalid data type: \" + data.typE.ID().String())\n+\tpanic(\"invalid data type: \" + data.dtype.ID().String())\n }\n \n // MakeFromData constructs a strongly-typed array instance from generic Data.\n func MakeFromData(data *Data) Interface {\n-\treturn makeArrayFn[byte(data.typE.ID()&0x1f)](data)\n+\treturn makeArrayFn[byte(data.dtype.ID()&0x1f)](data)\n+}\n+\n+func init() {\n+\tmakeArrayFn[arrow.LIST] = func(data *Data) Interface { return NewListData(data) }\n }\ndiff --git a/go/arrow/array/array_test.go b/go/arrow/array/array_test.go\nindex 470401683c..cd051eefb8 100644\n--- a/go/arrow/array/array_test.go\n+++ b/go/arrow/array/array_test.go\n@@ -38,6 +38,7 @@ func TestMakeFromData(t *testing.T) {\n \t\tname     string\n \t\td        arrow.DataType\n \t\tsize     int\n+\t\tchild    []*array.Data\n \t\texpPanic bool\n \t\texpError string\n \t}{\n@@ -60,6 +61,11 @@ func TestMakeFromData(t *testing.T) {\n \t\t{name: \"binary\", d: &testDataType{arrow.BINARY}, size: 3},\n \t\t{name: \"timestamp\", d: &testDataType{arrow.TIMESTAMP}},\n \n+\t\t{name: \"list\", d: &testDataType{arrow.LIST}, child: []*array.Data{\n+\t\t\tarray.NewData(&testDataType{arrow.INT64}, 0, make([]*memory.Buffer, 4), nil, 0),\n+\t\t\tarray.NewData(&testDataType{arrow.INT64}, 0, make([]*memory.Buffer, 4), nil, 0),\n+\t\t}},\n+\n \t\t// invalid types\n \t\t{name: \"invalid(-1)\", d: &testDataType{arrow.Type(-1)}, expPanic: true, expError: \"invalid data type: Type(-1)\"},\n \t\t{name: \"invalid(28)\", d: &testDataType{arrow.Type(28)}, expPanic: true, expError: \"invalid data type: Type(28)\"},\n@@ -71,7 +77,7 @@ func TestMakeFromData(t *testing.T) {\n \t\t\tif test.size != 0 {\n \t\t\t\tn = test.size\n \t\t\t}\n-\t\t\tdata := array.NewData(test.d, 0, b[:n], 0)\n+\t\t\tdata := array.NewData(test.d, 0, b[:n], test.child, 0)\n \n \t\t\tif test.expPanic {\n \t\t\t\tassert.PanicsWithValue(t, test.expError, func() {\n@@ -104,7 +110,7 @@ func TestArray_NullN(t *testing.T) {\n \tfor _, test := range tests {\n \t\tt.Run(test.name, func(t *testing.T) {\n \t\t\tbuf := memory.NewBufferBytes(test.bm)\n-\t\t\tdata := array.NewData(arrow.FixedWidthTypes.Boolean, test.l, []*memory.Buffer{buf, nil}, test.n)\n+\t\t\tdata := array.NewData(arrow.FixedWidthTypes.Boolean, test.l, []*memory.Buffer{buf, nil}, nil, test.n)\n \t\t\tbuf.Release()\n \t\t\tar := array.MakeFromData(data)\n \t\t\tdata.Release()\ndiff --git a/go/arrow/array/binarybuilder.go b/go/arrow/array/binarybuilder.go\nindex 71aa4ccd51..8534d865a5 100644\n--- a/go/arrow/array/binarybuilder.go\n+++ b/go/arrow/array/binarybuilder.go\n@@ -33,15 +33,15 @@ const (\n type BinaryBuilder struct {\n \tbuilder\n \n-\ttypE    arrow.BinaryDataType\n+\tdtype   arrow.BinaryDataType\n \toffsets *int32BufferBuilder\n \tvalues  *byteBufferBuilder\n }\n \n-func NewBinaryBuilder(mem memory.Allocator, typE arrow.BinaryDataType) *BinaryBuilder {\n+func NewBinaryBuilder(mem memory.Allocator, dtype arrow.BinaryDataType) *BinaryBuilder {\n \tb := &BinaryBuilder{\n \t\tbuilder: builder{refCount: 1, mem: mem},\n-\t\ttypE:    typE,\n+\t\tdtype:   dtype,\n \t\toffsets: newInt32BufferBuilder(mem),\n \t\tvalues:  newByteBufferBuilder(mem),\n \t}\n@@ -163,7 +163,7 @@ func (b *BinaryBuilder) NewBinaryArray() (a *Binary) {\n func (b *BinaryBuilder) newData() (data *Data) {\n \tb.appendNextOffset()\n \toffsets, values := b.offsets.Finish(), b.values.Finish()\n-\tdata = NewData(b.typE, b.length, []*memory.Buffer{b.nullBitmap, offsets, values}, b.nullN)\n+\tdata = NewData(b.dtype, b.length, []*memory.Buffer{b.nullBitmap, offsets, values}, nil, b.nulls)\n \tif offsets != nil {\n \t\toffsets.Release()\n \t}\ndiff --git a/go/arrow/array/boolean.go b/go/arrow/array/boolean.go\nindex 0d41381b04..49468e5f94 100644\n--- a/go/arrow/array/boolean.go\n+++ b/go/arrow/array/boolean.go\n@@ -30,9 +30,9 @@ type Boolean struct {\n \n // NewBoolean creates a boolean array from the data memory.Buffer and contains length elements.\n // The nullBitmap buffer can be nil of there are no null values.\n-// If nullN is not known, use UnknownNullCount to calculate the value of NullN at runtime from the nullBitmap buffer.\n-func NewBoolean(length int, data *memory.Buffer, nullBitmap *memory.Buffer, nullN int) *Boolean {\n-\treturn NewBooleanData(NewData(arrow.FixedWidthTypes.Boolean, length, []*memory.Buffer{nullBitmap, data}, nullN))\n+// If nulls is not known, use UnknownNullCount to calculate the value of NullN at runtime from the nullBitmap buffer.\n+func NewBoolean(length int, data *memory.Buffer, nullBitmap *memory.Buffer, nulls int) *Boolean {\n+\treturn NewBooleanData(NewData(arrow.FixedWidthTypes.Boolean, length, []*memory.Buffer{nullBitmap, data}, nil, nulls))\n }\n \n func NewBooleanData(data *Data) *Boolean {\ndiff --git a/go/arrow/array/booleanbuilder.go b/go/arrow/array/booleanbuilder.go\nindex 05e506fb2b..8ec96acffb 100644\n--- a/go/arrow/array/booleanbuilder.go\n+++ b/go/arrow/array/booleanbuilder.go\n@@ -122,6 +122,12 @@ func (b *BooleanBuilder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Boolean array from the memory buffers used by the builder and resets the BooleanBuilder\n+// so it can be used to build a new array.\n+func (b *BooleanBuilder) NewArray() Interface {\n+\treturn b.NewBooleanArray()\n+}\n+\n // NewBooleanArray creates a Boolean array from the memory buffers used by the builder and resets the BooleanBuilder\n // so it can be used to build a new array.\n func (b *BooleanBuilder) NewBooleanArray() (a *Boolean) {\n@@ -137,7 +143,7 @@ func (b *BooleanBuilder) newData() *Data {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tres := NewData(arrow.FixedWidthTypes.Boolean, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tres := NewData(arrow.FixedWidthTypes.Boolean, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -148,3 +154,7 @@ func (b *BooleanBuilder) newData() *Data {\n \n \treturn res\n }\n+\n+var (\n+\t_ Builder = (*BooleanBuilder)(nil)\n+)\ndiff --git a/go/arrow/array/builder.go b/go/arrow/array/builder.go\nindex bde12fbc88..a20c30369b 100644\n--- a/go/arrow/array/builder.go\n+++ b/go/arrow/array/builder.go\n@@ -17,8 +17,10 @@\n package array\n \n import (\n+\t\"fmt\"\n \t\"sync/atomic\"\n \n+\t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/internal/bitutil\"\n \t\"github.com/apache/arrow/go/arrow/memory\"\n )\n@@ -27,12 +29,33 @@ const (\n \tminBuilderCapacity = 1 << 5\n )\n \n+// Builder provides an interface to build arrow arrays.\n+type Builder interface {\n+\t// Release decreases the reference count by 1.\n+\tRelease()\n+\n+\t// Len returns the number of elements in the array builder.\n+\tLen() int\n+\n+\t// Cap returns the total number of elements that can be stored\n+\t// without allocating additional memory.\n+\tCap() int\n+\n+\t// NullN returns the number of null values in the array builder.\n+\tNullN() int\n+\n+\t// NewArray creates a new array from the memory buffers used\n+\t// by the builder and resets the Builder so it can be used to build\n+\t// a new array.\n+\tNewArray() Interface\n+}\n+\n // builder provides common functionality for managing the validity bitmap (nulls) when building arrays.\n type builder struct {\n \trefCount   int64\n \tmem        memory.Allocator\n \tnullBitmap *memory.Buffer\n-\tnullN      int\n+\tnulls      int\n \tlength     int\n \tcapacity   int\n }\n@@ -50,7 +73,7 @@ func (b *builder) Len() int { return b.length }\n func (b *builder) Cap() int { return b.capacity }\n \n // NullN returns the number of null values in the array builder.\n-func (b *builder) NullN() int { return b.nullN }\n+func (b *builder) NullN() int { return b.nulls }\n \n func (b *builder) init(capacity int) {\n \ttoAlloc := bitutil.CeilByte(capacity) / 8\n@@ -66,7 +89,7 @@ func (b *builder) reset() {\n \t\tb.nullBitmap = nil\n \t}\n \n-\tb.nullN = 0\n+\tb.nulls = 0\n \tb.length = 0\n \tb.capacity = 0\n }\n@@ -119,7 +142,7 @@ func (b *builder) unsafeAppendBoolsToBitmap(valid []bool, length int) {\n \t\t\tbitSet |= bitutil.BitMask[bitOffset]\n \t\t} else {\n \t\t\tbitSet &= bitutil.FlippedBitMask[bitOffset]\n-\t\t\tb.nullN++\n+\t\t\tb.nulls++\n \t\t}\n \t\tbitOffset++\n \t}\n@@ -158,7 +181,55 @@ func (b *builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n+\n+func newBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n+\t// FIXME(sbinet): use a type switch on dtype instead?\n+\tswitch dtype.ID() {\n+\tcase arrow.NULL:\n+\tcase arrow.BOOL:\n+\t\treturn NewBooleanBuilder(mem)\n+\tcase arrow.UINT8:\n+\t\treturn NewUint8Builder(mem)\n+\tcase arrow.INT8:\n+\t\treturn NewInt8Builder(mem)\n+\tcase arrow.UINT16:\n+\t\treturn NewUint16Builder(mem)\n+\tcase arrow.INT16:\n+\t\treturn NewInt16Builder(mem)\n+\tcase arrow.UINT32:\n+\t\treturn NewUint32Builder(mem)\n+\tcase arrow.INT32:\n+\t\treturn NewInt32Builder(mem)\n+\tcase arrow.UINT64:\n+\t\treturn NewUint64Builder(mem)\n+\tcase arrow.INT64:\n+\t\treturn NewInt64Builder(mem)\n+\tcase arrow.HALF_FLOAT:\n+\tcase arrow.FLOAT32:\n+\t\treturn NewFloat32Builder(mem)\n+\tcase arrow.FLOAT64:\n+\t\treturn NewFloat64Builder(mem)\n+\tcase arrow.STRING:\n+\tcase arrow.BINARY:\n+\tcase arrow.FIXED_SIZE_BINARY:\n+\tcase arrow.DATE32:\n+\tcase arrow.DATE64:\n+\tcase arrow.TIMESTAMP:\n+\tcase arrow.TIME32:\n+\tcase arrow.TIME64:\n+\tcase arrow.INTERVAL:\n+\tcase arrow.DECIMAL:\n+\tcase arrow.LIST:\n+\t\ttyp := dtype.(*arrow.ListType)\n+\t\treturn NewListBuilder(mem, typ.Elem())\n+\tcase arrow.STRUCT:\n+\tcase arrow.UNION:\n+\tcase arrow.DICTIONARY:\n+\tcase arrow.MAP:\n+\t}\n+\tpanic(fmt.Errorf(\"arrow/array: unsupported builder for %T\", dtype))\n+}\ndiff --git a/go/arrow/array/data.go b/go/arrow/array/data.go\nindex e689f0fe49..72a88ede5b 100644\n--- a/go/arrow/array/data.go\n+++ b/go/arrow/array/data.go\n@@ -27,26 +27,33 @@ import (\n // A type which represents the memory and metadata for an Arrow array.\n type Data struct {\n \trefCount  int64\n-\ttypE      arrow.DataType\n-\tnullN     int\n+\tdtype     arrow.DataType\n+\tnulls     int\n \tlength    int\n \tbuffers   []*memory.Buffer // TODO(sgc): should this be an interface?\n \tchildData []*Data          // TODO(sgc): managed by ListArray, StructArray and UnionArray types\n }\n \n-func NewData(typE arrow.DataType, length int, buffers []*memory.Buffer, nullN int) *Data {\n+func NewData(dtype arrow.DataType, length int, buffers []*memory.Buffer, childData []*Data, nulls int) *Data {\n \tfor _, b := range buffers {\n \t\tif b != nil {\n \t\t\tb.Retain()\n \t\t}\n \t}\n \n+\tfor _, child := range childData {\n+\t\tif child != nil {\n+\t\t\tchild.Retain()\n+\t\t}\n+\t}\n+\n \treturn &Data{\n-\t\trefCount: 1,\n-\t\ttypE:     typE,\n-\t\tnullN:    nullN,\n-\t\tlength:   length,\n-\t\tbuffers:  buffers,\n+\t\trefCount:  1,\n+\t\tdtype:     dtype,\n+\t\tnulls:     nulls,\n+\t\tlength:    length,\n+\t\tbuffers:   buffers,\n+\t\tchildData: childData,\n \t}\n }\n \n@@ -76,6 +83,6 @@ func (d *Data) Release() {\n \t}\n }\n \n-func (d *Data) DataType() arrow.DataType { return d.typE }\n-func (d *Data) NullN() int               { return d.nullN }\n+func (d *Data) DataType() arrow.DataType { return d.dtype }\n+func (d *Data) NullN() int               { return d.nulls }\n func (d *Data) Len() int                 { return d.length }\ndiff --git a/go/arrow/array/list.go b/go/arrow/array/list.go\nnew file mode 100644\nindex 0000000000..344c137a09\n--- /dev/null\n+++ b/go/arrow/array/list.go\n@@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+)\n+\n+// List represents an immutable sequence of array values.\n+type List struct {\n+\tarray\n+\tvalues  Interface\n+\toffsets []int32\n+}\n+\n+// NewListData returns a new List array value, from data.\n+func NewListData(data *Data) *List {\n+\ta := &List{}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+func (a *List) ListValues() Interface { return a.values }\n+\n+func (a *List) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.offsets = arrow.Int32Traits.CastFromBytes(vals.Bytes())\n+\t}\n+\ta.values = MakeFromData(data.childData[0])\n+}\n+\n+// Len returns the number of elements in the array.\n+func (a *List) Len() int { return a.array.Len() }\n+\n+func (a *List) Offsets() []int32 { return a.offsets }\n+\n+var (\n+\t_ Interface = (*List)(nil)\n+)\ndiff --git a/go/arrow/array/list_test.go b/go/arrow/array/list_test.go\nnew file mode 100644\nindex 0000000000..0c30ecdb13\n--- /dev/null\n+++ b/go/arrow/array/list_test.go\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+func TestListArray(t *testing.T) {\n+\tvar (\n+\t\tpool    = memory.NewGoAllocator()\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int32{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\tfor i := 0; i < 10; i++ {\n+\t\tvb := lb.ValueBuilder().(*array.Int32Builder)\n+\t\tvb.Reserve(len(vs))\n+\n+\t\tpos := 0\n+\t\tfor i, length := range lengths {\n+\t\t\tlb.Append(isValid[i])\n+\t\t\tfor j := 0; j < length; j++ {\n+\t\t\t\tvb.Append(vs[pos])\n+\t\t\t\tpos++\n+\t\t\t}\n+\t\t}\n+\n+\t\tarr := lb.NewArray().(*array.List)\n+\t\tif got, want := arr.DataType().ID(), arrow.LIST; got != want {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t}\n+\n+\t\tif got, want := arr.Len(), len(isValid); got != want {\n+\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t}\n+\n+\t\tfor i := range lengths {\n+\t\t\tif got, want := arr.IsValid(i), isValid[i]; got != want {\n+\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t}\n+\t\t\tif got, want := arr.IsNull(i), lengths[i] == 0; got != want {\n+\t\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t\t}\n+\t\t}\n+\n+\t\tif got, want := arr.Offsets(), offsets; !reflect.DeepEqual(got, want) {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t}\n+\n+\t\tvarr := arr.ListValues().(*array.Int32)\n+\t\tif got, want := varr.Int32Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t}\n+\t}\n+}\n+\n+func TestListArrayEmpty(t *testing.T) {\n+\tpool := memory.NewGoAllocator()\n+\tlb := array.NewListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\tarr := lb.NewArray().(*array.List)\n+\tif got, want := arr.Len(), 0; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+}\n+\n+func TestListArrayBulkAppend(t *testing.T) {\n+\tvar (\n+\t\tpool    = memory.NewGoAllocator()\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int32{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\tvb := lb.ValueBuilder().(*array.Int32Builder)\n+\tvb.Reserve(len(vs))\n+\n+\tlb.AppendValues(offsets, isValid)\n+\tfor _, v := range vs {\n+\t\tvb.Append(v)\n+\t}\n+\n+\tarr := lb.NewArray().(*array.List)\n+\tif got, want := arr.DataType().ID(), arrow.LIST; got != want {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := arr.Len(), len(isValid); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i := range lengths {\n+\t\tif got, want := arr.IsValid(i), isValid[i]; got != want {\n+\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t}\n+\t\tif got, want := arr.IsNull(i), lengths[i] == 0; got != want {\n+\t\t\tt.Fatalf(\"got[%d]=%v, want[%d]=%v\", i, got, i, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := arr.Offsets(), offsets; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tvarr := arr.ListValues().(*array.Int32)\n+\tif got, want := varr.Int32Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\ndiff --git a/go/arrow/array/listbuilder.go b/go/arrow/array/listbuilder.go\nnew file mode 100644\nindex 0000000000..2bef68a583\n--- /dev/null\n+++ b/go/arrow/array/listbuilder.go\n@@ -0,0 +1,170 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/internal/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+type ListBuilder struct {\n+\tbuilder\n+\n+\tetype   arrow.DataType // data type of the list's elements.\n+\tvalues  Builder        // value builder for the list's elements.\n+\toffsets *Int32Builder\n+}\n+\n+// NewListBuilder returns a builder, using the provided memory allocator.\n+// The created list builder will create a list whose elements will be of type etype.\n+func NewListBuilder(mem memory.Allocator, etype arrow.DataType) *ListBuilder {\n+\treturn &ListBuilder{\n+\t\tbuilder: builder{refCount: 1, mem: mem},\n+\t\tetype:   etype,\n+\t\tvalues:  newBuilder(mem, etype),\n+\t\toffsets: NewInt32Builder(mem),\n+\t}\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+func (b *ListBuilder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tif b.nullBitmap != nil {\n+\t\t\tb.nullBitmap.Release()\n+\t\t\tb.nullBitmap = nil\n+\t\t}\n+\t}\n+\n+\tb.values.Release()\n+\tb.offsets.Release()\n+}\n+\n+func (b *ListBuilder) appendNextOffset() {\n+\tb.offsets.Append(int32(b.values.Len()))\n+}\n+\n+func (b *ListBuilder) Append(v bool) {\n+\tb.Reserve(1)\n+\tb.unsafeAppendBoolToBitmap(v)\n+\tb.appendNextOffset()\n+}\n+\n+func (b *ListBuilder) AppendNull() {\n+\tb.Reserve(1)\n+\tb.unsafeAppendBoolToBitmap(false)\n+\tb.appendNextOffset()\n+}\n+\n+func (b *ListBuilder) AppendValues(offsets []int32, valid []bool) {\n+\tb.Reserve(len(valid))\n+\tb.offsets.AppendValues(offsets, nil)\n+\tb.builder.unsafeAppendBoolsToBitmap(valid, len(valid))\n+}\n+\n+func (b *ListBuilder) unsafeAppend(v bool) {\n+\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\tb.length++\n+}\n+\n+func (b *ListBuilder) unsafeAppendBoolToBitmap(isValid bool) {\n+\tif isValid {\n+\t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\t} else {\n+\t\tb.nulls++\n+\t}\n+\tb.length++\n+}\n+\n+func (b *ListBuilder) init(capacity int) {\n+\tb.builder.init(capacity)\n+\tb.offsets.init(capacity + 1)\n+}\n+\n+// Reserve ensures there is enough space for appending n elements\n+// by checking the capacity and calling Resize if necessary.\n+func (b *ListBuilder) Reserve(n int) {\n+\tb.builder.reserve(n, b.Resize)\n+}\n+\n+// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+func (b *ListBuilder) Resize(n int) {\n+\tif n < minBuilderCapacity {\n+\t\tn = minBuilderCapacity\n+\t}\n+\n+\tif b.capacity == 0 {\n+\t\tb.init(n)\n+\t} else {\n+\t\tb.builder.resize(n, b.builder.init)\n+\t\tb.offsets.resize(n+1, b.offsets.init)\n+\t}\n+}\n+\n+func (b *ListBuilder) ValueBuilder() Builder {\n+\treturn b.values\n+}\n+\n+// NewArray creates a List array from the memory buffers used by the builder and resets the ListBuilder\n+// so it can be used to build a new array.\n+func (b *ListBuilder) NewArray() Interface {\n+\treturn b.NewListArray()\n+}\n+\n+// NewListArray creates a List array from the memory buffers used by the builder and resets the ListBuilder\n+// so it can be used to build a new array.\n+func (b *ListBuilder) NewListArray() (a *List) {\n+\tif b.offsets.Len() != b.length+1 {\n+\t\tb.appendNextOffset()\n+\t}\n+\tdata := b.newData()\n+\ta = NewListData(data)\n+\tdata.Release()\n+\treturn\n+}\n+\n+func (b *ListBuilder) newData() (data *Data) {\n+\tvalues := b.values.NewArray()\n+\tdefer values.Release()\n+\n+\tvar offsets *memory.Buffer\n+\tif b.offsets != nil {\n+\t\tarr := b.offsets.NewInt32Array()\n+\t\tdefer arr.Release()\n+\t\toffsets = arr.Data().buffers[1]\n+\t}\n+\n+\tdata = NewData(\n+\t\tarrow.ListOf(b.etype), b.length,\n+\t\t[]*memory.Buffer{\n+\t\t\tb.nullBitmap,\n+\t\t\toffsets,\n+\t\t},\n+\t\t[]*Data{values.Data()},\n+\t\tb.nulls,\n+\t)\n+\tb.reset()\n+\n+\treturn\n+}\ndiff --git a/go/arrow/array/numeric_test.go b/go/arrow/array/numeric_test.go\nindex d5b798f3d9..9f29394b3a 100644\n--- a/go/arrow/array/numeric_test.go\n+++ b/go/arrow/array/numeric_test.go\n@@ -28,7 +28,7 @@ import (\n func TestNewFloat64Data(t *testing.T) {\n \texp := []float64{1.0, 2.0, 4.0, 8.0, 16.0}\n \n-\tad := array.NewData(arrow.PrimitiveTypes.Float64, len(exp), []*memory.Buffer{nil, memory.NewBufferBytes(arrow.Float64Traits.CastToBytes(exp))}, 0)\n+\tad := array.NewData(arrow.PrimitiveTypes.Float64, len(exp), []*memory.Buffer{nil, memory.NewBufferBytes(arrow.Float64Traits.CastToBytes(exp))}, nil, 0)\n \tfa := array.NewFloat64Data(ad)\n \n \tassert.Equal(t, len(exp), fa.Len(), \"unexpected Len()\")\ndiff --git a/go/arrow/array/numericbuilder.gen.go b/go/arrow/array/numericbuilder.gen.go\nindex c4e3508bb1..06ec4ba750 100644\n--- a/go/arrow/array/numericbuilder.gen.go\n+++ b/go/arrow/array/numericbuilder.gen.go\n@@ -75,7 +75,7 @@ func (b *Int64Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -126,6 +126,12 @@ func (b *Int64Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Int64 array from the memory buffers used by the builder and resets the Int64Builder\n+// so it can be used to build a new array.\n+func (b *Int64Builder) NewArray() Interface {\n+\treturn b.NewInt64Array()\n+}\n+\n // NewInt64Array creates a Int64 array from the memory buffers used by the builder and resets the Int64Builder\n // so it can be used to build a new array.\n func (b *Int64Builder) NewInt64Array() (a *Int64) {\n@@ -141,7 +147,7 @@ func (b *Int64Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Int64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Int64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -201,7 +207,7 @@ func (b *Uint64Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -252,6 +258,12 @@ func (b *Uint64Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Uint64 array from the memory buffers used by the builder and resets the Uint64Builder\n+// so it can be used to build a new array.\n+func (b *Uint64Builder) NewArray() Interface {\n+\treturn b.NewUint64Array()\n+}\n+\n // NewUint64Array creates a Uint64 array from the memory buffers used by the builder and resets the Uint64Builder\n // so it can be used to build a new array.\n func (b *Uint64Builder) NewUint64Array() (a *Uint64) {\n@@ -267,7 +279,7 @@ func (b *Uint64Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Uint64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Uint64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -327,7 +339,7 @@ func (b *Float64Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -378,6 +390,12 @@ func (b *Float64Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Float64 array from the memory buffers used by the builder and resets the Float64Builder\n+// so it can be used to build a new array.\n+func (b *Float64Builder) NewArray() Interface {\n+\treturn b.NewFloat64Array()\n+}\n+\n // NewFloat64Array creates a Float64 array from the memory buffers used by the builder and resets the Float64Builder\n // so it can be used to build a new array.\n func (b *Float64Builder) NewFloat64Array() (a *Float64) {\n@@ -393,7 +411,7 @@ func (b *Float64Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Float64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Float64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -453,7 +471,7 @@ func (b *Int32Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -504,6 +522,12 @@ func (b *Int32Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Int32 array from the memory buffers used by the builder and resets the Int32Builder\n+// so it can be used to build a new array.\n+func (b *Int32Builder) NewArray() Interface {\n+\treturn b.NewInt32Array()\n+}\n+\n // NewInt32Array creates a Int32 array from the memory buffers used by the builder and resets the Int32Builder\n // so it can be used to build a new array.\n func (b *Int32Builder) NewInt32Array() (a *Int32) {\n@@ -519,7 +543,7 @@ func (b *Int32Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Int32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Int32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -579,7 +603,7 @@ func (b *Uint32Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -630,6 +654,12 @@ func (b *Uint32Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Uint32 array from the memory buffers used by the builder and resets the Uint32Builder\n+// so it can be used to build a new array.\n+func (b *Uint32Builder) NewArray() Interface {\n+\treturn b.NewUint32Array()\n+}\n+\n // NewUint32Array creates a Uint32 array from the memory buffers used by the builder and resets the Uint32Builder\n // so it can be used to build a new array.\n func (b *Uint32Builder) NewUint32Array() (a *Uint32) {\n@@ -645,7 +675,7 @@ func (b *Uint32Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Uint32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Uint32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -705,7 +735,7 @@ func (b *Float32Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -756,6 +786,12 @@ func (b *Float32Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Float32 array from the memory buffers used by the builder and resets the Float32Builder\n+// so it can be used to build a new array.\n+func (b *Float32Builder) NewArray() Interface {\n+\treturn b.NewFloat32Array()\n+}\n+\n // NewFloat32Array creates a Float32 array from the memory buffers used by the builder and resets the Float32Builder\n // so it can be used to build a new array.\n func (b *Float32Builder) NewFloat32Array() (a *Float32) {\n@@ -771,7 +807,7 @@ func (b *Float32Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Float32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Float32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -831,7 +867,7 @@ func (b *Int16Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -882,6 +918,12 @@ func (b *Int16Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Int16 array from the memory buffers used by the builder and resets the Int16Builder\n+// so it can be used to build a new array.\n+func (b *Int16Builder) NewArray() Interface {\n+\treturn b.NewInt16Array()\n+}\n+\n // NewInt16Array creates a Int16 array from the memory buffers used by the builder and resets the Int16Builder\n // so it can be used to build a new array.\n func (b *Int16Builder) NewInt16Array() (a *Int16) {\n@@ -897,7 +939,7 @@ func (b *Int16Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Int16, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Int16, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -957,7 +999,7 @@ func (b *Uint16Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -1008,6 +1050,12 @@ func (b *Uint16Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Uint16 array from the memory buffers used by the builder and resets the Uint16Builder\n+// so it can be used to build a new array.\n+func (b *Uint16Builder) NewArray() Interface {\n+\treturn b.NewUint16Array()\n+}\n+\n // NewUint16Array creates a Uint16 array from the memory buffers used by the builder and resets the Uint16Builder\n // so it can be used to build a new array.\n func (b *Uint16Builder) NewUint16Array() (a *Uint16) {\n@@ -1023,7 +1071,7 @@ func (b *Uint16Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Uint16, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Uint16, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -1083,7 +1131,7 @@ func (b *Int8Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -1134,6 +1182,12 @@ func (b *Int8Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Int8 array from the memory buffers used by the builder and resets the Int8Builder\n+// so it can be used to build a new array.\n+func (b *Int8Builder) NewArray() Interface {\n+\treturn b.NewInt8Array()\n+}\n+\n // NewInt8Array creates a Int8 array from the memory buffers used by the builder and resets the Int8Builder\n // so it can be used to build a new array.\n func (b *Int8Builder) NewInt8Array() (a *Int8) {\n@@ -1149,7 +1203,7 @@ func (b *Int8Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Int8, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Int8, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -1209,7 +1263,7 @@ func (b *Uint8Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -1260,6 +1314,12 @@ func (b *Uint8Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Uint8 array from the memory buffers used by the builder and resets the Uint8Builder\n+// so it can be used to build a new array.\n+func (b *Uint8Builder) NewArray() Interface {\n+\treturn b.NewUint8Array()\n+}\n+\n // NewUint8Array creates a Uint8 array from the memory buffers used by the builder and resets the Uint8Builder\n // so it can be used to build a new array.\n func (b *Uint8Builder) NewUint8Array() (a *Uint8) {\n@@ -1275,7 +1335,7 @@ func (b *Uint8Builder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(arrow.PrimitiveTypes.Uint8, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.Uint8, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -1290,13 +1350,13 @@ func (b *Uint8Builder) newData() (data *Data) {\n type TimestampBuilder struct {\n \tbuilder\n \n-\ttypE    *arrow.TimestampType\n+\tdtype   *arrow.TimestampType\n \tdata    *memory.Buffer\n \trawData []arrow.Timestamp\n }\n \n-func NewTimestampBuilder(mem memory.Allocator, typE *arrow.TimestampType) *TimestampBuilder {\n-\treturn &TimestampBuilder{builder: builder{refCount: 1, mem: mem}, typE: typE}\n+func NewTimestampBuilder(mem memory.Allocator, dtype *arrow.TimestampType) *TimestampBuilder {\n+\treturn &TimestampBuilder{builder: builder{refCount: 1, mem: mem}, dtype: dtype}\n }\n \n // Release decreases the reference count by 1.\n@@ -1336,7 +1396,7 @@ func (b *TimestampBuilder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -1387,6 +1447,12 @@ func (b *TimestampBuilder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a Timestamp array from the memory buffers used by the builder and resets the TimestampBuilder\n+// so it can be used to build a new array.\n+func (b *TimestampBuilder) NewArray() Interface {\n+\treturn b.NewTimestampArray()\n+}\n+\n // NewTimestampArray creates a Timestamp array from the memory buffers used by the builder and resets the TimestampBuilder\n // so it can be used to build a new array.\n func (b *TimestampBuilder) NewTimestampArray() (a *Timestamp) {\n@@ -1402,7 +1468,7 @@ func (b *TimestampBuilder) newData() (data *Data) {\n \t\t// trim buffers\n \t\tb.data.Resize(bytesRequired)\n \t}\n-\tdata = NewData(b.typE, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(b.dtype, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n \tb.reset()\n \n \tif b.data != nil {\n@@ -1413,3 +1479,17 @@ func (b *TimestampBuilder) newData() (data *Data) {\n \n \treturn\n }\n+\n+var (\n+\t_ Builder = (*Int64Builder)(nil)\n+\t_ Builder = (*Uint64Builder)(nil)\n+\t_ Builder = (*Float64Builder)(nil)\n+\t_ Builder = (*Int32Builder)(nil)\n+\t_ Builder = (*Uint32Builder)(nil)\n+\t_ Builder = (*Float32Builder)(nil)\n+\t_ Builder = (*Int16Builder)(nil)\n+\t_ Builder = (*Uint16Builder)(nil)\n+\t_ Builder = (*Int8Builder)(nil)\n+\t_ Builder = (*Uint8Builder)(nil)\n+\t_ Builder = (*TimestampBuilder)(nil)\n+)\ndiff --git a/go/arrow/array/numericbuilder.gen.go.tmpl b/go/arrow/array/numericbuilder.gen.go.tmpl\nindex 1b2aaf08a3..c840530a84 100644\n--- a/go/arrow/array/numericbuilder.gen.go.tmpl\n+++ b/go/arrow/array/numericbuilder.gen.go.tmpl\n@@ -28,15 +28,15 @@ type {{.Name}}Builder struct {\n \tbuilder\n \n {{if .Opt.Parametric -}}\n-\ttypE    *arrow.{{.Name}}Type\n+\tdtype    *arrow.{{.Name}}Type\n {{end -}}\n \tdata    *memory.Buffer\n \trawData []{{or .QualifiedType .Type}}\n }\n \n {{if .Opt.Parametric}}\n-func New{{.Name}}Builder(mem memory.Allocator, typE *arrow.{{.Name}}Type) *{{.Name}}Builder {\n-\treturn &{{.Name}}Builder{builder: builder{refCount:1, mem: mem}, typE: typE}\n+func New{{.Name}}Builder(mem memory.Allocator, dtype *arrow.{{.Name}}Type) *{{.Name}}Builder {\n+\treturn &{{.Name}}Builder{builder: builder{refCount:1, mem: mem}, dtype: dtype}\n }\n {{else}}\n func New{{.Name}}Builder(mem memory.Allocator) *{{.Name}}Builder {\n@@ -81,7 +81,7 @@ func (b *{{.Name}}Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n \tif isValid {\n \t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n \t} else {\n-\t\tb.nullN++\n+\t\tb.nulls++\n \t}\n \tb.length++\n }\n@@ -132,6 +132,12 @@ func (b *{{.Name}}Builder) Resize(n int) {\n \t}\n }\n \n+// NewArray creates a {{.Name}} array from the memory buffers used by the builder and resets the {{.Name}}Builder\n+// so it can be used to build a new array.\n+func (b *{{.Name}}Builder) NewArray() Interface {\n+\treturn b.New{{.Name}}Array()\n+}\n+\n // New{{.Name}}Array creates a {{.Name}} array from the memory buffers used by the builder and resets the {{.Name}}Builder\n // so it can be used to build a new array.\n func (b *{{.Name}}Builder) New{{.Name}}Array() (a *{{.Name}}) {\n@@ -148,9 +154,9 @@ func (b *{{.Name}}Builder) newData() (data *Data) {\n \t\tb.data.Resize(bytesRequired)\n \t}\n {{if .Opt.Parametric -}}\n-\tdata = NewData(b.typE, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(b.dtype, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n {{else -}}\n-\tdata = NewData(arrow.PrimitiveTypes.{{.Name}}, b.length, []*memory.Buffer{b.nullBitmap, b.data}, b.nullN)\n+\tdata = NewData(arrow.PrimitiveTypes.{{.Name}}, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls)\n {{end -}}\n \tb.reset()\n \n@@ -162,4 +168,10 @@ func (b *{{.Name}}Builder) newData() (data *Data) {\n \n \treturn\n }\n-{{end}}\n\\ No newline at end of file\n+{{end}}\n+\n+var (\n+{{- range .In}}\n+\t_ Builder = (*{{.Name}}Builder)(nil)\n+{{- end}}\n+)\ndiff --git a/go/arrow/datatype_nested.go b/go/arrow/datatype_nested.go\nnew file mode 100644\nindex 0000000000..d34c096576\n--- /dev/null\n+++ b/go/arrow/datatype_nested.go\n@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+// ListType describes a nested type in which each array slot contains\n+// a variable-size sequence of values, all having the same relative type.\n+type ListType struct {\n+\telem DataType // DataType of the list's elements\n+}\n+\n+// ListOf returns the list type with element type t.\n+// For example, if t represents int32, ListOf(t) represents []int32.\n+//\n+// ListOf panics if t is nil or invalid.\n+func ListOf(t DataType) *ListType {\n+\tif t == nil {\n+\t\tpanic(\"arrow: nil DataType\")\n+\t}\n+\treturn &ListType{elem: t}\n+}\n+\n+func (*ListType) ID() Type     { return LIST }\n+func (*ListType) Name() string { return \"list\" }\n+\n+// Elem returns the ListType's element type.\n+func (t *ListType) Elem() DataType { return t.elem }\n+\n+var (\n+\t_ DataType = (*ListType)(nil)\n+)\ndiff --git a/go/arrow/datatype_nested_test.go b/go/arrow/datatype_nested_test.go\nnew file mode 100644\nindex 0000000000..54ffb029bc\n--- /dev/null\n+++ b/go/arrow/datatype_nested_test.go\n@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+import (\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func TestListOf(t *testing.T) {\n+\tfor _, tc := range []DataType{\n+\t\tFixedWidthTypes.Boolean,\n+\t\tPrimitiveTypes.Int8,\n+\t\tPrimitiveTypes.Int16,\n+\t\tPrimitiveTypes.Int32,\n+\t\tPrimitiveTypes.Int64,\n+\t\tPrimitiveTypes.Uint8,\n+\t\tPrimitiveTypes.Uint16,\n+\t\tPrimitiveTypes.Uint32,\n+\t\tPrimitiveTypes.Uint64,\n+\t\tPrimitiveTypes.Float32,\n+\t\tPrimitiveTypes.Float64,\n+\t} {\n+\t\tt.Run(tc.Name(), func(t *testing.T) {\n+\t\t\tgot := ListOf(tc)\n+\t\t\twant := &ListType{elem: tc}\n+\t\t\tif !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%#v, want=%#v\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := got.Name(), \"list\"; got != want {\n+\t\t\t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := got.ID(), LIST; got != want {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := got.Elem(), tc; got != want {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\ndiff --git a/go/arrow/example_test.go b/go/arrow/example_test.go\nindex 96fd3e55fd..19a663096c 100644\n--- a/go/arrow/example_test.go\n+++ b/go/arrow/example_test.go\n@@ -19,6 +19,7 @@ package arrow_test\n import (\n \t\"fmt\"\n \n+\t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/array\"\n \t\"github.com/apache/arrow/go/arrow/memory\"\n )\n@@ -114,3 +115,79 @@ func Example_fromMemory() {\n \t// bools[14] = false\n \t// bools[15] = (null)\n }\n+\n+// This example shows how to create a List array.\n+// The resulting array should be:\n+//  [[0, 1, 2], [], [3], [4, 5], [6, 7, 8], [], [9]]\n+func Example_listArray() {\n+\tpool := memory.NewGoAllocator()\n+\n+\tlb := array.NewListBuilder(pool, arrow.PrimitiveTypes.Int64)\n+\tdefer lb.Release()\n+\n+\tvb := lb.ValueBuilder().(*array.Int64Builder)\n+\tdefer vb.Release()\n+\n+\tvb.Reserve(10)\n+\n+\tlb.Append(true)\n+\tvb.Append(0)\n+\tvb.Append(1)\n+\tvb.Append(2)\n+\n+\tlb.AppendNull()\n+\n+\tlb.Append(true)\n+\tvb.Append(3)\n+\n+\tlb.Append(true)\n+\tvb.Append(4)\n+\tvb.Append(5)\n+\n+\tlb.Append(true)\n+\tvb.Append(6)\n+\tvb.Append(7)\n+\tvb.Append(8)\n+\n+\tlb.AppendNull()\n+\n+\tlb.Append(true)\n+\tvb.Append(9)\n+\n+\tarr := lb.NewArray().(*array.List)\n+\tfmt.Printf(\"NullN()   = %d\\n\", arr.NullN())\n+\tfmt.Printf(\"Len()     = %d\\n\", arr.Len())\n+\tfmt.Printf(\"Offsets() = %v\\n\", arr.Offsets())\n+\n+\toffsets := arr.Offsets()[1:]\n+\n+\tvarr := arr.ListValues().(*array.Int64)\n+\tpos := 0\n+\tfor i := 0; i < arr.Len(); i++ {\n+\t\tif !arr.IsValid(i) {\n+\t\t\tfmt.Printf(\"List[%d]   = (null)\\n\", i)\n+\t\t\tcontinue\n+\t\t}\n+\t\tfmt.Printf(\"List[%d]   = [\", i)\n+\t\tfor j := pos; j < int(offsets[i]); j++ {\n+\t\t\tif j != pos {\n+\t\t\t\tfmt.Printf(\", \")\n+\t\t\t}\n+\t\t\tfmt.Printf(\"%v\", varr.Value(j))\n+\t\t}\n+\t\tpos = int(offsets[i])\n+\t\tfmt.Printf(\"]\\n\")\n+\t}\n+\n+\t// Output:\n+\t// NullN()   = 2\n+\t// Len()     = 7\n+\t// Offsets() = [0 3 3 4 6 9 9 10]\n+\t// List[0]   = [0, 1, 2]\n+\t// List[1]   = (null)\n+\t// List[2]   = [3]\n+\t// List[3]   = [4, 5]\n+\t// List[4]   = [6, 7, 8]\n+\t// List[5]   = (null)\n+\t// List[6]   = [9]\n+}\ndiff --git a/go/arrow/type_string.go b/go/arrow/type_string.go\nindex 9c82dbad41..b41c5ac608 100644\n--- a/go/arrow/type_string.go\n+++ b/go/arrow/type_string.go\n@@ -2,7 +2,7 @@\n \n package arrow\n \n-import \"fmt\"\n+import \"strconv\"\n \n const _Type_name = \"NULLBOOLUINT8INT8UINT16INT16UINT32INT32UINT64INT64HALF_FLOATFLOAT32FLOAT64STRINGBINARYFIXED_SIZE_BINARYDATE32DATE64TIMESTAMPTIME32TIME64INTERVALDECIMALLISTSTRUCTUNIONDICTIONARYMAP\"\n \n@@ -10,7 +10,7 @@ var _Type_index = [...]uint8{0, 4, 8, 13, 17, 23, 28, 34, 39, 45, 50, 60, 67, 74\n \n func (i Type) String() string {\n \tif i < 0 || i >= Type(len(_Type_index)-1) {\n-\t\treturn fmt.Sprintf(\"Type(%d)\", i)\n+\t\treturn \"Type(\" + strconv.FormatInt(int64(i), 10) + \")\"\n \t}\n \treturn _Type_name[_Type_index[i]:_Type_index[i+1]]\n }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T21:02:39.908+0000",
                    "updated": "2018-08-08T21:02:39.908+0000",
                    "started": "2018-08-08T21:02:39.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132634",
                    "issueId": "13177638"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@122d913c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34dbaac4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c65206f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@558130ad[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28dc4987[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1535ddac[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c6e13d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5c1eadd0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@164447a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2d27307c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a5ff3ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3386bd5a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 08 21:02:41 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-08T21:02:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3021/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-08T10:06:47.000+0000",
        "updated": "2018-08-08T21:02:41.000+0000",
        "timeoriginalestimate": null,
        "description": "go-arrow should have support for creating List arrays.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] support for List",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177638/comment/16573874",
                    "id": "16573874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2402\n[https://github.com/apache/arrow/pull/2402]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-08T21:02:41.457+0000",
                    "updated": "2018-08-08T21:02:41.457+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wtmf:",
        "customfield_12314139": null
    }
}