{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13195619",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619",
    "key": "ARROW-3674",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12550265",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12550265",
                "type": {
                    "id": "12310010",
                    "name": "Incorporates",
                    "inward": "is part of",
                    "outward": "incorporates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"
                },
                "outwardIssue": {
                    "id": "13195620",
                    "key": "ARROW-3675",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195620",
                    "fields": {
                        "summary": "[Go] implement Date64 array",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dustmop",
            "name": "dustmop",
            "key": "dustmop",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dustmop&avatarId=37478",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dustmop&avatarId=37478",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dustmop&avatarId=37478",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dustmop&avatarId=37478"
            },
            "displayName": "Dustin Long",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3674/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/174977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dustmop opened a new pull request #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170\n \n \n   Implement both Date32 and Date64 types for arrays. Also resolves ARROW-3675. Unit tests follow the same pattern as the existing float64 and Time{32,64} tests.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T18:04:53.596+0000",
                    "updated": "2018-12-13T18:04:53.596+0000",
                    "started": "2018-12-13T18:04:53.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174977",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/174979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447065244\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=h1) Report\n   > Merging [#3170](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/e34057c4b4be8c7abf3537dd4998b5b38919ba73?src=pr&el=desc) will **increase** coverage by `0.13%`.\n   > The diff coverage is `65.85%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3170/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3170      +/-   ##\n   ==========================================\n   + Coverage   67.73%   67.87%   +0.13%     \n   ==========================================\n     Files          58       58              \n     Lines        3766     4012     +246     \n   ==========================================\n   + Hits         2551     2723     +172     \n   - Misses       1114     1186      +72     \n   - Partials      101      103       +2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | `13% <0%> (-2%)` | :arrow_down: |\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | `9.09% <0%> (-3.41%)` | :arrow_down: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `96.72% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `46.9% <50%> (+0.47%)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `68.16% <92.95%> (+3.81%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [8 more](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=footer). Last update [e34057c...07a2610](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T18:08:00.907+0000",
                    "updated": "2018-12-13T18:08:00.907+0000",
                    "started": "2018-12-13T18:08:00.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174979",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/174987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dustmop commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447078239\n \n \n   Thanks @sbinet for taking a look, and linking the other JIRA ticket. Given that I don't have write access, is there anything else I need to do to get this merged?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T18:50:29.816+0000",
                    "updated": "2018-12-13T18:50:29.816+0000",
                    "started": "2018-12-13T18:50:29.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174987",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/174988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447078839\n \n \n   I'd like to wait for another pair of eyes :)\r\n   @stuartcarnie and/or @alexandreyc for example.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T18:52:16.547+0000",
                    "updated": "2018-12-13T18:52:16.547+0000",
                    "started": "2018-12-13T18:52:16.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174988",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/174989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dustmop commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447079548\n \n \n   Sounds good, thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T18:54:23.599+0000",
                    "updated": "2018-12-13T18:54:23.599+0000",
                    "started": "2018-12-13T18:54:23.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174989",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#discussion_r241767868\n \n \n\n ##########\n File path: go/arrow/numeric.tmpldata\n ##########\n @@ -107,5 +107,29 @@\n     \"Opt\": {\n       \"Parametric\": true\n     }\n+  },\n+  {\n+    \"Name\": \"Date32\",\n+    \"name\": \"date32\",\n+    \"Type\": \"Date32\",\n+    \"QualifiedType\": \"arrow.Date32\",\n+    \"InternalType\": \"int32\",\n+    \"Default\": \"0\",\n+    \"Size\": \"4\",\n+    \"Opt\": {\n+      \"Parametric\": true\n+    }\n+  },\n+  {\n+    \"Name\": \"Date64\",\n+    \"name\": \"date64\",\n+    \"Type\": \"Date64\",\n+    \"QualifiedType\": \"arrow.Date64\",\n+    \"InternalType\": \"int64\",\n+    \"Default\": \"0\",\n+    \"Size\": \"8\",\n+    \"Opt\": {\n+      \"Parametric\": true\n \n Review comment:\n   Ditto.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T14:17:00.226+0000",
                    "updated": "2018-12-14T14:17:00.226+0000",
                    "started": "2018-12-14T14:17:00.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175348",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#discussion_r241767870\n \n \n\n ##########\n File path: go/arrow/numeric.tmpldata\n ##########\n @@ -107,5 +107,29 @@\n     \"Opt\": {\n       \"Parametric\": true\n     }\n+  },\n+  {\n+    \"Name\": \"Date32\",\n+    \"name\": \"date32\",\n+    \"Type\": \"Date32\",\n+    \"QualifiedType\": \"arrow.Date32\",\n+    \"InternalType\": \"int32\",\n+    \"Default\": \"0\",\n+    \"Size\": \"4\",\n+    \"Opt\": {\n+      \"Parametric\": true\n \n Review comment:\n   AFAIK, they're not parametric.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T14:17:00.281+0000",
                    "updated": "2018-12-14T14:17:00.281+0000",
                    "started": "2018-12-14T14:17:00.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175349",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dustmop commented on a change in pull request #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#discussion_r241788751\n \n \n\n ##########\n File path: go/arrow/numeric.tmpldata\n ##########\n @@ -107,5 +107,29 @@\n     \"Opt\": {\n       \"Parametric\": true\n     }\n+  },\n+  {\n+    \"Name\": \"Date32\",\n+    \"name\": \"date32\",\n+    \"Type\": \"Date32\",\n+    \"QualifiedType\": \"arrow.Date32\",\n+    \"InternalType\": \"int32\",\n+    \"Default\": \"0\",\n+    \"Size\": \"4\",\n+    \"Opt\": {\n+      \"Parametric\": true\n \n Review comment:\n   Makes sense, there's only a single Date32 unit (same as Date64).\r\n   \r\n   However, when I remove this, the generated code in `numericbuilder.gen.go` uses `arrow.PrimitiveTypes.Date32` within the function `Date32Builder.newData`, but Date32 isn't added to PrimitiveTypes in `datatype_numeric.gen.go`. Is this a bug in the generator or is there something else I need to add? Are both \"QualifiedType\" and \"InternalType\" meant to stay?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T15:20:18.583+0000",
                    "updated": "2018-12-14T15:20:18.583+0000",
                    "started": "2018-12-14T15:20:18.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175370",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dustmop commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447431895\n \n \n   Ok, I figured it out. Should I squash these commits into one, or keep as it?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T19:36:31.914+0000",
                    "updated": "2018-12-14T19:36:31.914+0000",
                    "started": "2018-12-14T19:36:31.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175563",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447065244\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=h1) Report\n   > Merging [#3170](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/e34057c4b4be8c7abf3537dd4998b5b38919ba73?src=pr&el=desc) will **decrease** coverage by `19.22%`.\n   > The diff coverage is `65.85%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3170/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #3170       +/-   ##\n   ===========================================\n   - Coverage   87.09%   67.87%   -19.23%     \n   ===========================================\n     Files         495       58      -437     \n     Lines       69704     4012    -65692     \n   ===========================================\n   - Hits        60708     2723    -57985     \n   + Misses       8897     1186     -7711     \n   - Partials       99      103        +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | `12.5% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `41.66% <0%> (-8.34%)` | :arrow_down: |\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | `13% <0%> (-2%)` | :arrow_down: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `96.72% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `46.9% <50%> (+0.47%)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `68.16% <92.95%> (+3.81%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [442 more](https://codecov.io/gh/apache/arrow/pull/3170/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=footer). Last update [e34057c...29ae274](https://codecov.io/gh/apache/arrow/pull/3170?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T19:39:13.191+0000",
                    "updated": "2018-12-14T19:39:13.191+0000",
                    "started": "2018-12-14T19:39:13.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175564",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447482623\n \n \n   No need to squash\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T21:20:20.165+0000",
                    "updated": "2018-12-14T21:20:20.165+0000",
                    "started": "2018-12-14T21:20:20.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175589",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/175615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447506187\n \n \n   @sbinet or @stuartcarnie any final words about this one? I'll merge in a day or two if I don't hear back\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T23:11:13.084+0000",
                    "updated": "2018-12-14T23:11:13.084+0000",
                    "started": "2018-12-14T23:11:13.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175615",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/176101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stuartcarnie commented on issue #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170#issuecomment-447898202\n \n \n   Looks great to me, too \ud83d\udc4c \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T16:04:35.067+0000",
                    "updated": "2018-12-17T16:04:35.067+0000",
                    "started": "2018-12-17T16:04:35.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176101",
                    "issueId": "13195619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/worklog/176106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3170: ARROW-3674: [Go] Implement Date32 and Date64 array types\nURL: https://github.com/apache/arrow/pull/3170\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/array.go b/go/arrow/array/array.go\nindex b188dcd68c..ef37aef42f 100644\n--- a/go/arrow/array/array.go\n+++ b/go/arrow/array/array.go\n@@ -180,8 +180,8 @@ func init() {\n \t\tarrow.STRING:            func(data *Data) Interface { return NewStringData(data) },\n \t\tarrow.BINARY:            func(data *Data) Interface { return NewBinaryData(data) },\n \t\tarrow.FIXED_SIZE_BINARY: func(data *Data) Interface { return NewFixedSizeBinaryData(data) },\n-\t\tarrow.DATE32:            unsupportedArrayType,\n-\t\tarrow.DATE64:            unsupportedArrayType,\n+\t\tarrow.DATE32:            func(data *Data) Interface { return NewDate32Data(data) },\n+\t\tarrow.DATE64:            func(data *Data) Interface { return NewDate64Data(data) },\n \t\tarrow.TIMESTAMP:         func(data *Data) Interface { return NewTimestampData(data) },\n \t\tarrow.TIME32:            func(data *Data) Interface { return NewTime32Data(data) },\n \t\tarrow.TIME64:            func(data *Data) Interface { return NewTime64Data(data) },\ndiff --git a/go/arrow/array/numeric.gen.go b/go/arrow/array/numeric.gen.go\nindex 1f734c0512..1fb8257d94 100644\n--- a/go/arrow/array/numeric.gen.go\n+++ b/go/arrow/array/numeric.gen.go\n@@ -609,3 +609,93 @@ func (a *Time64) setData(data *Data) {\n \t\ta.values = a.values[beg:end]\n \t}\n }\n+\n+// A type which represents an immutable sequence of arrow.Date32 values.\n+type Date32 struct {\n+\tarray\n+\tvalues []arrow.Date32\n+}\n+\n+func NewDate32Data(data *Data) *Date32 {\n+\ta := &Date32{}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+func (a *Date32) Value(i int) arrow.Date32     { return a.values[i] }\n+func (a *Date32) Date32Values() []arrow.Date32 { return a.values }\n+\n+func (a *Date32) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i, v := range a.values {\n+\t\tif i > 0 {\n+\t\t\tfmt.Fprintf(o, \" \")\n+\t\t}\n+\t\tswitch {\n+\t\tcase a.IsNull(i):\n+\t\t\to.WriteString(\"(null)\")\n+\t\tdefault:\n+\t\t\tfmt.Fprintf(o, \"%v\", v)\n+\t\t}\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *Date32) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.values = arrow.Date32Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := a.array.data.offset\n+\t\tend := beg + a.array.data.length\n+\t\ta.values = a.values[beg:end]\n+\t}\n+}\n+\n+// A type which represents an immutable sequence of arrow.Date64 values.\n+type Date64 struct {\n+\tarray\n+\tvalues []arrow.Date64\n+}\n+\n+func NewDate64Data(data *Data) *Date64 {\n+\ta := &Date64{}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+func (a *Date64) Value(i int) arrow.Date64     { return a.values[i] }\n+func (a *Date64) Date64Values() []arrow.Date64 { return a.values }\n+\n+func (a *Date64) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i, v := range a.values {\n+\t\tif i > 0 {\n+\t\t\tfmt.Fprintf(o, \" \")\n+\t\t}\n+\t\tswitch {\n+\t\tcase a.IsNull(i):\n+\t\t\to.WriteString(\"(null)\")\n+\t\tdefault:\n+\t\t\tfmt.Fprintf(o, \"%v\", v)\n+\t\t}\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *Date64) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.values = arrow.Date64Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := a.array.data.offset\n+\t\tend := beg + a.array.data.length\n+\t\ta.values = a.values[beg:end]\n+\t}\n+}\ndiff --git a/go/arrow/array/numeric_test.go b/go/arrow/array/numeric_test.go\nindex 9e8267a70d..fc7f04addb 100644\n--- a/go/arrow/array/numeric_test.go\n+++ b/go/arrow/array/numeric_test.go\n@@ -394,3 +394,223 @@ func TestTime64SliceDataWithNull(t *testing.T) {\n \t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n \t}\n }\n+\n+func TestNewDate32Data(t *testing.T) {\n+\texp := []arrow.Date32{1, 2, 4, 8, 16}\n+\n+\tdtype := &arrow.Date32Type{}\n+\tad := array.NewData(\n+\t\tdtype, len(exp),\n+\t\t[]*memory.Buffer{nil, memory.NewBufferBytes(arrow.Date32Traits.CastToBytes(exp))},\n+\t\tnil, 0, 0,\n+\t)\n+\tfa := array.NewDate32Data(ad)\n+\n+\tassert.Equal(t, len(exp), fa.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, exp, fa.Date32Values(), \"unexpected Date32Values()\")\n+}\n+\n+func TestDate32SliceData(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 4\n+\t)\n+\n+\tvar (\n+\t\tvs  = []arrow.Date32{1, 2, 3, 4, 5}\n+\t\tsub = vs[beg:end]\n+\t)\n+\n+\tb := array.NewDate32Builder(pool)\n+\tdefer b.Release()\n+\n+\tfor _, v := range vs {\n+\t\tb.Append(v)\n+\t}\n+\n+\tarr := b.NewArray().(*array.Date32)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(vs); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Date32Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Date32)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Date32Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\n+\n+func TestDate32SliceDataWithNull(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 5\n+\t)\n+\n+\tvar (\n+\t\tvalids = []bool{true, true, true, false, true, true}\n+\t\tvs     = []arrow.Date32{1, 2, 3, 0, 4, 5}\n+\t\tsub    = vs[beg:end]\n+\t)\n+\n+\tb := array.NewDate32Builder(pool)\n+\tdefer b.Release()\n+\n+\tb.AppendValues(vs, valids)\n+\n+\tarr := b.NewArray().(*array.Date32)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(valids); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 1; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Date32Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Date32)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.NullN(), 1; got != want {\n+\t\tt.Errorf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Date32Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\n+\n+func TestNewDate64Data(t *testing.T) {\n+\texp := []arrow.Date64{1, 2, 4, 8, 16}\n+\n+\tdtype := &arrow.Date64Type{}\n+\tad := array.NewData(\n+\t\tdtype, len(exp),\n+\t\t[]*memory.Buffer{nil, memory.NewBufferBytes(arrow.Date64Traits.CastToBytes(exp))},\n+\t\tnil, 0, 0,\n+\t)\n+\tfa := array.NewDate64Data(ad)\n+\n+\tassert.Equal(t, len(exp), fa.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, exp, fa.Date64Values(), \"unexpected Date64Values()\")\n+}\n+\n+func TestDate64SliceData(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 4\n+\t)\n+\n+\tvar (\n+\t\tvs  = []arrow.Date64{1, 2, 3, 4, 5}\n+\t\tsub = vs[beg:end]\n+\t)\n+\n+\tb := array.NewDate64Builder(pool)\n+\tdefer b.Release()\n+\n+\tfor _, v := range vs {\n+\t\tb.Append(v)\n+\t}\n+\n+\tarr := b.NewArray().(*array.Date64)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(vs); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Date64Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Date64)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Date64Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\n+\n+func TestDate64SliceDataWithNull(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 5\n+\t)\n+\n+\tvar (\n+\t\tvalids = []bool{true, true, true, false, true, true}\n+\t\tvs     = []arrow.Date64{1, 2, 3, 0, 4, 5}\n+\t\tsub    = vs[beg:end]\n+\t)\n+\n+\tb := array.NewDate64Builder(pool)\n+\tdefer b.Release()\n+\n+\tb.AppendValues(vs, valids)\n+\n+\tarr := b.NewArray().(*array.Date64)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(valids); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 1; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Date64Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Date64)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.NullN(), 1; got != want {\n+\t\tt.Errorf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Date64Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\ndiff --git a/go/arrow/array/numericbuilder.gen.go b/go/arrow/array/numericbuilder.gen.go\nindex 3a7dc167f1..946c5ba74a 100644\n--- a/go/arrow/array/numericbuilder.gen.go\n+++ b/go/arrow/array/numericbuilder.gen.go\n@@ -1772,6 +1772,274 @@ func (b *Time64Builder) newData() (data *Data) {\n \treturn\n }\n \n+type Date32Builder struct {\n+\tbuilder\n+\n+\tdata    *memory.Buffer\n+\trawData []arrow.Date32\n+}\n+\n+func NewDate32Builder(mem memory.Allocator) *Date32Builder {\n+\treturn &Date32Builder{builder: builder{refCount: 1, mem: mem}}\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+func (b *Date32Builder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tif b.nullBitmap != nil {\n+\t\t\tb.nullBitmap.Release()\n+\t\t\tb.nullBitmap = nil\n+\t\t}\n+\t\tif b.data != nil {\n+\t\t\tb.data.Release()\n+\t\t\tb.data = nil\n+\t\t\tb.rawData = nil\n+\t\t}\n+\t}\n+}\n+\n+func (b *Date32Builder) Append(v arrow.Date32) {\n+\tb.Reserve(1)\n+\tb.UnsafeAppend(v)\n+}\n+\n+func (b *Date32Builder) AppendNull() {\n+\tb.Reserve(1)\n+\tb.UnsafeAppendBoolToBitmap(false)\n+}\n+\n+func (b *Date32Builder) UnsafeAppend(v arrow.Date32) {\n+\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\tb.rawData[b.length] = v\n+\tb.length++\n+}\n+\n+func (b *Date32Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n+\tif isValid {\n+\t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\t} else {\n+\t\tb.nulls++\n+\t}\n+\tb.length++\n+}\n+\n+// AppendValues will append the values in the v slice. The valid slice determines which values\n+// in v are valid (not null). The valid slice must either be empty or be equal in length to v. If empty,\n+// all values in v are appended and considered valid.\n+func (b *Date32Builder) AppendValues(v []arrow.Date32, valid []bool) {\n+\tif len(v) != len(valid) && len(valid) != 0 {\n+\t\tpanic(\"len(v) != len(valid) && len(valid) != 0\")\n+\t}\n+\n+\tb.Reserve(len(v))\n+\tif len(v) > 0 {\n+\t\tarrow.Date32Traits.Copy(b.rawData[b.length:], v)\n+\t}\n+\tb.builder.unsafeAppendBoolsToBitmap(valid, len(v))\n+}\n+\n+func (b *Date32Builder) init(capacity int) {\n+\tb.builder.init(capacity)\n+\n+\tb.data = memory.NewResizableBuffer(b.mem)\n+\tbytesN := arrow.Date32Traits.BytesRequired(capacity)\n+\tb.data.Resize(bytesN)\n+\tb.rawData = arrow.Date32Traits.CastFromBytes(b.data.Bytes())\n+}\n+\n+// Reserve ensures there is enough space for appending n elements\n+// by checking the capacity and calling Resize if necessary.\n+func (b *Date32Builder) Reserve(n int) {\n+\tb.builder.reserve(n, b.Resize)\n+}\n+\n+// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+func (b *Date32Builder) Resize(n int) {\n+\tnBuilder := n\n+\tif n < minBuilderCapacity {\n+\t\tn = minBuilderCapacity\n+\t}\n+\n+\tif b.capacity == 0 {\n+\t\tb.init(n)\n+\t} else {\n+\t\tb.builder.resize(nBuilder, b.init)\n+\t\tb.data.Resize(arrow.Date32Traits.BytesRequired(n))\n+\t\tb.rawData = arrow.Date32Traits.CastFromBytes(b.data.Bytes())\n+\t}\n+}\n+\n+// NewArray creates a Date32 array from the memory buffers used by the builder and resets the Date32Builder\n+// so it can be used to build a new array.\n+func (b *Date32Builder) NewArray() Interface {\n+\treturn b.NewDate32Array()\n+}\n+\n+// NewDate32Array creates a Date32 array from the memory buffers used by the builder and resets the Date32Builder\n+// so it can be used to build a new array.\n+func (b *Date32Builder) NewDate32Array() (a *Date32) {\n+\tdata := b.newData()\n+\ta = NewDate32Data(data)\n+\tdata.Release()\n+\treturn\n+}\n+\n+func (b *Date32Builder) newData() (data *Data) {\n+\tbytesRequired := arrow.Date32Traits.BytesRequired(b.length)\n+\tif bytesRequired > 0 && bytesRequired < b.data.Len() {\n+\t\t// trim buffers\n+\t\tb.data.Resize(bytesRequired)\n+\t}\n+\tdata = NewData(arrow.PrimitiveTypes.Date32, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls, 0)\n+\tb.reset()\n+\n+\tif b.data != nil {\n+\t\tb.data.Release()\n+\t\tb.data = nil\n+\t\tb.rawData = nil\n+\t}\n+\n+\treturn\n+}\n+\n+type Date64Builder struct {\n+\tbuilder\n+\n+\tdata    *memory.Buffer\n+\trawData []arrow.Date64\n+}\n+\n+func NewDate64Builder(mem memory.Allocator) *Date64Builder {\n+\treturn &Date64Builder{builder: builder{refCount: 1, mem: mem}}\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+func (b *Date64Builder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tif b.nullBitmap != nil {\n+\t\t\tb.nullBitmap.Release()\n+\t\t\tb.nullBitmap = nil\n+\t\t}\n+\t\tif b.data != nil {\n+\t\t\tb.data.Release()\n+\t\t\tb.data = nil\n+\t\t\tb.rawData = nil\n+\t\t}\n+\t}\n+}\n+\n+func (b *Date64Builder) Append(v arrow.Date64) {\n+\tb.Reserve(1)\n+\tb.UnsafeAppend(v)\n+}\n+\n+func (b *Date64Builder) AppendNull() {\n+\tb.Reserve(1)\n+\tb.UnsafeAppendBoolToBitmap(false)\n+}\n+\n+func (b *Date64Builder) UnsafeAppend(v arrow.Date64) {\n+\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\tb.rawData[b.length] = v\n+\tb.length++\n+}\n+\n+func (b *Date64Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n+\tif isValid {\n+\t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\t} else {\n+\t\tb.nulls++\n+\t}\n+\tb.length++\n+}\n+\n+// AppendValues will append the values in the v slice. The valid slice determines which values\n+// in v are valid (not null). The valid slice must either be empty or be equal in length to v. If empty,\n+// all values in v are appended and considered valid.\n+func (b *Date64Builder) AppendValues(v []arrow.Date64, valid []bool) {\n+\tif len(v) != len(valid) && len(valid) != 0 {\n+\t\tpanic(\"len(v) != len(valid) && len(valid) != 0\")\n+\t}\n+\n+\tb.Reserve(len(v))\n+\tif len(v) > 0 {\n+\t\tarrow.Date64Traits.Copy(b.rawData[b.length:], v)\n+\t}\n+\tb.builder.unsafeAppendBoolsToBitmap(valid, len(v))\n+}\n+\n+func (b *Date64Builder) init(capacity int) {\n+\tb.builder.init(capacity)\n+\n+\tb.data = memory.NewResizableBuffer(b.mem)\n+\tbytesN := arrow.Date64Traits.BytesRequired(capacity)\n+\tb.data.Resize(bytesN)\n+\tb.rawData = arrow.Date64Traits.CastFromBytes(b.data.Bytes())\n+}\n+\n+// Reserve ensures there is enough space for appending n elements\n+// by checking the capacity and calling Resize if necessary.\n+func (b *Date64Builder) Reserve(n int) {\n+\tb.builder.reserve(n, b.Resize)\n+}\n+\n+// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+func (b *Date64Builder) Resize(n int) {\n+\tnBuilder := n\n+\tif n < minBuilderCapacity {\n+\t\tn = minBuilderCapacity\n+\t}\n+\n+\tif b.capacity == 0 {\n+\t\tb.init(n)\n+\t} else {\n+\t\tb.builder.resize(nBuilder, b.init)\n+\t\tb.data.Resize(arrow.Date64Traits.BytesRequired(n))\n+\t\tb.rawData = arrow.Date64Traits.CastFromBytes(b.data.Bytes())\n+\t}\n+}\n+\n+// NewArray creates a Date64 array from the memory buffers used by the builder and resets the Date64Builder\n+// so it can be used to build a new array.\n+func (b *Date64Builder) NewArray() Interface {\n+\treturn b.NewDate64Array()\n+}\n+\n+// NewDate64Array creates a Date64 array from the memory buffers used by the builder and resets the Date64Builder\n+// so it can be used to build a new array.\n+func (b *Date64Builder) NewDate64Array() (a *Date64) {\n+\tdata := b.newData()\n+\ta = NewDate64Data(data)\n+\tdata.Release()\n+\treturn\n+}\n+\n+func (b *Date64Builder) newData() (data *Data) {\n+\tbytesRequired := arrow.Date64Traits.BytesRequired(b.length)\n+\tif bytesRequired > 0 && bytesRequired < b.data.Len() {\n+\t\t// trim buffers\n+\t\tb.data.Resize(bytesRequired)\n+\t}\n+\tdata = NewData(arrow.PrimitiveTypes.Date64, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls, 0)\n+\tb.reset()\n+\n+\tif b.data != nil {\n+\t\tb.data.Release()\n+\t\tb.data = nil\n+\t\tb.rawData = nil\n+\t}\n+\n+\treturn\n+}\n+\n var (\n \t_ Builder = (*Int64Builder)(nil)\n \t_ Builder = (*Uint64Builder)(nil)\n@@ -1786,4 +2054,6 @@ var (\n \t_ Builder = (*TimestampBuilder)(nil)\n \t_ Builder = (*Time32Builder)(nil)\n \t_ Builder = (*Time64Builder)(nil)\n+\t_ Builder = (*Date32Builder)(nil)\n+\t_ Builder = (*Date64Builder)(nil)\n )\ndiff --git a/go/arrow/array/numericbuilder_test.go b/go/arrow/array/numericbuilder_test.go\nindex 65f3c86c2e..3bb49a3af7 100644\n--- a/go/arrow/array/numericbuilder_test.go\n+++ b/go/arrow/array/numericbuilder_test.go\n@@ -362,3 +362,223 @@ func TestTime64Builder_Resize(t *testing.T) {\n \n \tab.Release()\n }\n+\n+func TestNewDate32Builder(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate32Builder(mem)\n+\n+\tab.Append(1)\n+\tab.Append(2)\n+\tab.Append(3)\n+\tab.AppendNull()\n+\tab.Append(5)\n+\tab.Append(6)\n+\tab.AppendNull()\n+\tab.Append(8)\n+\tab.Append(9)\n+\tab.Append(10)\n+\n+\t// check state of builder before NewDate32Array\n+\tassert.Equal(t, 10, ab.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, 2, ab.NullN(), \"unexpected NullN()\")\n+\n+\ta := ab.NewDate32Array()\n+\n+\t// check state of builder after NewDate32Array\n+\tassert.Zero(t, ab.Len(), \"unexpected ArrayBuilder.Len(), NewDate32Array did not reset state\")\n+\tassert.Zero(t, ab.Cap(), \"unexpected ArrayBuilder.Cap(), NewDate32Array did not reset state\")\n+\tassert.Zero(t, ab.NullN(), \"unexpected ArrayBuilder.NullN(), NewDate32Array did not reset state\")\n+\n+\t// check state of array\n+\tassert.Equal(t, 2, a.NullN(), \"unexpected null count\")\n+\tassert.Equal(t, []arrow.Date32{1, 2, 3, 0, 5, 6, 0, 8, 9, 10}, a.Date32Values(), \"unexpected Date32Values\")\n+\tassert.Equal(t, []byte{0xb7}, a.NullBitmapBytes()[:1]) // 4 bytes due to minBuilderCapacity\n+\tassert.Len(t, a.Date32Values(), 10, \"unexpected length of Date32Values\")\n+\n+\ta.Release()\n+\n+\tab.Append(7)\n+\tab.Append(8)\n+\n+\ta = ab.NewDate32Array()\n+\n+\tassert.Equal(t, 0, a.NullN())\n+\tassert.Equal(t, []arrow.Date32{7, 8}, a.Date32Values())\n+\tassert.Len(t, a.Date32Values(), 2)\n+\n+\ta.Release()\n+}\n+\n+func TestDate32Builder_AppendValues(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate32Builder(mem)\n+\n+\texp := []arrow.Date32{1, 2, 3, 4}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewDate32Array()\n+\tassert.Equal(t, exp, a.Date32Values())\n+\n+\ta.Release()\n+\tab.Release()\n+}\n+\n+func TestDate32Builder_Empty(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate32Builder(mem)\n+\n+\texp := []arrow.Date32{1, 2, 3, 4}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewDate32Array()\n+\tassert.Equal(t, exp, a.Date32Values())\n+\ta.Release()\n+\n+\ta = ab.NewDate32Array()\n+\tassert.Zero(t, a.Len())\n+\ta.Release()\n+\n+\tab.Release()\n+}\n+\n+func TestDate32Builder_Resize(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate32Builder(mem)\n+\n+\tassert.Equal(t, 0, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tab.Reserve(63)\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tfor i := 0; i < 63; i++ {\n+\t\tab.Append(0)\n+\t}\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 63, ab.Len())\n+\n+\tab.Resize(5)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Resize(32)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Release()\n+}\n+\n+func TestNewDate64Builder(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate64Builder(mem)\n+\n+\tab.Append(1)\n+\tab.Append(2)\n+\tab.Append(3)\n+\tab.AppendNull()\n+\tab.Append(5)\n+\tab.Append(6)\n+\tab.AppendNull()\n+\tab.Append(8)\n+\tab.Append(9)\n+\tab.Append(10)\n+\n+\t// check state of builder before NewDate64Array\n+\tassert.Equal(t, 10, ab.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, 2, ab.NullN(), \"unexpected NullN()\")\n+\n+\ta := ab.NewDate64Array()\n+\n+\t// check state of builder after NewDate64Array\n+\tassert.Zero(t, ab.Len(), \"unexpected ArrayBuilder.Len(), NewDate64Array did not reset state\")\n+\tassert.Zero(t, ab.Cap(), \"unexpected ArrayBuilder.Cap(), NewDate64Array did not reset state\")\n+\tassert.Zero(t, ab.NullN(), \"unexpected ArrayBuilder.NullN(), NewDate64Array did not reset state\")\n+\n+\t// check state of array\n+\tassert.Equal(t, 2, a.NullN(), \"unexpected null count\")\n+\tassert.Equal(t, []arrow.Date64{1, 2, 3, 0, 5, 6, 0, 8, 9, 10}, a.Date64Values(), \"unexpected Date64Values\")\n+\tassert.Equal(t, []byte{0xb7}, a.NullBitmapBytes()[:1]) // 4 bytes due to minBuilderCapacity\n+\tassert.Len(t, a.Date64Values(), 10, \"unexpected length of Date64Values\")\n+\n+\ta.Release()\n+\n+\tab.Append(7)\n+\tab.Append(8)\n+\n+\ta = ab.NewDate64Array()\n+\n+\tassert.Equal(t, 0, a.NullN())\n+\tassert.Equal(t, []arrow.Date64{7, 8}, a.Date64Values())\n+\tassert.Len(t, a.Date64Values(), 2)\n+\n+\ta.Release()\n+}\n+\n+func TestDate64Builder_AppendValues(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate64Builder(mem)\n+\n+\texp := []arrow.Date64{1, 2, 3, 4}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewDate64Array()\n+\tassert.Equal(t, exp, a.Date64Values())\n+\n+\ta.Release()\n+\tab.Release()\n+}\n+\n+func TestDate64Builder_Empty(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate64Builder(mem)\n+\n+\texp := []arrow.Date64{1, 2, 3, 4}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewDate64Array()\n+\tassert.Equal(t, exp, a.Date64Values())\n+\ta.Release()\n+\n+\ta = ab.NewDate64Array()\n+\tassert.Zero(t, a.Len())\n+\ta.Release()\n+\n+\tab.Release()\n+}\n+\n+func TestDate64Builder_Resize(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tab := array.NewDate64Builder(mem)\n+\n+\tassert.Equal(t, 0, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tab.Reserve(63)\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tfor i := 0; i < 63; i++ {\n+\t\tab.Append(0)\n+\t}\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 63, ab.Len())\n+\n+\tab.Resize(5)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Resize(32)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Release()\n+}\ndiff --git a/go/arrow/datatype_fixedwidth.go b/go/arrow/datatype_fixedwidth.go\nindex 60cc98a4b9..444495058a 100644\n--- a/go/arrow/datatype_fixedwidth.go\n+++ b/go/arrow/datatype_fixedwidth.go\n@@ -37,6 +37,8 @@ type (\n \tTime32    int32\n \tTime64    int64\n \tTimeUnit  int\n+\tDate32    int32\n+\tDate64    int64\n )\n \n const (\ndiff --git a/go/arrow/datatype_numeric.gen.go b/go/arrow/datatype_numeric.gen.go\nindex 2ec4c4098a..9b5dc835b1 100644\n--- a/go/arrow/datatype_numeric.gen.go\n+++ b/go/arrow/datatype_numeric.gen.go\n@@ -78,6 +78,18 @@ func (t *Float64Type) ID() Type      { return FLOAT64 }\n func (t *Float64Type) Name() string  { return \"float64\" }\n func (t *Float64Type) BitWidth() int { return 64 }\n \n+type Date32Type struct{}\n+\n+func (t *Date32Type) ID() Type      { return DATE32 }\n+func (t *Date32Type) Name() string  { return \"date32\" }\n+func (t *Date32Type) BitWidth() int { return 32 }\n+\n+type Date64Type struct{}\n+\n+func (t *Date64Type) ID() Type      { return DATE64 }\n+func (t *Date64Type) Name() string  { return \"date64\" }\n+func (t *Date64Type) BitWidth() int { return 64 }\n+\n var (\n \tPrimitiveTypes = struct {\n \t\tInt8    DataType\n@@ -90,6 +102,8 @@ var (\n \t\tUint64  DataType\n \t\tFloat32 DataType\n \t\tFloat64 DataType\n+\t\tDate32  DataType\n+\t\tDate64  DataType\n \t}{\n \n \t\tInt8:    &Int8Type{},\n@@ -102,5 +116,7 @@ var (\n \t\tUint64:  &Uint64Type{},\n \t\tFloat32: &Float32Type{},\n \t\tFloat64: &Float64Type{},\n+\t\tDate32:  &Date32Type{},\n+\t\tDate64:  &Date64Type{},\n \t}\n )\ndiff --git a/go/arrow/datatype_numeric.gen.go.tmpldata b/go/arrow/datatype_numeric.gen.go.tmpldata\nindex 415b51b2e1..9badc6ee2b 100644\n--- a/go/arrow/datatype_numeric.gen.go.tmpldata\n+++ b/go/arrow/datatype_numeric.gen.go.tmpldata\n@@ -48,5 +48,15 @@\n     \"Name\": \"Float64\",\n     \"Type\": \"float64\",\n     \"Size\": 64\n+  },\n+  {\n+    \"Name\": \"Date32\",\n+    \"Type\": \"date32\",\n+    \"Size\": 32\n+  },\n+  {\n+    \"Name\": \"Date64\",\n+    \"Type\": \"date64\",\n+    \"Size\": 64\n   }\n ]\ndiff --git a/go/arrow/numeric.tmpldata b/go/arrow/numeric.tmpldata\nindex b9e976eea0..45452ab446 100644\n--- a/go/arrow/numeric.tmpldata\n+++ b/go/arrow/numeric.tmpldata\n@@ -107,5 +107,23 @@\n     \"Opt\": {\n       \"Parametric\": true\n     }\n+  },\n+  {\n+    \"Name\": \"Date32\",\n+    \"name\": \"date32\",\n+    \"Type\": \"Date32\",\n+    \"QualifiedType\": \"arrow.Date32\",\n+    \"InternalType\": \"int32\",\n+    \"Default\": \"0\",\n+    \"Size\": \"4\"\n+  },\n+  {\n+    \"Name\": \"Date64\",\n+    \"name\": \"date64\",\n+    \"Type\": \"Date64\",\n+    \"QualifiedType\": \"arrow.Date64\",\n+    \"InternalType\": \"int64\",\n+    \"Default\": \"0\",\n+    \"Size\": \"8\"\n   }\n-]\n\\ No newline at end of file\n+]\ndiff --git a/go/arrow/type_traits_numeric.gen.go b/go/arrow/type_traits_numeric.gen.go\nindex 59ed13f541..14fafbc576 100644\n--- a/go/arrow/type_traits_numeric.gen.go\n+++ b/go/arrow/type_traits_numeric.gen.go\n@@ -38,6 +38,8 @@ var (\n \tTimestampTraits timestampTraits\n \tTime32Traits    time32Traits\n \tTime64Traits    time64Traits\n+\tDate32Traits    date32Traits\n+\tDate64Traits    date64Traits\n )\n \n // Int64 traits\n@@ -663,3 +665,99 @@ func (time64Traits) CastToBytes(b []Time64) []byte {\n \n // Copy copies src to dst.\n func (time64Traits) Copy(dst, src []Time64) { copy(dst, src) }\n+\n+// Date32 traits\n+\n+const (\n+\t// Date32SizeBytes specifies the number of bytes required to store a single Date32 in memory\n+\tDate32SizeBytes = int(unsafe.Sizeof(Date32(0)))\n+)\n+\n+type date32Traits struct{}\n+\n+// BytesRequired returns the number of bytes required to store n elements in memory.\n+func (date32Traits) BytesRequired(n int) int { return Date32SizeBytes * n }\n+\n+// PutValue\n+func (date32Traits) PutValue(b []byte, v Date32) {\n+\tbinary.LittleEndian.PutUint32(b, uint32(v))\n+}\n+\n+// CastFromBytes reinterprets the slice b to a slice of type Date32.\n+//\n+// NOTE: len(b) must be a multiple of Date32SizeBytes.\n+func (date32Traits) CastFromBytes(b []byte) []Date32 {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []Date32\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len / Date32SizeBytes\n+\ts.Cap = h.Cap / Date32SizeBytes\n+\n+\treturn res\n+}\n+\n+// CastToBytes reinterprets the slice b to a slice of bytes.\n+func (date32Traits) CastToBytes(b []Date32) []byte {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []byte\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len * Date32SizeBytes\n+\ts.Cap = h.Cap * Date32SizeBytes\n+\n+\treturn res\n+}\n+\n+// Copy copies src to dst.\n+func (date32Traits) Copy(dst, src []Date32) { copy(dst, src) }\n+\n+// Date64 traits\n+\n+const (\n+\t// Date64SizeBytes specifies the number of bytes required to store a single Date64 in memory\n+\tDate64SizeBytes = int(unsafe.Sizeof(Date64(0)))\n+)\n+\n+type date64Traits struct{}\n+\n+// BytesRequired returns the number of bytes required to store n elements in memory.\n+func (date64Traits) BytesRequired(n int) int { return Date64SizeBytes * n }\n+\n+// PutValue\n+func (date64Traits) PutValue(b []byte, v Date64) {\n+\tbinary.LittleEndian.PutUint64(b, uint64(v))\n+}\n+\n+// CastFromBytes reinterprets the slice b to a slice of type Date64.\n+//\n+// NOTE: len(b) must be a multiple of Date64SizeBytes.\n+func (date64Traits) CastFromBytes(b []byte) []Date64 {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []Date64\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len / Date64SizeBytes\n+\ts.Cap = h.Cap / Date64SizeBytes\n+\n+\treturn res\n+}\n+\n+// CastToBytes reinterprets the slice b to a slice of bytes.\n+func (date64Traits) CastToBytes(b []Date64) []byte {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []byte\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len * Date64SizeBytes\n+\ts.Cap = h.Cap * Date64SizeBytes\n+\n+\treturn res\n+}\n+\n+// Copy copies src to dst.\n+func (date64Traits) Copy(dst, src []Date64) { copy(dst, src) }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T16:09:47.721+0000",
                    "updated": "2018-12-17T16:09:47.721+0000",
                    "started": "2018-12-17T16:09:47.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176106",
                    "issueId": "13195619"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@419b8869[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47c1cd78[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72fb0dd5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3b98b4ff[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2780b845[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@38e506fe[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@125a2192[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6c9b406a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e7b9f2c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5e39a2eb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d2c4e0f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b02c5d0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 17 16:09:36 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-17T16:09:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3674/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-01T10:40:33.000+0000",
        "updated": "2018-12-17T18:54:54.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement Date32 array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195619/comment/16723117",
                    "id": "16723117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3170\n[https://github.com/apache/arrow/pull/3170]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-17T16:09:36.558+0000",
                    "updated": "2018-12-17T16:09:36.558+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s000o8:",
        "customfield_12314139": null
    }
}