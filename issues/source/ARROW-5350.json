{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13233816",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816",
    "key": "ARROW-5350",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5350/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/495965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364\n\n\n   This extends filters to simple lists.  CC @yordan-pavlov \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:46:13.471+0000",
                    "updated": "2020-10-06T15:46:13.471+0000",
                    "started": "2020-10-06T15:46:13.471+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495965",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/495967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#issuecomment-704369422\n\n\n   https://issues.apache.org/jira/browse/ARROW-5350\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:49:34.789+0000",
                    "updated": "2020-10-06T15:49:34.789+0000",
                    "started": "2020-10-06T15:49:34.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495967",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/496480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r500910829\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -230,6 +231,86 @@ macro_rules! filter_dictionary_array {\n     }};\n }\n \n+macro_rules! filter_primitive_item_list_array {\n+    ($context:expr, $array:expr, $item_type:ident) => {{\n+        let input_array = $array.as_any().downcast_ref::<ListArray>().unwrap();\n+        let values_builder = PrimitiveBuilder::<$item_type>::new($context.filtered_count);\n+        let mut builder = ListBuilder::new(values_builder);\n+        for i in 0..$context.filter_u64.len() {\n+            // foreach u64 batch\n+            let filter_batch = $context.filter_u64[i];\n+            if filter_batch == 0 {\n+                // if batch == 0: skip\n\nReview comment:\n       I think this comment would be improved if it explained \"why\" batch zero is being skipped (the code is pretty clear that batch 0 *is* being skipped). Same comment for `filter_non_primitive_item_list_array`\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -230,6 +231,86 @@ macro_rules! filter_dictionary_array {\n     }};\n }\n \n+macro_rules! filter_primitive_item_list_array {\n+    ($context:expr, $array:expr, $item_type:ident) => {{\n+        let input_array = $array.as_any().downcast_ref::<ListArray>().unwrap();\n+        let values_builder = PrimitiveBuilder::<$item_type>::new($context.filtered_count);\n+        let mut builder = ListBuilder::new(values_builder);\n+        for i in 0..$context.filter_u64.len() {\n+            // foreach u64 batch\n+            let filter_batch = $context.filter_u64[i];\n+            if filter_batch == 0 {\n+                // if batch == 0: skip\n+                continue;\n+            }\n+            for j in 0..64 {\n+                // foreach bit in batch:\n+                if (filter_batch & $context.filter_mask[j]) != 0 {\n+                    let data_index = (i * 64) + j;\n+                    if input_array.is_null(data_index) {\n+                        builder.append(false)?;\n+                    } else {\n+                        let this_inner_list = input_array.value(data_index);\n+                        let inner_list = this_inner_list\n+                            .as_any()\n+                            .downcast_ref::<PrimitiveArray<$item_type>>()\n+                            .unwrap();\n+                        for k in 0..inner_list.len() {\n+                            if inner_list.is_null(k) {\n+                                builder.values().append_null()?;\n+                            } else {\n+                                builder.values().append_value(inner_list.value(k))?;\n+                            }\n+                        }\n+                        builder.append(true)?;\n+                    }\n+                }\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+macro_rules! filter_non_primitive_item_list_array {\n+    ($context:expr, $array:expr, $item_array_type:ident, $item_builder:ident) => {{\n\nReview comment:\n       I like this \"item_builder\" pattern for non-primative list arrays\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -733,4 +909,53 @@ mod tests {\n         assert_eq!(\"hello\", d.value(0));\n         assert_eq!(\"world\", d.value(1));\n     }\n+\n+    #[test]\n+    fn test_filter_list_array() {\n+        let value_data = ArrayData::builder(DataType::Int32)\n+            .len(8)\n+            .add_buffer(Buffer::from(&[0, 1, 2, 3, 4, 5, 6, 7].to_byte_slice()))\n+            .build();\n+\n+        let value_offsets = Buffer::from(&[0, 3, 6, 8, 8].to_byte_slice());\n+\n+        let list_data_type = DataType::List(Box::new(DataType::Int32));\n+        let list_data = ArrayData::builder(list_data_type)\n+            .len(4)\n+            .add_buffer(value_offsets)\n+            .add_child_data(value_data)\n+            .null_bit_buffer(Buffer::from([0b00000111]))\n+            .build();\n+\n+        //  a = [[0, 1, 2], [3, 4, 5], [6, 7], null]\n+        let a = ListArray::from(list_data);\n+        let b = BooleanArray::from(vec![false, true, false, true]);\n+        let c = filter(&a, &b).unwrap();\n+        let d = c.as_ref().as_any().downcast_ref::<ListArray>().unwrap();\n+\n+        assert_eq!(DataType::Int32, d.value_type());\n+\n+        // result should be [[3, 4, 5], null]\n+        assert_eq!(2, d.len());\n+        assert_eq!(1, d.null_count());\n+        assert_eq!(true, d.is_null(1));\n+\n+        assert_eq!(0, d.value_offset(0));\n+        assert_eq!(3, d.value_length(0));\n+        assert_eq!(3, d.value_offset(1));\n\nReview comment:\n       I wonder if it is necessary to check `value_offset` and `value_length` for an element in the list that is marked as null?\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -733,4 +909,53 @@ mod tests {\n         assert_eq!(\"hello\", d.value(0));\n         assert_eq!(\"world\", d.value(1));\n     }\n+\n+    #[test]\n+    fn test_filter_list_array() {\n+        let value_data = ArrayData::builder(DataType::Int32)\n+            .len(8)\n+            .add_buffer(Buffer::from(&[0, 1, 2, 3, 4, 5, 6, 7].to_byte_slice()))\n+            .build();\n+\n+        let value_offsets = Buffer::from(&[0, 3, 6, 8, 8].to_byte_slice());\n+\n+        let list_data_type = DataType::List(Box::new(DataType::Int32));\n+        let list_data = ArrayData::builder(list_data_type)\n+            .len(4)\n+            .add_buffer(value_offsets)\n+            .add_child_data(value_data)\n+            .null_bit_buffer(Buffer::from([0b00000111]))\n+            .build();\n+\n+        //  a = [[0, 1, 2], [3, 4, 5], [6, 7], null]\n+        let a = ListArray::from(list_data);\n+        let b = BooleanArray::from(vec![false, true, false, true]);\n+        let c = filter(&a, &b).unwrap();\n+        let d = c.as_ref().as_any().downcast_ref::<ListArray>().unwrap();\n+\n+        assert_eq!(DataType::Int32, d.value_type());\n+\n+        // result should be [[3, 4, 5], null]\n+        assert_eq!(2, d.len());\n+        assert_eq!(1, d.null_count());\n+        assert_eq!(true, d.is_null(1));\n+\n+        assert_eq!(0, d.value_offset(0));\n+        assert_eq!(3, d.value_length(0));\n+        assert_eq!(3, d.value_offset(1));\n+        assert_eq!(0, d.value_length(1));\n+        assert_eq!(\n+            Buffer::from(&[3, 4, 5].to_byte_slice()),\n+            d.values().data().buffers()[0].clone()\n+        );\n+        assert_eq!(\n\nReview comment:\n       I am not sure what the significance of checking the data buffer is here. It seems like the contents are covered in the other checks.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T10:45:59.083+0000",
                    "updated": "2020-10-07T10:45:59.083+0000",
                    "started": "2020-10-07T10:45:59.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496480",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/499507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r501155036\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -399,6 +480,99 @@ impl FilterContext {\n                     key_type, value_type\n                 )))\n             }\n+            DataType::List(dt) => match &**dt {\n+                DataType::UInt8 => {\n+                    filter_primitive_item_list_array!(self, array, UInt8Type)\n+                }\n+                DataType::UInt16 => {\n+                    filter_primitive_item_list_array!(self, array, UInt16Type)\n+                }\n+                DataType::UInt32 => {\n+                    filter_primitive_item_list_array!(self, array, UInt32Type)\n+                }\n+                DataType::UInt64 => {\n+                    filter_primitive_item_list_array!(self, array, UInt64Type)\n+                }\n+                DataType::Int8 => filter_primitive_item_list_array!(self, array, Int8Type),\n+                DataType::Int16 => {\n+                    filter_primitive_item_list_array!(self, array, Int16Type)\n+                }\n+                DataType::Int32 => {\n+                    filter_primitive_item_list_array!(self, array, Int32Type)\n+                }\n+                DataType::Int64 => {\n+                    filter_primitive_item_list_array!(self, array, Int64Type)\n+                }\n+                DataType::Float32 => {\n+                    filter_primitive_item_list_array!(self, array, Float32Type)\n+                }\n+                DataType::Float64 => {\n+                    filter_primitive_item_list_array!(self, array, Float64Type)\n+                }\n+                DataType::Boolean => {\n+                    filter_primitive_item_list_array!(self, array, BooleanType)\n+                }\n+                DataType::Date32(_) => {\n+                    filter_primitive_item_list_array!(self, array, Date32Type)\n+                }\n+                DataType::Date64(_) => {\n+                    filter_primitive_item_list_array!(self, array, Date64Type)\n+                }\n+                DataType::Time32(TimeUnit::Second) => {\n+                    filter_primitive_item_list_array!(self, array, Time32SecondType)\n+                }\n+                DataType::Time32(TimeUnit::Millisecond) => {\n+                    filter_primitive_item_list_array!(self, array, Time32MillisecondType)\n+                }\n+                DataType::Time64(TimeUnit::Microsecond) => {\n+                    filter_primitive_item_list_array!(self, array, Time64MicrosecondType)\n+                }\n+                DataType::Time64(TimeUnit::Nanosecond) => {\n+                    filter_primitive_item_list_array!(self, array, Time64NanosecondType)\n+                }\n+                DataType::Duration(TimeUnit::Second) => {\n+                    filter_primitive_item_list_array!(self, array, DurationSecondType)\n+                }\n+                DataType::Duration(TimeUnit::Millisecond) => {\n+                    filter_primitive_item_list_array!(self, array, DurationMillisecondType)\n+                }\n+                DataType::Duration(TimeUnit::Microsecond) => {\n+                    filter_primitive_item_list_array!(self, array, DurationMicrosecondType)\n+                }\n+                DataType::Duration(TimeUnit::Nanosecond) => {\n+                    filter_primitive_item_list_array!(self, array, DurationNanosecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Second, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampSecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Millisecond, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampMillisecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Microsecond, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampMicrosecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Nanosecond, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampNanosecondType)\n+                }\n+                DataType::Binary => filter_non_primitive_item_list_array!(\n+                    self,\n+                    array,\n+                    BinaryArray,\n+                    BinaryBuilder\n+                ),\n+                DataType::Utf8 => filter_non_primitive_item_list_array!(\n\nReview comment:\n       Maybe also `Large` for completeness?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T16:31:16.444+0000",
                    "updated": "2020-10-12T16:31:16.444+0000",
                    "started": "2020-10-12T16:31:16.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499507",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/499513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r503415507\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -230,6 +231,86 @@ macro_rules! filter_dictionary_array {\n     }};\n }\n \n+macro_rules! filter_primitive_item_list_array {\n+    ($context:expr, $array:expr, $item_type:ident) => {{\n+        let input_array = $array.as_any().downcast_ref::<ListArray>().unwrap();\n+        let values_builder = PrimitiveBuilder::<$item_type>::new($context.filtered_count);\n+        let mut builder = ListBuilder::new(values_builder);\n+        for i in 0..$context.filter_u64.len() {\n+            // foreach u64 batch\n+            let filter_batch = $context.filter_u64[i];\n+            if filter_batch == 0 {\n+                // if batch == 0: skip\n\nReview comment:\n       the meaning of this condition is not that batch 0 is skipped, but rather that if the current batch (of 64 bits / elements from the filter array) contains only 0s (i.e. all items are filtered out) then the entire batch should be skipped as there is no items to copy to the output array (all items are filtered out); this continues until a batch is encountered where at least one item is not filtered out (and therefore the numeric representation of the batch of filter values is != 0); this skipping of entire batches of 64 items is a major factor to the performance improvements recently implemented in the filter kernel\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T16:46:10.986+0000",
                    "updated": "2020-10-12T16:46:10.986+0000",
                    "started": "2020-10-12T16:46:10.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499513",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/499531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r503424868\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -230,6 +231,86 @@ macro_rules! filter_dictionary_array {\n     }};\n }\n \n+macro_rules! filter_primitive_item_list_array {\n+    ($context:expr, $array:expr, $item_type:ident) => {{\n+        let input_array = $array.as_any().downcast_ref::<ListArray>().unwrap();\n+        let values_builder = PrimitiveBuilder::<$item_type>::new($context.filtered_count);\n+        let mut builder = ListBuilder::new(values_builder);\n+        for i in 0..$context.filter_u64.len() {\n+            // foreach u64 batch\n+            let filter_batch = $context.filter_u64[i];\n+            if filter_batch == 0 {\n+                // if batch == 0: skip\n\nReview comment:\n       This makes total sense @yordan-pavlov  -- I was suggesting an improvement to the comment itself. Perhaps something like:\r\n   \r\n   ```suggestion\r\n                   // if batch == 0, all items are filtered out, so skip entire batch\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T17:04:16.074+0000",
                    "updated": "2020-10-12T17:04:16.074+0000",
                    "started": "2020-10-12T17:04:16.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499531",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/501825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r506978711\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -399,6 +480,99 @@ impl FilterContext {\n                     key_type, value_type\n                 )))\n             }\n+            DataType::List(dt) => match &**dt {\n+                DataType::UInt8 => {\n+                    filter_primitive_item_list_array!(self, array, UInt8Type)\n+                }\n+                DataType::UInt16 => {\n+                    filter_primitive_item_list_array!(self, array, UInt16Type)\n+                }\n+                DataType::UInt32 => {\n+                    filter_primitive_item_list_array!(self, array, UInt32Type)\n+                }\n+                DataType::UInt64 => {\n+                    filter_primitive_item_list_array!(self, array, UInt64Type)\n+                }\n+                DataType::Int8 => filter_primitive_item_list_array!(self, array, Int8Type),\n+                DataType::Int16 => {\n+                    filter_primitive_item_list_array!(self, array, Int16Type)\n+                }\n+                DataType::Int32 => {\n+                    filter_primitive_item_list_array!(self, array, Int32Type)\n+                }\n+                DataType::Int64 => {\n+                    filter_primitive_item_list_array!(self, array, Int64Type)\n+                }\n+                DataType::Float32 => {\n+                    filter_primitive_item_list_array!(self, array, Float32Type)\n+                }\n+                DataType::Float64 => {\n+                    filter_primitive_item_list_array!(self, array, Float64Type)\n+                }\n+                DataType::Boolean => {\n+                    filter_primitive_item_list_array!(self, array, BooleanType)\n+                }\n+                DataType::Date32(_) => {\n+                    filter_primitive_item_list_array!(self, array, Date32Type)\n+                }\n+                DataType::Date64(_) => {\n+                    filter_primitive_item_list_array!(self, array, Date64Type)\n+                }\n+                DataType::Time32(TimeUnit::Second) => {\n+                    filter_primitive_item_list_array!(self, array, Time32SecondType)\n+                }\n+                DataType::Time32(TimeUnit::Millisecond) => {\n+                    filter_primitive_item_list_array!(self, array, Time32MillisecondType)\n+                }\n+                DataType::Time64(TimeUnit::Microsecond) => {\n+                    filter_primitive_item_list_array!(self, array, Time64MicrosecondType)\n+                }\n+                DataType::Time64(TimeUnit::Nanosecond) => {\n+                    filter_primitive_item_list_array!(self, array, Time64NanosecondType)\n+                }\n+                DataType::Duration(TimeUnit::Second) => {\n+                    filter_primitive_item_list_array!(self, array, DurationSecondType)\n+                }\n+                DataType::Duration(TimeUnit::Millisecond) => {\n+                    filter_primitive_item_list_array!(self, array, DurationMillisecondType)\n+                }\n+                DataType::Duration(TimeUnit::Microsecond) => {\n+                    filter_primitive_item_list_array!(self, array, DurationMicrosecondType)\n+                }\n+                DataType::Duration(TimeUnit::Nanosecond) => {\n+                    filter_primitive_item_list_array!(self, array, DurationNanosecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Second, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampSecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Millisecond, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampMillisecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Microsecond, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampMicrosecondType)\n+                }\n+                DataType::Timestamp(TimeUnit::Nanosecond, _) => {\n+                    filter_primitive_item_list_array!(self, array, TimestampNanosecondType)\n+                }\n+                DataType::Binary => filter_non_primitive_item_list_array!(\n+                    self,\n+                    array,\n+                    BinaryArray,\n+                    BinaryBuilder\n+                ),\n+                DataType::Utf8 => filter_non_primitive_item_list_array!(\n\nReview comment:\n       I've added largeutf8, largebinary and largelist. I'll work on test coverage separately\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T20:02:16.615+0000",
                    "updated": "2020-10-17T20:02:16.615+0000",
                    "started": "2020-10-17T20:02:16.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501825",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/501827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r506978801\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -733,4 +909,53 @@ mod tests {\n         assert_eq!(\"hello\", d.value(0));\n         assert_eq!(\"world\", d.value(1));\n     }\n+\n+    #[test]\n+    fn test_filter_list_array() {\n+        let value_data = ArrayData::builder(DataType::Int32)\n+            .len(8)\n+            .add_buffer(Buffer::from(&[0, 1, 2, 3, 4, 5, 6, 7].to_byte_slice()))\n+            .build();\n+\n+        let value_offsets = Buffer::from(&[0, 3, 6, 8, 8].to_byte_slice());\n+\n+        let list_data_type = DataType::List(Box::new(DataType::Int32));\n+        let list_data = ArrayData::builder(list_data_type)\n+            .len(4)\n+            .add_buffer(value_offsets)\n+            .add_child_data(value_data)\n+            .null_bit_buffer(Buffer::from([0b00000111]))\n+            .build();\n+\n+        //  a = [[0, 1, 2], [3, 4, 5], [6, 7], null]\n+        let a = ListArray::from(list_data);\n+        let b = BooleanArray::from(vec![false, true, false, true]);\n+        let c = filter(&a, &b).unwrap();\n+        let d = c.as_ref().as_any().downcast_ref::<ListArray>().unwrap();\n+\n+        assert_eq!(DataType::Int32, d.value_type());\n+\n+        // result should be [[3, 4, 5], null]\n+        assert_eq!(2, d.len());\n+        assert_eq!(1, d.null_count());\n+        assert_eq!(true, d.is_null(1));\n+\n+        assert_eq!(0, d.value_offset(0));\n+        assert_eq!(3, d.value_length(0));\n+        assert_eq!(3, d.value_offset(1));\n+        assert_eq!(0, d.value_length(1));\n+        assert_eq!(\n+            Buffer::from(&[3, 4, 5].to_byte_slice()),\n+            d.values().data().buffers()[0].clone()\n+        );\n+        assert_eq!(\n\nReview comment:\n       It's a way of checking the values. From what I see, the original author of the PR (not me lol) checked the lengths, then the values by using the buffers.\r\n   I think it's fine.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T20:03:42.825+0000",
                    "updated": "2020-10-17T20:03:42.825+0000",
                    "started": "2020-10-17T20:03:42.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501827",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/501828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r506979066\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -733,4 +909,53 @@ mod tests {\n         assert_eq!(\"hello\", d.value(0));\n         assert_eq!(\"world\", d.value(1));\n     }\n+\n+    #[test]\n+    fn test_filter_list_array() {\n+        let value_data = ArrayData::builder(DataType::Int32)\n+            .len(8)\n+            .add_buffer(Buffer::from(&[0, 1, 2, 3, 4, 5, 6, 7].to_byte_slice()))\n+            .build();\n+\n+        let value_offsets = Buffer::from(&[0, 3, 6, 8, 8].to_byte_slice());\n+\n+        let list_data_type = DataType::List(Box::new(DataType::Int32));\n+        let list_data = ArrayData::builder(list_data_type)\n+            .len(4)\n+            .add_buffer(value_offsets)\n+            .add_child_data(value_data)\n+            .null_bit_buffer(Buffer::from([0b00000111]))\n+            .build();\n+\n+        //  a = [[0, 1, 2], [3, 4, 5], [6, 7], null]\n+        let a = ListArray::from(list_data);\n+        let b = BooleanArray::from(vec![false, true, false, true]);\n+        let c = filter(&a, &b).unwrap();\n+        let d = c.as_ref().as_any().downcast_ref::<ListArray>().unwrap();\n+\n+        assert_eq!(DataType::Int32, d.value_type());\n+\n+        // result should be [[3, 4, 5], null]\n+        assert_eq!(2, d.len());\n+        assert_eq!(1, d.null_count());\n+        assert_eq!(true, d.is_null(1));\n+\n+        assert_eq!(0, d.value_offset(0));\n+        assert_eq!(3, d.value_length(0));\n+        assert_eq!(3, d.value_offset(1));\n\nReview comment:\n       I suppose it's a function of how much we can accept as working vs what additional functionality we want to test; e.g. we've tested in list arrays that null offsets behave correctly.\r\n   My preference would be to forego some of the assertions that for example a value that should be null is null, if the functionality isn't expected to change such behaviour.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T20:06:16.465+0000",
                    "updated": "2020-10-17T20:06:16.465+0000",
                    "started": "2020-10-17T20:06:16.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501828",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/501865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-18T05:46:44.994+0000",
                    "updated": "2020-10-18T05:46:44.994+0000",
                    "started": "2020-10-18T05:46:44.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501865",
                    "issueId": "13233816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/worklog/501887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8364:\nURL: https://github.com/apache/arrow/pull/8364#discussion_r507100922\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -733,4 +909,53 @@ mod tests {\n         assert_eq!(\"hello\", d.value(0));\n         assert_eq!(\"world\", d.value(1));\n     }\n+\n+    #[test]\n+    fn test_filter_list_array() {\n+        let value_data = ArrayData::builder(DataType::Int32)\n+            .len(8)\n+            .add_buffer(Buffer::from(&[0, 1, 2, 3, 4, 5, 6, 7].to_byte_slice()))\n+            .build();\n+\n+        let value_offsets = Buffer::from(&[0, 3, 6, 8, 8].to_byte_slice());\n+\n+        let list_data_type = DataType::List(Box::new(DataType::Int32));\n+        let list_data = ArrayData::builder(list_data_type)\n+            .len(4)\n+            .add_buffer(value_offsets)\n+            .add_child_data(value_data)\n+            .null_bit_buffer(Buffer::from([0b00000111]))\n+            .build();\n+\n+        //  a = [[0, 1, 2], [3, 4, 5], [6, 7], null]\n+        let a = ListArray::from(list_data);\n+        let b = BooleanArray::from(vec![false, true, false, true]);\n+        let c = filter(&a, &b).unwrap();\n+        let d = c.as_ref().as_any().downcast_ref::<ListArray>().unwrap();\n+\n+        assert_eq!(DataType::Int32, d.value_type());\n+\n+        // result should be [[3, 4, 5], null]\n+        assert_eq!(2, d.len());\n+        assert_eq!(1, d.null_count());\n+        assert_eq!(true, d.is_null(1));\n+\n+        assert_eq!(0, d.value_offset(0));\n+        assert_eq!(3, d.value_length(0));\n+        assert_eq!(3, d.value_offset(1));\n+        assert_eq!(0, d.value_length(1));\n+        assert_eq!(\n+            Buffer::from(&[3, 4, 5].to_byte_slice()),\n+            d.values().data().buffers()[0].clone()\n+        );\n+        assert_eq!(\n\nReview comment:\n       I think it is reasonable to keep the tests consistent\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-18T11:21:20.980+0000",
                    "updated": "2020-10-18T11:21:20.980+0000",
                    "started": "2020-10-18T11:21:20.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501887",
                    "issueId": "13233816"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4abdacae[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e987767[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33ff494c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7e11331b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74f669fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@629d3572[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b61b544[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5c1fc2d8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b61f127[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@105c719c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36313d46[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@149a305a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Oct 18 05:46:42 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-18T05:46:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5350/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-05-16T16:28:38.000+0000",
        "updated": "2020-10-18T11:21:22.000+0000",
        "timeoriginalestimate": null,
        "description": "We currently only filter on primitive types, but not on lists and structs. Add the ability to filter on nested array types",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Support filtering on primitive/string lists",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233816/comment/17216100",
                    "id": "17216100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8364\n[https://github.com/apache/arrow/pull/8364]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-10-18T05:46:42.185+0000",
                    "updated": "2020-10-18T05:46:42.185+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z02rts:",
        "customfield_12314139": null
    }
}