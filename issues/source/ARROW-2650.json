{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13163096",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096",
    "key": "ARROW-2650",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342901",
                "id": "12342901",
                "description": "",
                "name": "JS-0.4.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-02-11"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2650/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096/worklog/107602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt opened a new pull request #2092: ARROW-2650: [JS] Implement Unions\nURL: https://github.com/apache/arrow/pull/2092\n \n \n   Still need to add Unions to the integration tests, but I validated this locally with the [JSON file](https://github.com/icexelloss/arrow/blob/2d6d41dbb041dbee06131b3f94a3fae4e0a90fd2/integration/data/union.json) from #987 and it seems to work:\r\n   \r\n   ```sh\r\n   $ ./bin/json-to-arrow.js -j ./test/data/json/union.json -a ./test/data/union-file.arrow \r\n   $ cat ./test/data/union-file.arrow | ./bin/file-to-stream.js > ./test/data/union-stream.arrow\r\n   $ cat ./test/data/union-file.arrow | node ./targets/apache-arrow/bin/arrow2csv.js \r\n   \"row_id\" | \"union: Union<Int32 | Int64>\"\r\n          0 |                             0\r\n          1 |                         [1,0]\r\n          2 |                             2\r\n          3 |                         [3,0]\r\n          4 |                             4\r\n          5 |                         [5,0]\r\n          6 |                             6\r\n          7 |                         [7,0]\r\n          8 |                             8\r\n          9 |                         [9,0]\r\n   \r\n   $ cat ./test/data/union-stream.arrow | node ./targets/apache-arrow/bin/arrow2csv.js \r\n   \"row_id\" | \"union: Union<Int32 | Int64>\"\r\n          0 |                             0\r\n          1 |                         [1,0]\r\n          2 |                             2\r\n          3 |                         [3,0]\r\n          4 |                             4\r\n          5 |                         [5,0]\r\n          6 |                             6\r\n          7 |                         [7,0]\r\n          8 |                             8\r\n          9 |                         [9,0]\r\n   \r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T08:12:24.023+0000",
                    "updated": "2018-05-31T08:12:24.023+0000",
                    "started": "2018-05-31T08:12:24.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107602",
                    "issueId": "13163096"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096/worklog/107614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2092: ARROW-2650: [JS] Implement Unions\nURL: https://github.com/apache/arrow/pull/2092#issuecomment-393460845\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2092?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@cdacb09`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2092/graphs/tree.svg?width=650&src=pr&token=LpTCFbqVT1&height=150)](https://codecov.io/gh/apache/arrow/pull/2092?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #2092   +/-   ##\n   =========================================\n     Coverage          ?   86.33%           \n   =========================================\n     Files             ?      230           \n     Lines             ?    40297           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    34791           \n     Misses            ?     5506           \n     Partials          ?        0\n   ```\n   \n   \n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2092?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2092?src=pr&el=footer). Last update [cdacb09...9b199c3](https://codecov.io/gh/apache/arrow/pull/2092?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T08:48:25.783+0000",
                    "updated": "2018-05-31T08:48:25.783+0000",
                    "started": "2018-05-31T08:48:25.783+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107614",
                    "issueId": "13163096"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096/worklog/119105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2092: ARROW-2650: [JS] Implement Unions\nURL: https://github.com/apache/arrow/pull/2092\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/js/src/data.ts b/js/src/data.ts\nindex 963a6a476b..2c79151310 100644\n--- a/js/src/data.ts\n+++ b/js/src/data.ts\n@@ -216,9 +216,13 @@ export class ListData<T extends ListType> extends SingleNestedData<T> {\n export class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n     public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n     public get typeIds() { return this[VectorType.TYPE]; }\n+    public readonly typeIdToChildIndex: { [key: number]: number };\n     constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n         super(type, length, nullBitmap, childData, offset, nullCount);\n         this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n+        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n+            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n+        }, Object.create(null) as { [key: number]: number });\n     }\n     public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n         return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\ndiff --git a/js/src/ipc/reader/json.ts b/js/src/ipc/reader/json.ts\nindex 67bb5ca2d6..e8ab498f9a 100644\n--- a/js/src/ipc/reader/json.ts\n+++ b/js/src/ipc/reader/json.ts\n@@ -76,6 +76,7 @@ function flattenDataSources(xs: any[]): any[][] {\n         ...buffers,\n         ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n         ...(column['OFFSET'] && [column['OFFSET']] || []),\n+        ...(column['TYPE'] && [column['TYPE']] || []),\n         ...(column['DATA'] && [column['DATA']] || []),\n         ...flattenDataSources(column['children'])\n     ], [] as any[][]);\n@@ -156,6 +157,7 @@ import * as Schema_ from '../../fb/Schema';\n import Type = Schema_.org.apache.arrow.flatbuf.Type;\n import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\n import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\n+import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\n import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\n import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\n import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n@@ -209,6 +211,7 @@ function buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetad\n         const column = xs[i];\n         column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n         column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n+        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));\n         column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n         buffers = buffersFromJSON(column['children'], buffers);\n     }\n@@ -293,31 +296,31 @@ function typeFromJSON(t: any, children?: Field[]) {\n     throw new Error(`Unrecognized type ${t['name']}`);\n }\n \n-function nullFromJSON           (_type: any)                    { return new Null();                                                                  }\n+function nullFromJSON           (_type: any)                    { return new Null();                                                                               }\n function intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                       case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                       case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                       case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                       case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                   }\n-                                                                  return null;                                                                        }\n+                                                                  return null;                                                                                     }\n function floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                       case Precision.HALF: return new Float16();\n                                                                       case Precision.SINGLE: return new Float32();\n                                                                       case Precision.DOUBLE: return new Float64();\n                                                                   }\n-                                                                  return null;                                                                        }\n-function binaryFromJSON         (_type: any)                    { return new Binary();                                                                }\n-function utf8FromJSON           (_type: any)                    { return new Utf8();                                                                  }\n-function boolFromJSON           (_type: any)                    { return new Bool();                                                                  }\n-function decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                             }\n-function dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                   }\n-function timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\n-function timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);            }\n-function intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                            }\n-function listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                          }\n-function structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                        }\n-function unionFromJSON          (_type: any, children: Field[]) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[], children); }\n-function fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                     }\n-function fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                              }\n-function mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                     }\n+                                                                  return null;                                                                                     }\n+function binaryFromJSON         (_type: any)                    { return new Binary();                                                                             }\n+function utf8FromJSON           (_type: any)                    { return new Utf8();                                                                               }\n+function boolFromJSON           (_type: any)                    { return new Bool();                                                                               }\n+function decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                                          }\n+function dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                                }\n+function timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth);              }\n+function timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);                         }\n+function intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                                         }\n+function listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                                       }\n+function structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                                     }\n+function unionFromJSON          (_type: any, children: Field[]) { return new Union(UnionMode[_type['mode']] as any, (_type['typeIds'] || []) as Type[], children); }\n+function fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                                  }\n+function fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                                           }\n+function mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                                  }\ndiff --git a/js/src/ipc/writer/binary.ts b/js/src/ipc/writer/binary.ts\nindex d8b1d7eb23..166d4b89c8 100644\n--- a/js/src/ipc/writer/binary.ts\n+++ b/js/src/ipc/writer/binary.ts\n@@ -588,14 +588,34 @@ function writeMessage(b: Builder, node: Message) {\n }\n \n function writeSchema(b: Builder, node: Schema) {\n+\n     const fieldOffsets = node.fields.map((f) => writeField(b, f));\n     const fieldsOffset =\n         _Schema.startFieldsVector(b, fieldOffsets.length) ||\n         _Schema.createFieldsVector(b, fieldOffsets);\n+\n+    let metadata: number | undefined = undefined;\n+    if (node.metadata && node.metadata.size > 0) {\n+        metadata = _Schema.createCustomMetadataVector(\n+            b,\n+            [...node.metadata].map(([k, v]) => {\n+                const key = b.createString(`${k}`);\n+                const val = b.createString(`${v}`);\n+                return (\n+                    _KeyValue.startKeyValue(b) ||\n+                    _KeyValue.addKey(b, key) ||\n+                    _KeyValue.addValue(b, val) ||\n+                    _KeyValue.endKeyValue(b)\n+                );\n+            })\n+        );\n+    }\n+\n     return (\n         _Schema.startSchema(b) ||\n         _Schema.addFields(b, fieldsOffset) ||\n         _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n+        (metadata !== undefined && _Schema.addCustomMetadata(b, metadata)) ||\n         _Schema.endSchema(b)\n     );\n }\n@@ -662,8 +682,8 @@ function writeField(b: Builder, node: Field) {\n         metadata = _Field.createCustomMetadataVector(\n             b,\n             [...node.metadata].map(([k, v]) => {\n-                const key = b.createString(k);\n-                const val = b.createString(v);\n+                const key = b.createString(`${k}`);\n+                const val = b.createString(`${v}`);\n                 return (\n                     _KeyValue.startKeyValue(b) ||\n                     _KeyValue.addKey(b, key) ||\ndiff --git a/js/src/type.ts b/js/src/type.ts\nindex 370be0def0..26686c74b5 100644\n--- a/js/src/type.ts\n+++ b/js/src/type.ts\n@@ -372,9 +372,11 @@ export class Union<TType extends Type = any> extends DataType<TType> {\n     constructor(public readonly mode: UnionMode,\n                 public readonly typeIds: ArrowType[],\n                 public readonly children: Field[]) {\n-        super(<TType> (mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n+        super(<TType> Type.Union, children);\n     }\n-    public toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n+    public toString() { return `${this[Symbol.toStringTag]}<${\n+        this.children.map((x) => `${x.type}`).join(` | `)\n+    }>`; }\n     protected static [Symbol.toStringTag] = ((proto: Union) => {\n         (<any> proto).ArrayType = Int8Array;\n         return proto[Symbol.toStringTag] = 'Union';\ndiff --git a/js/src/vector/nested.ts b/js/src/vector/nested.ts\nindex 1102fe83b7..fe9f7e96d2 100644\n--- a/js/src/vector/nested.ts\n+++ b/js/src/vector/nested.ts\n@@ -76,31 +76,35 @@ export class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> exten\n     public typeIds: Int8Array;\n     // @ts-ignore\n     public valueOffsets?: Int32Array;\n+    // @ts-ignore\n+    protected typeIdToChildIndex: { [key: number]: number };\n     constructor(data: Data<T>, children?: Vector<any>[]) {\n         super(data, children);\n         this.length = data.length;\n         this.typeIds = data.typeIds;\n+        this.typeIdToChildIndex = data.typeIdToChildIndex;\n     }\n     protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n-        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n+        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n     }\n     protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n-        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n+        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n     }\n-    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets?: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.get(index) : null;\n     }\n-    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets?: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.set(index, value) : null;\n     }\n     public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n         const length = this.length;\n         const get = this.getChildValue;\n+        const { typeIdToChildIndex } = this;\n         const { typeIds, valueOffsets } = this;\n         for (let index = -1; ++index < length;) {\n-            yield get(this, index, typeIds, valueOffsets);\n+            yield get(this, index, typeIds, valueOffsets, typeIdToChildIndex);\n         }\n     }\n }\n@@ -112,14 +116,14 @@ export class DenseUnionView extends UnionView<DenseUnion> {\n         this.valueOffsets = data.valueOffsets;\n     }\n     protected getNested(self: DenseUnionView, index: number): any | null {\n-        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n+        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n     }\n-    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.get(valueOffsets[index]) : null;\n     }\n-    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets?: any): any | null {\n-        const child = self.getChildAt(typeIds[index]);\n+    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n+        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n         return child ? child.set(valueOffsets[index], value) : null;\n     }\n }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-04T15:10:31.021+0000",
                    "updated": "2018-07-04T15:10:31.021+0000",
                    "started": "2018-07-04T15:10:31.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "119105",
                    "issueId": "13163096"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096/worklog/119108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2092: ARROW-2650: [JS] Implement Unions\nURL: https://github.com/apache/arrow/pull/2092#issuecomment-402506144\n \n \n   Years ago I saw Uncle Bob's talk \"What kills Smalltalk could kill Ruby, too\" and I have taken the general idea to heart (without going full TDD; I tend to write unit tests while writing the implementation, rather than before): https://www.youtube.com/watch?v=YX3iRjKj7C0\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-04T15:12:27.918+0000",
                    "updated": "2018-07-04T15:12:27.918+0000",
                    "started": "2018-07-04T15:12:27.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "119108",
                    "issueId": "13163096"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096/worklog/119109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on issue #2092: ARROW-2650: [JS] Implement Unions\nURL: https://github.com/apache/arrow/pull/2092#issuecomment-402506144\n \n \n   Years ago I saw Uncle Bob's talk \"What killed Smalltalk could kill Ruby, too\" and I have taken the general idea to heart (without going full TDD; I tend to write unit tests while writing the implementation, rather than before): https://www.youtube.com/watch?v=YX3iRjKj7C0\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-04T15:12:33.974+0000",
                    "updated": "2018-07-04T15:12:33.974+0000",
                    "started": "2018-07-04T15:12:33.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "119109",
                    "issueId": "13163096"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@26898106[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2011cb68[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59d865d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@77bcaf09[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f6a75af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@66689411[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c0483e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6e52bf8e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@720978e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@50e3b2aa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@82030d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@73755090[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 04 15:10:25 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-04T15:10:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2650/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-05-31T08:08:27.000+0000",
        "updated": "2019-06-03T12:35:10.000+0000",
        "timeoriginalestimate": null,
        "description": "Finish implementing Unions in JS and add to integration tests",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Finish implementing Unions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13163096/comment/16532859",
                    "id": "16532859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2092\n[https://github.com/apache/arrow/pull/2092]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-04T15:10:25.049+0000",
                    "updated": "2018-07-04T15:10:25.049+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3ucif:",
        "customfield_12314139": null
    }
}