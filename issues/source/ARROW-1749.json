{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13112836",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13112836",
    "key": "ARROW-1749",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341666",
                "id": "12341666",
                "name": "0.7.1",
                "archived": false,
                "released": true,
                "releaseDate": "2017-10-01"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1749/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@715c959c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4da934a6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e31fa1b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ab9e77f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@121d369b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@a959c78[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b554e13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4e32c619[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35e088aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@13b0a432[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12945581[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a4e5bc4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Nov 05 23:51:30 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-05T23:51:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1749/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-10-28T17:29:11.000+0000",
        "updated": "2017-11-05T23:51:30.000+0000",
        "timeoriginalestimate": null,
        "description": "{{2 ** 127 - 1}} and {{-2 ** 127}} both require a 39th digit to be displayed as a decimal string.\r\n\r\nThis means we do not have the ability to _display_ decimal values above {{10 ** 38 - 1}} even though we have the ability to _store_ them.\r\n\r\nFor reference, Impala returns {{NULL}} when trying to cast {{2 ** 127 - 1}} to {{DECIMAL(38, 0)}}.\r\n\r\nA few next steps are in order:\r\n\r\n# Explicitly test this behavior\r\n# Avoid crashing or displaying garbage when we cannot display a number that can be stored\r\n# Make a decision about whether we want to eventually support range of values from {{10 ** 38}} to {{2 ** 127 - 1}} positive and {{-2 ** 127}} to {{-10 ** 38}} negative. This would require a larger integer type to hold the value just before being converted to a string.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Handle range of Decimal128 values that require 39 digits to be displayed",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13112836/comment/16239234",
                    "id": "16239234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1282: ARROW-1749: [C++] Handle range of Decimal128 values that require 39 digits to be displayed\nURL: https://github.com/apache/arrow/pull/1282#discussion_r148941301\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -296,6 +297,25 @@ static inline int Log2(uint64_t x) {\n   return result;\n }\n \n+/// \\brief Count the number of leading zeros in a 32 bit integer.\n+static inline int64_t CountLeadingZeros(uint32_t value) {\n+  DCHECK_NE(value, 0);\n+#if defined(__clang__) || defined(__GNUC__)\n+  return static_cast<int64_t>(__builtin_clz(value));\n \n Review comment:\n   Interesting tidbit here is that `__builtin_clz` compiles to `31 - bit scan reverse` on gcc and clang.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:02:31.837+0000",
                    "updated": "2017-11-04T21:02:31.837+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13112836/comment/16239772",
                    "id": "16239772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1282: ARROW-1749: [C++] Handle range of Decimal128 values that require 39 digits to be displayed\nURL: https://github.com/apache/arrow/pull/1282\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex fc4b96e1b..b523876bf 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -321,8 +321,8 @@ DecimalArray::DecimalArray(const std::shared_ptr<ArrayData>& data)\n \n std::string DecimalArray::FormatValue(int64_t i) const {\n   const auto& type_ = static_cast<const DecimalType&>(*type());\n-  Decimal128 value(GetValue(i));\n-  return value.ToString(type_.precision(), type_.scale());\n+  const Decimal128 value(GetValue(i));\n+  return value.ToString(type_.scale());\n }\n \n // ----------------------------------------------------------------------\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex c92faede1..3894772da 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -616,11 +616,10 @@ static Status ConvertTimes(PandasOptions options, const ChunkedArray& data,\n   return Status::OK();\n }\n \n-static Status RawDecimalToString(const uint8_t* bytes, int precision, int scale,\n-                                 std::string* result) {\n+static Status RawDecimalToString(const uint8_t* bytes, int scale, std::string* result) {\n   DCHECK_NE(result, nullptr);\n   Decimal128 decimal(bytes);\n-  *result = decimal.ToString(precision, scale);\n+  *result = decimal.ToString(scale);\n   return Status::OK();\n }\n \n@@ -636,7 +635,6 @@ static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n   for (int c = 0; c < data.num_chunks(); c++) {\n     auto* arr(static_cast<arrow::DecimalArray*>(data.chunk(c).get()));\n     auto type(std::dynamic_pointer_cast<arrow::DecimalType>(arr->type()));\n-    const int precision = type->precision();\n     const int scale = type->scale();\n \n     for (int64_t i = 0; i < arr->length(); ++i) {\n@@ -646,7 +644,7 @@ static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n       } else {\n         const uint8_t* raw_value = arr->GetValue(i);\n         std::string decimal_string;\n-        RETURN_NOT_OK(RawDecimalToString(raw_value, precision, scale, &decimal_string));\n+        RETURN_NOT_OK(RawDecimalToString(raw_value, scale, &decimal_string));\n         *out_values++ = internal::DecimalFromString(Decimal, decimal_string);\n         RETURN_IF_PYERROR();\n       }\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex 8043f90cc..d6415f3c7 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -43,6 +43,8 @@\n #endif\n \n #if defined(_MSC_VER)\n+#include <intrin.h>\n+#pragma intrinsic(_BitScanReverse)\n #define ARROW_BYTE_SWAP64 _byteswap_uint64\n #define ARROW_BYTE_SWAP32 _byteswap_ulong\n #else\n@@ -55,6 +57,7 @@\n #include <memory>\n #include <vector>\n \n+#include \"arrow/util/logging.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/type_traits.h\"\n #include \"arrow/util/visibility.h\"\n@@ -296,6 +299,25 @@ static inline int Log2(uint64_t x) {\n   return result;\n }\n \n+/// \\brief Count the number of leading zeros in a 32 bit integer.\n+static inline int64_t CountLeadingZeros(uint32_t value) {\n+  DCHECK_NE(value, 0);\n+#if defined(__clang__) || defined(__GNUC__)\n+  return static_cast<int64_t>(__builtin_clz(value));\n+#elif defined(_MSC_VER)\n+  unsigned long index;                                         // NOLINT\n+  _BitScanReverse(&index, static_cast<unsigned long>(value));  // NOLINT\n+  return 31LL - static_cast<int64_t>(index);\n+#else\n+  int64_t bitpos = 0;\n+  while (value != 0) {\n+    value >>= 1;\n+    ++bitpos;\n+  }\n+  return 32LL - bitpos;\n+#endif\n+}\n+\n /// Swaps the byte order (i.e. endianess)\n static inline int64_t ByteSwap(int64_t value) { return ARROW_BYTE_SWAP64(value); }\n static inline uint64_t ByteSwap(uint64_t value) {\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex 565a1bbb9..b0271fff1 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -36,9 +36,8 @@ class DecimalTestFixture : public ::testing::Test {\n \n TEST_F(DecimalTestFixture, TestToString) {\n   Decimal128 decimal(this->integer_value_);\n-  int precision = 8;\n   int scale = 5;\n-  std::string result = decimal.ToString(precision, scale);\n+  std::string result = decimal.ToString(scale);\n   ASSERT_EQ(result, this->string_value_);\n }\n \n@@ -256,4 +255,40 @@ TEST(Decimal128TestFalse, ConstructibleFromBool) {\n   ASSERT_EQ(0, value.low_bits());\n }\n \n+TEST(Decimal128Test, Division) {\n+  const std::string expected_string_value(\"-23923094039234029\");\n+  const Decimal128 value(expected_string_value);\n+  const Decimal128 result(value / 3);\n+  const Decimal128 expected_value(\"-7974364679744676\");\n+  ASSERT_EQ(expected_value, result);\n+}\n+\n+TEST(Decimal128Test, PrintLargePositiveValue) {\n+  const std::string string_value(\"99999999999999999999999999999999999999\");\n+  const Decimal128 value(string_value);\n+  const std::string printed_value = value.ToIntegerString();\n+  ASSERT_EQ(string_value, printed_value);\n+}\n+\n+TEST(Decimal128Test, PrintLargeNegativeValue) {\n+  const std::string string_value(\"-99999999999999999999999999999999999999\");\n+  const Decimal128 value(string_value);\n+  const std::string printed_value = value.ToIntegerString();\n+  ASSERT_EQ(string_value, printed_value);\n+}\n+\n+TEST(Decimal128Test, PrintMaxValue) {\n+  const std::string string_value(\"170141183460469231731687303715884105727\");\n+  const Decimal128 value(string_value);\n+  const std::string printed_value = value.ToIntegerString();\n+  ASSERT_EQ(string_value, printed_value);\n+}\n+\n+TEST(Decimal128Test, PrintMinValue) {\n+  const std::string string_value(\"-170141183460469231731687303715884105728\");\n+  const Decimal128 value(string_value);\n+  const std::string printed_value = value.ToIntegerString();\n+  ASSERT_EQ(string_value, printed_value);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex 7196b252c..9d94bef84 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -19,14 +19,10 @@\n #include <cctype>\n #include <cmath>\n #include <cstring>\n+#include <iomanip>\n #include <limits>\n #include <sstream>\n \n-#ifdef _MSC_VER\n-#include <intrin.h>\n-#pragma intrinsic(_BitScanReverse)\n-#endif\n-\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n@@ -55,62 +51,116 @@ std::array<uint8_t, 16> Decimal128::ToBytes() const {\n   return out;\n }\n \n-std::string Decimal128::ToString(int precision, int scale) const {\n-  using std::size_t;\n+static constexpr Decimal128 kTenTo36(static_cast<int64_t>(0xC097CE7BC90715),\n+                                     0xB34B9F1000000000);\n+static constexpr Decimal128 kTenTo18(0xDE0B6B3A7640000);\n \n-  const bool is_negative = *this < 0;\n-\n-  // Decimal values are sent to clients as strings so in the interest of\n-  // speed the string will be created without the using stringstream with the\n-  // whole/fractional_part().\n-  size_t last_char_idx = precision + (scale > 0)  // Add a space for decimal place\n-                         + (scale == precision)   // Add a space for leading 0\n-                         + is_negative;           // Add a space for negative sign\n-\n-  std::string str(last_char_idx, '0');\n-\n-  // Start filling in the values in reverse order by taking the last digit\n-  // of the value. Use a positive value and worry about the sign later. At this\n-  // point the last_char_idx points to the string terminator.\n-  Decimal128 remaining_value(*this);\n-\n-  const auto first_digit_idx = static_cast<size_t>(is_negative);\n-  if (is_negative) {\n-    remaining_value.Negate();\n-  }\n-\n-  if (scale > 0) {\n-    int remaining_scale = scale;\n-    do {\n-      str[--last_char_idx] =\n-          static_cast<char>(remaining_value % 10 + '0');  // Ascii offset\n-      remaining_value /= 10;\n-    } while (--remaining_scale > 0);\n-    str[--last_char_idx] = '.';\n-    DCHECK_GT(last_char_idx, first_digit_idx) << \"Not enough space remaining\";\n-  }\n-\n-  do {\n-    str[--last_char_idx] = static_cast<char>(remaining_value % 10 + '0');  // Ascii offset\n-    remaining_value /= 10;\n-    if (remaining_value == 0) {\n-      // Trim any extra leading 0's.\n-      if (last_char_idx > first_digit_idx) {\n-        str.erase(0, last_char_idx - first_digit_idx);\n-      }\n+std::string Decimal128::ToIntegerString() const {\n+  Decimal128 remainder;\n+  std::stringstream buf;\n+  bool need_fill = false;\n \n-      break;\n+  // get anything above 10 ** 36 and print it\n+  Decimal128 top;\n+  Status s = Divide(kTenTo36, &top, &remainder);\n+  DCHECK(s.ok()) << s.message();\n+\n+  if (top != 0) {\n+    buf << static_cast<int64_t>(top);\n+    remainder.Abs();\n+    need_fill = true;\n+  }\n+\n+  // now get anything above 10 ** 18 and print it\n+  Decimal128 tail;\n+  s = remainder.Divide(kTenTo18, &top, &tail);\n+\n+  if (need_fill || top != 0) {\n+    if (need_fill) {\n+      buf << std::setw(18) << std::setfill('0');\n+    } else {\n+      need_fill = true;\n+      tail.Abs();\n+    }\n+\n+    buf << static_cast<int64_t>(top);\n+  }\n+\n+  // finally print the tail, which is less than 10**18\n+  if (need_fill) {\n+    buf << std::setw(18) << std::setfill('0');\n+  }\n+  buf << static_cast<int64_t>(tail);\n+  return buf.str();\n+}\n+\n+Decimal128::operator int64_t() const {\n+  DCHECK(high_bits_ == 0 || high_bits_ == -1)\n+      << \"Trying to cast an Decimal128 greater than the value range of a \"\n+         \"int64_t. high_bits_ must be equal to 0 or -1, got: \"\n+      << high_bits_;\n+  return static_cast<int64_t>(low_bits_);\n+}\n+\n+std::string Decimal128::ToString(int32_t scale) const {\n+  const std::string str(ToIntegerString());\n+\n+  if (scale == 0) {\n+    return str;\n+  }\n+\n+  if (*this < 0) {\n+    const auto len = static_cast<int32_t>(str.size());\n+\n+    if (len - 1 > scale) {\n+      const auto n = static_cast<size_t>(len - scale);\n+      return str.substr(0, n) + \".\" + str.substr(n, static_cast<size_t>(scale));\n+    }\n+\n+    if (len - 1 == scale) {\n+      return \"-0.\" + str.substr(1, std::string::npos);\n     }\n-    // For safety, enforce string length independent of remaining_value.\n-  } while (last_char_idx > first_digit_idx);\n \n-  if (is_negative) {\n-    str[0] = '-';\n+    std::string result(\"-0.\" + std::string(static_cast<size_t>(scale - len + 1), '0'));\n+    return result + str.substr(1, std::string::npos);\n+  }\n+\n+  const auto len = static_cast<int32_t>(str.size());\n+\n+  if (len > scale) {\n+    const auto n = static_cast<size_t>(len - scale);\n+    return str.substr(0, n) + \".\" + str.substr(n, static_cast<size_t>(scale));\n+  }\n+\n+  if (len == scale) {\n+    return \"0.\" + str;\n   }\n \n-  return str;\n+  return \"0.\" + std::string(static_cast<size_t>(scale - len), '0') + str;\n }\n \n+static constexpr auto kInt64DecimalDigits =\n+    static_cast<size_t>(std::numeric_limits<int64_t>::digits10);\n+static constexpr int64_t kPowersOfTen[kInt64DecimalDigits + 1] = {1LL,\n+                                                                  10LL,\n+                                                                  100LL,\n+                                                                  1000LL,\n+                                                                  10000LL,\n+                                                                  100000LL,\n+                                                                  1000000LL,\n+                                                                  10000000LL,\n+                                                                  100000000LL,\n+                                                                  1000000000LL,\n+                                                                  10000000000LL,\n+                                                                  100000000000LL,\n+                                                                  1000000000000LL,\n+                                                                  10000000000000LL,\n+                                                                  100000000000000LL,\n+                                                                  1000000000000000LL,\n+                                                                  10000000000000000LL,\n+                                                                  100000000000000000LL,\n+                                                                  1000000000000000000LL};\n+\n static void StringToInteger(const std::string& str, Decimal128* out) {\n   using std::size_t;\n \n@@ -122,13 +172,10 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n \n   DCHECK_GT(length, 0) << \"length of parsed decimal string should be greater than 0\";\n \n-  size_t posn = 0;\n-\n-  while (posn < length) {\n-    const size_t group = std::min(static_cast<size_t>(18), length - posn);\n-    const auto chunk = static_cast<int64_t>(std::stoll(str.substr(posn, group)));\n-    const auto multiple =\n-        static_cast<int64_t>(std::pow(10.0, static_cast<double>(group)));\n+  for (size_t posn = 0; posn < length;) {\n+    const size_t group = std::min(kInt64DecimalDigits, length - posn);\n+    const int64_t chunk = std::stoll(str.substr(posn, group));\n+    const int64_t multiple = kPowersOfTen[group];\n \n     *out *= multiple;\n     *out += chunk;\n@@ -266,6 +313,8 @@ Decimal128& Decimal128::Negate() {\n   return *this;\n }\n \n+Decimal128& Decimal128::Abs() { return *this < 0 ? Negate() : *this; }\n+\n Decimal128& Decimal128::operator+=(const Decimal128& right) {\n   const uint64_t sum = low_bits_ + right.low_bits_;\n   high_bits_ += right.high_bits_;\n@@ -288,20 +337,11 @@ Decimal128& Decimal128::operator-=(const Decimal128& right) {\n \n Decimal128& Decimal128::operator/=(const Decimal128& right) {\n   Decimal128 remainder;\n-  DCHECK(Divide(right, this, &remainder).ok());\n+  Status s = Divide(right, this, &remainder);\n+  DCHECK(s.ok());\n   return *this;\n }\n \n-Decimal128::operator char() const {\n-  DCHECK(high_bits_ == 0 || high_bits_ == -1)\n-      << \"Trying to cast an Decimal128 greater than the value range of a \"\n-         \"char. high_bits_ must be equal to 0 or -1, got: \"\n-      << high_bits_;\n-  DCHECK_LE(low_bits_, std::numeric_limits<char>::max())\n-      << \"low_bits_ too large for C type char, got: \" << low_bits_;\n-  return static_cast<char>(low_bits_);\n-}\n-\n Decimal128& Decimal128::operator|=(const Decimal128& right) {\n   low_bits_ |= right.low_bits_;\n   high_bits_ |= right.high_bits_;\n@@ -440,18 +480,6 @@ static int64_t FillInArray(const Decimal128& value, uint32_t* array, bool& was_n\n   return 1;\n }\n \n-/// \\brief Find last set bit in a 32 bit integer. Bit 1 is the LSB and bit 32 is the MSB.\n-static int64_t FindLastSetBit(uint32_t value) {\n-#if defined(__clang__) || defined(__GNUC__)\n-  // Count leading zeros\n-  return __builtin_clz(value) + 1;\n-#elif defined(_MSC_VER)\n-  unsigned long index;                                         // NOLINT\n-  _BitScanReverse(&index, static_cast<unsigned long>(value));  // NOLINT\n-  return static_cast<int64_t>(index + 1UL);\n-#endif\n-}\n-\n /// Shift the number in the array left by bits positions.\n /// \\param array the number to shift, must have length elements\n /// \\param length the number of entries in the array\n@@ -581,7 +609,7 @@ Status Decimal128::Divide(const Decimal128& divisor, Decimal128* result,\n   // Normalize by shifting both by a multiple of 2 so that\n   // the digit guessing is better. The requirement is that\n   // divisor_array[0] is greater than 2**31.\n-  int64_t normalize_bits = 32 - FindLastSetBit(divisor_array[0]);\n+  int64_t normalize_bits = BitUtil::CountLeadingZeros(divisor_array[0]);\n   ShiftArrayLeft(divisor_array, divisor_length, normalize_bits);\n   ShiftArrayLeft(dividend_array, dividend_length, normalize_bits);\n \n@@ -589,7 +617,7 @@ Status Decimal128::Divide(const Decimal128& divisor, Decimal128* result,\n   for (int64_t j = 0; j < result_length; ++j) {\n     // Guess the next digit. At worst it is two too large\n     uint32_t guess = std::numeric_limits<uint32_t>::max();\n-    auto high_dividend =\n+    const auto high_dividend =\n         static_cast<uint64_t>(dividend_array[j]) << 32 | dividend_array[j + 1];\n     if (dividend_array[j] != divisor_array[0]) {\n       guess = static_cast<uint32_t>(high_dividend / divisor_array[0]);\n@@ -625,10 +653,9 @@ Status Decimal128::Divide(const Decimal128& divisor, Decimal128* result,\n     // if guess was too big, we add back divisor\n     if (dividend_array[j] > prev) {\n       --guess;\n-\n       uint32_t carry = 0;\n       for (int64_t i = divisor_length - 1; i >= 0; --i) {\n-        uint64_t sum =\n+        const auto sum =\n             static_cast<uint64_t>(divisor_array[i]) + dividend_array[j + i + 1] + carry;\n         dividend_array[j + i + 1] = static_cast<uint32_t>(sum);\n         carry = static_cast<uint32_t>(sum >> 32);\n@@ -645,6 +672,7 @@ Status Decimal128::Divide(const Decimal128& divisor, Decimal128* result,\n   // return result and remainder\n   RETURN_NOT_OK(BuildFromArray(result, result_array, result_length));\n   RETURN_NOT_OK(BuildFromArray(remainder, dividend_array, dividend_length));\n+\n   FixDivisionSigns(result, remainder, dividend_was_negative, divisor_was_negative);\n   return Status::OK();\n }\n@@ -679,6 +707,11 @@ Decimal128 operator-(const Decimal128& operand) {\n   return result.Negate();\n }\n \n+Decimal128 operator~(const Decimal128& operand) {\n+  Decimal128 result(~operand.high_bits(), ~operand.low_bits());\n+  return result;\n+}\n+\n Decimal128 operator+(const Decimal128& left, const Decimal128& right) {\n   Decimal128 result(left.high_bits(), left.low_bits());\n   result += right;\n@@ -700,14 +733,16 @@ Decimal128 operator*(const Decimal128& left, const Decimal128& right) {\n Decimal128 operator/(const Decimal128& left, const Decimal128& right) {\n   Decimal128 remainder;\n   Decimal128 result;\n-  DCHECK(left.Divide(right, &result, &remainder).ok());\n+  Status s = left.Divide(right, &result, &remainder);\n+  DCHECK(s.ok());\n   return result;\n }\n \n Decimal128 operator%(const Decimal128& left, const Decimal128& right) {\n   Decimal128 remainder;\n   Decimal128 result;\n-  DCHECK(left.Divide(right, &result, &remainder).ok());\n+  Status s = left.Divide(right, &result, &remainder);\n+  DCHECK(s.ok());\n   return remainder;\n }\n \ndiff --git a/cpp/src/arrow/util/decimal.h b/cpp/src/arrow/util/decimal.h\nindex 72da55479..487f22258 100644\n--- a/cpp/src/arrow/util/decimal.h\n+++ b/cpp/src/arrow/util/decimal.h\n@@ -39,15 +39,16 @@ namespace arrow {\n class ARROW_EXPORT Decimal128 {\n  public:\n   /// \\brief Create an Decimal128 from the two's complement representation.\n-  constexpr Decimal128(int64_t high, uint64_t low) : high_bits_(high), low_bits_(low) {}\n+  constexpr Decimal128(int64_t high, uint64_t low) noexcept\n+      : high_bits_(high), low_bits_(low) {}\n \n   /// \\brief Empty constructor creates an Decimal128 with a value of 0.\n-  constexpr Decimal128() : Decimal128(0, 0) {}\n+  constexpr Decimal128() noexcept : Decimal128(0, 0) {}\n \n   /// \\brief Convert any integer value into an Decimal128.\n   template <typename T,\n             typename = typename std::enable_if<std::is_integral<T>::value, T>::type>\n-  constexpr Decimal128(T value)\n+  constexpr Decimal128(T value) noexcept\n       : Decimal128(static_cast<int64_t>(value) >= 0 ? 0 : -1,\n                    static_cast<uint64_t>(value)) {}\n \n@@ -61,6 +62,9 @@ class ARROW_EXPORT Decimal128 {\n   /// \\brief Negate the current value\n   Decimal128& Negate();\n \n+  /// \\brief Absolute value\n+  Decimal128& Abs();\n+\n   /// \\brief Add a number to this one. The result is truncated to 128 bits.\n   Decimal128& operator+=(const Decimal128& right);\n \n@@ -85,9 +89,6 @@ class ARROW_EXPORT Decimal128 {\n   /// \\brief In-place division.\n   Decimal128& operator/=(const Decimal128& right);\n \n-  /// \\brief Cast the value to char. This is used when converting the value a string.\n-  explicit operator char() const;\n-\n   /// \\brief Bitwise or between two Decimal128.\n   Decimal128& operator|=(const Decimal128& right);\n \n@@ -110,8 +111,14 @@ class ARROW_EXPORT Decimal128 {\n   std::array<uint8_t, 16> ToBytes() const;\n \n   /// \\brief Convert the Decimal128 value to a base 10 decimal string with the given\n-  /// precision and scale.\n-  std::string ToString(int precision, int scale) const;\n+  /// scale.\n+  std::string ToString(int32_t scale) const;\n+\n+  /// \\brief Convert the value to an integer string\n+  std::string ToIntegerString() const;\n+\n+  /// \\brief Cast this value to an int64_t.\n+  explicit operator int64_t() const;\n \n   /// \\brief Convert a decimal string to an Decimal128 value, optionally including\n   /// precision and scale if they're passed in and not null.\n@@ -131,6 +138,7 @@ ARROW_EXPORT bool operator>(const Decimal128& left, const Decimal128& right);\n ARROW_EXPORT bool operator>=(const Decimal128& left, const Decimal128& right);\n \n ARROW_EXPORT Decimal128 operator-(const Decimal128& operand);\n+ARROW_EXPORT Decimal128 operator~(const Decimal128& operand);\n ARROW_EXPORT Decimal128 operator+(const Decimal128& left, const Decimal128& right);\n ARROW_EXPORT Decimal128 operator-(const Decimal128& left, const Decimal128& right);\n ARROW_EXPORT Decimal128 operator*(const Decimal128& left, const Decimal128& right);\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-05T23:51:16.589+0000",
                    "updated": "2017-11-05T23:51:16.589+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13112836/comment/16239773",
                    "id": "16239773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1282\n[https://github.com/apache/arrow/pull/1282]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-05T23:51:30.351+0000",
                    "updated": "2017-11-05T23:51:30.351+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3lu1r:",
        "customfield_12314139": null
    }
}