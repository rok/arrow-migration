{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13434592",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592",
    "key": "ARROW-15972",
    "fields": {
        "parent": {
            "id": "13418565",
            "key": "ARROW-15156",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13418565",
            "fields": {
                "summary": "[Doc] Implement Tutorials for the Java Documentation",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12636547",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12636547",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13426645",
                    "key": "ARROW-15572",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426645",
                    "fields": {
                        "summary": "[Java][Doc] Getting Started Section",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15972/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar opened a new pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739\n\n\n   Getting Started Section - Landing Page for Java section\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:07:05.592+0000",
                    "updated": "2022-03-28T21:07:05.592+0000",
                    "started": "2022-03-28T21:07:05.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748928",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#issuecomment-1081151222\n\n\n   @lidavidm  please if you could help me wit this review, thank you in advance.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:10:16.051+0000",
                    "updated": "2022-03-28T21:10:16.051+0000",
                    "started": "2022-03-28T21:10:16.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748933",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#issuecomment-1081156702\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:15:07.908+0000",
                    "updated": "2022-03-28T21:15:07.908+0000",
                    "started": "2022-03-28T21:15:07.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748936",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r836859872\n\n\n\n##########\nFile path: docs/source/java/getstarted.rst\n##########\n@@ -0,0 +1,417 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n\nReview comment:\n       ```suggestion\r\n   \r\n   ===============\r\n   Getting Started\r\n   ===============\r\n   ```\n\n##########\nFile path: docs/source/java/getstarted.rst\n##########\n@@ -0,0 +1,417 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n+   * - arrow-plasma\n+     - (`Experimental`) Java client for the Plasma object store.\n+   * - flight-core\n+     - (`Experimental`) An RPC mechanism for transferring ValueVectors.\n+   * - flight-grpc\n+     - (`Experimental`) Contains utility class to expose Flight gRPC service and client\n+   * - flight-sql\n+     - (`Experimental`) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+   * - arrow-algorithm\n+     - (`Experimental`) A collection of algorithms for working with ValueVectors.\n+   * - arrow-avro\n+     - (`Experimental`) A library for converting Avro data to Arrow data.\n+   * - arrow-compression\n+     - (`Experimental`) A library for working with the compression/decompression of Arrow data.\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+   * - arrow-orc\n+     - (`Experimental`) A JNI wrapper for the C++ ORC reader implementation.\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n+\n+.. figure:: img/arrow_java_wks_deps.png\n+   :scale: 75 %\n+   :alt: Offer a workspace dependency view for arrow java modules\n+\n+   Workspace dependency view for arrow java modules.\n\nReview comment:\n       I'm not sure this really is useful (it's rather messy)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:29:41.341+0000",
                    "updated": "2022-03-28T21:29:41.341+0000",
                    "started": "2022-03-28T21:29:41.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748951",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r836872197\n\n\n\n##########\nFile path: docs/source/java/getstarted.rst\n##########\n@@ -0,0 +1,417 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n+   * - arrow-plasma\n+     - (`Experimental`) Java client for the Plasma object store.\n+   * - flight-core\n+     - (`Experimental`) An RPC mechanism for transferring ValueVectors.\n+   * - flight-grpc\n+     - (`Experimental`) Contains utility class to expose Flight gRPC service and client\n+   * - flight-sql\n+     - (`Experimental`) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+   * - arrow-algorithm\n+     - (`Experimental`) A collection of algorithms for working with ValueVectors.\n+   * - arrow-avro\n+     - (`Experimental`) A library for converting Avro data to Arrow data.\n+   * - arrow-compression\n+     - (`Experimental`) A library for working with the compression/decompression of Arrow data.\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+   * - arrow-orc\n+     - (`Experimental`) A JNI wrapper for the C++ ORC reader implementation.\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n+\n+.. figure:: img/arrow_java_wks_deps.png\n+   :scale: 75 %\n+   :alt: Offer a workspace dependency view for arrow java modules\n+\n+   Workspace dependency view for arrow java modules.\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:39:07.581+0000",
                    "updated": "2022-03-28T21:39:07.581+0000",
                    "started": "2022-03-28T21:39:07.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748957",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#issuecomment-1081190228\n\n\n   > So just a quick comment: I don't think this really reflects the corresponding Python page that @amol- linked at all. The content here is mostly not related to how to actually use the Java library at all.\r\n   \r\n   Ok let me think on that, one option could be to initially I just add a quick start guide of purely examples, and then, if the user like to know more about arrow java only continuing read that.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:53:49.457+0000",
                    "updated": "2022-03-28T21:53:49.457+0000",
                    "started": "2022-03-28T21:53:49.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748966",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/748996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#issuecomment-1081234137\n\n\n   > > So just a quick comment: I don't think this really reflects the corresponding Python page that @amol- linked at all. The content here is mostly not related to how to actually use the Java library at all.\r\n   > \r\n   > Ok let me think on that, one option could be to initially I just add a quick start guide of purely examples, and then, if the user like to know more about arrow java only continuing read that.\r\n   \r\n   Just changed. Divided getting started guide in quick start guide (purely examples) and modules (more detail about what part is covered by java modules). Please let me know if this is ok.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T23:02:40.512+0000",
                    "updated": "2022-03-28T23:02:40.512+0000",
                    "started": "2022-03-28T23:02:40.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748996",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/749443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r837682632\n\n\n\n##########\nFile path: docs/source/java/getstarted.rst\n##########\n@@ -0,0 +1,31 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _getstarted:\n+\n+===============\n+Getting Started\n\nReview comment:\n       I think it's fairly pointless to have a getting started page that just links to other pages. Let's move the main content back here.\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A Vector Schema Root\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"Vector Schema Root: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Create a IPC File or Random Access Format\n+*****************************************\n+\n+The Arrow Interprocess Communication (IPC) format defines two types of binary\n+formats for serializing Arrow data: the streaming format and the file format\n+(or random access format). Such files can be directly memory-mapped when read.\n+\n+**Write File or Random Access Format**: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+Create A Flight Server And Flight Client\n\nReview comment:\n       IMO this section can be omitted, we can defer this for a dedicated page about Flight\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A Vector Schema Root\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"Vector Schema Root: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Create a IPC File or Random Access Format\n\nReview comment:\n       Can we also have a section about reading a file?\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n+   * - arrow-plasma\n+     - (`Experimental`) Java client for the Plasma object store.\n+   * - flight-core\n+     - (`Experimental`) An RPC mechanism for transferring ValueVectors.\n+   * - flight-grpc\n+     - (`Experimental`) Contains utility class to expose Flight gRPC service and client\n+   * - flight-sql\n+     - (`Experimental`) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+   * - arrow-algorithm\n+     - (`Experimental`) A collection of algorithms for working with ValueVectors.\n+   * - arrow-avro\n+     - (`Experimental`) A library for converting Avro data to Arrow data.\n+   * - arrow-compression\n+     - (`Experimental`) A library for working with the compression/decompression of Arrow data.\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+   * - arrow-orc\n+     - (`Experimental`) A JNI wrapper for the C++ ORC reader implementation.\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n+\n+.. note::\n+\n+    Arrow java modules offer support to work data: (1) in-memory,\n+    (2) at rest and (3) on-the-wire.\n+\n+Lets zoom-in arrow java modules to take advantage of this functionalities:\n+\n+Arrow Java In-Memory (The Physical Layer)\n\nReview comment:\n       We should get rid of the rest of this file. Code examples can be developed more for the cookbook. Quick examples can go on the getstarted page. That page isn't meant to teach you everything, just give you a brief idea of what's possible.\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n\nReview comment:\n       Let's move this page to the top level. We can organize it like https://arrow.apache.org/docs/cpp/overview.html but for Java. How does that sound?\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n\nReview comment:\n       IMO this file should just be moved into getstarted.rst\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T16:37:53.379+0000",
                    "updated": "2022-03-29T16:37:53.379+0000",
                    "started": "2022-03-29T16:37:53.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749443",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/749546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r837791842\n\n\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n\nReview comment:\n       We don't need backticks around 'experimental', and we can consolidate these two tables (if you decide to keep them as tables)\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n\nReview comment:\n       IMO, we don't need most of these links (they're part of the sidebar already). But we can link to the cookbook in the actual getting started page.\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n\nReview comment:\n       nit, but please be sure to capitalize Java.\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n+   * - arrow-plasma\n+     - (`Experimental`) Java client for the Plasma object store.\n+   * - flight-core\n+     - (`Experimental`) An RPC mechanism for transferring ValueVectors.\n+   * - flight-grpc\n+     - (`Experimental`) Contains utility class to expose Flight gRPC service and client\n+   * - flight-sql\n+     - (`Experimental`) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+   * - arrow-algorithm\n+     - (`Experimental`) A collection of algorithms for working with ValueVectors.\n+   * - arrow-avro\n+     - (`Experimental`) A library for converting Avro data to Arrow data.\n+   * - arrow-compression\n+     - (`Experimental`) A library for working with the compression/decompression of Arrow data.\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+   * - arrow-orc\n+     - (`Experimental`) A JNI wrapper for the C++ ORC reader implementation.\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n+\n+.. note::\n+\n+    Arrow java modules offer support to work data: (1) in-memory,\n+    (2) at rest and (3) on-the-wire.\n\nReview comment:\n       I'm not sure this is useful as a note. This can be a brief sentence in either the modules overview or the getting started guide.\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A Vector Schema Root\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"Vector Schema Root: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Create a IPC File or Random Access Format\n+*****************************************\n+\n+The Arrow Interprocess Communication (IPC) format defines two types of binary\n+formats for serializing Arrow data: the streaming format and the file format\n+(or random access format). Such files can be directly memory-mapped when read.\n+\n+**Write File or Random Access Format**: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n\nReview comment:\n       I think we can be briefer here and just say that Arrow data can be written to and read from disk, and both of these can be done in a streaming and/or random-access fashion depending on application requirements.\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n\nReview comment:\n       reST uses double backticks. But usually for this we should use quotes. `Also known as \"arrays\" in the columnar format.`\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n\nReview comment:\n       We should probably just consistently use \"VectorSchemaRoot\"\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n\nReview comment:\n       note it's not too useful to have this anchor, 1) we don't use it and 2) for linking to a file, instead of a subheading, just use `:doc:`\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n\nReview comment:\n       And we can introduce things more naturally, something like: Arrow provides several building blocks; ValueVectors are sequences of typed values; data types, fields, and schemas describe the types of values, and the types of columns in tabular data; VectorSchemaRoot represents tabular data. Arrow also provides readers and writers for loading data from and persisting data to storage.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T18:42:55.188+0000",
                    "updated": "2022-03-29T18:42:55.188+0000",
                    "started": "2022-03-29T18:42:55.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749546",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r838768182\n\n\n\n##########\nFile path: docs/source/java/getstarted.rst\n##########\n@@ -0,0 +1,31 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _getstarted:\n+\n+===============\n+Getting Started\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A Vector Schema Root\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"Vector Schema Root: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Create a IPC File or Random Access Format\n+*****************************************\n+\n+The Arrow Interprocess Communication (IPC) format defines two types of binary\n+formats for serializing Arrow data: the streaming format and the file format\n+(or random access format). Such files can be directly memory-mapped when read.\n+\n+**Write File or Random Access Format**: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+Create A Flight Server And Flight Client\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A Vector Schema Root\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"Vector Schema Root: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Create a IPC File or Random Access Format\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n\nReview comment:\n       Changed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T16:56:31.876+0000",
                    "updated": "2022-03-30T16:56:31.876+0000",
                    "started": "2022-03-30T16:56:31.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750264",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r838768695\n\n\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n+   * - arrow-plasma\n+     - (`Experimental`) Java client for the Plasma object store.\n+   * - flight-core\n+     - (`Experimental`) An RPC mechanism for transferring ValueVectors.\n+   * - flight-grpc\n+     - (`Experimental`) Contains utility class to expose Flight gRPC service and client\n+   * - flight-sql\n+     - (`Experimental`) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+   * - arrow-algorithm\n+     - (`Experimental`) A collection of algorithms for working with ValueVectors.\n+   * - arrow-avro\n+     - (`Experimental`) A library for converting Avro data to Arrow data.\n+   * - arrow-compression\n+     - (`Experimental`) A library for working with the compression/decompression of Arrow data.\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+   * - arrow-orc\n+     - (`Experimental`) A JNI wrapper for the C++ ORC reader implementation.\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n+\n+.. note::\n+\n+    Arrow java modules offer support to work data: (1) in-memory,\n+    (2) at rest and (3) on-the-wire.\n+\n+Lets zoom-in arrow java modules to take advantage of this functionalities:\n+\n+Arrow Java In-Memory (The Physical Layer)\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/modules.rst\n##########\n@@ -0,0 +1,413 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_modules:\n+\n+=======\n+Modules\n+=======\n+\n+.. contents::\n+\n+This is the variety of arrow java documentation:\n+\n+* `Specification and protocols`_: This contains agnostic specification that is implemented in this case by arrow java modules.\n+* `Supported environment`_ (like this): This contains answers for what-is-that arrow java module.\n+* `Cookbook`_: This contains answers about how-to-use arrow java modules with practices examples.\n+* `Development`_: This contains detailed information about what you need to consider to start with arrow java development.\n+\n+Arrow java modules is created using specification such as columnar format, off-heap\n+memory, serialization and interprocess communication (IPC). Some of the java modules\n+was created with their own native implementations and others through bindings.\n+\n+.. list-table:: Arrow Java Implementations and Bindings\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Root Decision\n+   * - Arrow Memory\n+     - Native implementation.\n+   * - Arrow Vector\n+     - Native implementation.\n+   * - Arrow Flight Grpc\n+     - Native implementation.\n+   * - Arrow Flight Sql\n+     - Native implementation.\n+   * - Arrow Algorithm\n+     - Native implementation.\n+   * - Arrow Compression\n+     - Native implementation.\n+   * - Arrow C Data Interface\n+     - Native implementation.\n+   * - Arrow Dataset\n+     - Bindings\n+   * - Arrow ORC\n+     - Bindings\n+   * - Arrow Gandiva\n+     - Bindings\n+\n+Arrow java is divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 75\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+   * - arrow-jdbc\n+     - (`Experimental`) A library for converting JDBC data to Arrow data.\n+   * - arrow-plasma\n+     - (`Experimental`) Java client for the Plasma object store.\n+   * - flight-core\n+     - (`Experimental`) An RPC mechanism for transferring ValueVectors.\n+   * - flight-grpc\n+     - (`Experimental`) Contains utility class to expose Flight gRPC service and client\n+   * - flight-sql\n+     - (`Experimental`) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+   * - arrow-algorithm\n+     - (`Experimental`) A collection of algorithms for working with ValueVectors.\n+   * - arrow-avro\n+     - (`Experimental`) A library for converting Avro data to Arrow data.\n+   * - arrow-compression\n+     - (`Experimental`) A library for working with the compression/decompression of Arrow data.\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+   * - arrow-orc\n+     - (`Experimental`) A JNI wrapper for the C++ ORC reader implementation.\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n+\n+.. note::\n+\n+    Arrow java modules offer support to work data: (1) in-memory,\n+    (2) at rest and (3) on-the-wire.\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T16:57:14.620+0000",
                    "updated": "2022-03-30T16:57:14.620+0000",
                    "started": "2022-03-30T16:57:14.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750265",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r838769384\n\n\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n\nReview comment:\n       Thanks, updated\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A Vector Schema Root\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"Vector Schema Root: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Create a IPC File or Random Access Format\n+*****************************************\n+\n+The Arrow Interprocess Communication (IPC) format defines two types of binary\n+formats for serializing Arrow data: the streaming format and the file format\n+(or random access format). Such files can be directly memory-mapped when read.\n+\n+**Write File or Random Access Format**: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,482 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+.. _java_quickstartguide:\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow java manage data in Vector Schema Root (somewhat analogous to tables and record\n+batches in the other Arrow implementations). Before to create a Vector Schema Root let's\n+define another topics neededs for that purpose.\n+\n+Create A Value Vector\n+*********************\n+\n+It's called `array` in the columnar format specification. Represent a one-dimensional\n\nReview comment:\n       Added\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T16:57:47.644+0000",
                    "updated": "2022-03-30T16:57:47.644+0000",
                    "started": "2022-03-30T16:57:47.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750266",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r838826608\n\n\n\n##########\nFile path: docs/source/java/index.rst\n##########\n@@ -18,17 +18,9 @@\n Java Implementation\n ===================\n \n-This is the documentation of the Java API of Apache Arrow. For more details\n-on the Arrow format and other language bindings see the :doc:`parent documentation <../index>`.\n-\n .. toctree::\n    :maxdepth: 2\n \n-   install\n-   memory\n-   vector\n-   vector_schema_root\n-   ipc\n-   algorithm\n-   dataset\n+   getting_started\n+   Examples <examples/index>\n\nReview comment:\n       Why are we reorganizing this file?\n\n##########\nFile path: docs/source/java/examples/index.rst\n##########\n@@ -0,0 +1,24 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Examples\n+========\n+\n+.. toctree::\n+   :maxdepth: 1\n+\n+   quickstartguide\n\nReview comment:\n       Why do we have this file? Why can't we just put the quick start at the top level with everything else?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n\nReview comment:\n       don't use code formatting for things that aren't code. If you need emphasis, I would use italics here instead.\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n\nReview comment:\n       Can we format the code before pasting it into these code blocks?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n\nReview comment:\n       This doesn't explain what it is in principle. Look to the Python docs for inspiration on how we can talk about things. For instance the Python docs say\r\n   \r\n   > Multiple arrays can be combined in tables to form the columns in tabular data when attached to a column name\r\n   \r\n   So we can say \"VectorSchemaRoot combines ValueVectors with a Schema to represent tabular data\" or something like that. We can still say it's analogous to tables, but we can't use that as the primary explanation.\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n\nReview comment:\n       ```suggestion\r\n   ValueVectors represent a sequence of values of the same type.\r\n   They are also known as \"arrays\" in the columnar format.\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n\nReview comment:\n       ```suggestion\r\n   Create a VectorSchemaRoot\r\n   *************************\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n\nReview comment:\n       Can we break long lines to be more readable?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n\nReview comment:\n       Just `\"age\"` is more natural, no?\n\n##########\nFile path: docs/source/java/getting_started.rst\n##########\n@@ -0,0 +1,33 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+User Guide\n+==========\n+\n+.. toctree::\n\nReview comment:\n       We don't need this. Just make \"quickstartguide.rst\" into \"getting_started.rst\" and revert the file hierarchy changes. \n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n\nReview comment:\n       \"Example: write the dataset from the previous example to an Arrow random-access file:\"\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n\nReview comment:\n       ```suggestion\r\n   Create a Field\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n\nReview comment:\n       The comment isn't very useful here\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n\nReview comment:\n       Can we break up long lines?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n\nReview comment:\n       ```suggestion\r\n       try(BufferAllocator allocator = new RootAllocator();\r\n   ```\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n\nReview comment:\n       We don't need to copy-paste this everywhere.\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n\nReview comment:\n       ```suggestion\r\n   Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\r\n   ```\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n\nReview comment:\n       I don't think the sentence adds anything\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n\nReview comment:\n       \"The Apache Arrow Java modules implement various specifications including the columnar format and IPC. Most modules are native Java implementations, but some modules are JNI bindings to the C++ library.\"\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n\nReview comment:\n       IMO, the bolding in each of these sections isn't useful. We already know we're talking about fields because that's the section we're reading. Just say \"Example: create a column named \"document\"\u2026\" or something.\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n\nReview comment:\n       ```suggestion\r\n   tabular data; ``schemas`` describe a sequence of columns in tabular data, and\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n\nReview comment:\n       ```suggestion\r\n   Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n\nReview comment:\n       We should consistently call these either just \"vectors\" or \"ValueVectors\". (I would probably prefer \"ValueVector\" to be consistent with existing documentation.)\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n\nReview comment:\n       ```suggestion\r\n        - Memory management implementation based on Netty.\r\n   ```\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+     - Native implementation\n+   * - arrow-algorithm\n+     - (Experimental) A collection of algorithms for working with ValueVectors.\n+     - Native implementation\n+   * - arrow-avro\n+     - (Experimental) A library for converting Avro data to Arrow data.\n+     - Native implementation\n+   * - arrow-compression\n+     - (Experimental) A library for working with the compression/decompression of Arrow data.\n+     - Native implementation\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n\nReview comment:\n       Can we link to the C Data Interface page?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n\nReview comment:\n       If we're printing things, can we also show the output?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n\nReview comment:\n       ```suggestion\r\n   Create a Schema\r\n   ```\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+     - Native implementation\n+   * - arrow-algorithm\n+     - (Experimental) A collection of algorithms for working with ValueVectors.\n+     - Native implementation\n+   * - arrow-avro\n+     - (Experimental) A library for converting Avro data to Arrow data.\n+     - Native implementation\n+   * - arrow-compression\n+     - (Experimental) A library for working with the compression/decompression of Arrow data.\n\nReview comment:\n       ```suggestion\r\n        - (Experimental) A library for working with compression/decompression of Arrow data.\r\n   ```\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n\nReview comment:\n       ```suggestion\r\n        - JMH benchmarks for the Arrow libraries.\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n\nReview comment:\n       ```suggestion\r\n   Fields are used to denote the particular columns of tabular data.\r\n   They consist of a name, a data type, a flag indicating whether the column can have null values, and optional key-value metadata.\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n\nReview comment:\n       We don't need metadata and I don't think we need to print out everything here.\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+     - Native implementation\n+   * - arrow-algorithm\n+     - (Experimental) A collection of algorithms for working with ValueVectors.\n+     - Native implementation\n+   * - arrow-avro\n+     - (Experimental) A library for converting Avro data to Arrow data.\n+     - Native implementation\n+   * - arrow-compression\n+     - (Experimental) A library for working with the compression/decompression of Arrow data.\n+     - Native implementation\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+     - Bindings\n+   * - arrow-orc\n+     - (Experimental) A JNI wrapper for the C++ ORC reader implementation.\n+     - Bindings\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+     - Bindings\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+     - Bindings\n+\n+Arrow Java modules offer support to work data (1) in-memory, (2) at rest and (3) on-the-wire.\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n\nReview comment:\n       This is already in the sidebar, no need to repeat IMO\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+     - Native implementation\n+   * - arrow-algorithm\n+     - (Experimental) A collection of algorithms for working with ValueVectors.\n+     - Native implementation\n+   * - arrow-avro\n+     - (Experimental) A library for converting Avro data to Arrow data.\n+     - Native implementation\n+   * - arrow-compression\n+     - (Experimental) A library for working with the compression/decompression of Arrow data.\n+     - Native implementation\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+     - Bindings\n+   * - arrow-orc\n+     - (Experimental) A JNI wrapper for the C++ ORC reader implementation.\n+     - Bindings\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+     - Bindings\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n\nReview comment:\n       ```suggestion\r\n        - Java bindings to the Arrow Datasets library.\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n\nReview comment:\n       ```suggestion\r\n   Arrow Java provides several building blocks. Data types describe the types of values;\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n\nReview comment:\n       ```suggestion\r\n   Example: create a field named \"document\" of string type:\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n\nReview comment:\n       and ditto below.\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n\nReview comment:\n       IMO let's not put metadata in the example here, let's try to keep the example minimal.\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n\nReview comment:\n       Just \"write data to an arrow file\"?\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n\nReview comment:\n       ```suggestion\r\n               File file = new File(\"random_access_file.arrow\");\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+**Read a IPC File or Random Access Format**\n+\n+Read File or Random Access Format: Mapping directly to memory a dataset file with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.ipc.ArrowFileReader;\n+    import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import java.io.File;\n+    import java.io.FileInputStream;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+\n+    try(RootAllocator rootAllocator = new RootAllocator(Long.MAX_VALUE)){\n+        File file = new File(\"randon_access_to_file.arrow\");\n\nReview comment:\n       ```suggestion\r\n           File file = new File(\"random_access_file.arrow\");\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+**Read a IPC File or Random Access Format**\n+\n+Read File or Random Access Format: Mapping directly to memory a dataset file with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.ipc.ArrowFileReader;\n+    import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import java.io.File;\n+    import java.io.FileInputStream;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+\n+    try(RootAllocator rootAllocator = new RootAllocator(Long.MAX_VALUE)){\n+        File file = new File(\"randon_access_to_file.arrow\");\n+        try (FileInputStream fileInputStream = new FileInputStream(file);\n+             ArrowFileReader reader = new ArrowFileReader(fileInputStream.getChannel(), rootAllocator)\n+        ){\n+            System.out.println(\"Record batches in file: \" + reader.getRecordBlocks().size());\n+            for (ArrowBlock arrowBlock : reader.getRecordBlocks()) {\n+                reader.loadRecordBatch(arrowBlock);\n+                VectorSchemaRoot vectorSchemaRootRecover = reader.getVectorSchemaRoot();\n\nReview comment:\n       ```suggestion\r\n                   VectorSchemaRoot root = reader.getVectorSchemaRoot();\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+**Read a IPC File or Random Access Format**\n+\n+Read File or Random Access Format: Mapping directly to memory a dataset file with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.ipc.ArrowFileReader;\n+    import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import java.io.File;\n+    import java.io.FileInputStream;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+\n+    try(RootAllocator rootAllocator = new RootAllocator(Long.MAX_VALUE)){\n\nReview comment:\n       ```suggestion\r\n       try(BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE)){\r\n   ```\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n\nReview comment:\n       We should have either the table or the prose, but I don't think we need both. I think just the table is enough.\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n\nReview comment:\n       Name this column \"Implementation\", and the rows can either be \"Native\" or \"JNI\".\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n\nReview comment:\n       ```suggestion\r\n        - Memory management implementation based on sun.misc.Unsafe.\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n\nReview comment:\n       (Oxford comma)\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+     - Native implementation\n+   * - arrow-algorithm\n+     - (Experimental) A collection of algorithms for working with ValueVectors.\n+     - Native implementation\n+   * - arrow-avro\n+     - (Experimental) A library for converting Avro data to Arrow data.\n+     - Native implementation\n+   * - arrow-compression\n+     - (Experimental) A library for working with the compression/decompression of Arrow data.\n+     - Native implementation\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+     - Bindings\n+   * - arrow-orc\n+     - (Experimental) A JNI wrapper for the C++ ORC reader implementation.\n+     - Bindings\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+     - Bindings\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+     - Bindings\n+\n+Arrow Java modules offer support to work data (1) in-memory, (2) at rest and (3) on-the-wire.\n\nReview comment:\n       ```suggestion\r\n   Arrow Java modules support working with data (1) in-memory, (2) at rest, and (3) on-the-wire.\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n\nReview comment:\n       ```suggestion\r\n   Create a ValueVector\r\n   ```\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n\nReview comment:\n       and ditto below\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n\nReview comment:\n       Can we also link to Netty?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T18:29:46.793+0000",
                    "updated": "2022-03-30T18:29:46.793+0000",
                    "started": "2022-03-30T18:29:46.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750337",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839006926\n\n\n\n##########\nFile path: docs/source/java/examples/index.rst\n##########\n@@ -0,0 +1,24 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Examples\n+========\n+\n+.. toctree::\n+   :maxdepth: 1\n+\n+   quickstartguide\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/index.rst\n##########\n@@ -18,17 +18,9 @@\n Java Implementation\n ===================\n \n-This is the documentation of the Java API of Apache Arrow. For more details\n-on the Arrow format and other language bindings see the :doc:`parent documentation <../index>`.\n-\n .. toctree::\n    :maxdepth: 2\n \n-   install\n-   memory\n-   vector\n-   vector_schema_root\n-   ipc\n-   algorithm\n-   dataset\n+   getting_started\n+   Examples <examples/index>\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/getting_started.rst\n##########\n@@ -0,0 +1,33 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+User Guide\n+==========\n+\n+.. toctree::\n\nReview comment:\n       Changed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T22:09:37.035+0000",
                    "updated": "2022-03-30T22:09:37.035+0000",
                    "started": "2022-03-30T22:09:37.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750555",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839007111\n\n\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n\nReview comment:\n       Changed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T22:10:01.292+0000",
                    "updated": "2022-03-30T22:10:01.292+0000",
                    "started": "2022-03-30T22:10:01.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750556",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839007325\n\n\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T22:10:45.151+0000",
                    "updated": "2022-03-30T22:10:45.151+0000",
                    "started": "2022-03-30T22:10:45.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750558",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839007685\n\n\n\n##########\nFile path: docs/source/java/examples/quickstartguide.rst\n##########\n@@ -0,0 +1,277 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create A Value Vector\n+*********************\n+\n+Also known as \"arrays\" in the columnar format. Represent a one-dimensional\n+sequence of homogeneous values.\n+\n+**Int Vector**: Create an value vector of int32s like this [1, null, 2]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", rootAllocator)){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+**Varchar Vector**: Create an value vector of string like this [one, two, three]\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", rootAllocator)){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+Create A Field\n+**************\n+\n+Fields are used to denote the particular columns of tabular data.\n+\n+**Field**: Create a column \"document\" of string type with metadata.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata), /*children*/ null);\n+\n+Create A Schema\n+***************\n+\n+Schema holds a sequence of fields together with some optional metadata.\n+\n+**Schema**: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+\n+Create A VectorSchemaRoot\n+***************************\n+\n+VectorSchemaRoot is somewhat analogous to tables and record batches in the other\n+Arrow implementations.\n+\n+**VectorSchemaRoot**: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+\n+            System.out.println(\"VectorSchemaRoot: \\n\" + vectorSchemaRoot.contentToTSVString());\n+        }\n+    }\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Create a IPC File or Random Access Format**\n+\n+Write File or Random Access Format: Write to a file a dataset with metadata\n+that contains integer age and string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\", FieldType.nullable(new ArrowType.Int(32, true)), null);\n+    Field b = new Field(\"Column-B-Name\", new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadataField), null);\n+    Map<String, String> metadataSchema = new HashMap<>();\n+    metadataSchema.put(\"K1-Schema\", \"K1S1\");\n+    metadataSchema.put(\"K2-Schema\", \"K2S2\");\n+    Schema schema = new Schema(asList(a, b), metadataSchema);\n+    System.out.println(\"Field A: \" + a);\n+    System.out.println(\"Field B: \" + b + \", Metadata: \" + b.getMetadata());\n+    System.out.println(\"Schema: \" + schema);\n+    try(BufferAllocator rootAllocator = new RootAllocator();\n+        VectorSchemaRoot vectorSchemaRoot = VectorSchemaRoot.create(schema, rootAllocator)){\n+        vectorSchemaRoot.setRowCount(3);\n+        try(IntVector intVectorA = (IntVector) vectorSchemaRoot.getVector(\"Column-A-Age\");\n+            VarCharVector varCharVectorB = (VarCharVector) vectorSchemaRoot.getVector(\"Column-B-Name\")) {\n+            intVectorA.allocateNew(3);\n+            intVectorA.set(0, 10);\n+            intVectorA.set(1, 20);\n+            intVectorA.set(2, 30);\n+            varCharVectorB.allocateNew(3);\n+            varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+            varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+            // Arrow Java At Rest\n+            File file = new File(\"randon_access_to_file.arrow\");\n+            try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n+                 ArrowFileWriter writer = new ArrowFileWriter(vectorSchemaRoot, null, fileOutputStream.getChannel())\n+            ) {\n+                writer.start();\n+                writer.writeBatch();\n+                writer.end();\n+                System.out.println(\"Record batches written: \" + writer.getRecordBlocks().size() + \". Number of rows written: \" + vectorSchemaRoot.getRowCount());\n\nReview comment:\n       Changed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T22:10:59.630+0000",
                    "updated": "2022-03-30T22:10:59.630+0000",
                    "started": "2022-03-30T22:10:59.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750560",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839007858\n\n\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n\nReview comment:\n       Changed\n\n##########\nFile path: docs/source/java/overview.rst\n##########\n@@ -0,0 +1,218 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+===================\n+High-Level Overview\n+===================\n+\n+.. contents::\n+\n+Arrow Java modules is created using specification such as Columnar Format, Off-Heap\n+Memory, Serialization and Inter Process Communication (IPC). Some of the Java modules\n+was created with their own native implementations and others through bindings.\n+\n+Arrow Java provides several building blocks; ``data types`` describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+\n+Arrow Java Modules\n+------------------\n+\n+Arrow Java are divided in these modules to offer in-memory columnar data structures:\n+\n+.. list-table:: Arrow Java Modules\n+   :widths: 25 50 25\n+   :header-rows: 1\n+\n+   * - Module\n+     - Description\n+     - Root Decision\n+   * - arrow-format\n+     - Generated Java files from the IPC Flatbuffer definitions.\n+     - Native implementation\n+   * - arrow-memory-core\n+     - Core off-heap memory management libraries for Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-memory-unsafe\n+     - Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+     - Native implementation\n+   * - arrow-memory-netty\n+     - Netty allocator and utils for allocating memory in Arrow.\n+     - Native implementation\n+   * - arrow-vector\n+     - An off-heap reference implementation for Arrow columnar data format.\n+     - Native implementation\n+   * - arrow-tools\n+     - Java applications for working with Arrow ValueVectors.\n+     - Native implementation\n+   * - arrow-jdbc\n+     - (Experimental) A library for converting JDBC data to Arrow data.\n+     - Native implementation\n+   * - arrow-plasma\n+     - (Experimental) Java client for the Plasma object store.\n+     - Native implementation\n+   * - flight-core\n+     - (Experimental) An RPC mechanism for transferring ValueVectors.\n+     - Native implementation\n+   * - flight-grpc\n+     - (Experimental) Contains utility class to expose Flight gRPC service and client.\n+     - Native implementation\n+   * - flight-sql\n+     - (Experimental) Contains utility classes to expose Flight SQL semantics for clients and servers over Arrow Flight.\n+     - Native implementation\n+   * - flight-integration-tests\n+     - Integration tests for Flight RPC.\n+     - Native implementation\n+   * - arrow-performance\n+     - JMH Performance benchmarks for other Arrow libraries.\n+     - Native implementation\n+   * - arrow-algorithm\n+     - (Experimental) A collection of algorithms for working with ValueVectors.\n+     - Native implementation\n+   * - arrow-avro\n+     - (Experimental) A library for converting Avro data to Arrow data.\n+     - Native implementation\n+   * - arrow-compression\n+     - (Experimental) A library for working with the compression/decompression of Arrow data.\n+     - Native implementation\n+   * - arrow-c-data\n+     - Java implementation of C Data Interface\n+     - Bindings\n+   * - arrow-orc\n+     - (Experimental) A JNI wrapper for the C++ ORC reader implementation.\n+     - Bindings\n+   * - arrow-gandiva\n+     - Java wrappers around the native Gandiva SQL expression compiler.\n+     - Bindings\n+   * - arrow-dataset\n+     - Java implementation of Arrow Dataset API/Framework\n+     - Bindings\n+\n+Arrow Java modules offer support to work data (1) in-memory, (2) at rest and (3) on-the-wire.\n+\n+For more detail about how to install this modules please review\n+:doc:`Installing Java Modules <install>`.\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T22:11:48.417+0000",
                    "updated": "2022-03-30T22:11:48.417+0000",
                    "started": "2022-03-30T22:11:48.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750562",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/750973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839557302\n\n\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n\nReview comment:\n       ```suggestion\r\n   **Schemas** hold a sequence of fields together with some optional metadata.\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n\nReview comment:\n       We don't need to put any of these terms in a code font\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n\nReview comment:\n       ```suggestion\r\n   Example: Create a dataset of names (strings) and ages (32-bit signed integers).\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, /*metadata*/ null),\n\nReview comment:\n       Can we use `FieldType.nullable` here?\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, /*metadata*/ null),\n+            /*children*/null\n+    );\n+    Schema schema = new Schema(asList(a, b), /*metadata*/ null);\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\n+        IntVector intVectorA = (IntVector) root.getVector(\"age\");\n+        VarCharVector varCharVectorB = (VarCharVector) root.getVector(\"name\");\n+    ){\n+        root.setRowCount(3);\n+        intVectorA.allocateNew(3);\n+        intVectorA.set(0, 10);\n+        intVectorA.set(1, 20);\n+        intVectorA.set(2, 30);\n+        varCharVectorB.allocateNew(3);\n+        varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+        System.out.println(\"VectorSchemaRoot created: \\n\" + root.contentToTSVString());\n+    }\n+\n+.. code-block:: shell\n+\n+    VectorSchemaRoot created:\n+    age\t    name\n+    10\t    Dave\n+    20\t    Peter\n+    30\t    Mary\n+\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Write data to an arrow file**\n+\n+Example: Write the dataset from the previous example to an Arrow random-access file.\n+\n+.. code-block:: Java\n+\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n\nReview comment:\n       IMO, we can remove the metadata here to keep this example more manageable.\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, /*metadata*/ null),\n+            /*children*/null\n+    );\n+    Schema schema = new Schema(asList(a, b), /*metadata*/ null);\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\n+        IntVector intVectorA = (IntVector) root.getVector(\"age\");\n+        VarCharVector varCharVectorB = (VarCharVector) root.getVector(\"name\");\n+    ){\n+        root.setRowCount(3);\n+        intVectorA.allocateNew(3);\n+        intVectorA.set(0, 10);\n+        intVectorA.set(1, 20);\n+        intVectorA.set(2, 30);\n+        varCharVectorB.allocateNew(3);\n+        varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+        System.out.println(\"VectorSchemaRoot created: \\n\" + root.contentToTSVString());\n+    }\n+\n+.. code-block:: shell\n+\n+    VectorSchemaRoot created:\n+    age\t    name\n+    10\t    Dave\n+    20\t    Peter\n+    30\t    Mary\n+\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Write data to an arrow file**\n+\n+Example: Write the dataset from the previous example to an Arrow random-access file.\n+\n+.. code-block:: Java\n+\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\",\n\nReview comment:\n       ```suggestion\r\n       Field age = new Field(\"age\",\r\n   ```\n\n##########\nFile path: docs/source/java/getting_started.rst\n##########\n@@ -0,0 +1,33 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+User Guide\n+==========\n+\n+.. toctree::\n\nReview comment:\n       This still doesn't seem right - keep the toctree in index.rst, and move the contents of \"quickstartguide.rst\" into this file.\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n\nReview comment:\n       ```suggestion\r\n   Create a ValueVector\r\n   ********************\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n\nReview comment:\n       ```suggestion\r\n   an int32 column \"A\" and a UTF8-encoded string column \"B\"\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n\nReview comment:\n       ```suggestion\r\n       Field age = new Field(\"age\",\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n\nReview comment:\n       ```suggestion\r\n   A **VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, /*metadata*/ null),\n+            /*children*/null\n+    );\n+    Schema schema = new Schema(asList(a, b), /*metadata*/ null);\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\n+        IntVector intVectorA = (IntVector) root.getVector(\"age\");\n+        VarCharVector varCharVectorB = (VarCharVector) root.getVector(\"name\");\n\nReview comment:\n       ```suggestion\r\n           IntVector ageVector = (IntVector) root.getVector(\"age\");\r\n           VarCharVector nameVector = (VarCharVector) root.getVector(\"name\");\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n\nReview comment:\n       ```suggestion\r\n       Field name = new Field(\"name\",\r\n   ```\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n\nReview comment:\n       Does Field require you to pass children?\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, /*metadata*/ null),\n+            /*children*/null\n+    );\n+    Schema schema = new Schema(asList(a, b), /*metadata*/ null);\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\n+        IntVector intVectorA = (IntVector) root.getVector(\"age\");\n+        VarCharVector varCharVectorB = (VarCharVector) root.getVector(\"name\");\n+    ){\n+        root.setRowCount(3);\n+        intVectorA.allocateNew(3);\n+        intVectorA.set(0, 10);\n+        intVectorA.set(1, 20);\n+        intVectorA.set(2, 30);\n+        varCharVectorB.allocateNew(3);\n+        varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+        System.out.println(\"VectorSchemaRoot created: \\n\" + root.contentToTSVString());\n+    }\n+\n+.. code-block:: shell\n+\n+    VectorSchemaRoot created:\n+    age\t    name\n+    10\t    Dave\n+    20\t    Peter\n+    30\t    Mary\n+\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Write data to an arrow file**\n+\n+Example: Write the dataset from the previous example to an Arrow random-access file.\n+\n+.. code-block:: Java\n+\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.io.File;\n+    import java.io.FileOutputStream;\n+    import java.io.IOException;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadataField = new HashMap<>();\n+    metadataField.put(\"K1-Field\", \"K1F1\");\n+    metadataField.put(\"K2-Field\", \"K2F2\");\n+    Field a = new Field(\"Column-A-Age\",\n\nReview comment:\n       and similar below\n\n##########\nFile path: docs/source/java/quickstartguide.rst\n##########\n@@ -0,0 +1,325 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+=================\n+Quick Start Guide\n+=================\n+\n+.. contents::\n+\n+Arrow Java provides several building blocks. Data types describe the types of values;\n+``ValueVectors`` are sequences of typed values; ``fields`` describe the types of columns in\n+tabular data; ``schemas`` describe a sequence of columns in tabular data, and\n+``VectorSchemaRoot`` represents tabular data. Arrow also provides ``readers`` and\n+``writers`` for loading data from and persisting data to storage.\n+\n+Create a ValueVector\n+*********************\n+\n+**ValueVectors** represent a sequence of values of the same type.\n+They are also known as \"arrays\" in the columnar format.\n+\n+Example: create a vector of 32-bit integers representing ``[1, null, 2]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        IntVector intVector = new IntVector(\"fixed-size-primitive-layout\", allocator);\n+    ){\n+        intVector.allocateNew(3);\n+        intVector.set(0,1);\n+        intVector.setNull(1);\n+        intVector.set(2,2);\n+        intVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + intVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [1, null, 2]\n+\n+\n+Example: create a vector of UTF-8 encoded strings representing ``[\"one\", \"two\", \"three\"]``:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.VarCharVector;\n+\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VarCharVector varCharVector = new VarCharVector(\"variable-size-primitive-layout\", allocator);\n+    ){\n+        varCharVector.allocateNew(3);\n+        varCharVector.set(0, \"one\".getBytes());\n+        varCharVector.set(1, \"two\".getBytes());\n+        varCharVector.set(2, \"three\".getBytes());\n+        varCharVector.setValueCount(3);\n+        System.out.println(\"Vector created in memory: \" + varCharVector);\n+    }\n+\n+.. code-block:: shell\n+\n+    Vector created in memory: [one, two, three]\n+\n+Create a Field\n+**************\n+\n+**Fields** are used to denote the particular columns of tabular data.\n+They consist of a name, a data type, a flag indicating whether the column can have null values,\n+and optional key-value metadata.\n+\n+Example: create a field named \"document\" of string type:\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"A\", \"Id card\");\n+    metadata.put(\"B\", \"Passport\");\n+    metadata.put(\"C\", \"Visa\");\n+    Field document = new Field(\"document\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, metadata),\n+            /*children*/ null);\n+    System.out.println(\"Field created: \" + document + \", Metadata: \" + document.getMetadata());\n+\n+.. code-block:: shell\n+\n+    Field created: document: Utf8, Metadata: {A=Id card, B=Passport, C=Visa}\n+\n+Create a Schema\n+***************\n+\n+**Schema** holds a sequence of fields together with some optional metadata.\n+\n+Example: Create a schema describing datasets with two columns:\n+a int32 column \"A\" and a utf8-encoded string column \"B\"\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Map<String, String> metadata = new HashMap<>();\n+    metadata.put(\"K1\", \"V1\");\n+    metadata.put(\"K2\", \"V2\");\n+    Field a = new Field(\"A\", FieldType.nullable(new ArrowType.Int(32, true)), /*children*/ null);\n+    Field b = new Field(\"B\", FieldType.nullable(new ArrowType.Utf8()), /*children*/ null);\n+    Schema schema = new Schema(asList(a, b), metadata);\n+    System.out.println(\"Schema created: \" + schema);\n+\n+.. code-block:: shell\n+\n+    Schema created: Schema<A: Int(32, true), B: Utf8>(metadata: {K1=V1, K2=V2})\n+\n+Create a VectorSchemaRoot\n+*************************\n+\n+**VectorSchemaRoot** combines ValueVectors with a Schema to represent tabular data.\n+\n+Example: Create a dataset with metadata that contains integer age and\n+string names of data.\n+\n+.. code-block:: Java\n+\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VarCharVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+    import org.apache.arrow.vector.types.pojo.ArrowType;\n+    import org.apache.arrow.vector.types.pojo.Field;\n+    import org.apache.arrow.vector.types.pojo.FieldType;\n+    import org.apache.arrow.vector.types.pojo.Schema;\n+    import java.nio.charset.StandardCharsets;\n+    import java.util.HashMap;\n+    import java.util.Map;\n+    import static java.util.Arrays.asList;\n+\n+    Field a = new Field(\"age\",\n+            FieldType.nullable(new ArrowType.Int(32, true)),\n+            /*children*/null\n+    );\n+    Field b = new Field(\"name\",\n+            new FieldType(true, new ArrowType.Utf8(), /*dictionary*/ null, /*metadata*/ null),\n+            /*children*/null\n+    );\n+    Schema schema = new Schema(asList(a, b), /*metadata*/ null);\n+    try(\n+        BufferAllocator allocator = new RootAllocator();\n+        VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\n+        IntVector intVectorA = (IntVector) root.getVector(\"age\");\n+        VarCharVector varCharVectorB = (VarCharVector) root.getVector(\"name\");\n+    ){\n+        root.setRowCount(3);\n+        intVectorA.allocateNew(3);\n+        intVectorA.set(0, 10);\n+        intVectorA.set(1, 20);\n+        intVectorA.set(2, 30);\n+        varCharVectorB.allocateNew(3);\n+        varCharVectorB.set(0, \"Dave\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(1, \"Peter\".getBytes(StandardCharsets.UTF_8));\n+        varCharVectorB.set(2, \"Mary\".getBytes(StandardCharsets.UTF_8));\n+        System.out.println(\"VectorSchemaRoot created: \\n\" + root.contentToTSVString());\n+    }\n+\n+.. code-block:: shell\n+\n+    VectorSchemaRoot created:\n+    age\t    name\n+    10\t    Dave\n+    20\t    Peter\n+    30\t    Mary\n+\n+\n+Interprocess Communication (IPC)\n+********************************\n+\n+Arrow data can be written to and read from disk, and both of these can be done in\n+a streaming and/or random-access fashion depending on application requirements.\n+\n+**Write data to an arrow file**\n+\n+Example: Write the dataset from the previous example to an Arrow random-access file.\n+\n+.. code-block:: Java\n+\n+\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T12:48:16.734+0000",
                    "updated": "2022-03-31T12:48:16.734+0000",
                    "started": "2022-03-31T12:48:16.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750973",
                    "issueId": "13434592"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/worklog/751010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12739:\nURL: https://github.com/apache/arrow/pull/12739#discussion_r839663699\n\n\n\n##########\nFile path: docs/source/java/getting_started.rst\n##########\n@@ -0,0 +1,33 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: java\n+.. highlight:: java\n+\n+User Guide\n+==========\n+\n+.. toctree::\n\nReview comment:\n       Changed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T14:18:00.311+0000",
                    "updated": "2022-03-31T14:18:00.311+0000",
                    "started": "2022-03-31T14:18:00.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751010",
                    "issueId": "13434592"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@17397c1e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e48f65e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e27854[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7e6194f0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fa9ed37[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4d19dc8e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59ad3da1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2b99e470[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bb96461[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@48473c34[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@783740a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1ce991ba[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 05 12:43:48 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-05T12:43:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15972/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-03-18T15:23:02.000+0000",
        "updated": "2022-04-05T22:31:45.000+0000",
        "timeoriginalestimate": null,
        "description": "Getting Started Section (See for python\u00a0[https://arrow.apache.org/docs/python/getstarted.html]\u00a0for inspiration )\r\n\r\nConsider to add a landing/introductory page for people viewing arrow for the first time.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java][Doc] Getting Started Section - Landing Page",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434592/comment/17517419",
                    "id": "17517419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12739\n[https://github.com/apache/arrow/pull/12739]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-05T12:43:48.900+0000",
                    "updated": "2022-04-05T12:43:48.900+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z10mb4:",
        "customfield_12314139": null
    }
}