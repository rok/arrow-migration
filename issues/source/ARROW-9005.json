{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13308839",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839",
    "key": "ARROW-9005",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9005/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 32,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/439830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp opened a new pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324\n\n\n   The only missing piece is updating sqlparser to parse null ordering expression, which is going to be a rather big change due to major refactoring from upstream sqlparer crate. So I am going to leave that to a follow up PR to make this one easier to review.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T01:11:39.273+0000",
                    "updated": "2020-06-02T01:11:39.273+0000",
                    "started": "2020-06-02T01:11:39.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439830",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/439832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-637209800\n\n\n   @nevi-me do you prefer to move concat kernel logic into append_data in this set of change or as a follow up after https://github.com/apache/arrow/pull/7306 get merged?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T01:14:24.247+0000",
                    "updated": "2020-06-02T01:14:24.247+0000",
                    "started": "2020-06-02T01:14:24.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439832",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/439833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-637210669\n\n\n   https://issues.apache.org/jira/browse/ARROW-9005\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T01:16:58.093+0000",
                    "updated": "2020-06-02T01:16:58.093+0000",
                    "started": "2020-06-02T01:16:58.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439833",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/439839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp edited a comment on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-637209800\n\n\n   @nevi-me do you prefer to move concat kernel logic into append_data in this set of change or as a follow up after https://github.com/apache/arrow/pull/7306 gets merged?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T01:31:53.914+0000",
                    "updated": "2020-06-02T01:31:53.914+0000",
                    "started": "2020-06-02T01:31:53.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439839",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/439980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-637378472\n\n\n   > @nevi-me do you prefer to move concat kernel logic into append_data in this set of change or as a follow up after #7306 gets merged?\r\n   \r\n   I've opened https://issues.apache.org/jira/browse/ARROW-9007, so we can address `append_data` as part of that\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T08:26:36.694+0000",
                    "updated": "2020-06-02T08:26:36.694+0000",
                    "started": "2020-06-02T08:26:36.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439980",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/440788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-638230644\n\n\n   @houqp There is a 0.2 branch in sqlparser-rs where you can apply your changes and I can make a new 0.2.x release\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T14:21:27.279+0000",
                    "updated": "2020-06-03T14:21:27.279+0000",
                    "started": "2020-06-03T14:21:27.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440788",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/440790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-638232933\n\n\n   This looks great @houqp. I will review in detail in the next day or two.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T14:25:01.941+0000",
                    "updated": "2020-06-03T14:25:01.941+0000",
                    "started": "2020-06-03T14:25:01.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440790",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/440881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r434704814\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       Would this function handle array slices correctly? May you please test this, either in a new test case or by slicing the second string array in `test_concat_string_arrays`?\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n\nReview comment:\n       `... with different data types`\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n\nReview comment:\n       do you mind changing these to `&[ArrayDataRef]`? There was a PR a few weeks ago to change borrowed vecs to slices, I think it's one of the clippy lints\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -122,7 +122,7 @@ impl Default for SortOptions {\n     fn default() -> Self {\n         Self {\n             descending: false,\n-            nulls_first: false,\n+            nulls_first: true,\n\nReview comment:\n       Why the change here?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T16:43:56.464+0000",
                    "updated": "2020-06-03T16:43:56.464+0000",
                    "started": "2020-06-03T16:43:56.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440881",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435023936\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n\nReview comment:\n       good catch. I have updated it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T06:39:37.011+0000",
                    "updated": "2020-06-04T06:39:37.011+0000",
                    "started": "2020-06-04T06:39:37.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441130",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435024541\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -122,7 +122,7 @@ impl Default for SortOptions {\n     fn default() -> Self {\n         Self {\n             descending: false,\n-            nulls_first: false,\n+            nulls_first: true,\n\nReview comment:\n       this is to match spark's default behavior, i have added a comment.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T06:41:01.367+0000",
                    "updated": "2020-06-04T06:41:01.367+0000",
                    "started": "2020-06-04T06:41:01.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441131",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435027946\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       By handling array slices did you mean StringArray created from str array slice?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T06:49:05.197+0000",
                    "updated": "2020-06-04T06:49:05.197+0000",
                    "started": "2020-06-04T06:49:05.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441134",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#issuecomment-638641720\n\n\n   @andygrove since you mentioned 0.2 branch, do you expect datafusion to migrate to latest sqlparser-rs in the near future or are we going to stay with 0.2 for a long time? I already started a local branch to for the migration, but if we do want to stay on 0.2 release, then I should probably stop working on that ;)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T06:52:39.881+0000",
                    "updated": "2020-06-04T06:52:39.881+0000",
                    "started": "2020-06-04T06:52:39.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441136",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435069031\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -122,7 +122,7 @@ impl Default for SortOptions {\n     fn default() -> Self {\n         Self {\n             descending: false,\n-            nulls_first: false,\n+            nulls_first: true,\n\nReview comment:\n       Okay, that's fine, we could set the default in DataFusion instead, but the way you've done it is fine. I would have taken that as a lazy approach to avoid changing all the test cases :)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T08:08:09.034+0000",
                    "updated": "2020-06-04T08:08:09.034+0000",
                    "started": "2020-06-04T08:08:09.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441151",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435071238\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       Sorry, I meant slicing the second string array, something like below, which slices out \"1\" and \"6\" from the second array:\r\n   \r\n   ```rust\r\n       fn test_concat_string_arrays() -> Result<()> {\r\n           let arr = concat(&vec![\r\n               Arc::new(\r\n                   StringArray::try_from(vec![Some(\"hello\"), Some(\"world\")])\r\n                       .expect(\"Unable to create string array\"),\r\n               ) as ArrayRef,\r\n               StringArray::from(vec![\"1\", \"2\", \"3\", \"4\", \"6\"]).slice(1, 3),\r\n               Arc::new(\r\n                   StringArray::try_from(vec![Some(\"foo\"), Some(\"bar\"), None, Some(\"baz\")])\r\n                       .expect(\"Unable to create string array\"),\r\n               ) as ArrayRef,\r\n           ])?;\r\n   \r\n           let expected_output = Arc::new(\r\n               StringArray::try_from(vec![\r\n                   Some(\"hello\"),\r\n                   Some(\"world\"),\r\n                   // Some(\"1\"),\r\n                   Some(\"2\"),\r\n                   Some(\"3\"),\r\n                   Some(\"4\"),\r\n                   // Some(\"6\"),\r\n                   Some(\"foo\"),\r\n                   Some(\"bar\"),\r\n                   None,\r\n                   Some(\"baz\"),\r\n               ])\r\n               .expect(\"Unable to create string array\"),\r\n           ) as ArrayRef;\r\n   \r\n           assert!(\r\n               arr.equals(&(*expected_output)),\r\n               \"expect {:#?} to be: {:#?}\",\r\n               arr,\r\n               &expected_output\r\n           );\r\n   \r\n           Ok(())\r\n       }\r\n   ```\r\n   \r\n   The same might need to be verified with numeric arrays because we write the whole data in `write_slice`, so if there's an offset, we might get unexpected outputs.\r\n   \r\n   I'll check your branch out locally and check this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T08:11:48.241+0000",
                    "updated": "2020-06-04T08:11:48.241+0000",
                    "started": "2020-06-04T08:11:48.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441153",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435071238\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       Sorry, I meant slicing the second string array, something like below, which slices out \"1\" and \"6\" from the second array:\r\n   \r\n   ```rust\r\n       fn test_concat_string_arrays() -> Result<()> {\r\n           let arr = concat(&vec![\r\n               Arc::new(\r\n                   StringArray::try_from(vec![Some(\"hello\"), Some(\"world\")])\r\n                       .expect(\"Unable to create string array\"),\r\n               ) as ArrayRef,\r\n   \r\n               // adding a comment for better visibility, slicing the array here\r\n               StringArray::from(vec![\"1\", \"2\", \"3\", \"4\", \"6\"]).slice(1, 3),\r\n               Arc::new(\r\n                   StringArray::try_from(vec![Some(\"foo\"), Some(\"bar\"), None, Some(\"baz\")])\r\n                       .expect(\"Unable to create string array\"),\r\n               ) as ArrayRef,\r\n           ])?;\r\n   \r\n           let expected_output = Arc::new(\r\n               StringArray::try_from(vec![\r\n                   Some(\"hello\"),\r\n                   Some(\"world\"),\r\n                   // Some(\"1\"), // removed by offset of 1\r\n                   Some(\"2\"),\r\n                   Some(\"3\"),\r\n                   Some(\"4\"),\r\n                   // Some(\"6\"), // truncated by length of 3\r\n                   Some(\"foo\"),\r\n                   Some(\"bar\"),\r\n                   None,\r\n                   Some(\"baz\"),\r\n               ])\r\n               .expect(\"Unable to create string array\"),\r\n           ) as ArrayRef;\r\n   \r\n           assert!(\r\n               arr.equals(&(*expected_output)),\r\n               \"expect {:#?} to be: {:#?}\",\r\n               arr,\r\n               &expected_output\r\n           );\r\n   \r\n           Ok(())\r\n       }\r\n   ```\r\n   \r\n   The same might need to be verified with numeric arrays because we write the whole data in `write_slice`, so if there's an offset, we might get unexpected outputs.\r\n   \r\n   I'll check your branch out locally and check this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T08:13:08.995+0000",
                    "updated": "2020-06-04T08:13:08.995+0000",
                    "started": "2020-06-04T08:13:08.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441154",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435080612\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       I've checked, we get this failure below:\r\n   \r\n   The same test failure occurs if you slice a numeric array.\r\n   \r\n   ```\r\n   thread 'compute::kernels::concat::tests::test_concat_string_arrays' panicked at 'expect StringArray\r\n   [\r\n     \"hello\",\r\n     \"world\",\r\n     \"1\",\r\n     \"2\",\r\n     \"3\",\r\n     \"46f\",\r\n     \"oob\",\r\n     null,\r\n     \"arb\",\r\n   ] to be: StringArray\r\n   [\r\n     \"hello\",\r\n     \"world\",\r\n     \"2\",\r\n     \"3\",\r\n     \"4\",\r\n     \"foo\",\r\n     \"bar\",\r\n     null,\r\n     \"baz\",\r\n   ]', arrow/src/compute/kernels/concat.rs:296:9\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T08:27:24.831+0000",
                    "updated": "2020-06-04T08:27:24.831+0000",
                    "started": "2020-06-04T08:27:24.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441163",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435384974\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       Ha, I see, good catch. I will work on the offset fix.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T16:20:15.452+0000",
                    "updated": "2020-06-04T16:20:15.452+0000",
                    "started": "2020-06-04T16:20:15.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441375",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435388355\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       I'm nearly done with `append_data()`, which handles offsets. Is it worthwhile to wait for it? I can put up a draft PR tonight\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T16:25:27.112+0000",
                    "updated": "2020-06-04T16:25:27.112+0000",
                    "started": "2020-06-04T16:25:27.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441379",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435423018\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       @houqp here's a WIP of the changes: https://github.com/apache/arrow/compare/master...nevi-me:ARROW-9007\r\n   \r\n   I'm still testing the string and nested array types, but the primitive types behave fine with offsets\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T17:22:22.886+0000",
                    "updated": "2020-06-04T17:22:22.886+0000",
                    "started": "2020-06-04T17:22:22.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441430",
                    "issueId": "13308839"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/worklog/441438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7324:\nURL: https://github.com/apache/arrow/pull/7324#discussion_r435430674\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/concat.rs\n##########\n@@ -0,0 +1,395 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines concat kernel for `ArrayRef`\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::sync::Arc;\n+//! use arrow::array::{ArrayRef, StringArray};\n+//! use arrow::compute::concat;\n+//!\n+//! let arr = concat(&vec![\n+//!     Arc::new(StringArray::from(vec![\"hello\", \"world\"])) as ArrayRef,\n+//!     Arc::new(StringArray::from(vec![\"!\"])) as ArrayRef,\n+//! ]).unwrap();\n+//! assert_eq!(arr.len(), 3);\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Concatenate multiple `ArrayRef` with the same type.\n+///\n+/// Returns a new ArrayRef.\n+pub fn concat(array_list: &Vec<ArrayRef>) -> Result<ArrayRef> {\n+    let mut data_type: Option<DataType> = None;\n+    let array_data_list = &array_list\n+        .iter()\n+        .map(|a| {\n+            let array_data = a.data_ref().clone();\n+            let curr_data_type = array_data.data_type().clone();\n+            match &data_type {\n+                Some(t) => {\n+                    if t != &curr_data_type {\n+                        return Err(ArrowError::ComputeError(\n+                            \"Cannot concat arrays with data type\".to_string(),\n+                        ));\n+                    }\n+                }\n+                None => {\n+                    data_type = Some(curr_data_type);\n+                }\n+            }\n+            Ok(array_data)\n+        })\n+        .collect::<Result<Vec<ArrayDataRef>>>()?;\n+\n+    let data_type = match data_type {\n+        None => {\n+            return Err(ArrowError::ComputeError(\n+                \"Cannot concat 0 array\".to_string(),\n+            ));\n+        }\n+        Some(t) => t,\n+    };\n+    match data_type {\n+        DataType::Utf8 => concat_raw_string(array_data_list),\n+        DataType::Boolean => concat_primitive::<BooleanType>(array_data_list),\n+        DataType::Int8 => concat_raw_primitive::<Int8Type>(array_data_list),\n+        DataType::Int16 => concat_raw_primitive::<Int16Type>(array_data_list),\n+        DataType::Int32 => concat_raw_primitive::<Int32Type>(array_data_list),\n+        DataType::Int64 => concat_raw_primitive::<Int64Type>(array_data_list),\n+        DataType::UInt8 => concat_raw_primitive::<UInt8Type>(array_data_list),\n+        DataType::UInt16 => concat_raw_primitive::<UInt16Type>(array_data_list),\n+        DataType::UInt32 => concat_raw_primitive::<UInt32Type>(array_data_list),\n+        DataType::UInt64 => concat_raw_primitive::<UInt64Type>(array_data_list),\n+        DataType::Float32 => concat_raw_primitive::<Float32Type>(array_data_list),\n+        DataType::Float64 => concat_raw_primitive::<Float64Type>(array_data_list),\n+        DataType::Date32(_) => concat_raw_primitive::<Date32Type>(array_data_list),\n+        DataType::Date64(_) => concat_raw_primitive::<Date64Type>(array_data_list),\n+        DataType::Time32(Second) => {\n+            concat_raw_primitive::<Time32SecondType>(array_data_list)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            concat_raw_primitive::<Time32MillisecondType>(array_data_list)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            concat_raw_primitive::<Time64MicrosecondType>(array_data_list)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            concat_raw_primitive::<Time64NanosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            concat_raw_primitive::<TimestampSecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            concat_raw_primitive::<TimestampMillisecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            concat_raw_primitive::<TimestampMicrosecondType>(array_data_list)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            concat_raw_primitive::<TimestampNanosecondType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            concat_raw_primitive::<IntervalYearMonthType>(array_data_list)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            concat_raw_primitive::<IntervalDayTimeType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            concat_raw_primitive::<DurationSecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            concat_raw_primitive::<DurationMillisecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            concat_raw_primitive::<DurationMicrosecondType>(array_data_list)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            concat_raw_primitive::<DurationNanosecondType>(array_data_list)\n+        }\n+        t => unimplemented!(\"Concat not supported for data type {:?}\", t),\n+    }\n+}\n+\n+fn concat_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let rows_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut builder = PrimitiveBuilder::<T>::new(rows_count);\n+\n+    for array_data in array_data_list {\n+        let a = PrimitiveArray::<T>::from(array_data.clone());\n+        for i in 0..a.len() {\n+            if a.is_valid(i) {\n+                builder.append_value(a.value(i))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+// for better performance, we manually concat primitive value buffers instead of using\n+// PrimitiveBuilder\n+fn concat_raw_primitive<T>(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let value_count = array_data_list.iter().map(|a| a.len()).sum::<usize>();\n+    let mut null_count = 0;\n+    let mut values_builder = BufferBuilder::<T>::new(value_count);\n+    let mut null_bit_builder = BooleanBufferBuilder::new(value_count);\n+\n+    for array_data in array_data_list {\n+        null_count += array_data.null_count();\n+        let value_buffer = &array_data.buffers()[0];\n+        values_builder.write_bytes(value_buffer.data(), value_buffer.len())?;\n+        for i in 0..array_data.len() {\n+            null_bit_builder.append(array_data.is_valid(i))?;\n+        }\n+    }\n+\n+    Ok(Arc::new(PrimitiveArray::<T>::from(\n+        ArrayData::builder(T::get_data_type())\n+            .len(value_count)\n+            .add_buffer(values_builder.finish())\n+            .null_count(null_count)\n+            .null_bit_buffer(null_bit_builder.finish())\n+            .build(),\n+    )))\n+}\n+\n+// for better performance, we manually concat string value buffers instead of using StringBuilder\n+fn concat_raw_string(array_data_list: &Vec<ArrayDataRef>) -> Result<ArrayRef> {\n\nReview comment:\n       Yeah, let's wait for that. I was going to refactor this code by implementing append_data. Good to avoid duplicate efforts :D\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T17:35:04.272+0000",
                    "updated": "2020-06-04T17:35:04.272+0000",
                    "started": "2020-06-04T17:35:04.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441438",
                    "issueId": "13308839"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a595950[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a312963[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@95446ae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6acd0cd6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a33e133[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2bedf8df[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27aa3a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20ead54[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47f1ee5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@39edd7e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e55c14d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4946afde[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 15 16:18:27 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-15T16:18:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9005/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-02T01:07:12.000+0000",
        "updated": "2020-06-15T16:18:30.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Support sort expression",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308839/comment/17135993",
                    "id": "17135993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 7324\n[https://github.com/apache/arrow/pull/7324]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-06-15T16:18:27.182+0000",
                    "updated": "2020-06-15T16:18:27.182+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fels:",
        "customfield_12314139": null
    }
}