{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13279729",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729",
    "key": "ARROW-7587",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12582995",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12582995",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13291372",
                    "key": "ARROW-8090",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291372",
                    "fields": {
                        "summary": "[C++][Compute] Implement stateful TopK operator node",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7587/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530\n \n \n   Perform indices partition of an array around n-th smallest element.\r\n   Output indices[0 ~ n) holds values no greater than n-th element, and\r\n   indices[n+1 ~ end) holds values no less than n-th element. Elements\r\n   in each partition are not sorted. Nulls will be partitioned to the\r\n   end of the output. Output is not stable.\r\n   \r\n   This is useful for picking top-n elements from an array. It leverages\r\n   O(n) std::nth_element which is orders faster than std::sort. See Jira\r\n   link for benchmark results of nth_element, sort, and partial_sort:\r\n   https://issues.apache.org/jira/browse/ARROW-7587\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T06:31:36.058+0000",
                    "updated": "2020-03-04T06:31:36.058+0000",
                    "started": "2020-03-04T06:31:36.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397284",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#issuecomment-594351314\n \n \n   https://issues.apache.org/jira/browse/ARROW-7587\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T06:31:58.959+0000",
                    "updated": "2020-03-04T06:31:58.959+0000",
                    "started": "2020-03-04T06:31:58.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397285",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on issue #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#issuecomment-594355620\n \n \n   Some code duplicated with sort_to_indices.cc, as show in appveyor failure: https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/31228327/job/72i22arf2cu8q8s4#L1031\r\n   Shall I extract common code to a new file?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T06:48:13.370+0000",
                    "updated": "2020-03-04T06:48:13.370+0000",
                    "started": "2020-03-04T06:48:13.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397296",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#issuecomment-594416373\n \n \n   You can indeed create a file  `sort_internal.h` or something.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:33:55.207+0000",
                    "updated": "2020-03-04T09:33:55.207+0000",
                    "started": "2020-03-04T09:33:55.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397406",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387551409\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.h\n ##########\n @@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+/// \\brief Returns indices that partition an array around n-th\n+/// sorted element.\n+///\n+/// Find index of n-th(0 based) smallest value and perform indirect\n+/// partition of an array around that element. Output indices[0 ~ n-1]\n+/// holds values no greater than n-th element, and indices[n+1 ~ end]\n+/// holds values no less than n-th element. Elements in each partition\n+/// is not sorted. Nulls will be partitioned to the end of the output.\n+/// Output is not guaranteed to be stable.\n+///\n+/// \\param[in] ctx the FunctionContext\n+/// \\param[in] values array to sort\n+/// \\param[in] n n-th element to partition the array\n+/// \\param[out] offsets indices that would sort an array\n+ARROW_EXPORT\n+Status NthToIndices(FunctionContext* ctx, const Array& values, uint64_t n,\n \n Review comment:\n   I know `n` shouldn't be negative, but our convention is to use `int64_t` for lengths and offsets, so we should probably use that here too.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.162+0000",
                    "updated": "2020-03-04T09:52:37.162+0000",
                    "started": "2020-03-04T09:52:37.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397426",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387550530\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n+\n+  /// \\brief output type of this kernel\n+  std::shared_ptr<DataType> out_type() const override { return uint64(); }\n+\n+  /// \\brief single-array implementation\n+  virtual Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                              uint64_t n, std::shared_ptr<Array>* offsets) = 0;\n+\n+  /// \\brief factory for NthToIndicesKernel\n+  ///\n+  /// \\param[in] value_type constructed NthToIndicesKernel will support\n+  ///            values of this type\n+  /// \\param[out] out created kernel\n+  static Status Make(const std::shared_ptr<DataType>& value_type,\n+                     std::unique_ptr<NthToIndicesKernel>* out);\n+};\n+\n+template <typename ArrayType>\n+bool CompareValues(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.Value(lhs) < array.Value(rhs);\n+}\n+\n+template <typename ArrayType>\n+bool CompareViews(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.GetView(lhs) < array.GetView(rhs);\n+}\n+\n+template <typename ArrowType, typename Comparator>\n+class NthToIndicesKernelImpl : public NthToIndicesKernel {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+ public:\n+  explicit NthToIndicesKernelImpl(Comparator compare) : compare_(compare) {}\n+\n+  Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                      uint64_t n, std::shared_ptr<Array>* offsets) {\n+    return NthToIndicesImpl(ctx, std::static_pointer_cast<ArrayType>(values), n, offsets);\n+  }\n+\n+  Status Call(FunctionContext* ctx, const Datum& values, uint64_t n, Datum* offsets) {\n+    if (!values.is_array()) {\n+      return Status::Invalid(\"NthToIndicesKernel expects array values\");\n+    }\n+    auto values_array = values.make_array();\n+    std::shared_ptr<Array> offsets_array;\n+    RETURN_NOT_OK(this->NthToIndices(ctx, values_array, n, &offsets_array));\n+    *offsets = offsets_array;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const { return type_; }\n+\n+ private:\n+  Comparator compare_;\n+\n+  Status NthToIndicesImpl(FunctionContext* ctx, const std::shared_ptr<ArrayType>& values,\n+                          uint64_t n, std::shared_ptr<Array>* offsets) {\n+    std::shared_ptr<Buffer> indices_buf;\n+    int64_t buf_size = values->length() * sizeof(uint64_t);\n+    RETURN_NOT_OK(AllocateBuffer(ctx->memory_pool(), buf_size, &indices_buf));\n+\n+    int64_t* indices_begin = reinterpret_cast<int64_t*>(indices_buf->mutable_data());\n+    int64_t* indices_end = indices_begin + values->length();\n+\n+    std::iota(indices_begin, indices_end, 0);\n+    *offsets = std::make_shared<UInt64Array>(values->length(), indices_buf);\n+\n+    if (n >= static_cast<uint64_t>(values->length())) {\n \n Review comment:\n   Shouldn't we have two cases here?\r\n   * `n` is exactly equal to the length: ok\r\n   * `n` strictly greater than the length: return `Status::Invalid`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.165+0000",
                    "updated": "2020-03-04T09:52:37.165+0000",
                    "started": "2020-03-04T09:52:37.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397427",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387548810\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n \n Review comment:\n   Is there a point in having virtual methods? Are you planning to create a second implementation of this kernel?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.217+0000",
                    "updated": "2020-03-04T09:52:37.217+0000",
                    "started": "2020-03-04T09:52:37.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397428",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387554854\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices_test.cc\n ##########\n @@ -0,0 +1,185 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <limits>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename ArrayType>\n+class Comparator {\n+ public:\n+  bool operator()(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+    if (array.IsNull(rhs)) return true;\n+    if (array.IsNull(lhs)) return false;\n+    return array.Value(lhs) <= array.Value(rhs);\n+  }\n+};\n+\n+template <>\n+class Comparator<StringArray> {\n+ public:\n+  bool operator()(const BinaryArray& array, uint64_t lhs, uint64_t rhs) {\n+    if (array.IsNull(rhs)) return true;\n+    if (array.IsNull(lhs)) return false;\n+    return array.GetView(lhs) <= array.GetView(rhs);\n+  }\n+};\n+\n+template <typename ArrowType>\n+class TestNthToIndicesKernel : public ComputeFixture, public TestBase {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+ private:\n+  template <typename ArrayType>\n+  void ValidateNth(const ArrayType& array, int n, UInt64Array& offsets) {\n+    if (n >= array.length()) {\n+      for (int i = 0; i < array.length(); ++i) {\n+        ASSERT_TRUE(offsets.Value(i) == (uint64_t)i);\n+      }\n+    } else {\n+      Comparator<ArrayType> compare;\n+      uint64_t nth = offsets.Value(n);\n+\n+      for (int i = 0; i < n; ++i) {\n+        uint64_t lhs = offsets.Value(i);\n+        ASSERT_TRUE(compare(array, lhs, nth));\n+      }\n+      for (int i = n + 1; i < array.length(); ++i) {\n+        uint64_t rhs = offsets.Value(i);\n+        ASSERT_TRUE(compare(array, nth, rhs));\n+      }\n+    }\n+  }\n+\n+ protected:\n+  void AssertNthToIndicesArray(const std::shared_ptr<Array> values, int n) {\n+    std::shared_ptr<Array> offsets;\n+    ASSERT_OK(arrow::compute::NthToIndices(&this->ctx_, *values, n, &offsets));\n+    ASSERT_OK(offsets->ValidateFull());\n+    ValidateNth<ArrayType>(*std::static_pointer_cast<ArrayType>(values), n,\n \n Review comment:\n   Can use `checked_pointer_cast` from `util/checked_cast.h`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.248+0000",
                    "updated": "2020-03-04T09:52:37.248+0000",
                    "started": "2020-03-04T09:52:37.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397429",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387555410\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.h\n ##########\n @@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+/// \\brief Returns indices that partition an array around n-th\n+/// sorted element.\n+///\n+/// Find index of n-th(0 based) smallest value and perform indirect\n+/// partition of an array around that element. Output indices[0 ~ n-1]\n+/// holds values no greater than n-th element, and indices[n+1 ~ end]\n+/// holds values no less than n-th element. Elements in each partition\n+/// is not sorted. Nulls will be partitioned to the end of the output.\n+/// Output is not guaranteed to be stable.\n+///\n+/// \\param[in] ctx the FunctionContext\n+/// \\param[in] values array to sort\n+/// \\param[in] n n-th element to partition the array\n+/// \\param[out] offsets indices that would sort an array\n+ARROW_EXPORT\n+Status NthToIndices(FunctionContext* ctx, const Array& values, uint64_t n,\n \n Review comment:\n   Something else: you can return `Result<std::shared_ptr<Array>>` instead of Status + out-pointer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.258+0000",
                    "updated": "2020-03-04T09:52:37.258+0000",
                    "started": "2020-03-04T09:52:37.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397430",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387553523\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n \n Review comment:\n   By the way, all private code should be enclosed in the anonymous namespace (and you can remove `ARROW_EXPORT`).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.261+0000",
                    "updated": "2020-03-04T09:52:37.261+0000",
                    "started": "2020-03-04T09:52:37.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397432",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387552465\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n+\n+  /// \\brief output type of this kernel\n+  std::shared_ptr<DataType> out_type() const override { return uint64(); }\n+\n+  /// \\brief single-array implementation\n+  virtual Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                              uint64_t n, std::shared_ptr<Array>* offsets) = 0;\n+\n+  /// \\brief factory for NthToIndicesKernel\n+  ///\n+  /// \\param[in] value_type constructed NthToIndicesKernel will support\n+  ///            values of this type\n+  /// \\param[out] out created kernel\n+  static Status Make(const std::shared_ptr<DataType>& value_type,\n+                     std::unique_ptr<NthToIndicesKernel>* out);\n+};\n+\n+template <typename ArrayType>\n+bool CompareValues(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.Value(lhs) < array.Value(rhs);\n \n Review comment:\n   Note that `GetView` also exists on numeric arrays, so you don't need two different functions.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.261+0000",
                    "updated": "2020-03-04T09:52:37.261+0000",
                    "started": "2020-03-04T09:52:37.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397431",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/397433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r387553223\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n+\n+  /// \\brief output type of this kernel\n+  std::shared_ptr<DataType> out_type() const override { return uint64(); }\n+\n+  /// \\brief single-array implementation\n+  virtual Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                              uint64_t n, std::shared_ptr<Array>* offsets) = 0;\n+\n+  /// \\brief factory for NthToIndicesKernel\n+  ///\n+  /// \\param[in] value_type constructed NthToIndicesKernel will support\n+  ///            values of this type\n+  /// \\param[out] out created kernel\n+  static Status Make(const std::shared_ptr<DataType>& value_type,\n+                     std::unique_ptr<NthToIndicesKernel>* out);\n+};\n+\n+template <typename ArrayType>\n+bool CompareValues(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.Value(lhs) < array.Value(rhs);\n+}\n+\n+template <typename ArrayType>\n+bool CompareViews(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.GetView(lhs) < array.GetView(rhs);\n+}\n+\n+template <typename ArrowType, typename Comparator>\n+class NthToIndicesKernelImpl : public NthToIndicesKernel {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+ public:\n+  explicit NthToIndicesKernelImpl(Comparator compare) : compare_(compare) {}\n+\n+  Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                      uint64_t n, std::shared_ptr<Array>* offsets) {\n+    return NthToIndicesImpl(ctx, std::static_pointer_cast<ArrayType>(values), n, offsets);\n+  }\n+\n+  Status Call(FunctionContext* ctx, const Datum& values, uint64_t n, Datum* offsets) {\n+    if (!values.is_array()) {\n+      return Status::Invalid(\"NthToIndicesKernel expects array values\");\n+    }\n+    auto values_array = values.make_array();\n+    std::shared_ptr<Array> offsets_array;\n+    RETURN_NOT_OK(this->NthToIndices(ctx, values_array, n, &offsets_array));\n+    *offsets = offsets_array;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const { return type_; }\n+\n+ private:\n+  Comparator compare_;\n+\n+  Status NthToIndicesImpl(FunctionContext* ctx, const std::shared_ptr<ArrayType>& values,\n+                          uint64_t n, std::shared_ptr<Array>* offsets) {\n+    std::shared_ptr<Buffer> indices_buf;\n+    int64_t buf_size = values->length() * sizeof(uint64_t);\n+    RETURN_NOT_OK(AllocateBuffer(ctx->memory_pool(), buf_size, &indices_buf));\n+\n+    int64_t* indices_begin = reinterpret_cast<int64_t*>(indices_buf->mutable_data());\n+    int64_t* indices_end = indices_begin + values->length();\n+\n+    std::iota(indices_begin, indices_end, 0);\n+    *offsets = std::make_shared<UInt64Array>(values->length(), indices_buf);\n+\n+    if (n >= static_cast<uint64_t>(values->length())) {\n+      return Status::OK();\n+    }\n+\n+    auto nulls_begin = indices_end;\n+    if (values->null_count()) {\n+      nulls_begin =\n+          std::stable_partition(indices_begin, indices_end,\n+                                [&values](uint64_t ind) { return !values->IsNull(ind); });\n+    }\n+\n+    auto nth_begin = indices_begin + n;\n+    if (nth_begin < nulls_begin) {\n+      std::nth_element(indices_begin, nth_begin, nulls_begin,\n+                       [&values, this](uint64_t left, uint64_t right) {\n+                         return compare_(*values, left, right);\n+                       });\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename ArrowType, typename Comparator>\n+NthToIndicesKernelImpl<ArrowType, Comparator>* MakeNthToIndicesKernelImpl(\n+    Comparator comparator) {\n+  return new NthToIndicesKernelImpl<ArrowType, Comparator>(comparator);\n+}\n+\n+Status NthToIndicesKernel::Make(const std::shared_ptr<DataType>& value_type,\n+                                std::unique_ptr<NthToIndicesKernel>* out) {\n+  NthToIndicesKernel* kernel;\n+  switch (value_type->id()) {\n+    case Type::UINT8:\n+      kernel = MakeNthToIndicesKernelImpl<UInt8Type>(CompareValues<UInt8Array>);\n+      break;\n+    case Type::INT8:\n+      kernel = MakeNthToIndicesKernelImpl<Int8Type>(CompareValues<Int8Array>);\n+      break;\n+    case Type::UINT16:\n+      kernel = MakeNthToIndicesKernelImpl<UInt16Type>(CompareValues<UInt16Array>);\n+      break;\n+    case Type::INT16:\n+      kernel = MakeNthToIndicesKernelImpl<Int16Type>(CompareValues<Int16Array>);\n+      break;\n+    case Type::UINT32:\n+      kernel = MakeNthToIndicesKernelImpl<UInt32Type>(CompareValues<UInt32Array>);\n+      break;\n+    case Type::INT32:\n+      kernel = MakeNthToIndicesKernelImpl<Int32Type>(CompareValues<Int32Array>);\n+      break;\n+    case Type::UINT64:\n+      kernel = MakeNthToIndicesKernelImpl<UInt64Type>(CompareValues<UInt64Array>);\n+      break;\n+    case Type::INT64:\n+      kernel = MakeNthToIndicesKernelImpl<Int64Type>(CompareValues<Int64Array>);\n+      break;\n+    case Type::FLOAT:\n+      kernel = MakeNthToIndicesKernelImpl<FloatType>(CompareValues<FloatArray>);\n+      break;\n+    case Type::DOUBLE:\n+      kernel = MakeNthToIndicesKernelImpl<DoubleType>(CompareValues<DoubleArray>);\n+      break;\n+    case Type::BINARY:\n+      kernel = MakeNthToIndicesKernelImpl<BinaryType>(CompareViews<BinaryArray>);\n+      break;\n+    case Type::STRING:\n+      kernel = MakeNthToIndicesKernelImpl<StringType>(CompareViews<StringArray>);\n+      break;\n+    default:\n+      return Status::NotImplemented(\"N-th of \", *value_type, \" arrays\");\n+  }\n+  out->reset(kernel);\n+  return Status::OK();\n+}\n+\n+Status NthToIndices(FunctionContext* ctx, const Datum& values, uint64_t n,\n \n Review comment:\n   Do you want to expose this function in the `.h`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T09:52:37.281+0000",
                    "updated": "2020-03-04T09:52:37.281+0000",
                    "started": "2020-03-04T09:52:37.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397433",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388706612\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n \n Review comment:\n   removed virtual\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:20:55.156+0000",
                    "updated": "2020-03-06T04:20:55.156+0000",
                    "started": "2020-03-06T04:20:55.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398900",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388706665\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n+\n+  /// \\brief output type of this kernel\n+  std::shared_ptr<DataType> out_type() const override { return uint64(); }\n+\n+  /// \\brief single-array implementation\n+  virtual Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                              uint64_t n, std::shared_ptr<Array>* offsets) = 0;\n+\n+  /// \\brief factory for NthToIndicesKernel\n+  ///\n+  /// \\param[in] value_type constructed NthToIndicesKernel will support\n+  ///            values of this type\n+  /// \\param[out] out created kernel\n+  static Status Make(const std::shared_ptr<DataType>& value_type,\n+                     std::unique_ptr<NthToIndicesKernel>* out);\n+};\n+\n+template <typename ArrayType>\n+bool CompareValues(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.Value(lhs) < array.Value(rhs);\n+}\n+\n+template <typename ArrayType>\n+bool CompareViews(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.GetView(lhs) < array.GetView(rhs);\n+}\n+\n+template <typename ArrowType, typename Comparator>\n+class NthToIndicesKernelImpl : public NthToIndicesKernel {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+ public:\n+  explicit NthToIndicesKernelImpl(Comparator compare) : compare_(compare) {}\n+\n+  Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                      uint64_t n, std::shared_ptr<Array>* offsets) {\n+    return NthToIndicesImpl(ctx, std::static_pointer_cast<ArrayType>(values), n, offsets);\n+  }\n+\n+  Status Call(FunctionContext* ctx, const Datum& values, uint64_t n, Datum* offsets) {\n+    if (!values.is_array()) {\n+      return Status::Invalid(\"NthToIndicesKernel expects array values\");\n+    }\n+    auto values_array = values.make_array();\n+    std::shared_ptr<Array> offsets_array;\n+    RETURN_NOT_OK(this->NthToIndices(ctx, values_array, n, &offsets_array));\n+    *offsets = offsets_array;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const { return type_; }\n+\n+ private:\n+  Comparator compare_;\n+\n+  Status NthToIndicesImpl(FunctionContext* ctx, const std::shared_ptr<ArrayType>& values,\n+                          uint64_t n, std::shared_ptr<Array>* offsets) {\n+    std::shared_ptr<Buffer> indices_buf;\n+    int64_t buf_size = values->length() * sizeof(uint64_t);\n+    RETURN_NOT_OK(AllocateBuffer(ctx->memory_pool(), buf_size, &indices_buf));\n+\n+    int64_t* indices_begin = reinterpret_cast<int64_t*>(indices_buf->mutable_data());\n+    int64_t* indices_end = indices_begin + values->length();\n+\n+    std::iota(indices_begin, indices_end, 0);\n+    *offsets = std::make_shared<UInt64Array>(values->length(), indices_buf);\n+\n+    if (n >= static_cast<uint64_t>(values->length())) {\n \n Review comment:\n   yes. done.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:21:09.354+0000",
                    "updated": "2020-03-06T04:21:09.354+0000",
                    "started": "2020-03-06T04:21:09.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398901",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388707197\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.h\n ##########\n @@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+/// \\brief Returns indices that partition an array around n-th\n+/// sorted element.\n+///\n+/// Find index of n-th(0 based) smallest value and perform indirect\n+/// partition of an array around that element. Output indices[0 ~ n-1]\n+/// holds values no greater than n-th element, and indices[n+1 ~ end]\n+/// holds values no less than n-th element. Elements in each partition\n+/// is not sorted. Nulls will be partitioned to the end of the output.\n+/// Output is not guaranteed to be stable.\n+///\n+/// \\param[in] ctx the FunctionContext\n+/// \\param[in] values array to sort\n+/// \\param[in] n n-th element to partition the array\n+/// \\param[out] offsets indices that would sort an array\n+ARROW_EXPORT\n+Status NthToIndices(FunctionContext* ctx, const Array& values, uint64_t n,\n \n Review comment:\n   Changed n to int64.\r\n   I'm returning Status just to be consistent with other kernels. Result looks more convenient.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:23:56.015+0000",
                    "updated": "2020-03-06T04:23:56.015+0000",
                    "started": "2020-03-06T04:23:56.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398902",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388707425\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n+\n+  /// \\brief output type of this kernel\n+  std::shared_ptr<DataType> out_type() const override { return uint64(); }\n+\n+  /// \\brief single-array implementation\n+  virtual Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                              uint64_t n, std::shared_ptr<Array>* offsets) = 0;\n+\n+  /// \\brief factory for NthToIndicesKernel\n+  ///\n+  /// \\param[in] value_type constructed NthToIndicesKernel will support\n+  ///            values of this type\n+  /// \\param[out] out created kernel\n+  static Status Make(const std::shared_ptr<DataType>& value_type,\n+                     std::unique_ptr<NthToIndicesKernel>* out);\n+};\n+\n+template <typename ArrayType>\n+bool CompareValues(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.Value(lhs) < array.Value(rhs);\n \n Review comment:\n   Thanks. It simplifies code significantly. I think sorting kernel should also be refined with it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:25:17.529+0000",
                    "updated": "2020-03-06T04:25:17.529+0000",
                    "started": "2020-03-06T04:25:17.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398906",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388707624\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n+\n+  /// \\brief output type of this kernel\n+  std::shared_ptr<DataType> out_type() const override { return uint64(); }\n+\n+  /// \\brief single-array implementation\n+  virtual Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                              uint64_t n, std::shared_ptr<Array>* offsets) = 0;\n+\n+  /// \\brief factory for NthToIndicesKernel\n+  ///\n+  /// \\param[in] value_type constructed NthToIndicesKernel will support\n+  ///            values of this type\n+  /// \\param[out] out created kernel\n+  static Status Make(const std::shared_ptr<DataType>& value_type,\n+                     std::unique_ptr<NthToIndicesKernel>* out);\n+};\n+\n+template <typename ArrayType>\n+bool CompareValues(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.Value(lhs) < array.Value(rhs);\n+}\n+\n+template <typename ArrayType>\n+bool CompareViews(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+  return array.GetView(lhs) < array.GetView(rhs);\n+}\n+\n+template <typename ArrowType, typename Comparator>\n+class NthToIndicesKernelImpl : public NthToIndicesKernel {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+ public:\n+  explicit NthToIndicesKernelImpl(Comparator compare) : compare_(compare) {}\n+\n+  Status NthToIndices(FunctionContext* ctx, const std::shared_ptr<Array>& values,\n+                      uint64_t n, std::shared_ptr<Array>* offsets) {\n+    return NthToIndicesImpl(ctx, std::static_pointer_cast<ArrayType>(values), n, offsets);\n+  }\n+\n+  Status Call(FunctionContext* ctx, const Datum& values, uint64_t n, Datum* offsets) {\n+    if (!values.is_array()) {\n+      return Status::Invalid(\"NthToIndicesKernel expects array values\");\n+    }\n+    auto values_array = values.make_array();\n+    std::shared_ptr<Array> offsets_array;\n+    RETURN_NOT_OK(this->NthToIndices(ctx, values_array, n, &offsets_array));\n+    *offsets = offsets_array;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const { return type_; }\n+\n+ private:\n+  Comparator compare_;\n+\n+  Status NthToIndicesImpl(FunctionContext* ctx, const std::shared_ptr<ArrayType>& values,\n+                          uint64_t n, std::shared_ptr<Array>* offsets) {\n+    std::shared_ptr<Buffer> indices_buf;\n+    int64_t buf_size = values->length() * sizeof(uint64_t);\n+    RETURN_NOT_OK(AllocateBuffer(ctx->memory_pool(), buf_size, &indices_buf));\n+\n+    int64_t* indices_begin = reinterpret_cast<int64_t*>(indices_buf->mutable_data());\n+    int64_t* indices_end = indices_begin + values->length();\n+\n+    std::iota(indices_begin, indices_end, 0);\n+    *offsets = std::make_shared<UInt64Array>(values->length(), indices_buf);\n+\n+    if (n >= static_cast<uint64_t>(values->length())) {\n+      return Status::OK();\n+    }\n+\n+    auto nulls_begin = indices_end;\n+    if (values->null_count()) {\n+      nulls_begin =\n+          std::stable_partition(indices_begin, indices_end,\n+                                [&values](uint64_t ind) { return !values->IsNull(ind); });\n+    }\n+\n+    auto nth_begin = indices_begin + n;\n+    if (nth_begin < nulls_begin) {\n+      std::nth_element(indices_begin, nth_begin, nulls_begin,\n+                       [&values, this](uint64_t left, uint64_t right) {\n+                         return compare_(*values, left, right);\n+                       });\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename ArrowType, typename Comparator>\n+NthToIndicesKernelImpl<ArrowType, Comparator>* MakeNthToIndicesKernelImpl(\n+    Comparator comparator) {\n+  return new NthToIndicesKernelImpl<ArrowType, Comparator>(comparator);\n+}\n+\n+Status NthToIndicesKernel::Make(const std::shared_ptr<DataType>& value_type,\n+                                std::unique_ptr<NthToIndicesKernel>* out) {\n+  NthToIndicesKernel* kernel;\n+  switch (value_type->id()) {\n+    case Type::UINT8:\n+      kernel = MakeNthToIndicesKernelImpl<UInt8Type>(CompareValues<UInt8Array>);\n+      break;\n+    case Type::INT8:\n+      kernel = MakeNthToIndicesKernelImpl<Int8Type>(CompareValues<Int8Array>);\n+      break;\n+    case Type::UINT16:\n+      kernel = MakeNthToIndicesKernelImpl<UInt16Type>(CompareValues<UInt16Array>);\n+      break;\n+    case Type::INT16:\n+      kernel = MakeNthToIndicesKernelImpl<Int16Type>(CompareValues<Int16Array>);\n+      break;\n+    case Type::UINT32:\n+      kernel = MakeNthToIndicesKernelImpl<UInt32Type>(CompareValues<UInt32Array>);\n+      break;\n+    case Type::INT32:\n+      kernel = MakeNthToIndicesKernelImpl<Int32Type>(CompareValues<Int32Array>);\n+      break;\n+    case Type::UINT64:\n+      kernel = MakeNthToIndicesKernelImpl<UInt64Type>(CompareValues<UInt64Array>);\n+      break;\n+    case Type::INT64:\n+      kernel = MakeNthToIndicesKernelImpl<Int64Type>(CompareValues<Int64Array>);\n+      break;\n+    case Type::FLOAT:\n+      kernel = MakeNthToIndicesKernelImpl<FloatType>(CompareValues<FloatArray>);\n+      break;\n+    case Type::DOUBLE:\n+      kernel = MakeNthToIndicesKernelImpl<DoubleType>(CompareValues<DoubleArray>);\n+      break;\n+    case Type::BINARY:\n+      kernel = MakeNthToIndicesKernelImpl<BinaryType>(CompareViews<BinaryArray>);\n+      break;\n+    case Type::STRING:\n+      kernel = MakeNthToIndicesKernelImpl<StringType>(CompareViews<StringArray>);\n+      break;\n+    default:\n+      return Status::NotImplemented(\"N-th of \", *value_type, \" arrays\");\n+  }\n+  out->reset(kernel);\n+  return Status::OK();\n+}\n+\n+Status NthToIndices(FunctionContext* ctx, const Datum& values, uint64_t n,\n \n Review comment:\n   no, changed to static.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:26:19.886+0000",
                    "updated": "2020-03-06T04:26:19.886+0000",
                    "started": "2020-03-06T04:26:19.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398907",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388709517\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n \n Review comment:\n   removed ARROW_EXPORT.\r\n   I'm kind of confused about how compute kernels are used by client code.\r\n   Exported functions like SortToIndices will create a kernel every time client invokes it. Looks to me exporting the kernel class interface is better, so clients can create a kernel, then call it against different inputs repeatedly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:36:58.171+0000",
                    "updated": "2020-03-06T04:36:58.171+0000",
                    "started": "2020-03-06T04:36:58.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398911",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388709542\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices_test.cc\n ##########\n @@ -0,0 +1,185 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <limits>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename ArrayType>\n+class Comparator {\n+ public:\n+  bool operator()(const ArrayType& array, uint64_t lhs, uint64_t rhs) {\n+    if (array.IsNull(rhs)) return true;\n+    if (array.IsNull(lhs)) return false;\n+    return array.Value(lhs) <= array.Value(rhs);\n+  }\n+};\n+\n+template <>\n+class Comparator<StringArray> {\n+ public:\n+  bool operator()(const BinaryArray& array, uint64_t lhs, uint64_t rhs) {\n+    if (array.IsNull(rhs)) return true;\n+    if (array.IsNull(lhs)) return false;\n+    return array.GetView(lhs) <= array.GetView(rhs);\n+  }\n+};\n+\n+template <typename ArrowType>\n+class TestNthToIndicesKernel : public ComputeFixture, public TestBase {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+ private:\n+  template <typename ArrayType>\n+  void ValidateNth(const ArrayType& array, int n, UInt64Array& offsets) {\n+    if (n >= array.length()) {\n+      for (int i = 0; i < array.length(); ++i) {\n+        ASSERT_TRUE(offsets.Value(i) == (uint64_t)i);\n+      }\n+    } else {\n+      Comparator<ArrayType> compare;\n+      uint64_t nth = offsets.Value(n);\n+\n+      for (int i = 0; i < n; ++i) {\n+        uint64_t lhs = offsets.Value(i);\n+        ASSERT_TRUE(compare(array, lhs, nth));\n+      }\n+      for (int i = n + 1; i < array.length(); ++i) {\n+        uint64_t rhs = offsets.Value(i);\n+        ASSERT_TRUE(compare(array, nth, rhs));\n+      }\n+    }\n+  }\n+\n+ protected:\n+  void AssertNthToIndicesArray(const std::shared_ptr<Array> values, int n) {\n+    std::shared_ptr<Array> offsets;\n+    ASSERT_OK(arrow::compute::NthToIndices(&this->ctx_, *values, n, &offsets));\n+    ASSERT_OK(offsets->ValidateFull());\n+    ValidateNth<ArrayType>(*std::static_pointer_cast<ArrayType>(values), n,\n \n Review comment:\n   done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T04:37:06.208+0000",
                    "updated": "2020-03-06T04:37:06.208+0000",
                    "started": "2020-03-06T04:37:06.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398912",
                    "issueId": "13279729"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/worklog/398931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6530: ARROW-7587: [C++][Compute] Implement nth_to_indices kernel\nURL: https://github.com/apache/arrow/pull/6530#discussion_r388706612\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/nth_to_indices.cc\n ##########\n @@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/nth_to_indices.h\"\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+/// \\brief Kernel implementing NthToIndices operation\n+class ARROW_EXPORT NthToIndicesKernel : public OpKernel {\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+\n+ public:\n+  /// \\brief Kernel interface\n+  ///\n+  /// delegates to subclasses via NthToIndices()\n+  virtual Status Call(FunctionContext* ctx, const Datum& values, uint64_t n,\n+                      Datum* offsets) = 0;\n \n Review comment:\n   Code changed a lot. Please review again. Thanks.\r\n   This struct defined as the kernel interface. No plan for second implementation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-06T05:01:32.805+0000",
                    "updated": "2020-03-06T05:01:32.805+0000",
                    "started": "2020-03-06T05:01:32.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398931",
                    "issueId": "13279729"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6a7c72f2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@857d404[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ce4f32c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7aa5f940[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@355f5f4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@47bfd968[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ca93f20[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7913ac0c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36792154[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@fb4ca6a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a81b483[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e961613[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed May 12 20:05:52 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-12T15:08:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7587/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-01-16T02:32:29.000+0000",
        "updated": "2021-08-02T18:36:00.000+0000",
        "timeoriginalestimate": null,
        "description": "Add a kernel to get top k smallest or largest elements (indices). If we don't require these elements to be sorted, std::nth_element will be a much faster solution than sorting everything then pick top k.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add Top-k kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/comment/17016470",
                    "id": "17016470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Comments welcomed",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-01-16T02:33:50.804+0000",
                    "updated": "2020-01-16T02:33:50.804+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/comment/17048886",
                    "id": "17048886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Did some benchmark again std::sort(), std::partial_sort() and std::nth_element().\r\n Code at [https://github.com/cyb70289/mytests/blob/master/cpp/sort-nth.cc].\r\n\r\nTested sorting 10,000,000 elements, partial_sort first 1/3 elements, and nth_element 1/3 element. Below is the result:\r\n std::sort(): 1.90883 s\r\n std::partial_sort(): 4.68398 s\r\n std::nth_element(): 0.114514 s\r\n\r\nstd::partial_sort is much slower than std::sort when the number of elements to be partially sorted is large.\r\n *std:nth_element() is order faster, should be the best choice.*\r\n\r\nPS: why partial_sort can be slow\r\n [https://stackoverflow.com/questions/45455345/performance-of-stdpartial-sort-versus-stdsort-when-sorting-the-whole-ran]\r\n [https://www.quora.com/Why-is-STLs-partial_sort-slower-than-the-asymptotic-lower-bound]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-03-02T08:57:55.096+0000",
                    "updated": "2020-03-02T08:57:55.096+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/comment/17058002",
                    "id": "17058002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 6530\n[https://github.com/apache/arrow/pull/6530]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-03-12T15:08:32.283+0000",
                    "updated": "2020-03-12T15:08:32.283+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/comment/17343435",
                    "id": "17343435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~yibocai] it looks like this kernel is not registered in the function registry and is not listed in the compute functions docs page. Is it intended for internal use only?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dfoulks",
                        "name": "dfoulks",
                        "key": "dfoulks",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Drew Foulks",
                        "active": true,
                        "timeZone": "America/Kentucky/Louisville"
                    },
                    "created": "2021-05-12T18:18:21.682+0000",
                    "updated": "2021-08-02T18:36:00.456+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/comment/17343442",
                    "id": "17343442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~icook] it's called \"partition_nth_indices\": https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-05-12T18:27:40.112+0000",
                    "updated": "2021-05-12T18:27:40.112+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279729/comment/17343547",
                    "id": "17343547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ah, thanks [~apitrou]. I can see now that this was added to the function registry as \"partition_indices\" in ARROW-8792 then renamed \"partition_nth_indices\" in ARROW-9390.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-12T20:05:52.397+0000",
                    "updated": "2021-05-12T20:05:52.397+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ak5c:",
        "customfield_12314139": null
    }
}