{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13268896",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896",
    "key": "ARROW-7193",
    "fields": {
        "parent": {
            "id": "13228688",
            "key": "ARROW-5180",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13228688",
            "fields": {
                "summary": "[Rust] IPC Support",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                    "name": "Blocker",
                    "id": "1"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7193/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/357901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013\n \n \n   * Moved `arrow/ipc/file/reader` to `arrow/ipc/reader`\r\n   * Renamed the file reader from `Reader` to `FileReader`\r\n   * Added a `StreamReader`\r\n   \r\n   The stream reader currently terminates on a 0-byte read, but not on an EOS marker.\r\n   We might need to work on the latter later, as I could not see the marker when inspecting the test files with a hex-editor.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-11T15:12:53.753+0000",
                    "updated": "2019-12-11T15:12:53.753+0000",
                    "started": "2019-12-11T15:12:53.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "357901",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/357902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#issuecomment-564590146\n \n \n   PTAL @liurenjie1024 \r\n   \r\n   CC @andy-thomason\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-11T15:13:42.941+0000",
                    "updated": "2019-12-11T15:13:42.941+0000",
                    "started": "2019-12-11T15:13:42.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "357902",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/357904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#issuecomment-564591025\n \n \n   https://issues.apache.org/jira/browse/ARROW-7193\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-11T15:15:47.398+0000",
                    "updated": "2019-12-11T15:15:47.398+0000",
                    "started": "2019-12-11T15:15:47.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "357904",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#issuecomment-569680783\n \n \n   @nevi-me, sorry for the delay on this.  I'll take a look today or tomorrow and we can move this forward.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-30T13:35:40.626+0000",
                    "updated": "2019-12-30T13:35:40.626+0000",
                    "started": "2019-12-30T13:35:40.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364639",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#discussion_r362065671\n \n \n\n ##########\n File path: rust/arrow/src/ipc/reader.rs\n ##########\n @@ -521,7 +524,111 @@ impl<R: Read + Seek> Reader<R> {\n     }\n }\n \n-impl<R: Read + Seek> RecordBatchReader for Reader<R> {\n+impl<R: Read + Seek> RecordBatchReader for FileReader<R> {\n+    fn schema(&mut self) -> SchemaRef {\n+        self.schema.clone()\n+    }\n+\n+    fn next_batch(&mut self) -> Result<Option<RecordBatch>> {\n+        self.next()\n+    }\n+}\n+\n+/// Arrow Stream reader\n+pub struct StreamReader<R: Read> {\n+    /// Buffered stream reader\n+    reader: BufReader<R>,\n+    /// The schema that is read from the stream's first message\n+    schema: Arc<Schema>,\n+    /// An indicator of whether the strewam is complete.\n+    ///\n+    /// This value is set to `true` the first time the reader's `next()` returns `None`.\n+    finished: bool,\n+}\n+\n+impl<R: Read> StreamReader<R> {\n+    /// Try to create a new stream reader\n+    ///\n+    /// The first message in the stream is the schema, the reader will fail if it does not\n+    /// encounter a schema.\n+    /// To check if the reader is done, use `is_finished(self)`\n+    pub fn try_new(reader: R) -> Result<Self> {\n+        let mut reader = BufReader::new(reader);\n+        // determine metadata length\n+        let mut meta_size: [u8; 4] = [0; 4];\n+        reader.read_exact(&mut meta_size)?;\n+        let meta_len = u32::from_le_bytes(meta_size);\n+\n+        let mut meta_buffer = vec![0; meta_len as usize];\n+        reader.read_exact(&mut meta_buffer)?;\n+\n+        let vecs = &meta_buffer.to_vec();\n+        let message = ipc::get_root_as_message(vecs);\n+        // message header is a Schema, so read it\n+        let ipc_schema: ipc::Schema = message\n+            .header_as_schema()\n+            .expect(\"Arrow Stream must start with a schema\");\n \n Review comment:\n   This method already returns a `Result` so shouldn't we propagate this up instead of using `expect`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-30T18:48:57.720+0000",
                    "updated": "2019-12-30T18:48:57.720+0000",
                    "started": "2019-12-30T18:48:57.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364712",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#discussion_r362065750\n \n \n\n ##########\n File path: rust/arrow/src/ipc/reader.rs\n ##########\n @@ -560,11 +667,42 @@ mod tests {\n             ))\n             .unwrap();\n \n-            let mut reader = Reader::try_new(file).unwrap();\n+            let mut reader = FileReader::try_new(file).unwrap();\n+\n+            // read expected JSON output\n+            let arrow_json = read_gzip_json(path);\n+            assert!(arrow_json.equals_reader(&mut reader));\n+        });\n+    }\n+\n+    #[test]\n+    fn read_generated_streams() {\n+        let testdata = env::var(\"ARROW_TEST_DATA\").expect(\"ARROW_TEST_DATA not defined\");\n+        // the test is repetitive, thus we can read all supported files at once\n+        let paths = vec![\n+            \"generated_interval\",\n+            \"generated_datetime\",\n+            \"generated_nested\",\n+            \"generated_primitive_no_batches\",\n+            \"generated_primitive_zerolength\",\n+            \"generated_primitive\",\n+        ];\n+        paths.iter().for_each(|path| {\n+            let file = File::open(format!(\n+                \"{}/arrow-ipc/integration/0.14.1/{}.stream\",\n \n Review comment:\n   Is there anywhere that we can read this version number (0.14.1) from?  Separate PR obviously.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-30T18:48:57.723+0000",
                    "updated": "2019-12-30T18:48:57.723+0000",
                    "started": "2019-12-30T18:48:57.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364713",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#discussion_r362065714\n \n \n\n ##########\n File path: rust/arrow/src/ipc/reader.rs\n ##########\n @@ -521,7 +524,111 @@ impl<R: Read + Seek> Reader<R> {\n     }\n }\n \n-impl<R: Read + Seek> RecordBatchReader for Reader<R> {\n+impl<R: Read + Seek> RecordBatchReader for FileReader<R> {\n+    fn schema(&mut self) -> SchemaRef {\n+        self.schema.clone()\n+    }\n+\n+    fn next_batch(&mut self) -> Result<Option<RecordBatch>> {\n+        self.next()\n+    }\n+}\n+\n+/// Arrow Stream reader\n+pub struct StreamReader<R: Read> {\n+    /// Buffered stream reader\n+    reader: BufReader<R>,\n+    /// The schema that is read from the stream's first message\n+    schema: Arc<Schema>,\n+    /// An indicator of whether the strewam is complete.\n+    ///\n+    /// This value is set to `true` the first time the reader's `next()` returns `None`.\n+    finished: bool,\n+}\n+\n+impl<R: Read> StreamReader<R> {\n+    /// Try to create a new stream reader\n+    ///\n+    /// The first message in the stream is the schema, the reader will fail if it does not\n+    /// encounter a schema.\n+    /// To check if the reader is done, use `is_finished(self)`\n+    pub fn try_new(reader: R) -> Result<Self> {\n+        let mut reader = BufReader::new(reader);\n+        // determine metadata length\n+        let mut meta_size: [u8; 4] = [0; 4];\n+        reader.read_exact(&mut meta_size)?;\n+        let meta_len = u32::from_le_bytes(meta_size);\n+\n+        let mut meta_buffer = vec![0; meta_len as usize];\n+        reader.read_exact(&mut meta_buffer)?;\n+\n+        let vecs = &meta_buffer.to_vec();\n+        let message = ipc::get_root_as_message(vecs);\n+        // message header is a Schema, so read it\n+        let ipc_schema: ipc::Schema = message\n+            .header_as_schema()\n+            .expect(\"Arrow Stream must start with a schema\");\n+        let schema = ipc::convert::fb_to_schema(ipc_schema);\n+\n+        Ok(Self {\n+            reader,\n+            schema: Arc::new(schema),\n+            finished: false,\n+        })\n+    }\n+\n+    /// Return the schema of the stream\n+    pub fn schema(&self) -> SchemaRef {\n+        self.schema.clone()\n+    }\n+\n+    /// Read the next record batch\n+    pub fn next(&mut self) -> Result<Option<RecordBatch>> {\n+        if self.finished {\n+            return Ok(None);\n+        }\n+        // determine metadata length\n+        let mut meta_size: [u8; 4] = [0; 4];\n+        self.reader.read_exact(&mut meta_size)?;\n+        let meta_len = u32::from_le_bytes(meta_size);\n+\n+        if meta_len == 0 {\n+            // the stream has ended, mark the reader as finished\n+            self.finished = true;\n+            return Ok(None);\n+        }\n+\n+        let mut meta_buffer = vec![0; meta_len as usize];\n+        self.reader.read_exact(&mut meta_buffer)?;\n+\n+        let vecs = &meta_buffer.to_vec();\n+        let message = ipc::get_root_as_message(vecs);\n+\n+        match message.header_type() {\n+            ipc::MessageHeader::Schema => {\n+                panic!(\"Not expecting a schema when messages are read\")\n+            }\n+            ipc::MessageHeader::RecordBatch => {\n+                let batch = message.header_as_record_batch().unwrap();\n \n Review comment:\n   We should propagate this error instead of calling `unwrap`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-30T18:48:57.747+0000",
                    "updated": "2019-12-30T18:48:57.747+0000",
                    "started": "2019-12-30T18:48:57.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364714",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#discussion_r362151630\n \n \n\n ##########\n File path: rust/arrow/src/ipc/reader.rs\n ##########\n @@ -560,11 +667,42 @@ mod tests {\n             ))\n             .unwrap();\n \n-            let mut reader = Reader::try_new(file).unwrap();\n+            let mut reader = FileReader::try_new(file).unwrap();\n+\n+            // read expected JSON output\n+            let arrow_json = read_gzip_json(path);\n+            assert!(arrow_json.equals_reader(&mut reader));\n+        });\n+    }\n+\n+    #[test]\n+    fn read_generated_streams() {\n+        let testdata = env::var(\"ARROW_TEST_DATA\").expect(\"ARROW_TEST_DATA not defined\");\n+        // the test is repetitive, thus we can read all supported files at once\n+        let paths = vec![\n+            \"generated_interval\",\n+            \"generated_datetime\",\n+            \"generated_nested\",\n+            \"generated_primitive_no_batches\",\n+            \"generated_primitive_zerolength\",\n+            \"generated_primitive\",\n+        ];\n+        paths.iter().for_each(|path| {\n+            let file = File::open(format!(\n+                \"{}/arrow-ipc/integration/0.14.1/{}.stream\",\n \n Review comment:\n   We can address this when adding Rust to the integration testing. I'm not sure of how other implementations handle this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-31T05:37:07.460+0000",
                    "updated": "2019-12-31T05:37:07.460+0000",
                    "started": "2019-12-31T05:37:07.459+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364862",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#discussion_r362151636\n \n \n\n ##########\n File path: rust/arrow/src/ipc/reader.rs\n ##########\n @@ -521,7 +524,111 @@ impl<R: Read + Seek> Reader<R> {\n     }\n }\n \n-impl<R: Read + Seek> RecordBatchReader for Reader<R> {\n+impl<R: Read + Seek> RecordBatchReader for FileReader<R> {\n+    fn schema(&mut self) -> SchemaRef {\n+        self.schema.clone()\n+    }\n+\n+    fn next_batch(&mut self) -> Result<Option<RecordBatch>> {\n+        self.next()\n+    }\n+}\n+\n+/// Arrow Stream reader\n+pub struct StreamReader<R: Read> {\n+    /// Buffered stream reader\n+    reader: BufReader<R>,\n+    /// The schema that is read from the stream's first message\n+    schema: Arc<Schema>,\n+    /// An indicator of whether the strewam is complete.\n+    ///\n+    /// This value is set to `true` the first time the reader's `next()` returns `None`.\n+    finished: bool,\n+}\n+\n+impl<R: Read> StreamReader<R> {\n+    /// Try to create a new stream reader\n+    ///\n+    /// The first message in the stream is the schema, the reader will fail if it does not\n+    /// encounter a schema.\n+    /// To check if the reader is done, use `is_finished(self)`\n+    pub fn try_new(reader: R) -> Result<Self> {\n+        let mut reader = BufReader::new(reader);\n+        // determine metadata length\n+        let mut meta_size: [u8; 4] = [0; 4];\n+        reader.read_exact(&mut meta_size)?;\n+        let meta_len = u32::from_le_bytes(meta_size);\n+\n+        let mut meta_buffer = vec![0; meta_len as usize];\n+        reader.read_exact(&mut meta_buffer)?;\n+\n+        let vecs = &meta_buffer.to_vec();\n+        let message = ipc::get_root_as_message(vecs);\n+        // message header is a Schema, so read it\n+        let ipc_schema: ipc::Schema = message\n+            .header_as_schema()\n+            .expect(\"Arrow Stream must start with a schema\");\n+        let schema = ipc::convert::fb_to_schema(ipc_schema);\n+\n+        Ok(Self {\n+            reader,\n+            schema: Arc::new(schema),\n+            finished: false,\n+        })\n+    }\n+\n+    /// Return the schema of the stream\n+    pub fn schema(&self) -> SchemaRef {\n+        self.schema.clone()\n+    }\n+\n+    /// Read the next record batch\n+    pub fn next(&mut self) -> Result<Option<RecordBatch>> {\n+        if self.finished {\n+            return Ok(None);\n+        }\n+        // determine metadata length\n+        let mut meta_size: [u8; 4] = [0; 4];\n+        self.reader.read_exact(&mut meta_size)?;\n+        let meta_len = u32::from_le_bytes(meta_size);\n+\n+        if meta_len == 0 {\n+            // the stream has ended, mark the reader as finished\n+            self.finished = true;\n+            return Ok(None);\n+        }\n+\n+        let mut meta_buffer = vec![0; meta_len as usize];\n+        self.reader.read_exact(&mut meta_buffer)?;\n+\n+        let vecs = &meta_buffer.to_vec();\n+        let message = ipc::get_root_as_message(vecs);\n+\n+        match message.header_type() {\n+            ipc::MessageHeader::Schema => {\n+                panic!(\"Not expecting a schema when messages are read\")\n+            }\n+            ipc::MessageHeader::RecordBatch => {\n+                let batch = message.header_as_record_batch().unwrap();\n \n Review comment:\n   Done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-31T05:37:14.099+0000",
                    "updated": "2019-12-31T05:37:14.099+0000",
                    "started": "2019-12-31T05:37:14.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364863",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#discussion_r362151646\n \n \n\n ##########\n File path: rust/arrow/src/ipc/reader.rs\n ##########\n @@ -521,7 +524,111 @@ impl<R: Read + Seek> Reader<R> {\n     }\n }\n \n-impl<R: Read + Seek> RecordBatchReader for Reader<R> {\n+impl<R: Read + Seek> RecordBatchReader for FileReader<R> {\n+    fn schema(&mut self) -> SchemaRef {\n+        self.schema.clone()\n+    }\n+\n+    fn next_batch(&mut self) -> Result<Option<RecordBatch>> {\n+        self.next()\n+    }\n+}\n+\n+/// Arrow Stream reader\n+pub struct StreamReader<R: Read> {\n+    /// Buffered stream reader\n+    reader: BufReader<R>,\n+    /// The schema that is read from the stream's first message\n+    schema: Arc<Schema>,\n+    /// An indicator of whether the strewam is complete.\n+    ///\n+    /// This value is set to `true` the first time the reader's `next()` returns `None`.\n+    finished: bool,\n+}\n+\n+impl<R: Read> StreamReader<R> {\n+    /// Try to create a new stream reader\n+    ///\n+    /// The first message in the stream is the schema, the reader will fail if it does not\n+    /// encounter a schema.\n+    /// To check if the reader is done, use `is_finished(self)`\n+    pub fn try_new(reader: R) -> Result<Self> {\n+        let mut reader = BufReader::new(reader);\n+        // determine metadata length\n+        let mut meta_size: [u8; 4] = [0; 4];\n+        reader.read_exact(&mut meta_size)?;\n+        let meta_len = u32::from_le_bytes(meta_size);\n+\n+        let mut meta_buffer = vec![0; meta_len as usize];\n+        reader.read_exact(&mut meta_buffer)?;\n+\n+        let vecs = &meta_buffer.to_vec();\n+        let message = ipc::get_root_as_message(vecs);\n+        // message header is a Schema, so read it\n+        let ipc_schema: ipc::Schema = message\n+            .header_as_schema()\n+            .expect(\"Arrow Stream must start with a schema\");\n \n Review comment:\n   Done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-31T05:37:22.985+0000",
                    "updated": "2019-12-31T05:37:22.985+0000",
                    "started": "2019-12-31T05:37:22.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364864",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013#issuecomment-569867922\n \n \n   Thanks @paddyhoran, I've removed panics in favour of returning `ArrowError`. I used `IoError`, but can change it if I could use a more descriptive error type.\r\n   \r\n   Are you fine with me merging this after CI passes?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-31T05:39:23.634+0000",
                    "updated": "2019-12-31T05:39:23.634+0000",
                    "started": "2019-12-31T05:39:23.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364867",
                    "issueId": "13268896"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/worklog/364982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #6013: ARROW-7193: [Rust] Arrow stream reader\nURL: https://github.com/apache/arrow/pull/6013\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-31T12:56:52.637+0000",
                    "updated": "2019-12-31T12:56:52.637+0000",
                    "started": "2019-12-31T12:56:52.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "364982",
                    "issueId": "13268896"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4e6167a2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a11a46a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fb96d58[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@78ccac31[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bc7b470[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@63d148d0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17f62a5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@a46a1b4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c04f0b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@45faaa20[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63f8d412[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5c8c82d8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 31 12:56:53 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-12-31T12:56:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7193/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-11-17T05:57:54.000+0000",
        "updated": "2019-12-31T12:56:53.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Create Arrow stream reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13268896/comment/17006085",
                    "id": "17006085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6013\n[https://github.com/apache/arrow/pull/6013]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-31T12:56:53.333+0000",
                    "updated": "2019-12-31T12:56:53.333+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z08pnk:",
        "customfield_12314139": null
    }
}