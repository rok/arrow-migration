{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13147617",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13147617",
    "key": "ARROW-2348",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2348/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@61e1bbb5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2de667f1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b0fe072[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4548dd0d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62170d47[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2b48b68b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f60cfe0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@c43dbb4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56e4824e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38769af7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31604dd6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@236cae35[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Mar 25 10:23:23 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-25T10:23:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2348/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-03-23T22:59:40.000+0000",
        "updated": "2018-03-25T10:23:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Now, we have Go native implementation.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Remove Go example",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13147617/comment/16412219",
                    "id": "16412219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou opened a new pull request #1785: ARROW-2348: [GLib] Remove GLib + Go example\nURL: https://github.com/apache/arrow/pull/1785\n \n \n   We should use Apache Arrow for Go instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-23T23:00:02.206+0000",
                    "updated": "2018-03-23T23:00:02.206+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13147617/comment/16412971",
                    "id": "16412971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1785\n[https://github.com/apache/arrow/pull/1785]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-03-25T10:23:22.228+0000",
                    "updated": "2018-03-25T10:23:22.228+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13147617/comment/16412972",
                    "id": "16412972",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1785: ARROW-2348: [GLib] Remove GLib + Go example\nURL: https://github.com/apache/arrow/pull/1785\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/README.md b/c_glib/README.md\nindex d801fc83b..af999d3ab 100644\n--- a/c_glib/README.md\n+++ b/c_glib/README.md\n@@ -158,7 +158,7 @@ based bindings. Here are languages that support GObject Introspection:\n   * Lua: [LGI](https://github.com/pavouk/lgi) should be used.\n     * Examples: `example/lua/` directory.\n \n-  * Go: [Go-gir-generator](https://github.com/linuxdeepin/go-gir-generator) should be used.\n+  * Go: [Go-gir-generator](https://github.com/linuxdeepin/go-gir-generator) should be used. (Note that you should use Apache Arrow for Go than Arrow GLib.)\n \n See also\n [Projects/GObjectIntrospection/Users - GNOME Wiki!](https://wiki.gnome.org/Projects/GObjectIntrospection/Users)\ndiff --git a/c_glib/example/go/Makefile b/c_glib/example/go/Makefile\ndeleted file mode 100644\nindex fa2163ca8..000000000\n--- a/c_glib/example/go/Makefile\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-PROGRAMS =\t\t\t\t\t\\\n-\tread-batch\t\t\t\t\\\n-\tread-stream\t\t\t\t\\\n-\twrite-batch\t\t\t\t\\\n-\twrite-stream\n-\n-all: build\n-\n-generate:\n-\t$$GOPATH/bin/gir-generator\t\t\\\n-\t  -o $$GOPATH/src/gir/arrow-1.0\t\t\\\n-\t  -config arrow-1.0/config.json\t\t\\\n-\t  arrow-1.0/arrow.go.in\n-\n-build: $(PROGRAMS)\n-\n-clean:\n-\trm -f $(PROGRAMS)\n-\n-.SUFFIXES: .go\n-\n-.go:\n-\tgo build -o $@ $<\ndiff --git a/c_glib/example/go/README.md b/c_glib/example/go/README.md\ndeleted file mode 100644\nindex 76eeed78c..000000000\n--- a/c_glib/example/go/README.md\n+++ /dev/null\n@@ -1,83 +0,0 @@\n-<!---\n-  Licensed to the Apache Software Foundation (ASF) under one\n-  or more contributor license agreements.  See the NOTICE file\n-  distributed with this work for additional information\n-  regarding copyright ownership.  The ASF licenses this file\n-  to you under the Apache License, Version 2.0 (the\n-  \"License\"); you may not use this file except in compliance\n-  with the License.  You may obtain a copy of the License at\n-\n-    http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing,\n-  software distributed under the License is distributed on an\n-  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-  KIND, either express or implied.  See the License for the\n-  specific language governing permissions and limitations\n-  under the License.\n--->\n-\n-# Arrow Go example\n-\n-There are Go example codes in this directory.\n-\n-## How to run\n-\n-All example codes use\n-[go-gir-generator](https://github.com/linuxdeepin/go-gir-generator) to\n-use Arrow GLib based bindings.\n-\n-See [../../README.md](../../README.md) how to install Arrow GLib. You\n-can use packages to install Arrow GLib. The following instructions\n-assumes that you've installed Arrow GLib by package. Package name is\n-`libarrow-glib-dev` on Debian GNU/Linux and Ubuntu, `arrow-glib-devel`\n-on CentOS.\n-\n-Here are command lines to install go-gir-generator on Debian GNU/Linux\n-and Ubuntu:\n-\n-```text\n-% sudo apt install -V -y libarrow-glib-dev golang git libgirepository1.0-dev libgudev-1.0-dev\n-% export GOPATH=$HOME\n-% go get github.com/linuxdeepin/go-gir-generator\n-% cd $GOPATH/src/github.com/linuxdeepin/go-gir-generator\n-% make build copyfile\n-% mkdir -p $GOPATH/bin/\n-% cp -a out/gir-generator $GOPATH/bin/\n-% cp -a out/src/gir/ $GOPATH/src/\n-```\n-\n-Now, you can generate Arrow bindings for Go:\n-\n-```text\n-% git clone https://github.com/apache/arrow.git ~/arrow\n-% cd ~/arrow/c_glib/example/go\n-% make generate\n-```\n-\n-Then you can build all example codes:\n-\n-```text\n-% cd ~/arrow/c_glib/example/go\n-% make\n-% ./write-batch  # Write data in batch mode\n-% ./read-batch   # Read the written batch mode data\n-% ./write-stream # Write data in stream mode\n-% ./read-stream  # Read the written stream mode data\n-```\n-\n-## Go example codes\n-\n-Here are example codes in this directory:\n-\n-  * `write-batch.go`: It shows how to write Arrow array to file in\n-    batch mode.\n-\n-  * `read-batch.go`: It shows how to read Arrow array from file in\n-    batch mode.\n-\n-  * `write-stream.go`: It shows how to write Arrow array to file in\n-    stream mode.\n-\n-  * `read-stream.go`: It shows how to read Arrow array from file in\n-    stream mode.\ndiff --git a/c_glib/example/go/arrow-1.0/arrow.go.in b/c_glib/example/go/arrow-1.0/arrow.go.in\ndeleted file mode 100644\nindex 08ee13d25..000000000\n--- a/c_glib/example/go/arrow-1.0/arrow.go.in\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package arrow\n-\n-/*\n-#include \"arrow.gen.h\"\n-#cgo pkg-config: arrow-glib\n-\n-[<.g_list_funcs>]\n-[<.g_error_free>]\n-[<.g_free>]\n-*/\n-import \"C\"\n-import \"unsafe\"\n-\n-import (\n-\t\"gir/glib-2.0\"\n-\t\"gir/gobject-2.0\"\n-\t\"gir/gio-2.0\"\n-)\n-\n-[<.go_utils>]\n-\n-[<.go_bindings>]\ndiff --git a/c_glib/example/go/arrow-1.0/config.json b/c_glib/example/go/arrow-1.0/config.json\ndeleted file mode 100644\nindex eea9a898c..000000000\n--- a/c_glib/example/go/arrow-1.0/config.json\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-{\n-    \"namespace\": \"Arrow\",\n-    \"version\": \"1.0\"\n-}\ndiff --git a/c_glib/example/go/read-batch.go b/c_glib/example/go/read-batch.go\ndeleted file mode 100644\nindex 1472939cd..000000000\n--- a/c_glib/example/go/read-batch.go\n+++ /dev/null\n@@ -1,100 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package main\n-\n-import (\n-\t\"os\"\n-\t\"log\"\n-\t\"fmt\"\n-\t\"strings\"\n-)\n-\n-import \"gir/arrow-1.0\"\n-\n-func PrintColumnValue(column *arrow.Array, i int64) {\n-\tvalueType := column.GetValueType()\n-\tswitch valueType {\n-\tcase arrow.TypeUint8:\n-\t\tfmt.Print(arrow.ToUInt8Array(column).GetValue(i))\n-\tcase arrow.TypeUint16:\n-\t\tfmt.Print(arrow.ToUInt16Array(column).GetValue(i))\n-\tcase arrow.TypeUint32:\n-\t\tfmt.Print(arrow.ToUInt32Array(column).GetValue(i))\n-\tcase arrow.TypeUint64:\n-\t\tfmt.Print(arrow.ToUInt64Array(column).GetValue(i))\n-\tcase arrow.TypeInt8:\n-\t\tfmt.Print(arrow.ToInt8Array(column).GetValue(i))\n-\tcase arrow.TypeInt16:\n-\t\tfmt.Print(arrow.ToInt16Array(column).GetValue(i))\n-\tcase arrow.TypeInt32:\n-\t\tfmt.Print(arrow.ToInt32Array(column).GetValue(i))\n-\tcase arrow.TypeInt64:\n-\t\tfmt.Print(arrow.ToInt64Array(column).GetValue(i))\n-\tcase arrow.TypeFloat:\n-\t\tfmt.Print(arrow.ToFloatArray(column).GetValue(i))\n-\tcase arrow.TypeDouble:\n-\t\tfmt.Print(arrow.ToDoubleArray(column).GetValue(i))\n-\tdefault:\n-\t\tfmt.Printf(\"unknown(%s)\", valueType)\n-\t}\n-}\n-\n-func PrintRecordBatch(recordBatch *arrow.RecordBatch) {\n-\tnColumns := recordBatch.GetNColumns()\n-\tfor i := uint32(0); i < nColumns; i++ {\n-\t\tcolumn := recordBatch.GetColumn(int32(i))\n-\t\tcolumnName := recordBatch.GetColumnName(int32(i))\n-\t\tfmt.Printf(\"  %s: [\", columnName)\n-\t\tnRows := recordBatch.GetNRows()\n-\t\tfor j := int64(0); j < nRows; j++ {\n-\t\t\tif j > 0 {\n-\t\t\t\tfmt.Print(\", \")\n-\t\t\t}\n-\t\t\tPrintColumnValue(column, j)\n-\t\t}\n-\t\tfmt.Println(\"]\")\n-\t}\n-}\n-\n-func main() {\n-\tvar path string\n-\tif len(os.Args) < 2 {\n-\t\tpath = \"/tmp/batch.arrow\"\n-\t} else {\n-\t\tpath = os.Args[1]\n-\t}\n-\tinput, err := arrow.NewMemoryMappedInputStream(path);\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to open path: <%s>: %v\", path, err)\n-\t}\n-\treader, err := arrow.NewRecordBatchFileReader(input)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to parse data: %v\", err)\n-\t}\n-\tvar i uint32\n-\tnRecordBatches := reader.GetNRecordBatches()\n-\tfor i = 0; i < nRecordBatches; i++ {\n-\t\trecordBatch, err := reader.ReadRecordBatch(i)\n-\t\tif err != nil {\n-\t\t\tlog.Fatalf(\"Failed to read record batch[%d]: %v\", i, err)\n-\t\t}\n-\t\tfmt.Println(strings.Repeat(\"=\", 40))\n-\t\tfmt.Printf(\"record-batch[%d]:\\n\", i)\n-\t\tPrintRecordBatch(recordBatch)\n-\t}\n-}\ndiff --git a/c_glib/example/go/read-stream.go b/c_glib/example/go/read-stream.go\ndeleted file mode 100644\nindex ed75a96c9..000000000\n--- a/c_glib/example/go/read-stream.go\n+++ /dev/null\n@@ -1,101 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package main\n-\n-import (\n-\t\"os\"\n-\t\"log\"\n-\t\"fmt\"\n-\t\"strings\"\n-)\n-\n-import \"gir/arrow-1.0\"\n-\n-func PrintColumnValue(column *arrow.Array, i int64) {\n-\tvalueType := column.GetValueType()\n-\tswitch valueType {\n-\tcase arrow.TypeUint8:\n-\t\tfmt.Print(arrow.ToUInt8Array(column).GetValue(i))\n-\tcase arrow.TypeUint16:\n-\t\tfmt.Print(arrow.ToUInt16Array(column).GetValue(i))\n-\tcase arrow.TypeUint32:\n-\t\tfmt.Print(arrow.ToUInt32Array(column).GetValue(i))\n-\tcase arrow.TypeUint64:\n-\t\tfmt.Print(arrow.ToUInt64Array(column).GetValue(i))\n-\tcase arrow.TypeInt8:\n-\t\tfmt.Print(arrow.ToInt8Array(column).GetValue(i))\n-\tcase arrow.TypeInt16:\n-\t\tfmt.Print(arrow.ToInt16Array(column).GetValue(i))\n-\tcase arrow.TypeInt32:\n-\t\tfmt.Print(arrow.ToInt32Array(column).GetValue(i))\n-\tcase arrow.TypeInt64:\n-\t\tfmt.Print(arrow.ToInt64Array(column).GetValue(i))\n-\tcase arrow.TypeFloat:\n-\t\tfmt.Print(arrow.ToFloatArray(column).GetValue(i))\n-\tcase arrow.TypeDouble:\n-\t\tfmt.Print(arrow.ToDoubleArray(column).GetValue(i))\n-\tdefault:\n-\t\tfmt.Printf(\"unknown(%s)\", valueType)\n-\t}\n-}\n-\n-func PrintRecordBatch(recordBatch *arrow.RecordBatch) {\n-\tnColumns := recordBatch.GetNColumns()\n-\tfor i := uint32(0); i < nColumns; i++ {\n-\t\tcolumn := recordBatch.GetColumn(int32(i))\n-\t\tcolumnName := recordBatch.GetColumnName(int32(i))\n-\t\tfmt.Printf(\"  %s: [\", columnName)\n-\t\tnRows := recordBatch.GetNRows()\n-\t\tfor j := int64(0); j < nRows; j++ {\n-\t\t\tif j > 0 {\n-\t\t\t\tfmt.Print(\", \")\n-\t\t\t}\n-\t\t\tPrintColumnValue(column, j)\n-\t\t}\n-\t\tfmt.Println(\"]\")\n-\t}\n-}\n-\n-func main() {\n-\tvar path string\n-\tif len(os.Args) < 2 {\n-\t\tpath = \"/tmp/stream.arrow\"\n-\t} else {\n-\t\tpath = os.Args[1]\n-\t}\n-\tinput, err := arrow.NewMemoryMappedInputStream(path);\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to open path: <%s>: %v\", path, err)\n-\t}\n-\treader, err := arrow.NewRecordBatchStreamReader(input)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to parse data: %v\", err)\n-\t}\n-\tfor i := 0; true; i++ {\n-\t\trecordBatch, err := reader.ReadNext()\n-\t\tif err != nil {\n-\t\t\tlog.Fatalf(\"Failed to read the next record batch: %v\", err)\n-\t\t}\n-\t\tif recordBatch == nil {\n-\t\t\tbreak\n-\t\t}\n-\t\tfmt.Println(strings.Repeat(\"=\", 40))\n-\t\tfmt.Printf(\"record-batch[%d]:\\n\", i)\n-\t\tPrintRecordBatch(recordBatch)\n-\t}\n-}\ndiff --git a/c_glib/example/go/write-batch.go b/c_glib/example/go/write-batch.go\ndeleted file mode 100644\nindex f4d03ed92..000000000\n--- a/c_glib/example/go/write-batch.go\n+++ /dev/null\n@@ -1,214 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package main\n-\n-import (\n-\t\"os\"\n-\t\"log\"\n-)\n-\n-import \"gir/arrow-1.0\"\n-\n-func BuildUInt8Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt8ArrayBuilder()\n-\tfor _, value := range []uint8{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildUInt16Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt16ArrayBuilder()\n-\tfor _, value := range []uint16{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildUInt32Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt32ArrayBuilder()\n-\tfor _, value := range []uint32{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildUInt64Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt64ArrayBuilder()\n-\tfor _, value := range []uint64{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt8Array() *arrow.Array {\n-\tbuilder := arrow.NewInt8ArrayBuilder()\n-\tfor _, value := range []int8{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt16Array() *arrow.Array {\n-\tbuilder := arrow.NewInt16ArrayBuilder()\n-\tfor _, value := range []int16{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt32Array() *arrow.Array {\n-\tbuilder := arrow.NewInt32ArrayBuilder()\n-\tfor _, value := range []int32{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt64Array() *arrow.Array {\n-\tbuilder := arrow.NewInt64ArrayBuilder()\n-\tfor _, value := range []int64{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildFloatArray() *arrow.Array {\n-\tbuilder := arrow.NewFloatArrayBuilder()\n-\tfor _, value := range []float32{1.1, -2.2, 4.4, -8.8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildDoubleArray() *arrow.Array {\n-\tbuilder := arrow.NewDoubleArrayBuilder()\n-\tfor _, value := range []float64{1.1, -2.2, 4.4, -8.8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func main() {\n-\tvar output_path string\n-\tif len(os.Args) < 2 {\n-\t\toutput_path = \"/tmp/batch.arrow\"\n-\t} else {\n-\t\toutput_path = os.Args[1]\n-\t}\n-\n-\tfields := []*arrow.Field{\n-\t\tarrow.NewField(\"uint8\",  arrow.NewUInt8DataType()),\n-\t\tarrow.NewField(\"uint16\", arrow.NewUInt16DataType()),\n-\t\tarrow.NewField(\"uint32\", arrow.NewUInt32DataType()),\n-\t\tarrow.NewField(\"uint64\", arrow.NewUInt64DataType()),\n-\t\tarrow.NewField(\"int8\",   arrow.NewInt8DataType()),\n-\t\tarrow.NewField(\"int16\",  arrow.NewInt16DataType()),\n-\t\tarrow.NewField(\"int32\",  arrow.NewInt32DataType()),\n-\t\tarrow.NewField(\"int64\",  arrow.NewInt64DataType()),\n-\t\tarrow.NewField(\"float\",  arrow.NewFloatDataType()),\n-\t\tarrow.NewField(\"double\", arrow.NewDoubleDataType()),\n-\t}\n-\tschema := arrow.NewSchema(fields)\n-\n-\toutput, err := arrow.NewFileOutputStream(output_path, false)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to open path: <%s>: %v\", output_path, err)\n-\t}\n-\twriter, err := arrow.NewRecordBatchFileWriter(output, schema)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to create writer: %v\", err)\n-\t}\n-\n-\tcolumns := []*arrow.Array{\n-\t\tBuildUInt8Array(),\n-\t\tBuildUInt16Array(),\n-\t\tBuildUInt32Array(),\n-\t\tBuildUInt64Array(),\n-\t\tBuildInt8Array(),\n-\t\tBuildInt16Array(),\n-\t\tBuildInt32Array(),\n-\t\tBuildInt64Array(),\n-\t\tBuildFloatArray(),\n-\t\tBuildDoubleArray(),\n-\t}\n-\n-\trecordBatch, err := arrow.NewRecordBatch(schema, 4, columns)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to create record batch #1: %v\", err)\n-\t}\n-\t_, err = writer.WriteRecordBatch(recordBatch)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to write record batch #1: %v\", err)\n-\t}\n-\n-\tslicedColumns := make([]*arrow.Array, len(columns))\n-\tfor i, column := range columns {\n-\t\tslicedColumns[i] = column.Slice(1, 3)\n-\t}\n-\trecordBatch, err = arrow.NewRecordBatch(schema, 3, slicedColumns)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to create record batch #2: %v\", err)\n-\t}\n-\t_, err = writer.WriteRecordBatch(recordBatch)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to write record batch #2: %v\", err)\n-\t}\n-\n-\twriter.Close()\n-}\ndiff --git a/c_glib/example/go/write-stream.go b/c_glib/example/go/write-stream.go\ndeleted file mode 100644\nindex 7225156a7..000000000\n--- a/c_glib/example/go/write-stream.go\n+++ /dev/null\n@@ -1,215 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package main\n-\n-import (\n-\t\"os\"\n-\t\"log\"\n-)\n-\n-import \"gir/arrow-1.0\"\n-\n-func BuildUInt8Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt8ArrayBuilder()\n-\tfor _, value := range []uint8{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildUInt16Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt16ArrayBuilder()\n-\tfor _, value := range []uint16{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildUInt32Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt32ArrayBuilder()\n-\tfor _, value := range []uint32{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildUInt64Array() *arrow.Array {\n-\tbuilder := arrow.NewUInt64ArrayBuilder()\n-\tfor _, value := range []uint64{1, 2, 4, 8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt8Array() *arrow.Array {\n-\tbuilder := arrow.NewInt8ArrayBuilder()\n-\tfor _, value := range []int8{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt16Array() *arrow.Array {\n-\tbuilder := arrow.NewInt16ArrayBuilder()\n-\tfor _, value := range []int16{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt32Array() *arrow.Array {\n-\tbuilder := arrow.NewInt32ArrayBuilder()\n-\tfor _, value := range []int32{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildInt64Array() *arrow.Array {\n-\tbuilder := arrow.NewInt64ArrayBuilder()\n-\tfor _, value := range []int64{1, -2, 4, -8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildFloatArray() *arrow.Array {\n-\tbuilder := arrow.NewFloatArrayBuilder()\n-\tfor _, value := range []float32{1.1, -2.2, 4.4, -8.8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func BuildDoubleArray() *arrow.Array {\n-\tbuilder := arrow.NewDoubleArrayBuilder()\n-\tfor _, value := range []float64{1.1, -2.2, 4.4, -8.8} {\n-\t\tbuilder.Append(value)\n-\t}\n-\tarray, err := builder.Finish()\n-\t\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to build array: %v\", err)\n-\t}\n-\treturn array\n-}\n-\n-func main() {\n-\tvar output_path string\n-\tif len(os.Args) < 2 {\n-\t\toutput_path = \"/tmp/stream.arrow\"\n-\t} else {\n-\t\toutput_path = os.Args[1]\n-\t}\n-\n-\tfields := []*arrow.Field{\n-\t\tarrow.NewField(\"uint8\",  arrow.NewUInt8DataType()),\n-\t\tarrow.NewField(\"uint16\", arrow.NewUInt16DataType()),\n-\t\tarrow.NewField(\"uint32\", arrow.NewUInt32DataType()),\n-\t\tarrow.NewField(\"uint64\", arrow.NewUInt64DataType()),\n-\t\tarrow.NewField(\"int8\",   arrow.NewInt8DataType()),\n-\t\tarrow.NewField(\"int16\",  arrow.NewInt16DataType()),\n-\t\tarrow.NewField(\"int32\",  arrow.NewInt32DataType()),\n-\t\tarrow.NewField(\"int64\",  arrow.NewInt64DataType()),\n-\t\tarrow.NewField(\"float\",  arrow.NewFloatDataType()),\n-\t\tarrow.NewField(\"double\", arrow.NewDoubleDataType()),\n-\t}\n-\tschema := arrow.NewSchema(fields)\n-\n-\toutput, err := arrow.NewFileOutputStream(output_path, false)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to open path: <%s>: %v\", output_path, err)\n-\t}\n-\twriter, err := arrow.NewRecordBatchStreamWriter(output, schema)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to create writer: %v\", err)\n-\t}\n-\n-\tcolumns := []*arrow.Array{\n-\t\tBuildUInt8Array(),\n-\t\tBuildUInt16Array(),\n-\t\tBuildUInt32Array(),\n-\t\tBuildUInt64Array(),\n-\t\tBuildInt8Array(),\n-\t\tBuildInt16Array(),\n-\t\tBuildInt32Array(),\n-\t\tBuildInt64Array(),\n-\t\tBuildFloatArray(),\n-\t\tBuildDoubleArray(),\n-\t}\n-\n-\trecordBatch, err := arrow.NewRecordBatch(schema, 4, columns)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to create record batch #1: %v\", err)\n-\t}\n-\t_, err = writer.WriteRecordBatch(recordBatch)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to write record batch #1: %v\", err)\n-\t}\n-\n-\tslicedColumns := make([]*arrow.Array, len(columns))\n-\tfor i, column := range columns {\n-\t\tslicedColumns[i] = column.Slice(1, 3)\n-\t}\n-\trecordBatch, err = arrow.NewRecordBatch(schema, 3, slicedColumns)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to create record batch #2: %v\", err)\n-\t}\n-\twriter.WriteRecordBatch(recordBatch)\n-\t_, err = writer.WriteRecordBatch(recordBatch)\n-\tif err != nil {\n-\t\tlog.Fatalf(\"Failed to write record batch #2: %v\", err)\n-\t}\n-\n-\twriter.Close()\n-}\ndiff --git a/ci/travis_before_script_c_glib.sh b/ci/travis_before_script_c_glib.sh\nindex 033fbd7c6..e47fe6841 100755\n--- a/ci/travis_before_script_c_glib.sh\n+++ b/ci/travis_before_script_c_glib.sh\n@@ -58,35 +58,6 @@ elif [ $BUILD_SYSTEM = \"autotools\" ]; then\n   fi\n fi\n \n-if [ $BUILD_SYSTEM = \"autotools\" ]; then\n-  go get github.com/linuxdeepin/go-gir-generator || :\n-  pushd $GOPATH/src/github.com/linuxdeepin/go-gir-generator\n-\n-  # For old GObject Introspection.\n-  # We can remove this when we use more later Ubuntu.\n-  mv lib.in/glib-2.0/config.json{,.orig}\n-  sed \\\n-    -e 's/\\(\"unref_to_array\"\\)/\"get_data\", \\1/g' \\\n-    lib.in/glib-2.0/config.json.orig > lib.in/glib-2.0/config.json\n-\n-  # Workaround. TODO: We should send a patch to go-gir-generator.\n-  rm lib.in/gio-2.0/gdk_workaround.go\n-  mv lib.in/gio-2.0/config.json{,.orig}\n-  sed \\\n-    -e 's/\\(\"Settings\",\\)/\\/\\/ \\1/g' \\\n-    -e 's/\\(\"SettingsBackend\",\\)/\\/\\/ \\1/g' \\\n-    lib.in/gio-2.0/config.json.orig > lib.in/gio-2.0/config.json\n-\n-  mv Makefile{,.orig}\n-  sed -e 's/ gudev-1.0//' Makefile.orig > Makefile\n-  mkdir -p out/src/gir/gudev-1.0\n-  make build copyfile\n-  mkdir -p $GOPATH/bin/\n-  cp -a out/gir-generator $GOPATH/bin/\n-  cp -a out/src/gir/ $GOPATH/src/gir/\n-  popd\n-fi\n-\n pushd $ARROW_C_GLIB_DIR\n \n export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$ARROW_CPP_INSTALL/lib/pkgconfig\ndiff --git a/ci/travis_script_c_glib.sh b/ci/travis_script_c_glib.sh\nindex 3833bb170..b0ddccb20 100755\n--- a/ci/travis_script_c_glib.sh\n+++ b/ci/travis_script_c_glib.sh\n@@ -63,13 +63,4 @@ else\n fi\n popd\n \n-pushd example/go\n-make generate\n-make\n-./write-batch\n-./read-batch\n-./write-stream\n-./read-stream\n-popd\n-\n popd\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-25T10:23:23.020+0000",
                    "updated": "2018-03-25T10:23:23.020+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3rq8n:",
        "customfield_12314139": null
    }
}