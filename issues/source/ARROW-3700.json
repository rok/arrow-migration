{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13196145",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145",
    "key": "ARROW-3700",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "1.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
            "name": "ultrabug",
            "key": "ultrabug",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
            },
            "displayName": "Ultrabug",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
            "name": "ultrabug",
            "key": "ultrabug",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
            },
            "displayName": "Ultrabug",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3700/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/162567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907\n \n \n   The option is configurable, as it may be legitimate to parse empty lines as null values in a single-column CSV file (though that's probably uncommon).\r\n   \r\n   Based on PR #2886.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T16:23:39.639+0000",
                    "updated": "2018-11-05T16:23:39.639+0000",
                    "started": "2018-11-05T16:23:39.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162567",
                    "issueId": "13196145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/162630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907#issuecomment-435971538\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=h1) Report\n   > Merging [#2907](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/67a436aed11cc0b08da4a4f310dacc380e29de0d?src=pr&el=desc) will **increase** coverage by `1.25%`.\n   > The diff coverage is `94.8%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2907/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2907      +/-   ##\n   ==========================================\n   + Coverage   87.22%   88.48%   +1.25%     \n   ==========================================\n     Files         417      348      -69     \n     Lines       65219    59810    -5409     \n   ==========================================\n   - Hits        56886    52921    -3965     \n   + Misses       8239     6889    -1350     \n   + Partials       94        0      -94\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/csv/parser.h](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/options.h](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3Yvb3B0aW9ucy5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/csv-parser-test.cc](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY3N2LXBhcnNlci10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/parser.cc](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLmNj) | `95.74% <100%> (+0.29%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_csv.py](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jc3YucHk=) | `97.43% <100%> (+0.05%)` | :arrow_up: |\n   | [cpp/src/arrow/csv/test-common.h](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvdGVzdC1jb21tb24uaA==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/\\_csv.pyx](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX2Nzdi5weXg=) | `70.87% <50%> (-1.01%)` | :arrow_down: |\n   | [cpp/src/arrow/python/common.h](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vY29tbW9uLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | ... and [85 more](https://codecov.io/gh/apache/arrow/pull/2907/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=footer). Last update [67a436a...c214852](https://codecov.io/gh/apache/arrow/pull/2907?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T17:57:29.898+0000",
                    "updated": "2018-11-05T17:57:29.898+0000",
                    "started": "2018-11-05T17:57:29.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162630",
                    "issueId": "13196145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/162870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907#discussion_r230988733\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -368,6 +394,9 @@ Status BlockParser::DoParseSpecialized(const char* start, uint32_t size, bool is\n     RETURN_NOT_OK(ParseChunk<SpecializedOptions>(&values_writer, &parsed_writer, data,\n                                                  data_end, is_final, rows_in_chunk, &data,\n                                                  &finished_parsing));\n+    if (num_cols_ == -1) {\n \n Review comment:\n   The `num_cols_ == -1` check nested in a `num_cols_ == -1` check is a bit confusing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-06T03:28:40.268+0000",
                    "updated": "2018-11-06T03:28:40.268+0000",
                    "started": "2018-11-06T03:28:40.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162870",
                    "issueId": "13196145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/162871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907#discussion_r230985036\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -193,15 +194,31 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n   int32_t num_cols = 0;\n   char c;\n \n-  values_writer->BeginLine();\n-  parsed_writer->BeginLine();\n+  DCHECK_GT(data_end, data);\n \n   auto FinishField = [&]() { values_writer->FinishField(parsed_writer); };\n \n-  DCHECK_GT(data_end, data);\n+  values_writer->BeginLine();\n+  parsed_writer->BeginLine();\n \n   // The parsing state machine\n \n+  // Special case empty lines: do we start with a newline separator?\n+  c = *data;\n+  if (ARROW_PREDICT_FALSE(c < ' ') && options_.ignore_empty_lines) {\n \n Review comment:\n   I had to think 30 seconds (and lookup an ascii table) to understand the usage of  `c < ' '`, maybe hide this behind a named method/util.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-06T03:28:40.274+0000",
                    "updated": "2018-11-06T03:28:40.274+0000",
                    "started": "2018-11-06T03:28:40.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162871",
                    "issueId": "13196145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/163038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907#discussion_r231110506\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -368,6 +394,9 @@ Status BlockParser::DoParseSpecialized(const char* start, uint32_t size, bool is\n     RETURN_NOT_OK(ParseChunk<SpecializedOptions>(&values_writer, &parsed_writer, data,\n                                                  data_end, is_final, rows_in_chunk, &data,\n                                                  &finished_parsing));\n+    if (num_cols_ == -1) {\n \n Review comment:\n   I'm not sure how to make it less confusing, though. I didn't want to pass an extra out parameter to the subroutine.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-06T12:54:21.168+0000",
                    "updated": "2018-11-06T12:54:21.168+0000",
                    "started": "2018-11-06T12:54:21.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163038",
                    "issueId": "13196145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/163040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907#discussion_r231110557\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -193,15 +194,31 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n   int32_t num_cols = 0;\n   char c;\n \n-  values_writer->BeginLine();\n-  parsed_writer->BeginLine();\n+  DCHECK_GT(data_end, data);\n \n   auto FinishField = [&]() { values_writer->FinishField(parsed_writer); };\n \n-  DCHECK_GT(data_end, data);\n+  values_writer->BeginLine();\n+  parsed_writer->BeginLine();\n \n   // The parsing state machine\n \n+  // Special case empty lines: do we start with a newline separator?\n+  c = *data;\n+  if (ARROW_PREDICT_FALSE(c < ' ') && options_.ignore_empty_lines) {\n \n Review comment:\n   I'll try to find a name :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-06T12:54:30.838+0000",
                    "updated": "2018-11-06T12:54:30.838+0000",
                    "started": "2018-11-06T12:54:30.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163040",
                    "issueId": "13196145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/worklog/164544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2907: ARROW-3700: [C++] Ignore empty lines in CSV files\nURL: https://github.com/apache/arrow/pull/2907\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/csv/csv-parser-test.cc b/cpp/src/arrow/csv/csv-parser-test.cc\nindex 55c69fb525..d64e0afdde 100644\n--- a/cpp/src/arrow/csv/csv-parser-test.cc\n+++ b/cpp/src/arrow/csv/csv-parser-test.cc\n@@ -131,19 +131,22 @@ TEST(BlockParser, Basics) {\n   AssertColumnsEq(parser, {{\"ab\", \"ef\", \"\"}, {\"cd\", \"\", \"ij\"}, {\"\", \"gh\", \"kl\"}});\n }\n \n-TEST(BlockParser, Empty) {\n+TEST(BlockParser, EmptyHeader) {\n+  // Cannot infer number of columns\n+  uint32_t out_size;\n   {\n-    auto csv = MakeCSVData({\"\\n\"});\n+    auto csv = MakeCSVData({\"\"});\n     BlockParser parser(ParseOptions::Defaults());\n-    AssertParseOk(parser, csv);\n-    AssertColumnsEq(parser, {{\"\"}});\n+    ASSERT_RAISES(Invalid, ParseFinal(parser, csv, &out_size));\n   }\n   {\n-    auto csv = MakeCSVData({\"\\n\\n\"});\n+    auto csv = MakeCSVData({\"\\n\"});\n     BlockParser parser(ParseOptions::Defaults());\n-    AssertParseOk(parser, csv);\n-    AssertColumnsEq(parser, {{\"\", \"\"}});\n+    ASSERT_RAISES(Invalid, ParseFinal(parser, csv, &out_size));\n   }\n+}\n+\n+TEST(BlockParser, Empty) {\n   {\n     auto csv = MakeCSVData({\",\\n\"});\n     BlockParser parser(ParseOptions::Defaults());\n@@ -188,6 +191,40 @@ TEST(BlockParser, MaxNumRows) {\n   AssertColumnsEq(parser, {{}});\n }\n \n+TEST(BlockParser, EmptyLinesWithOneColumn) {\n+  auto csv = MakeCSVData({\"a\\n\", \"\\n\", \"b\\r\", \"\\r\", \"c\\r\\n\", \"\\r\\n\", \"d\\n\"});\n+  {\n+    BlockParser parser(ParseOptions::Defaults());\n+    AssertParseOk(parser, csv);\n+    AssertColumnsEq(parser, {{\"a\", \"b\", \"c\", \"d\"}});\n+  }\n+  {\n+    auto options = ParseOptions::Defaults();\n+    options.ignore_empty_lines = false;\n+    BlockParser parser(options);\n+    AssertParseOk(parser, csv);\n+    AssertColumnsEq(parser, {{\"a\", \"\", \"b\", \"\", \"c\", \"\", \"d\"}});\n+  }\n+}\n+\n+TEST(BlockParser, EmptyLinesWithSeveralColumns) {\n+  uint32_t out_size;\n+  auto csv = MakeCSVData({\"a,b\\n\", \"\\n\", \"c,d\\r\", \"\\r\", \"e,f\\r\\n\", \"\\r\\n\", \"g,h\\n\"});\n+  {\n+    BlockParser parser(ParseOptions::Defaults());\n+    AssertParseOk(parser, csv);\n+    AssertColumnsEq(parser, {{\"a\", \"c\", \"e\", \"g\"}, {\"b\", \"d\", \"f\", \"h\"}});\n+  }\n+  {\n+    // A non-ignored empty line is a single value, but two columns are expected\n+    auto options = ParseOptions::Defaults();\n+    options.ignore_empty_lines = false;\n+    BlockParser parser(options);\n+    Status st = Parse(parser, csv, &out_size);\n+    ASSERT_RAISES(Invalid, st);\n+  }\n+}\n+\n TEST(BlockParser, TruncatedData) {\n   BlockParser parser(ParseOptions::Defaults());\n   auto csv = MakeCSVData({\"a,b\\n\", \"c,d\\n\"});\ndiff --git a/cpp/src/arrow/csv/options.h b/cpp/src/arrow/csv/options.h\nindex 6119786301..3b5c309c46 100644\n--- a/cpp/src/arrow/csv/options.h\n+++ b/cpp/src/arrow/csv/options.h\n@@ -42,9 +42,12 @@ struct ARROW_EXPORT ParseOptions {\n   char escape_char = '\\\\';\n   // Whether values are allowed to contain CR (0x0d) and LF (0x0a) characters\n   bool newlines_in_values = false;\n+  // Whether empty lines are ignored.  If false, an empty line represents\n+  // a single empty value (assuming a one-column CSV file).\n+  bool ignore_empty_lines = true;\n \n   // XXX Should this be in ReadOptions?\n-  // Number of header rows to skip\n+  // Number of header rows to skip (including the first row containing column names)\n   int32_t header_rows = 1;\n \n   static ParseOptions Defaults();\ndiff --git a/cpp/src/arrow/csv/parser.cc b/cpp/src/arrow/csv/parser.cc\nindex ea602dfc86..fe7f841f58 100644\n--- a/cpp/src/arrow/csv/parser.cc\n+++ b/cpp/src/arrow/csv/parser.cc\n@@ -41,6 +41,8 @@ static Status MismatchingColumns(int32_t expected, int32_t actual) {\n   return ParseError(s);\n }\n \n+static inline bool IsControlChar(uint8_t c) { return c < ' '; }\n+\n template <bool Quoting, bool Escaping>\n class SpecializedOptions {\n  public:\n@@ -75,6 +77,7 @@ class BlockParser::PresizedParsedWriter {\n \n   int64_t size() { return parsed_size_; }\n \n+ protected:\n   std::shared_ptr<ResizableBuffer> parsed_buffer_;\n   uint8_t* parsed_;\n   int64_t parsed_size_;\n@@ -193,15 +196,31 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n   int32_t num_cols = 0;\n   char c;\n \n-  values_writer->BeginLine();\n-  parsed_writer->BeginLine();\n+  DCHECK_GT(data_end, data);\n \n   auto FinishField = [&]() { values_writer->FinishField(parsed_writer); };\n \n-  DCHECK_GT(data_end, data);\n+  values_writer->BeginLine();\n+  parsed_writer->BeginLine();\n \n   // The parsing state machine\n \n+  // Special case empty lines: do we start with a newline separator?\n+  c = *data;\n+  if (ARROW_PREDICT_FALSE(IsControlChar(c)) && options_.ignore_empty_lines) {\n+    if (c == '\\r') {\n+      data++;\n+      if (data < data_end && *data == '\\n') {\n+        data++;\n+      }\n+      goto EmptyLine;\n+    }\n+    if (c == '\\n') {\n+      data++;\n+      goto EmptyLine;\n+    }\n+  }\n+\n FieldStart:\n   // At the start of a field\n   // Quoting is only recognized at start of field\n@@ -231,7 +250,7 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n   if (ARROW_PREDICT_FALSE(c == options_.delimiter)) {\n     goto FieldEnd;\n   }\n-  if (ARROW_PREDICT_FALSE(c < ' ')) {\n+  if (ARROW_PREDICT_FALSE(IsControlChar(c))) {\n     if (c == '\\r') {\n       // In the middle of a newline separator?\n       if (ARROW_PREDICT_TRUE(data < data_end) && *data == '\\n') {\n@@ -286,11 +305,14 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n   // At the end of line\n   FinishField();\n   ++num_cols;\n-  if (ARROW_PREDICT_FALSE(num_cols_ == -1)) {\n-    num_cols_ = num_cols;\n-  } else if (ARROW_PREDICT_FALSE(num_cols != num_cols_)) {\n-    return MismatchingColumns(num_cols_, num_cols);\n+  if (ARROW_PREDICT_FALSE(num_cols != num_cols_)) {\n+    if (num_cols_ == -1) {\n+      num_cols_ = num_cols;\n+    } else {\n+      return MismatchingColumns(num_cols_, num_cols);\n+    }\n   }\n+  ++num_rows_;\n   *out_data = data;\n   return Status::OK();\n \n@@ -304,6 +326,7 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n     } else if (num_cols != num_cols_) {\n       return MismatchingColumns(num_cols_, num_cols);\n     }\n+    ++num_rows_;\n     *out_data = data;\n     return Status::OK();\n   }\n@@ -311,6 +334,10 @@ Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_\n   values_writer->RollbackLine();\n   parsed_writer->RollbackLine();\n   return Status::OK();\n+\n+EmptyLine:\n+  *out_data = data;\n+  return Status::OK();\n }\n \n template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n@@ -328,7 +355,8 @@ Status BlockParser::ParseChunk(ValuesWriter* values_writer, ParsedWriter* parsed\n       break;\n     }\n     data = line_end;\n-    ++num_rows_;\n+    // This will pessimize chunk size a bit if there are empty lines,\n+    // but that shouldn't be important\n     --rows_in_chunk;\n   }\n   // Append new buffers and update size\n@@ -368,6 +396,9 @@ Status BlockParser::DoParseSpecialized(const char* start, uint32_t size, bool is\n     RETURN_NOT_OK(ParseChunk<SpecializedOptions>(&values_writer, &parsed_writer, data,\n                                                  data_end, is_final, rows_in_chunk, &data,\n                                                  &finished_parsing));\n+    if (num_cols_ == -1) {\n+      return ParseError(\"Empty CSV file or block: cannot infer number of columns\");\n+    }\n   }\n   while (!finished_parsing && data < data_end && num_rows_ < max_num_rows_) {\n     // We know the number of columns, so can presize a values array for\ndiff --git a/cpp/src/arrow/csv/parser.h b/cpp/src/arrow/csv/parser.h\nindex 0e1a4155d2..8a515744ee 100644\n--- a/cpp/src/arrow/csv/parser.h\n+++ b/cpp/src/arrow/csv/parser.h\n@@ -67,7 +67,9 @@ class ARROW_EXPORT BlockParser {\n   /// The last row may lack a trailing line separator.\n   Status ParseFinal(const char* data, uint32_t size, uint32_t* out_size);\n \n+  /// \\brief Return the number of parsed rows\n   int32_t num_rows() const { return num_rows_; }\n+  /// \\brief Return the number of parsed columns\n   int32_t num_cols() const { return num_cols_; }\n   /// \\brief Return the total size in bytes of parsed data\n   uint32_t num_bytes() const { return parsed_size_; }\ndiff --git a/cpp/src/arrow/csv/test-common.h b/cpp/src/arrow/csv/test-common.h\nindex dd0e0cf3af..ac73273da6 100644\n--- a/cpp/src/arrow/csv/test-common.h\n+++ b/cpp/src/arrow/csv/test-common.h\n@@ -38,22 +38,30 @@ std::string MakeCSVData(std::vector<std::string> lines) {\n }\n \n // Make a BlockParser from a vector of lines representing a CSV file\n-void MakeCSVParser(std::vector<std::string> lines, std::shared_ptr<BlockParser>* out) {\n+void MakeCSVParser(std::vector<std::string> lines, ParseOptions options,\n+                   std::shared_ptr<BlockParser>* out) {\n   auto csv = MakeCSVData(lines);\n-  auto parser = std::make_shared<BlockParser>(ParseOptions::Defaults());\n+  auto parser = std::make_shared<BlockParser>(options);\n   uint32_t out_size;\n   ASSERT_OK(parser->Parse(csv.data(), static_cast<uint32_t>(csv.size()), &out_size));\n   ASSERT_EQ(out_size, csv.size()) << \"trailing CSV data not parsed\";\n   *out = parser;\n }\n \n+void MakeCSVParser(std::vector<std::string> lines, std::shared_ptr<BlockParser>* out) {\n+  MakeCSVParser(lines, ParseOptions::Defaults(), out);\n+}\n+\n // Make a BlockParser from a vector of strings representing a single CSV column\n void MakeColumnParser(std::vector<std::string> items, std::shared_ptr<BlockParser>* out) {\n+  auto options = ParseOptions::Defaults();\n+  // Need this to test for null (empty) values\n+  options.ignore_empty_lines = false;\n   std::vector<std::string> lines;\n   for (const auto& item : items) {\n     lines.push_back(item + '\\n');\n   }\n-  MakeCSVParser(lines, out);\n+  MakeCSVParser(lines, options, out);\n   ASSERT_EQ((*out)->num_cols(), 1) << \"Should have seen only 1 CSV column\";\n   ASSERT_EQ((*out)->num_rows(), items.size());\n }\ndiff --git a/python/pyarrow/_csv.pyx b/python/pyarrow/_csv.pyx\nindex 90da157803..37cafa8535 100644\n--- a/python/pyarrow/_csv.pyx\n+++ b/python/pyarrow/_csv.pyx\n@@ -107,6 +107,10 @@ cdef class ParseOptions:\n         Whether newline characters are allowed in CSV values.\n         Setting this to True reduces the performance of multi-threaded\n         CSV reading.\n+    ignore_empty_lines: bool, optional (default True)\n+        Whether empty lines are ignored in CSV input.\n+        If False, an empty line is interpreted as containing a single empty\n+        value (assuming a one-column CSV file).\n     \"\"\"\n     cdef:\n         CCSVParseOptions options\n@@ -114,7 +118,8 @@ cdef class ParseOptions:\n     __slots__ = ()\n \n     def __init__(self, delimiter=None, quote_char=None, double_quote=None,\n-                 escape_char=None, header_rows=None, newlines_in_values=None):\n+                 escape_char=None, header_rows=None, newlines_in_values=None,\n+                 ignore_empty_lines=None):\n         self.options = CCSVParseOptions.Defaults()\n         if delimiter is not None:\n             self.delimiter = delimiter\n@@ -128,6 +133,8 @@ cdef class ParseOptions:\n             self.header_rows = header_rows\n         if newlines_in_values is not None:\n             self.newlines_in_values = newlines_in_values\n+        if ignore_empty_lines is not None:\n+            self.ignore_empty_lines = ignore_empty_lines\n \n     @property\n     def delimiter(self):\n@@ -214,6 +221,19 @@ cdef class ParseOptions:\n     def newlines_in_values(self, value):\n         self.options.newlines_in_values = value\n \n+    @property\n+    def ignore_empty_lines(self):\n+        \"\"\"\n+        Whether empty lines are ignored in CSV input.\n+        If False, an empty line is interpreted as containing a single empty\n+        value (assuming a one-column CSV file).\n+        \"\"\"\n+        return self.options.ignore_empty_lines\n+\n+    @ignore_empty_lines.setter\n+    def ignore_empty_lines(self, value):\n+        self.options.ignore_empty_lines = value\n+\n \n cdef _get_reader(input_file, shared_ptr[InputStream]* out):\n     use_memory_map = False\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex ab6e1b7eba..04bf9f70bb 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -942,6 +942,7 @@ cdef extern from \"arrow/csv/api.h\" namespace \"arrow::csv\" nogil:\n         unsigned char escape_char\n         int32_t header_rows\n         c_bool newlines_in_values\n+        c_bool ignore_empty_lines\n \n         @staticmethod\n         CCSVParseOptions Defaults()\ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex dbfa4f3395..3008198a1a 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -84,6 +84,7 @@ def test_parse_options():\n     assert opts.escape_char is False\n     assert opts.header_rows == 1\n     assert opts.newlines_in_values is False\n+    assert opts.ignore_empty_lines is True\n \n     opts.delimiter = 'x'\n     assert opts.delimiter == 'x'\n@@ -104,17 +105,22 @@ def test_parse_options():\n     opts.newlines_in_values = True\n     assert opts.newlines_in_values is True\n \n+    opts.ignore_empty_lines = False\n+    assert opts.ignore_empty_lines is False\n+\n     opts.header_rows = 2\n     assert opts.header_rows == 2\n \n     opts = cls(delimiter=';', quote_char='%', double_quote=False,\n-               escape_char='\\\\', header_rows=2, newlines_in_values=True)\n+               escape_char='\\\\', header_rows=2, newlines_in_values=True,\n+               ignore_empty_lines=False)\n     assert opts.delimiter == ';'\n     assert opts.quote_char == '%'\n     assert opts.double_quote is False\n     assert opts.escape_char == '\\\\'\n     assert opts.header_rows == 2\n     assert opts.newlines_in_values is True\n+    assert opts.ignore_empty_lines is False\n \n \n class BaseTestCSVRead:\n@@ -192,9 +198,9 @@ def test_no_ending_newline(self):\n \n     def test_trivial(self):\n         # A bit pointless, but at least it shouldn't crash\n-        rows = b\"\\n\\n\"\n+        rows = b\",\\n\\n\"\n         table = self.read_bytes(rows)\n-        assert table.to_pydict() == {'': [None]}\n+        assert table.to_pydict() == {'': []}\n \n     def test_invalid_csv(self):\n         # Various CSV errors\n@@ -204,9 +210,9 @@ def test_invalid_csv(self):\n         rows = b\"a,b,c\\n1,2,3\\n4\"\n         with pytest.raises(pa.ArrowInvalid, match=\"Expected 3 columns, got 1\"):\n             self.read_bytes(rows)\n-        rows = b\"\"\n-        with pytest.raises(pa.ArrowInvalid, match=\"Empty CSV file\"):\n-            self.read_bytes(rows)\n+        for rows in [b\"\", b\"\\n\", b\"\\r\\n\", b\"\\r\", b\"\\n\\n\"]:\n+            with pytest.raises(pa.ArrowInvalid, match=\"Empty CSV file\"):\n+                self.read_bytes(rows)\n \n     def test_options_delimiter(self):\n         rows = b\"a;b,c\\nde,fg;eh\\n\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T23:06:30.291+0000",
                    "updated": "2018-11-09T23:06:30.291+0000",
                    "started": "2018-11-09T23:06:30.290+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164544",
                    "issueId": "13196145"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@776e3203[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c8d3ca8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@602a9df9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@45679528[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48dadd81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3cd4ab95[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8a53ca3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7192364a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f3adb2c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@762b4d5d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57ca271f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@370a7bca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 10 10:37:29 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-09T23:06:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3700/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-11-04T23:19:51.000+0000",
        "updated": "2018-11-10T10:37:29.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a copy/paste of the github issue: https://github.com/apache/arrow/issues/2883\r\n\r\n\u00a0\r\n\r\nHi,\r\n\r\nI was playing with {{pyarrow.csv}} {{read_csv}} and found a rather strange behavior that I'm not sure is normal.\r\n\r\nParsing will fail if the delimiter of the CSV file is a comma and there's a blank line after the header (see {{basic_with_blank.csv}} example)\r\n\r\nExample output:\r\n\r\n{{{{Traceback (most recent call last): File \"sorrow.py\", line 14, in <module> table = pa_csv.read_csv(csv) File \"pyarrow/_csv.pyx\", line 198, in pyarrow._csv.read_csv File \"pyarrow/error.pxi\", line 81, in pyarrow.lib.check_status pyarrow.lib.ArrowInvalid: CSV parse error: Expected 2 columns, got 1 }}}}\r\n\r\nIf I change the CSV delimiter to semicolon, the error disappears and everything is fine!\r\n\r\nI'm providing python code and CSV samples which compares with pandas (which does not suffer from this).\r\n\r\nHope this helps, thanks",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/12946844",
                "id": "12946844",
                "filename": "csv_parse_error.zip",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                    "name": "ultrabug",
                    "key": "ultrabug",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                    },
                    "displayName": "Ultrabug",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2018-11-04T23:19:19.530+0000",
                "size": 706,
                "mimeType": "application/zip",
                "content": "https://issues.apache.org/jira/secure/attachment/12946844/csv_parse_error.zip"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] CSV parser should allow ignoring empty lines",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/issues/2883",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/comment/16675045",
                    "id": "16675045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Indeed the CSV parser doesn't accept blank lines. Is that a common occurrence? Should we always accept them, or only optionally? [~wesmckinn]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T12:12:19.943+0000",
                    "updated": "2018-11-05T12:12:19.943+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/comment/16675052",
                    "id": "16675052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                        "name": "ultrabug",
                        "key": "ultrabug",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                        },
                        "displayName": "Ultrabug",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~pitrou] actually it does, but not when the delimiter is a comma! :)\r\n\r\n\u00a0\r\n\r\nI found this issue when working with [http://www.nyc.gov/html/tlc/html/about/trip_record_data.shtml] and to my understanding it's not that uncommon. (my 2 cents)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                        "name": "ultrabug",
                        "key": "ultrabug",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                        },
                        "displayName": "Ultrabug",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-11-05T12:17:12.014+0000",
                    "updated": "2018-11-05T12:17:12.014+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/comment/16675056",
                    "id": "16675056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "You got it wrong: when the delimiter is a semicolon, your CSV table has only one column, so the empty line is simply an empty value in that column.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T12:20:47.904+0000",
                    "updated": "2018-11-05T12:21:57.089+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/comment/16675076",
                    "id": "16675076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                        "name": "ultrabug",
                        "key": "ultrabug",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                        },
                        "displayName": "Ultrabug",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Indeed [~pitrou] thanks a lot for pointing that out, the output produced by the print didn't catch my eye!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                        "name": "ultrabug",
                        "key": "ultrabug",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                        },
                        "displayName": "Ultrabug",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-11-05T12:36:15.303+0000",
                    "updated": "2018-11-05T12:36:15.303+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/comment/16682051",
                    "id": "16682051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2907\n[https://github.com/apache/arrow/pull/2907]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-09T23:06:21.466+0000",
                    "updated": "2018-11-09T23:06:21.466+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196145/comment/16682331",
                    "id": "16682331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                        "name": "ultrabug",
                        "key": "ultrabug",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                        },
                        "displayName": "Ultrabug",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks everyone!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ultrabug",
                        "name": "ultrabug",
                        "key": "ultrabug",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ultrabug&avatarId=37194",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ultrabug&avatarId=37194",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ultrabug&avatarId=37194",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ultrabug&avatarId=37194"
                        },
                        "displayName": "Ultrabug",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-11-10T10:37:29.441+0000",
                    "updated": "2018-11-10T10:37:29.441+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|s003ww:",
        "customfield_12314139": null
    }
}