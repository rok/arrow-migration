{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13295680",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680",
    "key": "ARROW-8311",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8311/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 65,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/414451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804\n \n \n   This change adds the following push style reader classes:\r\n   \r\n     * ipc::MessageEmitter\r\n     * ipc::RecordBatchStreamEmitter\r\n   \r\n   Push style readers don't read data from stream directly. They receive\r\n   already read data by users. This style is useful with event driven\r\n   style IO API. We can't read data from stream directly in event driven\r\n   style IO API. We just receive already read data from event driven style\r\n   IO API like:\r\n   \r\n       void on_read(const uint8_t* data, size_t data_size) {\r\n          process_data(data, data_size);\r\n       }\r\n       register_read_event(on_read);\r\n       run_event_loop();\r\n   \r\n   We can't use the current reader API with event driven style IO API but\r\n   we can use this push style reader with event driven style IO API.\r\n   \r\n   The current Message reader is changed to use ipc::MessageEmitter\r\n   internally. So we don't have duplicated reader implementation. And no\r\n   performance regression with our benchmark.\r\n   \r\n   Before:\r\n   \r\n       Running release/arrow-ipc-read-write-benchmark\r\n       Run on (12 X 4600 MHz CPU s)\r\n       CPU Caches:\r\n         L1 Data 32K (x6)\r\n         L1 Instruction 32K (x6)\r\n         L2 Unified 256K (x6)\r\n         L3 Unified 12288K (x1)\r\n       Load Average: 0.85, 0.84, 0.65\r\n       -----------------------------------------------------------------------------------------\r\n       Benchmark                               Time             CPU   Iterations UserCounters...\r\n       -----------------------------------------------------------------------------------------\r\n       ReadRecordBatch/1/real_time           886 ns          886 ns       774286 bytes_per_second=1102.15G/s\r\n       ReadRecordBatch/4/real_time          1601 ns         1601 ns       436258 bytes_per_second=610.078G/s\r\n       ReadRecordBatch/16/real_time         4819 ns         4820 ns       143568 bytes_per_second=202.663G/s\r\n       ReadRecordBatch/64/real_time        18291 ns        18296 ns        38586 bytes_per_second=53.3893G/s\r\n       ReadRecordBatch/256/real_time       84852 ns        84872 ns         8317 bytes_per_second=11.5091G/s\r\n       ReadRecordBatch/1024/real_time     341091 ns       341168 ns         2049 bytes_per_second=2.86306G/s\r\n       ReadRecordBatch/4096/real_time    1368049 ns      1368361 ns          511 bytes_per_second=730.968M/s\r\n       ReadRecordBatch/8192/real_time    2676778 ns      2677341 ns          265 bytes_per_second=373.584M/s\r\n   \r\n   After:\r\n   \r\n       Running release/arrow-ipc-read-write-benchmark\r\n       Run on (12 X 4600 MHz CPU s)\r\n       CPU Caches:\r\n         L1 Data 32K (x6)\r\n         L1 Instruction 32K (x6)\r\n         L2 Unified 256K (x6)\r\n         L3 Unified 12288K (x1)\r\n       Load Average: 0.88, 0.85, 0.66\r\n       -----------------------------------------------------------------------------------------\r\n       Benchmark                               Time             CPU   Iterations UserCounters...\r\n       -----------------------------------------------------------------------------------------\r\n       ReadRecordBatch/1/real_time           891 ns          891 ns       769579 bytes_per_second=1095.57G/s\r\n       ReadRecordBatch/4/real_time          1599 ns         1599 ns       435756 bytes_per_second=610.746G/s\r\n       ReadRecordBatch/16/real_time         4834 ns         4835 ns       144374 bytes_per_second=202.027G/s\r\n       ReadRecordBatch/64/real_time        18204 ns        18206 ns        38190 bytes_per_second=53.6465G/s\r\n       ReadRecordBatch/256/real_time       84142 ns        84154 ns         8309 bytes_per_second=11.6061G/s\r\n       ReadRecordBatch/1024/real_time     343105 ns       343148 ns         2035 bytes_per_second=2.84625G/s\r\n       ReadRecordBatch/4096/real_time    1399287 ns      1399484 ns          511 bytes_per_second=714.65M/s\r\n       ReadRecordBatch/8192/real_time    2641529 ns      2641845 ns          263 bytes_per_second=378.569M/s\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T03:19:06.066+0000",
                    "updated": "2020-04-02T03:19:06.066+0000",
                    "started": "2020-04-02T03:19:06.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414451",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/414455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-607601470\n \n \n   https://issues.apache.org/jira/browse/ARROW-8311\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T03:31:33.201+0000",
                    "updated": "2020-04-02T03:31:33.201+0000",
                    "started": "2020-04-02T03:31:33.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414455",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/414626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-607788806\n \n \n   Thank you. I think that we should get the API as general as possible, so I would suggest the following:\r\n   ```c++\r\n   class ARROW_EXPORT Receiver {\r\n    public:\r\n     // Subclasses should override the methods they're interested in.\r\n     // Default implementations return NotImplemented.\r\n     virtual Status RecordBatchReceived(std::shared_ptr<RecordBatch>);\r\n     virtual Status TensorReceived(std::shared_ptr<Tensor>);\r\n     virtual Status SparseTensorReceived(std::shared_ptr<SparseTensor>);\r\n   };\r\n   ```\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T11:29:37.621+0000",
                    "updated": "2020-04-02T11:29:37.621+0000",
                    "started": "2020-04-02T11:29:37.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414626",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/414627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-607789051\n \n \n   (this will also be useful for Flight @lidavidm )\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T11:30:16.085+0000",
                    "updated": "2020-04-02T11:30:16.085+0000",
                    "started": "2020-04-02T11:30:16.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414627",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/414658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-607813046\n \n \n   This will be very useful! Once this lands I'll see about wiring this up to the gRPC async APIs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T12:23:24.099+0000",
                    "updated": "2020-04-02T12:23:24.099+0000",
                    "started": "2020-04-02T12:23:24.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414658",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/415209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-608164553\n \n \n   @pitrou Thanks for the suggestion! It's a good idea.\r\n   I've added a `arrow::Reciver` only with `MessageReceived()` and `RecordBatchReceived()`. We can add more `XXXReceived()` when we need.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-03T00:28:59.750+0000",
                    "updated": "2020-04-03T00:28:59.750+0000",
                    "started": "2020-04-03T00:28:59.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415209",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/415216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-608167285\n \n \n   @lidavidm Thanks! I can help you when you work on it.\r\n   \r\n   The code will look like the followings:\r\n   \r\n   ```c++\r\n   void on_read(const uint8_t* data, size_t data_size) {\r\n     std::shared_ptr<Buffer> chunk;\r\n     arrow::Buffer(data, data_size).Copy(0, data_size, &chunk);\r\n     emitter_.Consume(chunk);\r\n     while (!chunks_.empty()) {\r\n       if (chunks_[0].use_count() > 1) {\r\n         break;\r\n       }\r\n       chunks_.erase(chunks_.begin());\r\n     }\r\n     if (chunk.use_count() > 1) {\r\n       chunks_.push_back(std::move(chunk));\r\n     }\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-03T00:40:02.006+0000",
                    "updated": "2020-04-03T00:40:02.006+0000",
                    "started": "2020-04-03T00:40:02.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415216",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/417353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-610118995\n \n \n   Sorry about not reviewing this yet, it's on my \"short list\".\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T01:17:09.868+0000",
                    "updated": "2020-04-07T01:17:09.868+0000",
                    "started": "2020-04-07T01:17:09.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417353",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/417595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-610289542\n \n \n   Thanks for the update @kou.\r\n   \r\n   I don't think it makes sense to have both `MessageReceived` and `RecordBatchReceived`, since message and record batch are different levels of abstraction. I don't see how `MessageReceived` can be useful, to be honest (do you expect the consumer to reimplement message decoding?).\r\n   \r\n   Once we agree on the basic abstraction, I will make a more thorough review.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T09:48:21.415+0000",
                    "updated": "2020-04-07T09:48:21.415+0000",
                    "started": "2020-04-07T09:48:21.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417595",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/417988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-610627183\n \n \n   I thought you suggested that we add a general receiver API like existing `arrow::Iterator` instead of multiple receiver APIs for each received object. I thought that it's a good idea because it simplifies our API.\r\n   \r\n   If we have a receiver API for `arrow::ipc::Message` and a receiver API for `arrow::RecordBatch`, `arrow::Tensor`, `arrow::SparseTensor` and so on. I prefer receiver APIs for each object (`MessageReceiver`, `RecordBatchReceiver` and so on) to two receiver APIs (for `arrow::ipc::Message` and for others). If we have receiver APIs for each object, users can detect \"forget to implement\" error on compile time because we can provide an abstract receiver class with `virtual Status Received(...) = 0`.\r\n   \r\n   We don't have data format that mixes RecordBatch, Tensor and SparseTensor for now. Users will want to implement one `Received()` API for most case. Compile time error detection will help users.\r\n   \r\n   > I don't see how `MessageReceived` can be useful, to be honest (do you expect the consumer to reimplement message decoding?).\r\n   \r\n   This pull request implements the following push style readers:\r\n   \r\n     * `arrow::ipc::MessageEmitter` for `arrow::ipc::Message`\r\n     * `arrow::ipc::RecordBatchStreamEmitter` for `arrow::RecordBatch`\r\n   \r\n   `arrow::ipc::RecordBatchStreamerEmitter` is implemented with `arrow::ipc::MessageEmitter`. `arrow::ipc::MessageEmitter` uses `MessageReceived` API.\r\n   \r\n   For `arrow::Tensor`, we don't have convenience API to read multiple `arrow::Tensor`s. We need to call `arrow::ipc::ReadTensor()` multiple times but this is not push style:\r\n   \r\n   ```c++\r\n   while (true) {\r\n     auto tensor = arrow::ipc::ReadTensor(input);\r\n     if (!tensor.status().ok()) {\r\n       break; // tensor.status() will be arrow::Status::Invalid\r\n      }\r\n     // process tensor\r\n   }\r\n   ```\r\n   \r\n   Users can implement push style `arrow::Tensor` reader with `MessageReceived` API (I think that we provide a convenient API instead if this use case makes sence):\r\n   \r\n   ```c++\r\n   class TensorProcessor : public arrow::Receiver {\r\n     arrow::Status MessageReceive(arrow::unique_ptr<Message> message) override {\r\n       ARROW_ASSIGN_OR_RAISE(auto tensor, arrow::ipc::ReadTensor(*message));\r\n      // process tensor\r\n     }\r\n   };\r\n   \r\n   TensorProcesor processor;\r\n   arrow::ipc::MessageEmitter emitter(&processor);\r\n   while (emitter.state() != arrow::ipc::MessageEmitter::State::EOS) {\r\n     emitter.Consume(data, data_size);\r\n   }\r\n   ```\r\n   \r\n   Normally, users should not use `MessageReceived` API because this `arrow::ipc::Message` is a low level object. Advanced users may use it.\r\n   \r\n   Do you prefer the following API?\r\n   \r\n   ```c++\r\n   // only for arrow::ipc::Message\r\n   class ARROW_EXPORT MessageReceiver {\r\n     virtual Status Receive(std::unique_ptr<Message> message) = 0;\r\n   };\r\n   \r\n   // for others\r\n   class ARROW_EXPORT Receiver {\r\n     // Default implementations return NotImplemented.\r\n     virtual Status RecordBatchReceived(std::shared_ptr<RecordBatch> record_batch);\r\n     virtual Status TensorReceived(std::shared_ptr<Tensor> tensor);\r\n     virtual Status SparseTensorReceived(std::shared_ptr<SparseTensor> tensor);\r\n   };\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T21:22:05.089+0000",
                    "updated": "2020-04-07T21:22:05.089+0000",
                    "started": "2020-04-07T21:22:05.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417988",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-610649303\n \n \n   > Do you prefer the following API? [snip]\r\n   \r\n   Yes. This is what I meant. Either you decode messages yourself and you implement `MessageReceiver`, or you let Arrow decode them and you implement `Receiver`.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T22:21:45.291+0000",
                    "updated": "2020-04-07T22:21:45.291+0000",
                    "started": "2020-04-07T22:21:45.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418031",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-610685573\n \n \n   OK. I've changed to use the API.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T00:28:59.286+0000",
                    "updated": "2020-04-08T00:28:59.286+0000",
                    "started": "2020-04-08T00:28:59.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418098",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#issuecomment-610705109\n \n \n   I started reviewing, will try to finish soon\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T01:45:36.696+0000",
                    "updated": "2020-04-08T01:45:36.696+0000",
                    "started": "2020-04-08T01:45:36.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418119",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405219022\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/message.h\n ##########\n @@ -163,6 +165,135 @@ class ARROW_EXPORT Message {\n \n ARROW_EXPORT std::string FormatMessageType(Message::Type type);\n \n+/// \\class MessageReceiver\n+/// \\brief An abstract class to receive read messages from\n+/// MessageEmitter.\n+class ARROW_EXPORT MessageReceiver {\n+ public:\n+  virtual ~MessageReceiver() = default;\n+\n+  /// \\brief Receive a message.\n+  ///\n+  /// MessageEmitter calls this method when it read a message. This\n+  /// method is called multiple times when the target stream stream\n+  /// has multiple messages.\n+  ///\n+  /// \\param[in] message a read message\n+  /// \\return Status\n+  virtual Status Received(std::unique_ptr<Message> message) = 0;\n+};\n+\n+/// \\class MessageReceiverAssign\n+/// \\brief Assign a message read by MessageEmitter.\n+class ARROW_EXPORT MessageReceiverAssign : public MessageReceiver {\n+ public:\n+  /// \\brief Construct a message receiver that assign a read message\n+  /// to the specified location.\n+  ///\n+  /// \\param[in] message a location to store the received message\n+  explicit MessageReceiverAssign(std::unique_ptr<Message>* message) : message_(message) {}\n+\n+  virtual ~MessageReceiverAssign() = default;\n+\n+  Status Received(std::unique_ptr<Message> message) override {\n+    *message_ = std::move(message);\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::unique_ptr<Message>* message_;\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(MessageReceiverAssign);\n+};\n+\n+/// \\class MessageEmitter\n+/// \\brief Push style message reader that receives data from user.\n+class ARROW_EXPORT MessageEmitter {\n+ public:\n+  /// \\brief State for reading a message\n+  enum State {\n+    /// The initial state. It requires one of the followings as the next data:\n+    ///\n+    ///   * int32_t continuation token\n+    ///   * int32_t end-of-stream mark (== 0)\n+    ///   * int32_t metadata length (backward compatibility for\n+    ///     reading old IPC messages produced prior to version 0.15.0\n+    INITIAL,\n+\n+    /// It requires int32_t metadata length.\n+    METADATA_LENGTH,\n+\n+    /// It requires metadata.\n+    METADATA,\n+\n+    /// It requires message body.\n+    BODY,\n+\n+    /// The end-of-stream state. No more data is processed.\n+    EOS,\n+  };\n+\n+  /// \\brief Construct a message emitter.\n+  ///\n+  /// \\param[in] receiver a MessageReceiver that receives read messages\n+  /// \\param[in] pool an optional MemoryPool to copy metadata on the\n+  /// CPU, if required\n+  explicit MessageEmitter(MessageReceiver* receiver,\n+                          MemoryPool* pool = default_memory_pool());\n+\n+  /// \\brief Construct a message emitter with the specified state.\n+  ///\n+  /// This is a construct for advanced users that know how to read\n+  /// Message.\n+  ///\n+  /// \\param[in] receiver a MessageReceiver that receives read messages\n+  /// \\param[in] initial_state an initial state of the emitter\n+  /// \\param[in] initial_next_required_size an initial size to run\n+  /// the next action\n \n Review comment:\n   The meaning of this parameter is not totally clear. Maybe \"the number of bytes needed\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.354+0000",
                    "updated": "2020-04-08T03:23:50.354+0000",
                    "started": "2020-04-08T03:23:50.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418181",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405199081\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/message.h\n ##########\n @@ -163,6 +165,135 @@ class ARROW_EXPORT Message {\n \n ARROW_EXPORT std::string FormatMessageType(Message::Type type);\n \n+/// \\class MessageReceiver\n+/// \\brief An abstract class to receive read messages from\n+/// MessageEmitter.\n+class ARROW_EXPORT MessageReceiver {\n+ public:\n+  virtual ~MessageReceiver() = default;\n+\n+  /// \\brief Receive a message.\n+  ///\n+  /// MessageEmitter calls this method when it read a message. This\n+  /// method is called multiple times when the target stream stream\n+  /// has multiple messages.\n+  ///\n+  /// \\param[in] message a read message\n+  /// \\return Status\n+  virtual Status Received(std::unique_ptr<Message> message) = 0;\n+};\n \n Review comment:\n   Nit: what do you think about calling this `OnReceive`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.354+0000",
                    "updated": "2020-04-08T03:23:50.354+0000",
                    "started": "2020-04-08T03:23:50.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418182",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405222439\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/read_write_benchmark.cc\n ##########\n @@ -98,7 +98,94 @@ static void ReadRecordBatch(benchmark::State& state) {  // NOLINT non-const refe\n   state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize);\n }\n \n+static void ReadStream(benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(kTotalSize & 2);\n+  auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+  io::BufferOutputStream stream(buffer);\n+\n+  auto writer_result = ipc::NewStreamWriter(&stream, record_batch->schema(), options);\n+  if (!writer_result.status().ok()) {\n+    state.SkipWithError(\"Failed to create writer!\");\n \n Review comment:\n   We might change the `ABORT_NOT_OK` used in some other benchmarks to instead use this API\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.410+0000",
                    "updated": "2020-04-08T03:23:50.410+0000",
                    "started": "2020-04-08T03:23:50.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418183",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405219312\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/message.h\n ##########\n @@ -163,6 +165,135 @@ class ARROW_EXPORT Message {\n \n ARROW_EXPORT std::string FormatMessageType(Message::Type type);\n \n+/// \\class MessageReceiver\n+/// \\brief An abstract class to receive read messages from\n+/// MessageEmitter.\n+class ARROW_EXPORT MessageReceiver {\n+ public:\n+  virtual ~MessageReceiver() = default;\n+\n+  /// \\brief Receive a message.\n+  ///\n+  /// MessageEmitter calls this method when it read a message. This\n+  /// method is called multiple times when the target stream stream\n+  /// has multiple messages.\n+  ///\n+  /// \\param[in] message a read message\n+  /// \\return Status\n+  virtual Status Received(std::unique_ptr<Message> message) = 0;\n+};\n+\n+/// \\class MessageReceiverAssign\n+/// \\brief Assign a message read by MessageEmitter.\n+class ARROW_EXPORT MessageReceiverAssign : public MessageReceiver {\n+ public:\n+  /// \\brief Construct a message receiver that assign a read message\n+  /// to the specified location.\n+  ///\n+  /// \\param[in] message a location to store the received message\n+  explicit MessageReceiverAssign(std::unique_ptr<Message>* message) : message_(message) {}\n+\n+  virtual ~MessageReceiverAssign() = default;\n+\n+  Status Received(std::unique_ptr<Message> message) override {\n+    *message_ = std::move(message);\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::unique_ptr<Message>* message_;\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(MessageReceiverAssign);\n+};\n+\n+/// \\class MessageEmitter\n+/// \\brief Push style message reader that receives data from user.\n+class ARROW_EXPORT MessageEmitter {\n+ public:\n+  /// \\brief State for reading a message\n+  enum State {\n+    /// The initial state. It requires one of the followings as the next data:\n+    ///\n+    ///   * int32_t continuation token\n+    ///   * int32_t end-of-stream mark (== 0)\n+    ///   * int32_t metadata length (backward compatibility for\n+    ///     reading old IPC messages produced prior to version 0.15.0\n+    INITIAL,\n+\n+    /// It requires int32_t metadata length.\n+    METADATA_LENGTH,\n+\n+    /// It requires metadata.\n+    METADATA,\n+\n+    /// It requires message body.\n+    BODY,\n+\n+    /// The end-of-stream state. No more data is processed.\n+    EOS,\n+  };\n+\n+  /// \\brief Construct a message emitter.\n+  ///\n+  /// \\param[in] receiver a MessageReceiver that receives read messages\n+  /// \\param[in] pool an optional MemoryPool to copy metadata on the\n+  /// CPU, if required\n+  explicit MessageEmitter(MessageReceiver* receiver,\n+                          MemoryPool* pool = default_memory_pool());\n+\n+  /// \\brief Construct a message emitter with the specified state.\n+  ///\n+  /// This is a construct for advanced users that know how to read\n+  /// Message.\n+  ///\n+  /// \\param[in] receiver a MessageReceiver that receives read messages\n+  /// \\param[in] initial_state an initial state of the emitter\n+  /// \\param[in] initial_next_required_size an initial size to run\n+  /// the next action\n+  /// \\param[in] pool an optional MemoryPool to copy metadata on the\n+  /// CPU, if required\n+  MessageEmitter(MessageReceiver* receiver, State initial_state,\n+                 int64_t initial_next_required_size,\n+                 MemoryPool* pool = default_memory_pool());\n+\n+  virtual ~MessageEmitter();\n+\n+  /// \\brief Feed data to the emitter as a raw data.\n+  ///\n+  /// If the emitter can read one or more messages by the data, the\n+  /// emitter emits read batches by calling receiver->Receive()\n+  /// multiple times.\n+  ///\n+  /// \\param[in] data a raw data to be processed. This data isn't\n+  /// copied. The passed memory must be kept alive through message\n+  /// processing.\n+  /// \\param[in] size raw data size.\n+  /// \\return Status\n+  Status Consume(const uint8_t* data, int64_t size);\n+\n+  /// \\brief Feed data to the emitter as a Buffer.\n+  ///\n+  /// If the emitter can read one or more messages by the Buffer, the\n+  /// emitter emits read messages by calling receiver->Receive()\n+  /// multiple times.\n+  ///\n+  /// \\param[in] buffer a Buffer to be processed.\n+  /// \\return Status\n+  Status Consume(std::shared_ptr<Buffer> buffer);\n \n Review comment:\n   Does this function need to retain ownership of the Buffer (versus `const Buffer&`)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.474+0000",
                    "updated": "2020-04-08T03:23:50.474+0000",
                    "started": "2020-04-08T03:23:50.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418184",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405224595\n \n \n\n ##########\n File path: cpp/src/arrow/util/receiver.h\n ##########\n @@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+namespace ipc {\n+\n+class Message;\n+\n+}  // namespace ipc\n \n Review comment:\n   This isn't used. You envision a scope for this receiver beyond IPC (so arrow/util is better than arrow/ipc?)? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.483+0000",
                    "updated": "2020-04-08T03:23:50.483+0000",
                    "started": "2020-04-08T03:23:50.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418185",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405224359\n \n \n\n ##########\n File path: cpp/src/arrow/util/receiver.h\n ##########\n @@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+namespace ipc {\n+\n+class Message;\n+\n+}  // namespace ipc\n+\n+class RecordBatch;\n+\n+/// \\class Receiver\n+/// \\brief A general receiver class to receive objects.\n+///\n+/// You must implement receiver methods for objects you want to receive.\n+class ARROW_EXPORT Receiver {\n+ public:\n+  virtual ~Receiver() = default;\n+\n+  /// \\brief Receive a record batch.\n+  ///\n+  /// \\param[in] record_batch a record batch received\n+  /// \\return Status\n+  ///\n+  /// \\see RecordBatchStreamEmitter\n+  virtual Status RecordBatchReceived(std::shared_ptr<RecordBatch> record_batch);\n \n Review comment:\n   Style choice: We could use the same function name for all the receivers, like `Receive`, but with different input argument types. Not sure if all compilers would be happy about that.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.684+0000",
                    "updated": "2020-04-08T03:23:50.684+0000",
                    "started": "2020-04-08T03:23:50.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418186",
                    "issueId": "13295680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/worklog/418187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6804: ARROW-8311: [C++] Add push style stream format reader\nURL: https://github.com/apache/arrow/pull/6804#discussion_r405230362\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/message.cc\n ##########\n @@ -421,6 +428,366 @@ Status WriteMessage(const Buffer& message, const IpcWriteOptions& options,\n   return Status::OK();\n }\n \n+// ----------------------------------------------------------------------\n+// Implement MessageEmitter\n+\n+static constexpr auto kMessageEmitterNextRequiredSizeInitial = sizeof(int32_t);\n+static constexpr auto kMessageEmitterNextRequiredSizeMetadataLength = sizeof(int32_t);\n+\n+class MessageEmitter::MessageEmitterImpl {\n+ public:\n+  explicit MessageEmitterImpl(MessageReceiver* receiver, State initial_state,\n+                              int64_t initial_next_required_size, MemoryPool* pool)\n+      : receiver_(receiver),\n+        pool_(pool),\n+        state_(initial_state),\n+        next_required_size_(initial_next_required_size),\n+        chunks_(),\n+        buffered_size_(0),\n+        metadata_(nullptr) {}\n+\n+  Status ConsumeData(const uint8_t* data, int64_t size) {\n+    if (buffered_size_ == 0) {\n+      while (size > 0 && size >= next_required_size_) {\n+        auto used_size = next_required_size_;\n+        switch (state_) {\n+          case State::INITIAL:\n+            RETURN_NOT_OK(ConsumeInitialData(data, next_required_size_));\n+            break;\n+          case State::METADATA_LENGTH:\n+            RETURN_NOT_OK(ConsumeMetadataLengthData(data, next_required_size_));\n+            break;\n+          case State::METADATA: {\n+            auto buffer = std::make_shared<Buffer>(data, next_required_size_);\n+            RETURN_NOT_OK(ConsumeMetadataBuffer(&buffer));\n+          } break;\n+          case State::BODY: {\n+            auto buffer = std::make_shared<Buffer>(data, next_required_size_);\n+            RETURN_NOT_OK(ConsumeBodyBuffer(&buffer));\n+          } break;\n+          case State::EOS:\n+            return Status::OK();\n+        }\n+        data += used_size;\n+        size -= used_size;\n+      }\n+    }\n+\n+    if (size == 0) {\n+      return Status::OK();\n+    }\n+\n+    chunks_.push_back(std::make_shared<Buffer>(data, size));\n+    buffered_size_ += size;\n+    return ConsumeChunks();\n+  }\n+\n+  Status ConsumeBuffer(std::shared_ptr<Buffer>* buffer) {\n+    if (buffered_size_ == 0) {\n+      while ((*buffer)->size() >= next_required_size_) {\n+        auto used_size = next_required_size_;\n+        switch (state_) {\n+          case State::INITIAL:\n+            RETURN_NOT_OK(ConsumeInitialBuffer(buffer));\n+            break;\n+          case State::METADATA_LENGTH:\n+            RETURN_NOT_OK(ConsumeMetadataLengthBuffer(buffer));\n+            break;\n+          case State::METADATA:\n+            if ((*buffer)->size() == next_required_size_) {\n+              return ConsumeMetadataBuffer(buffer);\n+            } else {\n+              auto sliced_buffer = SliceBuffer(*buffer, 0, next_required_size_);\n+              RETURN_NOT_OK(ConsumeMetadataBuffer(&sliced_buffer));\n+            }\n+            break;\n+          case State::BODY:\n+            if ((*buffer)->size() == next_required_size_) {\n+              return ConsumeBodyBuffer(buffer);\n+            } else {\n+              auto sliced_buffer = SliceBuffer(*buffer, 0, next_required_size_);\n+              RETURN_NOT_OK(ConsumeBodyBuffer(&sliced_buffer));\n+            }\n+            break;\n+          case State::EOS:\n+            return Status::OK();\n+        }\n+        if ((*buffer)->size() == used_size) {\n+          return Status::OK();\n+        }\n+        *buffer = SliceBuffer(*buffer, used_size);\n+      }\n+    }\n+\n+    if ((*buffer)->size() == 0) {\n+      return Status::OK();\n+    }\n+\n+    buffered_size_ += (*buffer)->size();\n+    chunks_.push_back(std::move(*buffer));\n+    return ConsumeChunks();\n+  }\n+\n+  int64_t next_required_size() const { return next_required_size_; }\n+\n+  MessageEmitter::State state() const { return state_; }\n+\n+ private:\n+  Status ConsumeChunks() {\n+    while (state_ != State::EOS) {\n+      if (buffered_size_ < next_required_size_) {\n+        return Status::OK();\n+      }\n+\n+      switch (state_) {\n+        case State::INITIAL:\n+          RETURN_NOT_OK(ConsumeInitialChunks());\n+          break;\n+        case State::METADATA_LENGTH:\n+          RETURN_NOT_OK(ConsumeMetadataLengthChunks());\n+          break;\n+        case State::METADATA:\n+          RETURN_NOT_OK(ConsumeMetadataChunks());\n+          break;\n+        case State::BODY:\n+          RETURN_NOT_OK(ConsumeBodyChunks());\n+          break;\n+        case State::EOS:\n+          return Status::OK();\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status ConsumeInitialData(const uint8_t* data, int64_t size) {\n+    return ConsumeInitial(util::SafeLoadAs<int32_t>(data));\n+  }\n+\n+  Status ConsumeInitialBuffer(std::shared_ptr<Buffer>* buffer) {\n+    ARROW_ASSIGN_OR_RAISE(auto continuation, ConsumeDataBufferInt32(buffer));\n+    return ConsumeInitial(continuation);\n+  }\n+\n+  Status ConsumeInitialChunks() {\n+    int32_t continuation = 0;\n+    RETURN_NOT_OK(ConsumeDataChunks(sizeof(int32_t), &continuation));\n+    return ConsumeInitial(continuation);\n+  }\n+\n+  Status ConsumeInitial(int32_t continuation) {\n+    if (continuation == internal::kIpcContinuationToken) {\n+      state_ = State::METADATA_LENGTH;\n+      next_required_size_ = kMessageEmitterNextRequiredSizeMetadataLength;\n+      // Valid IPC message, read the message length now\n+      return Status::OK();\n+    } else if (continuation == 0) {\n+      state_ = State::EOS;\n+      next_required_size_ = 0;\n+      return Status::OK();\n+    } else {\n+      state_ = State::METADATA;\n+      // ARROW-6314: Backwards compatibility for reading old IPC\n+      // messages produced prior to version 0.15.0\n+      next_required_size_ = continuation;\n+      return Status::OK();\n+    }\n+  }\n+\n+  Status ConsumeMetadataLengthData(const uint8_t* data, int64_t size) {\n+    return ConsumeMetadataLength(util::SafeLoadAs<int32_t>(data));\n+  }\n+\n+  Status ConsumeMetadataLengthBuffer(std::shared_ptr<Buffer>* buffer) {\n+    ARROW_ASSIGN_OR_RAISE(auto metadata_length, ConsumeDataBufferInt32(buffer));\n+    return ConsumeMetadataLength(metadata_length);\n+  }\n+\n+  Status ConsumeMetadataLengthChunks() {\n+    int32_t metadata_length = 0;\n+    RETURN_NOT_OK(ConsumeDataChunks(sizeof(int32_t), &metadata_length));\n+    return ConsumeMetadataLength(metadata_length);\n+  }\n+\n+  Status ConsumeMetadataLength(int32_t metadata_length) {\n+    if (metadata_length == 0) {\n+      state_ = State::EOS;\n+      next_required_size_ = 0;\n+      return Status::OK();\n+    } else {\n+      state_ = State::METADATA;\n+      next_required_size_ = metadata_length;\n+      return Status::OK();\n+    }\n+  }\n+\n+  Status ConsumeMetadataBuffer(std::shared_ptr<Buffer>* buffer) {\n+    if ((*buffer)->is_cpu()) {\n+      metadata_ = std::move(*buffer);\n+    } else {\n+      ARROW_ASSIGN_OR_RAISE(\n+          metadata_, Buffer::ViewOrCopy(*buffer, CPUDevice::memory_manager(pool_)));\n+    }\n+    return ConsumeMetadata();\n+  }\n+\n+  Status ConsumeMetadataChunks() {\n+    if (chunks_[0]->size() >= next_required_size_) {\n+      if (chunks_[0]->size() == next_required_size_) {\n+        if (chunks_[0]->is_cpu()) {\n+          metadata_ = std::move(chunks_[0]);\n+        } else {\n+          ARROW_ASSIGN_OR_RAISE(\n+              metadata_,\n+              Buffer::ViewOrCopy(chunks_[0], CPUDevice::memory_manager(pool_)));\n+        }\n+        chunks_.erase(chunks_.begin());\n+      } else {\n+        if (chunks_[0]->is_cpu()) {\n+          metadata_ = SliceBuffer(chunks_[0], 0, next_required_size_);\n+        } else {\n+          ARROW_ASSIGN_OR_RAISE(\n+              metadata_,\n+              Buffer::ViewOrCopy(chunks_[0], CPUDevice::memory_manager(pool_)));\n \n Review comment:\n   Does this need to be sliced also? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T03:23:50.757+0000",
                    "updated": "2020-04-08T03:23:50.757+0000",
                    "started": "2020-04-08T03:23:50.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418187",
                    "issueId": "13295680"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 34200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@651267d4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4085e559[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ae2195e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@35a29076[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73540f9c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1839a08b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@525b723b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@73db6926[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20a0a02e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@75c86149[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c0b0f61[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5431cb9f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 10 15:32:31 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-04-10T15:32:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8311/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-04-02T03:18:49.000+0000",
        "updated": "2020-04-10T15:32:32.000+0000",
        "timeoriginalestimate": null,
        "description": "The current reader API read data from stream directly. This API isn't usable with event driven style IO API.\r\n\r\nPush style reader API don't read data from stream directly. It receive already read data by users. This style is useful with event driven style IO API. We can't read data from stream directly in event driven style IO API. We just receive already read data from event driven style IO API.\r\n\r\nWe can't use the current reader API with event driven style IO API but we can use push style reader with event driven style IO API.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add push style stream format reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295680/comment/17080578",
                    "id": "17080578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6804\n[https://github.com/apache/arrow/pull/6804]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-04-10T15:32:31.620+0000",
                    "updated": "2020-04-10T15:32:31.620+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0d6ww:",
        "customfield_12314139": null
    }
}