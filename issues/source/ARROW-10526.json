{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13339577",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577",
    "key": "ARROW-10526",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lyndonb-bq",
            "name": "lyndonb-bq",
            "key": "lyndonb-bq",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Lyndon Bauto",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10526/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/511135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo opened a new pull request #8655:\nURL: https://github.com/apache/arrow/pull/8655\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T00:09:17.141+0000",
                    "updated": "2020-11-13T00:09:17.141+0000",
                    "started": "2020-11-13T00:09:17.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511135",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/511147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8655:\nURL: https://github.com/apache/arrow/pull/8655#issuecomment-726432824\n\n\n   https://issues.apache.org/jira/browse/ARROW-10526\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T00:48:55.594+0000",
                    "updated": "2020-11-13T00:48:55.594+0000",
                    "started": "2020-11-13T00:48:55.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511147",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/511719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #8655:\nURL: https://github.com/apache/arrow/pull/8655#issuecomment-727190083\n\n\n   FYI @lidavidm , @lyndonb-bq\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T11:11:36.473+0000",
                    "updated": "2020-11-14T11:11:36.473+0000",
                    "started": "2020-11-14T11:11:36.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511719",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/514759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lyndonb-bq opened a new pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725\n\n\n   - Added client cookie middleware which caches and monitors expiry\r\n   - Added testing for client cookie middleware\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-20T18:21:05.517+0000",
                    "updated": "2020-11-20T18:21:05.517+0000",
                    "started": "2020-11-20T18:21:05.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514759",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/514761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#issuecomment-731336993\n\n\n   https://issues.apache.org/jira/browse/ARROW-10526\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-20T18:27:43.745+0000",
                    "updated": "2020-11-20T18:27:43.745+0000",
                    "started": "2020-11-20T18:27:43.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514761",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/516429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lyndonb-bq commented on pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#issuecomment-733402956\n\n\n   @lidavidm \r\n   \r\n   Hi David, when you have some time please take a look at the changes I have introduced here. As you can probably tell, this is adds a client side middleware for cookie handling in C++. I am still waiting for the CI to complete so I can make sure that it is good on all platforms, but the code structure should not change much from here unless changes are requested.\r\n   \r\n   Thank you!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T01:23:49.950+0000",
                    "updated": "2020-11-25T01:23:49.950+0000",
                    "started": "2020-11-25T01:23:49.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516429",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/516800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#discussion_r530544603\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n\nReview comment:\n       You may appreciate arrow::util::optional\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n\nReview comment:\n       Appreciate the docs, can we stick with Doxygen syntax (\\brief, \\param, etc) even though this won't be in the public docs?\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n+                          std::string::size_type& start_pos, std::string& out_key,\n\nReview comment:\n       Please use std::string* for out parameters and const foo& for in parameters.\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n+                          std::string::size_type& start_pos, std::string& out_key,\n+                          std::string& out_value) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return false;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  if (std::string::npos == semi_col_pos && semi_col_pos > equals_pos) {\n+    // Last item - set start pos to end\n+    out_value = arrow::internal::TrimString(cookie_header_value.substr(equals_pos + 1));\n+    start_pos = std::string::npos;\n+  } else {\n+    out_value = arrow::internal::TrimString(\n+        cookie_header_value.substr(equals_pos + 1, semi_col_pos - equals_pos - 1));\n+    start_pos = semi_col_pos + 1;\n+  }\n+\n+  // Key/Value may be URI-encoded.\n+  out_key = arrow::internal::UriUnescape(arrow::util::string_view(out_key));\n+  out_value = arrow::internal::UriUnescape(arrow::util::string_view(out_value));\n+\n+  // Strip outer quotes on the value.\n+  if (out_value.size() >= 2 && out_value[0] == '\"' &&\n+      out_value[out_value.size() - 1] == '\"') {\n+    out_value = out_value.substr(1, out_value.size() - 2);\n+  }\n+\n+  // Update the start position for subsequent calls to this function.\n+  return true;\n+}\n+\n+// Custom parser for the date in format expected for cookies. This is required because\n\nReview comment:\n       Do you mean that strptime is not on Windows? There's a vendored strptime available.\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n+                          std::string::size_type& start_pos, std::string& out_key,\n+                          std::string& out_value) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return false;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  if (std::string::npos == semi_col_pos && semi_col_pos > equals_pos) {\n+    // Last item - set start pos to end\n+    out_value = arrow::internal::TrimString(cookie_header_value.substr(equals_pos + 1));\n+    start_pos = std::string::npos;\n+  } else {\n+    out_value = arrow::internal::TrimString(\n+        cookie_header_value.substr(equals_pos + 1, semi_col_pos - equals_pos - 1));\n+    start_pos = semi_col_pos + 1;\n+  }\n+\n+  // Key/Value may be URI-encoded.\n+  out_key = arrow::internal::UriUnescape(arrow::util::string_view(out_key));\n\nReview comment:\n       Any reason why UriUnescape can't take a const std::string&?\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n+                          std::string::size_type& start_pos, std::string& out_key,\n+                          std::string& out_value) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return false;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  if (std::string::npos == semi_col_pos && semi_col_pos > equals_pos) {\n\nReview comment:\n       Isn't this condition redundant? If no semicolon was found, then its position will always be greater than equals_pos\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.h\n##########\n@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Middleware implementation for sending and receiving HTTP cookies.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/flight/client_middleware.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+/// \\brief Client-side middleware for sending/receiving HTTP cookies.\n+class ARROW_FLIGHT_EXPORT ClientCookieMiddlewareFactory : public ClientMiddlewareFactory {\n\nReview comment:\n       pimpl pattern might be overkill here - what about a freestanding factory function that gives you a shared_ptr<ClientMiddlewareFactory>?\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n+                          std::string::size_type& start_pos, std::string& out_key,\n+                          std::string& out_value) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return false;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  if (std::string::npos == semi_col_pos && semi_col_pos > equals_pos) {\n+    // Last item - set start pos to end\n+    out_value = arrow::internal::TrimString(cookie_header_value.substr(equals_pos + 1));\n+    start_pos = std::string::npos;\n+  } else {\n+    out_value = arrow::internal::TrimString(\n+        cookie_header_value.substr(equals_pos + 1, semi_col_pos - equals_pos - 1));\n+    start_pos = semi_col_pos + 1;\n+  }\n+\n+  // Key/Value may be URI-encoded.\n+  out_key = arrow::internal::UriUnescape(arrow::util::string_view(out_key));\n+  out_value = arrow::internal::UriUnescape(arrow::util::string_view(out_value));\n+\n+  // Strip outer quotes on the value.\n+  if (out_value.size() >= 2 && out_value[0] == '\"' &&\n+      out_value[out_value.size() - 1] == '\"') {\n+    out_value = out_value.substr(1, out_value.size() - 2);\n+  }\n+\n+  // Update the start position for subsequent calls to this function.\n+  return true;\n+}\n+\n+// Custom parser for the date in format expected for cookies. This is required because\n\nReview comment:\n       I would much rather we not maintain an ad-hoc timestamp parser if at all possible.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T17:58:22.657+0000",
                    "updated": "2020-11-25T17:58:22.657+0000",
                    "started": "2020-11-25T17:58:22.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516800",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/516863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lyndonb-bq commented on a change in pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#discussion_r530695895\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,353 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+// Parse a cookie header string beginning at the given start_pos and identify the name and\n+// value of an attribute.\n+//\n+// @param cookie_header_value The value of the Set-Cookie header.\n+// @param start_pos           An input/output parameter indicating the starting position\n+// of the attribute.\n+//                            It will store the position of the next attribute when the\n+//                            function returns.\n+// @param out_key             The name of the attribute.\n+// @param out_value           The value of the attribute.\n+//\n+// @return true if an attribute is found.\n+bool ParseCookieAttribute(std::string cookie_header_value,\n+                          std::string::size_type& start_pos, std::string& out_key,\n+                          std::string& out_value) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return false;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  if (std::string::npos == semi_col_pos && semi_col_pos > equals_pos) {\n+    // Last item - set start pos to end\n+    out_value = arrow::internal::TrimString(cookie_header_value.substr(equals_pos + 1));\n+    start_pos = std::string::npos;\n+  } else {\n+    out_value = arrow::internal::TrimString(\n+        cookie_header_value.substr(equals_pos + 1, semi_col_pos - equals_pos - 1));\n+    start_pos = semi_col_pos + 1;\n+  }\n+\n+  // Key/Value may be URI-encoded.\n+  out_key = arrow::internal::UriUnescape(arrow::util::string_view(out_key));\n+  out_value = arrow::internal::UriUnescape(arrow::util::string_view(out_value));\n+\n+  // Strip outer quotes on the value.\n+  if (out_value.size() >= 2 && out_value[0] == '\"' &&\n+      out_value[out_value.size() - 1] == '\"') {\n+    out_value = out_value.substr(1, out_value.size() - 2);\n+  }\n+\n+  // Update the start position for subsequent calls to this function.\n+  return true;\n+}\n+\n+// Custom parser for the date in format expected for cookies. This is required because\n\nReview comment:\n       Unfortunately the vendored strptime does not support symbolics, which are required for cookie parsing. Instead of using an ad-hoc timestamp parser, I wrote a simple function to convert the symbolics to numerics, so the vendored strptime function will support it. Hope this solution is acceptable, of course I am open to other suggestions though.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T23:43:18.205+0000",
                    "updated": "2020-11-25T23:43:18.205+0000",
                    "started": "2020-11-25T23:43:18.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516863",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/516925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lyndonb-bq commented on pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#issuecomment-734107259\n\n\n   There appears to be a failure in the python build, I think it's caused by something unrelated to this pull request though, I noticed the same here: https://github.com/apache/arrow/runs/1456411775?check_suite_focus=true\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T06:43:10.041+0000",
                    "updated": "2020-11-26T06:43:10.041+0000",
                    "started": "2020-11-26T06:43:10.040+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516925",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/517380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#discussion_r531652380\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight_test.cc\n##########\n@@ -1186,6 +1188,159 @@ class TestBasicHeaderAuthMiddleware : public ::testing::Test {\n   std::shared_ptr<BearerAuthServerMiddlewareFactory> bearer_middleware_;\n };\n \n+// This test has functions that allow adding and removing cookies from a list of cookies.\n+// It also automatically adds cookies to an internal list of tracked cookies when they\n+// are passed to the middleware.\n+class TestCookieMiddleware : public ::testing::Test {\n\nReview comment:\n       This is a general comment, but there's a lot of logic here, and some of it duplicates the logic in the middleware class itself. Can we factor out the cookie parsing into an internal header and add direct tests of that logic, and perhaps reuse some of it here (e.g. splitting and parsing cookies) instead of duplicating it? That would also let us directly test the cookie parsing, instead of indirectly through these tests.\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,327 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+using CookiePair = arrow::util::optional<std::pair<std::string, std::string>>;\n+\n+/// \\brief Parse a cookie header string beginning at the given start_pos and identify\n+/// the name and value of an attribute.\n+///\n+/// \\param cookie_header_value The value of the Set-Cookie header.\n+/// \\param start_pos           An input/output parameter indicating the starting position\n+/// of the attribute.\n+///                            It will store the position of the next attribute when the\n+///                            function returns.\n+///\n+/// \\return Optional cookie key value pair.\n+CookiePair ParseCookieAttribute(const std::string& cookie_header_value,\n+                                std::string::size_type& start_pos) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return arrow::util::nullopt;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  std::string out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  std::string out_value;\n+  if (std::string::npos == semi_col_pos) {\n+    // Last item - set start pos to end\n+    out_value = arrow::internal::TrimString(cookie_header_value.substr(equals_pos + 1));\n+    start_pos = std::string::npos;\n+  } else {\n+    out_value = arrow::internal::TrimString(\n+        cookie_header_value.substr(equals_pos + 1, semi_col_pos - equals_pos - 1));\n+    start_pos = semi_col_pos + 1;\n+  }\n+\n+  // Key/Value may be URI-encoded.\n+  out_key = arrow::internal::UriUnescape(out_key);\n+  out_value = arrow::internal::UriUnescape(out_value);\n+\n+  // Strip outer quotes on the value.\n+  if (out_value.size() >= 2 && out_value[0] == '\"' &&\n+      out_value[out_value.size() - 1] == '\"') {\n+    out_value = out_value.substr(1, out_value.size() - 2);\n+  }\n+\n+  // Update the start position for subsequent calls to this function.\n+  return std::make_pair(out_key, out_value);\n+}\n+\n+/// \\brief Function to fix date string so it is accepted by Windows parsers.\n+///\n+/// \\param date Date to fix.\n+void FixDate(std::string* date) {\n+  // Abbreviated months in order.\n+  static const std::vector<std::string> months = {\n+      \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n+\n+  // The date comes in with the following format: Wed, 01 Jan 3000 22:15:36 GMT\n+  // Symbolics are not supported by Windows parsing, so we need to convert to\n+  // the following format: 01 01 3000 22:15:36\n+\n+  // String is currently in regular format: 'Wed, 01 Jan 3000 22:15:36 GMT'\n+  // Start by removing semicolon and trimming space.\n+  *date = arrow::internal::TrimString(date->substr(date->find(\",\") + 1));\n+\n+  // String is now in trimmed format: '01 Jan 3000 22:15:36 GMT'\n+  // Now swap month to proper month format for Windows.\n+  // Start by removing case sensitivity.\n+  std::transform(date->begin(), date->end(), date->begin(), ::toupper);\n+\n+  // Loop through months.\n+  for (size_t i = 0; i < months.size(); i++) {\n+    // Search the date for the month.\n+    auto it = date->find(months[i]);\n+    if (it != std::string::npos) {\n+      // Create month integer, pad with leading zeros if required.\n+      std::string padded_month;\n+      if ((i + 1) < 10) {\n+        padded_month = \"0\";\n+      }\n+      padded_month += std::to_string(i + 1);\n+\n+      // Replace symbolic month with numeric month.\n+      date->replace(it, months[i].length(), padded_month);\n+\n+      // String is now in format: '01 01 3000 22:15:36 GMT'.\n+      break;\n+    }\n+  }\n+\n+  // String is now in format '01 01 3000 22:15:36'.\n+  auto it = date->find(\" GMT\");\n+  date->erase(it, 4);\n+\n+  // Sometimes a semicolon is added at the end, if this is the case, remove it.\n+  if (date->back() == ';') {\n+    date->pop_back();\n+  }\n+}\n+\n+struct Cookie {\n+  static Cookie parse(const arrow::util::string_view& cookie_header_value) {\n+    // Parse the cookie string. If the cookie has an expiration, record it.\n+    // If the cookie has a max-age, calculate the current time + max_age and set that as\n+    // the expiration.\n+    Cookie cookie;\n+    cookie.has_expiry_ = false;\n+    std::string cookie_value_str(cookie_header_value);\n+\n+    // There should always be a first match which should be the name and value of the\n+    // cookie.\n+    std::string::size_type pos = 0;\n+    CookiePair cookie_pair = ParseCookieAttribute(cookie_value_str, pos);\n+    if (!cookie_pair.has_value()) {\n+      // No cookie found. Mark the output cookie as expired.\n+      cookie.has_expiry_ = true;\n+      cookie.expiration_time_ = std::chrono::system_clock::now();\n+    } else {\n+      cookie.cookie_name_ = cookie_pair.value().first;\n+      cookie.cookie_value_ = cookie_pair.value().second;\n+    }\n+\n+    while (pos < cookie_value_str.size()) {\n+      cookie_pair = ParseCookieAttribute(cookie_value_str, pos);\n+      if (!cookie_pair.has_value()) {\n+        break;\n+      }\n+\n+      std::string cookie_attr_value_str = cookie_pair.value().second;\n+      if (arrow::internal::AsciiEqualsCaseInsensitive(cookie_pair.value().first,\n+                                                      \"max-age\")) {\n+        // Note: max-age takes precedence over expires. We don't really care about other\n+        // attributes and will arbitrarily take the first max-age. We can stop the loop\n+        // here.\n+        cookie.has_expiry_ = true;\n+        int max_age = std::stoi(cookie_attr_value_str);\n+        if (max_age <= 0) {\n+          // Force expiration.\n+          cookie.expiration_time_ = std::chrono::system_clock::now();\n+        } else {\n+          // Max-age is in seconds.\n+          cookie.expiration_time_ =\n+              std::chrono::system_clock::now() + std::chrono::seconds(max_age);\n+        }\n+        break;\n+      } else if (arrow::internal::AsciiEqualsCaseInsensitive(cookie_pair.value().first,\n+                                                             \"expires\")) {\n+        cookie.has_expiry_ = true;\n+        int64_t seconds = 0;\n+        FixDate(&cookie_attr_value_str);\n+        const char* COOKIE_EXPIRES_FORMAT = \"%d %m %Y %H:%M:%S\";\n+        if (arrow::internal::ParseTimestampStrptime(\n+                cookie_attr_value_str.c_str(), cookie_attr_value_str.size(),\n+                COOKIE_EXPIRES_FORMAT, false, true, arrow::TimeUnit::SECOND, &seconds)) {\n+          cookie.expiration_time_ = std::chrono::time_point<std::chrono::system_clock>(\n+              std::chrono::seconds(seconds));\n+        } else {\n+          // Force expiration.\n+          cookie.expiration_time_ = std::chrono::system_clock::now();\n+        }\n+      }\n+    }\n+\n+    return cookie;\n+  }\n+\n+  bool IsExpired() const {\n+    // Check if current-time is less than creation time.\n+    return (has_expiry_ && (expiration_time_ <= std::chrono::system_clock::now()));\n+  }\n+\n+  std::string AsCookieString() {\n+    // Return the string for the cookie as it would appear in a Cookie header.\n+    // Keys must be wrapped in quotes depending on if this is a v1 or v2 cookie.\n+    return cookie_name_ + \"=\\\"\" + cookie_value_ + \"\\\"\";\n+  }\n+\n+  std::string cookie_name_;\n+  std::string cookie_value_;\n+  std::chrono::time_point<std::chrono::system_clock> expiration_time_;\n+  bool has_expiry_;\n+};\n+}  // end of anonymous namespace\n+\n+namespace arrow {\n+namespace flight {\n+\n+using CookieCache = std::map<std::string, Cookie, CaseInsensitiveComparator>;\n+using CookieHeaderPair =\n+    const std::pair<CallHeaders::const_iterator, CallHeaders::const_iterator>&;\n+/// \\brief Client-side middleware for sending/receiving HTTP cookies.\n+class ClientCookieMiddlewareFactory : public ClientMiddlewareFactory {\n+ public:\n+  void StartCall(const CallInfo& info, std::unique_ptr<ClientMiddleware>* middleware) {\n+    ARROW_UNUSED(info);\n+    *middleware = std::unique_ptr<ClientMiddleware>(new ClientCookieMiddleware(*this));\n+  }\n+\n+ private:\n+  class ClientCookieMiddleware : public ClientMiddleware {\n+   public:\n+    explicit ClientCookieMiddleware(ClientCookieMiddlewareFactory& factory)\n+        : factory_(factory) {}\n+\n+    void SendingHeaders(AddCallHeaders* outgoing_headers) override {\n+      const std::string& cookie_string = factory_.GetValidCookiesAsString();\n+      if (!cookie_string.empty()) {\n+        outgoing_headers->AddHeader(\"cookie\", cookie_string);\n+      }\n+    }\n+\n+    void ReceivedHeaders(const CallHeaders& incoming_headers) override {\n+      CookieHeaderPair cookie_header_values = incoming_headers.equal_range(\"set-cookie\");\n+      factory_.UpdateCachedCookies(cookie_header_values);\n+    }\n+\n+    void CallCompleted(const Status& status) override {}\n+\n+   private:\n+    ClientCookieMiddlewareFactory& factory_;\n+  };\n+\n+  /// \\brief Retrieve the cached cookie values as a string.\n+  ///\n+  /// \\return a string that can be used in a Cookie header representing the cookies that\n+  /// have been cached.\n+  std::string GetValidCookiesAsString() {\n+    const std::lock_guard<std::mutex> guard(mutex_);\n+\n+    DiscardExpiredCookies();\n+    if (cookie_cache_.empty()) {\n+      return \"\";\n+    }\n+\n+    std::string cookie_string = cookie_cache_.begin()->second.AsCookieString();\n+    for (auto it = (++cookie_cache_.begin()); cookie_cache_.end() != it; ++it) {\n+      cookie_string += \"; \" + it->second.AsCookieString();\n+    }\n+    return cookie_string;\n+  }\n+\n+  /// \\brief Updates the cache of cookies with new Set-Cookie header values.\n+  ///\n+  /// \\param header_values The range representing header values.\n+  void UpdateCachedCookies(CookieHeaderPair header_values) {\n+    const std::lock_guard<std::mutex> guard(mutex_);\n+\n+    for (auto it = header_values.first; it != header_values.second; ++it) {\n+      const util::string_view& value = it->second;\n+      Cookie cookie = Cookie::parse(value);\n+\n+      // Cache cookies regardless of whether or not they are expired. The server may have\n+      // explicitly sent a Set-Cookie to expire a cached cookie.\n+      std::pair<CookieCache::iterator, bool> insertable =\n+          cookie_cache_.insert({cookie.cookie_name_, cookie});\n+\n+      // Force overwrite on insert collision.\n+      if (!insertable.second) {\n+        insertable.first->second = cookie;\n+      }\n+    }\n+\n+    DiscardExpiredCookies();\n\nReview comment:\n       Is there any need to discard here if we have to discard before we send cookies anyways?\n\n##########\nFile path: cpp/src/arrow/flight/client_cookie_middleware.cc\n##########\n@@ -0,0 +1,327 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_cookie_middleware.h\"\n+\n+#include <chrono>\n+#include <map>\n+#include <mutex>\n+#include <string>\n+\n+#include \"arrow/flight/platform.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/uri.h\"\n+#include \"arrow/util/value_parsing.h\"\n+\n+namespace {\n+#ifdef _WIN32\n+#define strcasecmp stricmp\n+#endif\n+\n+struct CaseInsensitiveComparator\n+    : public std::binary_function<std::string, std::string, bool> {\n+  bool operator()(const std::string& lhs, const std::string& rhs) const {\n+    return strcasecmp(lhs.c_str(), rhs.c_str()) < 0;\n+  }\n+};\n+\n+using CookiePair = arrow::util::optional<std::pair<std::string, std::string>>;\n+\n+/// \\brief Parse a cookie header string beginning at the given start_pos and identify\n+/// the name and value of an attribute.\n+///\n+/// \\param cookie_header_value The value of the Set-Cookie header.\n+/// \\param start_pos           An input/output parameter indicating the starting position\n+/// of the attribute.\n+///                            It will store the position of the next attribute when the\n+///                            function returns.\n+///\n+/// \\return Optional cookie key value pair.\n+CookiePair ParseCookieAttribute(const std::string& cookie_header_value,\n+                                std::string::size_type& start_pos) {\n+  std::string::size_type equals_pos = cookie_header_value.find('=', start_pos);\n+  if (std::string::npos == equals_pos) {\n+    // No cookie attribute.\n+    return arrow::util::nullopt;\n+  }\n+\n+  std::string::size_type semi_col_pos = cookie_header_value.find(';', equals_pos);\n+  std::string out_key = arrow::internal::TrimString(\n+      cookie_header_value.substr(start_pos, equals_pos - start_pos));\n+  std::string out_value;\n+  if (std::string::npos == semi_col_pos) {\n+    // Last item - set start pos to end\n+    out_value = arrow::internal::TrimString(cookie_header_value.substr(equals_pos + 1));\n+    start_pos = std::string::npos;\n+  } else {\n+    out_value = arrow::internal::TrimString(\n+        cookie_header_value.substr(equals_pos + 1, semi_col_pos - equals_pos - 1));\n+    start_pos = semi_col_pos + 1;\n+  }\n+\n+  // Key/Value may be URI-encoded.\n+  out_key = arrow::internal::UriUnescape(out_key);\n+  out_value = arrow::internal::UriUnescape(out_value);\n+\n+  // Strip outer quotes on the value.\n+  if (out_value.size() >= 2 && out_value[0] == '\"' &&\n+      out_value[out_value.size() - 1] == '\"') {\n+    out_value = out_value.substr(1, out_value.size() - 2);\n+  }\n+\n+  // Update the start position for subsequent calls to this function.\n+  return std::make_pair(out_key, out_value);\n+}\n+\n+/// \\brief Function to fix date string so it is accepted by Windows parsers.\n+///\n+/// \\param date Date to fix.\n+void FixDate(std::string* date) {\n+  // Abbreviated months in order.\n+  static const std::vector<std::string> months = {\n+      \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n+\n+  // The date comes in with the following format: Wed, 01 Jan 3000 22:15:36 GMT\n+  // Symbolics are not supported by Windows parsing, so we need to convert to\n+  // the following format: 01 01 3000 22:15:36\n+\n+  // String is currently in regular format: 'Wed, 01 Jan 3000 22:15:36 GMT'\n+  // Start by removing semicolon and trimming space.\n+  *date = arrow::internal::TrimString(date->substr(date->find(\",\") + 1));\n+\n+  // String is now in trimmed format: '01 Jan 3000 22:15:36 GMT'\n+  // Now swap month to proper month format for Windows.\n+  // Start by removing case sensitivity.\n+  std::transform(date->begin(), date->end(), date->begin(), ::toupper);\n+\n+  // Loop through months.\n+  for (size_t i = 0; i < months.size(); i++) {\n+    // Search the date for the month.\n+    auto it = date->find(months[i]);\n+    if (it != std::string::npos) {\n+      // Create month integer, pad with leading zeros if required.\n+      std::string padded_month;\n+      if ((i + 1) < 10) {\n+        padded_month = \"0\";\n+      }\n+      padded_month += std::to_string(i + 1);\n+\n+      // Replace symbolic month with numeric month.\n+      date->replace(it, months[i].length(), padded_month);\n+\n+      // String is now in format: '01 01 3000 22:15:36 GMT'.\n+      break;\n+    }\n+  }\n+\n+  // String is now in format '01 01 3000 22:15:36'.\n+  auto it = date->find(\" GMT\");\n+  date->erase(it, 4);\n+\n+  // Sometimes a semicolon is added at the end, if this is the case, remove it.\n+  if (date->back() == ';') {\n+    date->pop_back();\n+  }\n+}\n+\n+struct Cookie {\n+  static Cookie parse(const arrow::util::string_view& cookie_header_value) {\n+    // Parse the cookie string. If the cookie has an expiration, record it.\n+    // If the cookie has a max-age, calculate the current time + max_age and set that as\n+    // the expiration.\n+    Cookie cookie;\n+    cookie.has_expiry_ = false;\n+    std::string cookie_value_str(cookie_header_value);\n+\n+    // There should always be a first match which should be the name and value of the\n+    // cookie.\n+    std::string::size_type pos = 0;\n+    CookiePair cookie_pair = ParseCookieAttribute(cookie_value_str, pos);\n+    if (!cookie_pair.has_value()) {\n+      // No cookie found. Mark the output cookie as expired.\n+      cookie.has_expiry_ = true;\n+      cookie.expiration_time_ = std::chrono::system_clock::now();\n+    } else {\n+      cookie.cookie_name_ = cookie_pair.value().first;\n+      cookie.cookie_value_ = cookie_pair.value().second;\n+    }\n+\n+    while (pos < cookie_value_str.size()) {\n+      cookie_pair = ParseCookieAttribute(cookie_value_str, pos);\n+      if (!cookie_pair.has_value()) {\n+        break;\n+      }\n+\n+      std::string cookie_attr_value_str = cookie_pair.value().second;\n+      if (arrow::internal::AsciiEqualsCaseInsensitive(cookie_pair.value().first,\n+                                                      \"max-age\")) {\n+        // Note: max-age takes precedence over expires. We don't really care about other\n+        // attributes and will arbitrarily take the first max-age. We can stop the loop\n+        // here.\n+        cookie.has_expiry_ = true;\n+        int max_age = std::stoi(cookie_attr_value_str);\n+        if (max_age <= 0) {\n+          // Force expiration.\n+          cookie.expiration_time_ = std::chrono::system_clock::now();\n+        } else {\n+          // Max-age is in seconds.\n+          cookie.expiration_time_ =\n+              std::chrono::system_clock::now() + std::chrono::seconds(max_age);\n+        }\n+        break;\n+      } else if (arrow::internal::AsciiEqualsCaseInsensitive(cookie_pair.value().first,\n+                                                             \"expires\")) {\n+        cookie.has_expiry_ = true;\n+        int64_t seconds = 0;\n+        FixDate(&cookie_attr_value_str);\n+        const char* COOKIE_EXPIRES_FORMAT = \"%d %m %Y %H:%M:%S\";\n\nReview comment:\n       Can this be moved to an actual constant following the naming convention (kCookieExpiresFormat or similar)?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T15:19:53.789+0000",
                    "updated": "2020-11-27T15:19:53.789+0000",
                    "started": "2020-11-27T15:19:53.788+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517380",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/517465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lyndonb-bq commented on pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#issuecomment-734999023\n\n\n   @lidavidm That's a really good point, there is a lot of code that wasn't facing direct testing. I followed suggestion of moving the parsing logic to an internal header (the client_header_internal files seemed appropriate since this code is all related to headers). I added a bunch of tests for all the different internal parsing functions that were added.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T22:02:53.691+0000",
                    "updated": "2020-11-27T22:02:53.691+0000",
                    "started": "2020-11-27T22:02:53.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517465",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/517928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#discussion_r532583653\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client_header_internal.h\n##########\n@@ -22,6 +22,8 @@\n \n #include \"arrow/flight/client_middleware.h\"\n #include \"arrow/result.h\"\n+#include \"arrow/util/optional.h\"\n\nReview comment:\n       Oh and `#include <map>` but perhaps unordered_map is better since you don't care about ordering?\n\n##########\nFile path: cpp/src/arrow/flight/client_header_internal.h\n##########\n@@ -22,6 +22,8 @@\n \n #include \"arrow/flight/client_middleware.h\"\n #include \"arrow/result.h\"\n+#include \"arrow/util/optional.h\"\n\nReview comment:\n       nit: I don't think value_parsing is used in the header, and we're missing `#include <mutex>`, and `#include <functional>` for `binary_function`, `#include <string>`, and `#include <chrono>`\n\n##########\nFile path: cpp/src/arrow/flight/flight_test.cc\n##########\n@@ -1186,6 +1188,139 @@ class TestBasicHeaderAuthMiddleware : public ::testing::Test {\n   std::shared_ptr<BearerAuthServerMiddlewareFactory> bearer_middleware_;\n };\n \n+// This test keeps an internal cookie cache and compares that with the middleware.\n+class TestCookieMiddleware : public ::testing::Test {\n+ public:\n+  // Setup function creates middleware factory and starts it up.\n+  void SetUp() {\n+    factory_ = GetCookieFactory();\n+    CallInfo callInfo;\n+    factory_->StartCall(callInfo, &middleware_);\n+  }\n+\n+  // Function to add incoming cookies to middleware and validate them.\n+  void AddAndValidate(const std::string& incoming_cookie) {\n+    // Add cookie\n+    CallHeaders call_headers;\n+    call_headers.insert(std::make_pair(arrow::util::string_view(\"set-cookie\"),\n+                                       arrow::util::string_view(incoming_cookie)));\n+    middleware_->ReceivedHeaders(call_headers);\n+    expected_cookie_cache_.UpdateCachedCookies(call_headers);\n+\n+    // Get cookie from middleware.\n+    TestCallHeaders add_call_headers;\n+    middleware_->SendingHeaders(&add_call_headers);\n+    const std::string actual_cookies = add_call_headers.GetCookies();\n+\n+    // Validate cookie\n+    const std::string expected_cookies = expected_cookie_cache_.GetValidCookiesAsString();\n+    const std::vector<std::string> split_expected_cookies =\n+        SplitCookies(expected_cookies);\n+    const std::vector<std::string> split_actual_cookies = SplitCookies(actual_cookies);\n+    EXPECT_EQ(split_expected_cookies, split_actual_cookies);\n+  }\n+\n+  // Function to take a list of cookies and split them into a vector of individual\n+  // cookies. This is done because the cookie cache is a map so ordering is not\n\nReview comment:\n       Can we use `unordered_map` then?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-30T13:17:49.424+0000",
                    "updated": "2020-11-30T13:17:49.424+0000",
                    "started": "2020-11-30T13:17:49.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517928",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/518042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lyndonb-bq commented on a change in pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725#discussion_r532762600\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight_test.cc\n##########\n@@ -1186,6 +1188,139 @@ class TestBasicHeaderAuthMiddleware : public ::testing::Test {\n   std::shared_ptr<BearerAuthServerMiddlewareFactory> bearer_middleware_;\n };\n \n+// This test keeps an internal cookie cache and compares that with the middleware.\n+class TestCookieMiddleware : public ::testing::Test {\n+ public:\n+  // Setup function creates middleware factory and starts it up.\n+  void SetUp() {\n+    factory_ = GetCookieFactory();\n+    CallInfo callInfo;\n+    factory_->StartCall(callInfo, &middleware_);\n+  }\n+\n+  // Function to add incoming cookies to middleware and validate them.\n+  void AddAndValidate(const std::string& incoming_cookie) {\n+    // Add cookie\n+    CallHeaders call_headers;\n+    call_headers.insert(std::make_pair(arrow::util::string_view(\"set-cookie\"),\n+                                       arrow::util::string_view(incoming_cookie)));\n+    middleware_->ReceivedHeaders(call_headers);\n+    expected_cookie_cache_.UpdateCachedCookies(call_headers);\n+\n+    // Get cookie from middleware.\n+    TestCallHeaders add_call_headers;\n+    middleware_->SendingHeaders(&add_call_headers);\n+    const std::string actual_cookies = add_call_headers.GetCookies();\n+\n+    // Validate cookie\n+    const std::string expected_cookies = expected_cookie_cache_.GetValidCookiesAsString();\n+    const std::vector<std::string> split_expected_cookies =\n+        SplitCookies(expected_cookies);\n+    const std::vector<std::string> split_actual_cookies = SplitCookies(actual_cookies);\n+    EXPECT_EQ(split_expected_cookies, split_actual_cookies);\n+  }\n+\n+  // Function to take a list of cookies and split them into a vector of individual\n+  // cookies. This is done because the cookie cache is a map so ordering is not\n\nReview comment:\n       Yes, good call. Will change this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-30T17:16:01.441+0000",
                    "updated": "2020-11-30T17:16:01.441+0000",
                    "started": "2020-11-30T17:16:01.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518042",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/518174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #8725:\nURL: https://github.com/apache/arrow/pull/8725\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-30T23:25:44.143+0000",
                    "updated": "2020-11-30T23:25:44.143+0000",
                    "started": "2020-11-30T23:25:44.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518174",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/518175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8655:\nURL: https://github.com/apache/arrow/pull/8655#issuecomment-736116249\n\n\n   I believe this is superseded by #8725, which I've just merged\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-30T23:26:27.344+0000",
                    "updated": "2020-11-30T23:26:27.344+0000",
                    "started": "2020-11-30T23:26:27.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518175",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/766027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #8655:\nURL: https://github.com/apache/arrow/pull/8655#issuecomment-1117384394\n\n   Closing as explained above by @lidavidm :-)\n\n\n",
                    "created": "2022-05-04T14:29:14.983+0000",
                    "updated": "2022-05-04T14:29:14.983+0000",
                    "started": "2022-05-04T14:29:14.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766027",
                    "issueId": "13339577"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/worklog/766028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8655: ARROW-10526: [FlightRPC][C++][Python] Client cookie middleware\nURL: https://github.com/apache/arrow/pull/8655\n\n\n",
                    "created": "2022-05-04T14:29:16.910+0000",
                    "updated": "2022-05-04T14:29:16.910+0000",
                    "started": "2022-05-04T14:29:16.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766028",
                    "issueId": "13339577"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6d2a4ce6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@315ac145[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c756610[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6b42ce32[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@587f54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@959e624[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e3b54f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@53f52c52[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10145ba7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@563af747[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22d2fde5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@58bfd251[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 30 23:26:26 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-30T23:25:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10526/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-09T18:21:42.000+0000",
        "updated": "2022-05-04T14:29:17.000+0000",
        "timeoriginalestimate": null,
        "description": "Port the middleware for sending/receiving HTTP cookies from ARROW-10428 to C++ and Python clients.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][C++] HTTP cookie handling in clients",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/comment/17228894",
                    "id": "17228894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
                        "name": "jduong",
                        "key": "jduong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "James Duong",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I started coding this. Some C++ coding questions:\r\n\r\n* Should all classes that are public exports use the pImpl pattern (both ClientMiddleware and ClientMiddlewareFactories would in this case)?\r\n* Do we have a ConcurrentMap class? If not, would the preference be to implement a simple implementation of one or just use std::lock and a map?\r\n* Thinking of using boost spirit for parsing the cookie string. I don't see boost itself being used in the codebase very much though -- are we trying to avoid boost dependencies within the implementation?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
                        "name": "jduong",
                        "key": "jduong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "James Duong",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-11-10T01:11:33.985+0000",
                    "updated": "2020-11-10T01:11:33.985+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/comment/17241130",
                    "id": "17241130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8725\n[https://github.com/apache/arrow/pull/8725]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-30T23:25:32.374+0000",
                    "updated": "2020-11-30T23:25:32.374+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339577/comment/17241131",
                    "id": "17241131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I've merged the PR for this; for Python support, please feel free to make a new JIRA.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-30T23:26:26.464+0000",
                    "updated": "2020-11-30T23:26:26.464+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kesw:",
        "customfield_12314139": null
    }
}