{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13225845",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845",
    "key": "ARROW-5108",
    "fields": {
        "parent": {
            "id": "13195626",
            "key": "ARROW-3679",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13195626",
            "fields": {
                "summary": "[Go] implement IPC protocol",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5108/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114\n \n \n   This CL adds the generation of flatbuffers-based files for the IPC backend.\r\n   This CL adds the basic functionality to read an Arrow file.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:24:16.972+0000",
                    "updated": "2019-04-04T17:24:16.972+0000",
                    "started": "2019-04-04T17:24:16.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223129",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-479991081\n \n \n   @stuartcarnie @alexandreyc PTAL.\r\n   \r\n   it's a lot of code, but most of it is coming from the automatically generated code from flatbuffers.\r\n   one can safely ignore everything under:\r\n   - `go/arrow/internal/flatbuf`\r\n   - `go/arrow/ipc/feather/fbs`\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:30:20.966+0000",
                    "updated": "2019-04-04T17:30:20.966+0000",
                    "started": "2019-04-04T17:30:20.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223141",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480019566\n \n \n   Is there a way to generate the Flatbuffers bindings at build time or do the files have to be checked in?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T18:51:38.509+0000",
                    "updated": "2019-04-04T18:51:38.509+0000",
                    "started": "2019-04-04T18:51:38.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223195",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r272319353\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,121 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"fmt\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\tref  int64\n \n Review comment:\n   Why not name this field `refCount` to be coherent with the rest of the code base?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T18:53:22.322+0000",
                    "updated": "2019-04-04T18:53:22.322+0000",
                    "started": "2019-04-04T18:53:22.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223196",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r272336822\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,121 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"fmt\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\tref  int64\n \n Review comment:\n   done.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T19:39:52.383+0000",
                    "updated": "2019-04-04T19:39:52.383+0000",
                    "started": "2019-04-04T19:39:52.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223212",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/7a9331689fdffcfead2e5f6be664f1676d489548?src=pr&el=desc) will **decrease** coverage by `25.8%`.\n   > The diff coverage is `4.76%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #4114       +/-   ##\n   ===========================================\n   - Coverage   87.82%   62.01%   -25.81%     \n   ===========================================\n     Files         739       65      -674     \n     Lines       90965     4731    -86234     \n     Branches     1252        0     -1252     \n   ===========================================\n   - Hits        79886     2934    -76952     \n   + Misses      10958     1687     -9271     \n   + Partials      121      110       -11\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGUuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `91.66% <0%> (-1.56%)` | :arrow_down: |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.53% <100%> (+0.16%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `58.82% <58.82%> (\u00f8)` | |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [691 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [7a93316...99405c6](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T19:45:23.684+0000",
                    "updated": "2019-04-04T19:45:23.684+0000",
                    "started": "2019-04-04T19:45:23.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223216",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037633\n \n \n   @wesm: this (unfortunately?) isn't the way Gophers like to do it.\r\n   we prefer to have (for security reasons) only Go stdlib-based code being executed as part of the usual `go get` incantation to retrieve+build code.\r\n   and we prefer to have the whole code needed for users, ready be to built (w/o additional build-time tools.)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T19:46:55.778+0000",
                    "updated": "2019-04-04T19:46:55.778+0000",
                    "started": "2019-04-04T19:46:55.777+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223217",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4495305092411e8551c60341e273c8aa3c14b282?src=pr&el=desc) will **decrease** coverage by `25.74%`.\n   > The diff coverage is `4.95%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #4114       +/-   ##\n   ==========================================\n   - Coverage   87.84%   62.1%   -25.75%     \n   ==========================================\n     Files         739      65      -674     \n     Lines       90983    4731    -86252     \n     Branches     1252       0     -1252     \n   ==========================================\n   - Hits        79928    2938    -76990     \n   + Misses      10934    1679     -9255     \n   + Partials      121     114        -7\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGUuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `93.33% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.53% <100%> (+0.16%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `58.82% <58.82%> (\u00f8)` | |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/arrow/csv/chunker-test.cc](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY2h1bmtlci10ZXN0LmNj) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | ... and [679 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [4495305...946b4b5](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T08:07:21.622+0000",
                    "updated": "2019-04-05T08:07:21.622+0000",
                    "started": "2019-04-05T08:07:21.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223484",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4495305092411e8551c60341e273c8aa3c14b282?src=pr&el=desc) will **decrease** coverage by `25.28%`.\n   > The diff coverage is `7.23%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #4114       +/-   ##\n   ===========================================\n   - Coverage   87.84%   62.56%   -25.29%     \n   ===========================================\n     Files         739       65      -674     \n     Lines       90983     4731    -86252     \n     Branches     1252        0     -1252     \n   ===========================================\n   - Hits        79928     2960    -76968     \n   + Misses      10934     1661     -9273     \n   + Partials      121      110       -11\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGUuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `93.33% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.53% <100%> (+0.16%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `94.11% <94.11%> (\u00f8)` | |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [692 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [4495305...4b687af](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T08:29:06.078+0000",
                    "updated": "2019-04-05T08:29:06.078+0000",
                    "started": "2019-04-05T08:29:06.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223493",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4495305092411e8551c60341e273c8aa3c14b282?src=pr&el=desc) will **decrease** coverage by `25.24%`.\n   > The diff coverage is `7.61%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #4114       +/-   ##\n   ==========================================\n   - Coverage   87.84%   62.6%   -25.25%     \n   ==========================================\n     Files         739      65      -674     \n     Lines       90983    4731    -86252     \n     Branches     1252       0     -1252     \n   ==========================================\n   - Hits        79928    2962    -76966     \n   + Misses      10934    1660     -9274     \n   + Partials      121     109       -12\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGUuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `93.33% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.53% <100%> (+0.16%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [692 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [4495305...a137d3d](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T08:54:48.596+0000",
                    "updated": "2019-04-05T08:54:48.596+0000",
                    "started": "2019-04-05T08:54:48.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223499",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4495305092411e8551c60341e273c8aa3c14b282?src=pr&el=desc) will **decrease** coverage by `26.8%`.\n   > The diff coverage is `6.34%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #4114       +/-   ##\n   ===========================================\n   - Coverage   87.84%   61.04%   -26.81%     \n   ===========================================\n     Files         739       67      -672     \n     Lines       90983     4836    -86147     \n     Branches     1252        0     -1252     \n   ===========================================\n   - Hits        79928     2952    -76976     \n   + Misses      10934     1771     -9163     \n   + Partials      121      113        -8\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGUuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/reader.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL3JlYWRlci5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/ipc.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2lwYy5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `93.33% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.53% <100%> (+0.16%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/arrow/csv/chunker-test.cc](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY2h1bmtlci10ZXN0LmNj) | | |\n   | ... and [683 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [4495305...0f98156](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T11:43:32.635+0000",
                    "updated": "2019-04-05T11:43:32.635+0000",
                    "started": "2019-04-05T11:43:32.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223550",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4495305092411e8551c60341e273c8aa3c14b282?src=pr&el=desc) will **decrease** coverage by `0.55%`.\n   > The diff coverage is `6.25%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4114      +/-   ##\n   ==========================================\n   - Coverage   87.84%   87.29%   -0.56%     \n   ==========================================\n     Files         739      745       +6     \n     Lines       90983    91622     +639     \n     Branches     1252     1252              \n   ==========================================\n   + Hits        79928    79980      +52     \n   - Misses      10934    11525     +591     \n   + Partials      121      117       -4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGUuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/reader.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL3JlYWRlci5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/ipc.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2lwYy5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `93.33% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `87.77% <35.71%> (-9.6%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [25 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [4495305...9cab97c](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T15:42:30.671+0000",
                    "updated": "2019-04-05T15:42:30.671+0000",
                    "started": "2019-04-05T15:42:30.671+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223653",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/223661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480327099\n \n \n   the flurry of activity is now done.\r\n   I am pretty happy with my refactoring and ready for the writing part (+ support for binary/string types.)\r\n   \r\n   PTAL\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T15:52:18.406+0000",
                    "updated": "2019-04-05T15:52:18.406+0000",
                    "started": "2019-04-05T15:52:18.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223661",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r272837745\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\trefCount int64\n+\tmsg      *flatbuf.Message\n+\tmeta     *memory.Buffer\n+\tbody     *memory.Buffer\n+}\n+\n+func NewMessage(meta, body *memory.Buffer) *Message {\n+\tmeta.Retain()\n+\tbody.Retain()\n+\treturn &Message{\n+\t\trefCount: 1,\n+\t\tmsg:      flatbuf.GetRootAsMessage(meta.Bytes(), 0),\n+\t\tmeta:     meta,\n+\t\tbody:     body,\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (msg *Message) Retain() {\n+\tatomic.AddInt64(&msg.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (msg *Message) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&msg.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&msg.refCount, -1) == 0 {\n+\t\tmsg.meta.Release()\n+\t\tmsg.body.Release()\n+\t\tmsg.msg = nil\n+\t\tmsg.meta = nil\n+\t\tmsg.body = nil\n+\t}\n+}\n+\n+func (msg Message) Version() MetadataVersion {\n+\treturn MetadataVersion(msg.msg.Version())\n+}\n+\n+func (msg Message) Type() MessageType {\n+\treturn MessageType(msg.msg.HeaderType())\n+}\n+\n+func (msg Message) BodyLen() int64 {\n+\treturn msg.msg.BodyLength()\n+}\n+\n+// MessageReader reads messages from an io.Reader.\n+type MessageReader struct {\n+\tr io.Reader\n+\n+\trefCount int64\n+\tmsg      *Message\n+}\n+\n+// NewMessageReader returns a reader that reads messages from an input stream.\n+func NewMessageReader(r io.Reader) (*MessageReader, error) {\n \n Review comment:\n   Why do we return an error here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-07T14:43:07.014+0000",
                    "updated": "2019-04-07T14:43:07.014+0000",
                    "started": "2019-04-07T14:43:07.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224135",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r272838290\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\trefCount int64\n+\tmsg      *flatbuf.Message\n+\tmeta     *memory.Buffer\n+\tbody     *memory.Buffer\n+}\n+\n+func NewMessage(meta, body *memory.Buffer) *Message {\n+\tmeta.Retain()\n+\tbody.Retain()\n+\treturn &Message{\n+\t\trefCount: 1,\n+\t\tmsg:      flatbuf.GetRootAsMessage(meta.Bytes(), 0),\n+\t\tmeta:     meta,\n+\t\tbody:     body,\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (msg *Message) Retain() {\n+\tatomic.AddInt64(&msg.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (msg *Message) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&msg.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&msg.refCount, -1) == 0 {\n+\t\tmsg.meta.Release()\n+\t\tmsg.body.Release()\n+\t\tmsg.msg = nil\n+\t\tmsg.meta = nil\n+\t\tmsg.body = nil\n+\t}\n+}\n+\n+func (msg Message) Version() MetadataVersion {\n+\treturn MetadataVersion(msg.msg.Version())\n+}\n+\n+func (msg Message) Type() MessageType {\n+\treturn MessageType(msg.msg.HeaderType())\n+}\n+\n+func (msg Message) BodyLen() int64 {\n+\treturn msg.msg.BodyLength()\n+}\n+\n+// MessageReader reads messages from an io.Reader.\n+type MessageReader struct {\n+\tr io.Reader\n+\n+\trefCount int64\n+\tmsg      *Message\n+}\n+\n+// NewMessageReader returns a reader that reads messages from an input stream.\n+func NewMessageReader(r io.Reader) (*MessageReader, error) {\n+\treturn &MessageReader{r: r, refCount: 1}, nil\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (r *MessageReader) Retain() {\n+\tatomic.AddInt64(&r.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (r *MessageReader) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&r.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&r.refCount, -1) == 0 {\n+\t\tif r.msg != nil {\n+\t\t\tr.msg.Release()\n+\t\t\tr.msg = nil\n+\t\t}\n+\t}\n+}\n+\n+// Message returns the current message that has been extracted from the\n+// underlying stream.\n+// It is valid until the next call to Message.\n+func (r *MessageReader) Message() (*Message, error) {\n+\tvar buf = make([]byte, 4)\n+\t_, err := io.ReadFull(r.r, buf)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"arrow/ipc: could not read message length\")\n+\t}\n+\tmsgLen := binary.LittleEndian.Uint32(buf)\n \n Review comment:\n   The spec says that the `metadata_size` is an `int32`. Isn't it a problem? (not sure)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-07T14:57:08.068+0000",
                    "updated": "2019-04-07T14:57:08.068+0000",
                    "started": "2019-04-07T14:57:08.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224136",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r272929897\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\trefCount int64\n+\tmsg      *flatbuf.Message\n+\tmeta     *memory.Buffer\n+\tbody     *memory.Buffer\n+}\n+\n+func NewMessage(meta, body *memory.Buffer) *Message {\n+\tmeta.Retain()\n+\tbody.Retain()\n+\treturn &Message{\n+\t\trefCount: 1,\n+\t\tmsg:      flatbuf.GetRootAsMessage(meta.Bytes(), 0),\n+\t\tmeta:     meta,\n+\t\tbody:     body,\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (msg *Message) Retain() {\n+\tatomic.AddInt64(&msg.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (msg *Message) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&msg.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&msg.refCount, -1) == 0 {\n+\t\tmsg.meta.Release()\n+\t\tmsg.body.Release()\n+\t\tmsg.msg = nil\n+\t\tmsg.meta = nil\n+\t\tmsg.body = nil\n+\t}\n+}\n+\n+func (msg Message) Version() MetadataVersion {\n+\treturn MetadataVersion(msg.msg.Version())\n+}\n+\n+func (msg Message) Type() MessageType {\n+\treturn MessageType(msg.msg.HeaderType())\n+}\n+\n+func (msg Message) BodyLen() int64 {\n+\treturn msg.msg.BodyLength()\n+}\n+\n+// MessageReader reads messages from an io.Reader.\n+type MessageReader struct {\n+\tr io.Reader\n+\n+\trefCount int64\n+\tmsg      *Message\n+}\n+\n+// NewMessageReader returns a reader that reads messages from an input stream.\n+func NewMessageReader(r io.Reader) (*MessageReader, error) {\n \n Review comment:\n   a leftover from my initial pie-in-the-sky \"design\" (where I reasonned that as it was taking an io.Reader, it would read stuff out of it and then perhaps fail.)\r\n   \r\n   but I think you're right.\r\n   I'll fix that. thanks!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T08:16:49.764+0000",
                    "updated": "2019-04-08T08:16:49.764+0000",
                    "started": "2019-04-08T08:16:49.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224243",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r272930150\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\trefCount int64\n+\tmsg      *flatbuf.Message\n+\tmeta     *memory.Buffer\n+\tbody     *memory.Buffer\n+}\n+\n+func NewMessage(meta, body *memory.Buffer) *Message {\n+\tmeta.Retain()\n+\tbody.Retain()\n+\treturn &Message{\n+\t\trefCount: 1,\n+\t\tmsg:      flatbuf.GetRootAsMessage(meta.Bytes(), 0),\n+\t\tmeta:     meta,\n+\t\tbody:     body,\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (msg *Message) Retain() {\n+\tatomic.AddInt64(&msg.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (msg *Message) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&msg.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&msg.refCount, -1) == 0 {\n+\t\tmsg.meta.Release()\n+\t\tmsg.body.Release()\n+\t\tmsg.msg = nil\n+\t\tmsg.meta = nil\n+\t\tmsg.body = nil\n+\t}\n+}\n+\n+func (msg Message) Version() MetadataVersion {\n+\treturn MetadataVersion(msg.msg.Version())\n+}\n+\n+func (msg Message) Type() MessageType {\n+\treturn MessageType(msg.msg.HeaderType())\n+}\n+\n+func (msg Message) BodyLen() int64 {\n+\treturn msg.msg.BodyLength()\n+}\n+\n+// MessageReader reads messages from an io.Reader.\n+type MessageReader struct {\n+\tr io.Reader\n+\n+\trefCount int64\n+\tmsg      *Message\n+}\n+\n+// NewMessageReader returns a reader that reads messages from an input stream.\n+func NewMessageReader(r io.Reader) (*MessageReader, error) {\n+\treturn &MessageReader{r: r, refCount: 1}, nil\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (r *MessageReader) Retain() {\n+\tatomic.AddInt64(&r.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (r *MessageReader) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&r.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&r.refCount, -1) == 0 {\n+\t\tif r.msg != nil {\n+\t\t\tr.msg.Release()\n+\t\t\tr.msg = nil\n+\t\t}\n+\t}\n+}\n+\n+// Message returns the current message that has been extracted from the\n+// underlying stream.\n+// It is valid until the next call to Message.\n+func (r *MessageReader) Message() (*Message, error) {\n+\tvar buf = make([]byte, 4)\n+\t_, err := io.ReadFull(r.r, buf)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"arrow/ipc: could not read message length\")\n+\t}\n+\tmsgLen := binary.LittleEndian.Uint32(buf)\n \n Review comment:\n   you're right. I'll fix that (shouldn't be a problem, though.)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T08:17:35.466+0000",
                    "updated": "2019-04-08T08:17:35.466+0000",
                    "started": "2019-04-08T08:17:35.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224246",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#issuecomment-480037190\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=h1) Report\n   > Merging [#4114](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/6907d972c91de654a1ef4eb2ed59e75a89fb6d00?src=pr&el=desc) will **decrease** coverage by `0.54%`.\n   > The diff coverage is `6.28%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4114/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4114      +/-   ##\n   ==========================================\n   - Coverage   87.84%   87.29%   -0.55%     \n   ==========================================\n     Files         739      745       +6     \n     Lines       90980    91619     +639     \n     Branches     1252     1252              \n   ==========================================\n   + Hits        79917    79975      +58     \n   - Misses      10942    11523     +581     \n     Partials      121      121\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/ipc/message.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21lc3NhZ2UuZ28=) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/reader.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL3JlYWRlci5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/ipc.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2lwYy5nbw==) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/ipc/metadata.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL21ldGFkYXRhLmdv) | `0% <0%> (\u00f8)` | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | `93.33% <100%> (+0.11%)` | :arrow_up: |\n   | [go/arrow/ipc/dict.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2RpY3QuZ28=) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `87.77% <35.71%> (-9.6%)` | :arrow_down: |\n   | [cpp/src/arrow/io/readahead.cc](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9yZWFkYWhlYWQuY2M=) | `95.95% <0%> (-1.02%)` | :arrow_down: |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `70.75% <0%> (-0.95%)` | :arrow_down: |\n   | ... and [11 more](https://codecov.io/gh/apache/arrow/pull/4114/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=footer). Last update [6907d97...404641c](https://codecov.io/gh/apache/arrow/pull/4114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T09:14:46.257+0000",
                    "updated": "2019-04-08T09:14:46.257+0000",
                    "started": "2019-04-08T09:14:46.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224255",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r273181938\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\trefCount int64\n+\tmsg      *flatbuf.Message\n+\tmeta     *memory.Buffer\n+\tbody     *memory.Buffer\n+}\n+\n+func NewMessage(meta, body *memory.Buffer) *Message {\n+\tmeta.Retain()\n+\tbody.Retain()\n+\treturn &Message{\n+\t\trefCount: 1,\n+\t\tmsg:      flatbuf.GetRootAsMessage(meta.Bytes(), 0),\n+\t\tmeta:     meta,\n+\t\tbody:     body,\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (msg *Message) Retain() {\n+\tatomic.AddInt64(&msg.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (msg *Message) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&msg.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&msg.refCount, -1) == 0 {\n+\t\tmsg.meta.Release()\n+\t\tmsg.body.Release()\n+\t\tmsg.msg = nil\n+\t\tmsg.meta = nil\n+\t\tmsg.body = nil\n+\t}\n+}\n+\n+func (msg Message) Version() MetadataVersion {\n \n Review comment:\n   Is there any reason why you switched from pointer to value receiver?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T18:30:04.052+0000",
                    "updated": "2019-04-08T18:30:04.052+0000",
                    "started": "2019-04-08T18:30:04.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224530",
                    "issueId": "13225845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/worklog/224532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on pull request #4114: ARROW-5108: [Go] implement reading primitive arrays from Arrow file\nURL: https://github.com/apache/arrow/pull/4114#discussion_r273183968\n \n \n\n ##########\n File path: go/arrow/ipc/message.go\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package ipc // import \"github.com/apache/arrow/go/arrow/ipc\"\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/internal/flatbuf\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// MetadataVersion represents the Arrow metadata version.\n+type MetadataVersion flatbuf.MetadataVersion\n+\n+const (\n+\tMetadataV1 = MetadataVersion(flatbuf.MetadataVersionV1) // version for Arrow-0.1.0\n+\tMetadataV2 = MetadataVersion(flatbuf.MetadataVersionV2) // version for Arrow-0.2.0\n+\tMetadataV3 = MetadataVersion(flatbuf.MetadataVersionV3) // version for Arrow-0.3.0 to 0.7.1\n+\tMetadataV4 = MetadataVersion(flatbuf.MetadataVersionV4) // version for >= Arrow-0.8.0\n+)\n+\n+func (m MetadataVersion) String() string {\n+\tif v, ok := flatbuf.EnumNamesMetadataVersion[int16(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MetadataVersion(%d)\", int16(m))\n+}\n+\n+// MessageType represents the type of Message in an Arrow format.\n+type MessageType flatbuf.MessageHeader\n+\n+const (\n+\tMessageNone            = MessageType(flatbuf.MessageHeaderNONE)\n+\tMessageSchema          = MessageType(flatbuf.MessageHeaderSchema)\n+\tMessageDictionaryBatch = MessageType(flatbuf.MessageHeaderDictionaryBatch)\n+\tMessageRecordBatch     = MessageType(flatbuf.MessageHeaderRecordBatch)\n+\tMessageTensor          = MessageType(flatbuf.MessageHeaderTensor)\n+\tMessageSparseTensor    = MessageType(flatbuf.MessageHeaderSparseTensor)\n+)\n+\n+func (m MessageType) String() string {\n+\tif v, ok := flatbuf.EnumNamesMessageHeader[byte(m)]; ok {\n+\t\treturn v\n+\t}\n+\treturn fmt.Sprintf(\"MessageType(%d)\", int(m))\n+}\n+\n+const (\n+\t// maxNestingDepth is an arbitrary value to catch user mistakes.\n+\t// For deeply nested schemas, it is expected the user will indicate\n+\t// explicitly the maximum allowed recursion depth.\n+\tmaxNestingDepth = 64\n+)\n+\n+// Message is an IPC message, including metadata and body.\n+type Message struct {\n+\trefCount int64\n+\tmsg      *flatbuf.Message\n+\tmeta     *memory.Buffer\n+\tbody     *memory.Buffer\n+}\n+\n+func NewMessage(meta, body *memory.Buffer) *Message {\n+\tmeta.Retain()\n+\tbody.Retain()\n+\treturn &Message{\n+\t\trefCount: 1,\n+\t\tmsg:      flatbuf.GetRootAsMessage(meta.Bytes(), 0),\n+\t\tmeta:     meta,\n+\t\tbody:     body,\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (msg *Message) Retain() {\n+\tatomic.AddInt64(&msg.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (msg *Message) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&msg.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&msg.refCount, -1) == 0 {\n+\t\tmsg.meta.Release()\n \n Review comment:\n   Maybe check for `msg.meta` and `msg.body` to be not nil before releasing them?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T18:35:19.294+0000",
                    "updated": "2019-04-08T18:35:19.294+0000",
                    "started": "2019-04-08T18:35:19.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224532",
                    "issueId": "13225845"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e871269[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fa28646[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55f91eaf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@e3232e0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41b9921e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@682c503a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75bd37f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6a87be93[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67a3f8bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6d04d9f1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@711a5120[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@263e0ab6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 16 09:45:30 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-04-16T09:45:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5108/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-04-03T15:55:28.000+0000",
        "updated": "2019-04-16T09:45:33.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement reading primitive arrays from Arrow file",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13225845/comment/16818843",
                    "id": "16818843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
                        "name": "sbinet",
                        "key": "sbinet",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
                        },
                        "displayName": "Sebastien Binet",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4114\n[https://github.com/apache/arrow/pull/4114]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
                        "name": "sbinet",
                        "key": "sbinet",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
                        },
                        "displayName": "Sebastien Binet",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-04-16T09:45:30.905+0000",
                    "updated": "2019-04-16T09:45:30.905+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z01f3c:",
        "customfield_12314139": null
    }
}