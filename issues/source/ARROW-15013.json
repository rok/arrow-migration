{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13415895",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895",
    "key": "ARROW-15013",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15013/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/719651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot opened a new pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324\n\n\n   This PR adds `concat_arrays()`, which is available in the Python bindings but not available in the R bindings. It's a difficult operation to replicate (although can be done using `ChunkedArray$Take()`) and is a fairly straightforward binding. I did a tiny bit more than the Python implementation to support a common type (like `Array$create()`) because it was easy...it sounds like a more robust approach is coming (via ARROW-14705 or by exposing `MergeOptions` to `arrow::Concatenate()`).\r\n   \r\n   Reprex:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   concat_arrays()\r\n   #> Array\r\n   #> <null>\r\n   #> 0 nulls\r\n   concat_arrays(type = int64())\r\n   #> Array\r\n   #> <int64>\r\n   #> []\r\n   \r\n   concat_arrays(Array$create(1:3), Array$create(4:5))\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5\r\n   #> ]\r\n   \r\n   # limited support for concatenating Arrays of differing types since this\r\n   # isn't exposed by arrow::Concatenate() yet\r\n   concat_arrays(\r\n     Array$create(1:3, type = float32()),\r\n     Array$create(4:5, type = float64()),\r\n     type = int64()\r\n   )\r\n   #> Array\r\n   #> <int64>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5\r\n   #> ]\r\n   \r\n   concat_arrays(\r\n     Array$create(1:3, type = float32()),\r\n     Array$create(4:5, type = float64())\r\n   )\r\n   #> Error: Invalid: arrays to be concatenated must be identically typed, but float and double were encountered.\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T20:14:27.237+0000",
                    "updated": "2022-02-02T20:14:27.237+0000",
                    "started": "2022-02-02T20:14:27.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719651",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/719652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#issuecomment-1028319062\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T20:14:49.754+0000",
                    "updated": "2022-02-02T20:14:49.754+0000",
                    "started": "2022-02-02T20:14:49.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719652",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/719697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#issuecomment-1028371974\n\n\n   Current behavior of the basic concat function `c` is this:\r\n   \r\n   ```r\r\n   > x <- Array$create(c(1, 2, 3))\r\n   > y <- Array$create(c(4, 5, 6))\r\n   > c(x, y)\r\n   [[1]]\r\n   Array\r\n   <double>\r\n   [\r\n     1,\r\n     2,\r\n     3\r\n   ]\r\n   \r\n   [[2]]\r\n   Array\r\n   <double>\r\n   [\r\n     4,\r\n     5,\r\n     6\r\n   ]\r\n   ```\r\n   \r\n   Could we make it so it uses this `concat_arrays` logic instead? Is that even possible?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T21:25:18.016+0000",
                    "updated": "2022-02-02T21:25:18.016+0000",
                    "started": "2022-02-02T21:25:18.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719697",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/721926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#issuecomment-1031494704\n\n\n   That's a great point! `c()` is a little funky but I added a method that brings it more in line with what a user would expect than the default behaviour that you demoed above:\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"apache/arrow/r#12324\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   x <- Array$create(c(1, 2, 3))\r\n   y <- Array$create(c(4, 5, 6))\r\n   c(x, y)\r\n   #> Array\r\n   #> <double>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5,\r\n   #>   6\r\n   #> ]\r\n   ```\r\n   \r\n   <sup>Created on 2022-02-07 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-07T13:56:23.124+0000",
                    "updated": "2022-02-07T13:56:23.124+0000",
                    "started": "2022-02-07T13:56:23.124+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721926",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/726639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806267955\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n+  expect_r6_class(c(Array$create(1L), Array$create(1L)), \"Array\")\n+\n+  struct <- call_function(\n+    \"make_struct\",\n+    Array$create(1L),\n+    options = list(field_names = \"\")\n+  )\n+  expect_r6_class(c(struct, struct), \"StructArray\")\n+\n+  list <- Array$create(list(1))\n+  expect_r6_class(c(list, list), \"ListArray\")\n+\n+  list <- Array$create(list(), type = large_list_of(float64()))\n+  expect_r6_class(c(list, list), \"LargeListArray\")\n+\n+  list <- Array$create(list(),type = fixed_size_list_of(float64(), 1L))\n+  expect_r6_class(c(list, list), \"FixedSizeListArray\")\n+\n+  list <- Array$create(list(),type = map_of(string(), float64()))\n\nReview comment:\n       ```suggestion\r\n     list <- Array$create(list(), type = map_of(string(), float64()))\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n+  expect_r6_class(c(Array$create(1L), Array$create(1L)), \"Array\")\n+\n+  struct <- call_function(\n+    \"make_struct\",\n+    Array$create(1L),\n+    options = list(field_names = \"\")\n+  )\n+  expect_r6_class(c(struct, struct), \"StructArray\")\n+\n+  list <- Array$create(list(1))\n+  expect_r6_class(c(list, list), \"ListArray\")\n+\n+  list <- Array$create(list(), type = large_list_of(float64()))\n+  expect_r6_class(c(list, list), \"LargeListArray\")\n+\n+  list <- Array$create(list(),type = fixed_size_list_of(float64(), 1L))\n\nReview comment:\n       ```suggestion\r\n     list <- Array$create(list(), type = fixed_size_list_of(float64(), 1L))\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n\nReview comment:\n       Could? Should? you also test for things like `c(Array$create(1L), 2L)` I imagine that would error, but does it with an informative message? \n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Out of (morbid?) curiosity: what does it do without the subclasses? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-14T21:58:49.684+0000",
                    "updated": "2022-02-14T21:58:49.684+0000",
                    "started": "2022-02-14T21:58:49.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726639",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/726997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806789891\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Good call! I thought this would fail:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   arr1 <- Array$create(1:3)\r\n   arr2 <- Array$create(4:5)\r\n   c(arr1, arr2)\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5\r\n   #> ]\r\n   \r\n   class(arr1) <- c(\"SomeSubclass\", class(arr1))\r\n   class(arr2) <- c(\"SomeOtherSubclass\", class(arr2))\r\n   c(arr1, arr2)\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5\r\n   #> ]\r\n   ```\r\n   \r\n   ...but it didn't, and removing all the extra `c()` methods didn't cause any of the tests to break, which means that for all practical purposes we don't need them. A better example of the madness I was thinking of is this:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   c(Array$create(1:3), wk::xy(1:2, 1:2))\r\n   #> Error: Invalid: arrays to be concatenated must be identically typed, but int32 and list<item: double> were encountered.\r\n   c( wk::xy(1:2, 1:2), Array$create(1:3))\r\n   #> Error: Can't combine 'wk_rcrd' objects that do not have identical classes.\r\n   ```\r\n   \r\n   (where if more than one `c()` method is defined you'll get different results depending on which one is first).\r\n   \r\n   The \"right way\" to do this is a full vctrs implementation but I don't think it's time for that quite yet.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T12:42:04.626+0000",
                    "updated": "2022-02-15T12:42:04.626+0000",
                    "started": "2022-02-15T12:42:04.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726997",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/726998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806791553\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n\nReview comment:\n       Good call! This is another example of the madness around `c()` (which we can do little about except circumvent it by eventually defining a vctrs implementation).\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   c(Array$create(1L), 2L)\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   c(2L, Array$create(1L))\r\n   #> [[1]]\r\n   #> [1] 2\r\n   #> \r\n   #> [[2]]\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1\r\n   #> ]\r\n   ```\r\n   \r\n   <sup>Created on 2022-02-15 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T12:44:08.248+0000",
                    "updated": "2022-02-15T12:44:08.248+0000",
                    "started": "2022-02-15T12:44:08.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726998",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806798917\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n\nReview comment:\n       ...I added a test from the `concat_arrays()` end since we do have control over that!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T12:52:49.438+0000",
                    "updated": "2022-02-15T12:52:49.438+0000",
                    "started": "2022-02-15T12:52:49.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727003",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806871651\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       _nods_ hmmmm yeah that is madness! And if we do define those extra methods that were here before, does this madness go away? (e.g. if we do `c( wk::xy(1:2, 1:2), Array$create(1:3))` what happens?)\r\n   \r\n   If we still get weird errors there,  I wonder if exposing `c()` is all that helpful before we do it the \"right way\"? \r\n   \r\n   We'll export our own concatenate method \u2014 so it's possible to use it, but I suspect that `c()` working only when the first element is an array will be a less-than-fun experience (with not too much upside anyway!).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T14:12:06.862+0000",
                    "updated": "2022-02-15T14:12:06.862+0000",
                    "started": "2022-02-15T14:12:06.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727038",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806873278\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,65 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"concat_arrays() coerces its input to Array\", {\n+  concat_ints <- concat_arrays(1L, 2L)\n+  expect_true(concat_ints$type == int32())\n+  expect_true(all(concat_ints == Array$create(c(1L, 2L))))\n\nReview comment:\n       Could we also add some non-sensical casts here too? (or at least what I would assume to be nonsensical!\r\n   \r\n   `concat_arrays(Array$create(1L), \"foo\")` or the like?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T14:13:39.480+0000",
                    "updated": "2022-02-15T14:13:39.480+0000",
                    "started": "2022-02-15T14:13:39.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727041",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806877934\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       As @wjones127 noted above, if we *don't* define it we get even weirder behaviour. I think it's more intuitive to define it than omit but am happy to leave it out too. The upside is that it's the first thing an R user might think to do (as Will thought to do immediately based on the comment above).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T14:18:01.307+0000",
                    "updated": "2022-02-15T14:18:01.307+0000",
                    "started": "2022-02-15T14:18:01.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727047",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806888074\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,65 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"concat_arrays() coerces its input to Array\", {\n+  concat_ints <- concat_arrays(1L, 2L)\n+  expect_true(concat_ints$type == int32())\n+  expect_true(all(concat_ints == Array$create(c(1L, 2L))))\n\nReview comment:\n       Done!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T14:27:16.774+0000",
                    "updated": "2022-02-15T14:27:16.774+0000",
                    "started": "2022-02-15T14:27:16.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727051",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806894046\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Hmm, maybe this is idiosyncratic but stuffing the arrays themselves into a vector seems not quite as bad to me, but I can see how that's (probably) not what people want. \r\n   \r\n   Then again, even without defining them we get odd behaviors depending on the order already anyway. This is from an arrow install that is not on this branch:\r\n   \r\n   ```\r\n   > c( wk::xy(1:2, 1:2), Array$create(1:3))\r\n   Error: Can't combine 'wk_rcrd' objects that do not have identical classes.\r\n   > c(Array$create(1:3), wk::xy(1:2, 1:2))\r\n   [[1]]\r\n   Array\r\n   <int32>\r\n   [\r\n     1,\r\n     2,\r\n     3\r\n   ]\r\n   \r\n   $x\r\n   [1] 1 2\r\n   \r\n   $y\r\n   [1] 1 2\r\n   ```\r\n   \r\n   I'm fine keeping it, either way we should mention in our docs that `c()` will probably be surprising\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T14:32:44.751+0000",
                    "updated": "2022-02-15T14:32:44.751+0000",
                    "started": "2022-02-15T14:32:44.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727054",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727188",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r807142173\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Done!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T17:56:42.402+0000",
                    "updated": "2022-02-15T17:56:42.402+0000",
                    "started": "2022-02-15T17:56:42.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727188",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r807163224\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,49 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' Concatenates zero or more [Array] objects into a single\n+#' array. This operation will copy its input; if you need\n+#' the behavior of a single Array but don't need a\n\nReview comment:\n       ```suggestion\r\n   #' array. This operation will make a copy of its input; if you need\r\n   #' the behavior of a single Array but don't need a\r\n   ```\r\n   \r\n   this is minor, but I think makes it a tiny bit clearer that it's doing a copying action (we might even go stronger?)\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,65 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"concat_arrays() coerces its input to Array\", {\n+  concat_ints <- concat_arrays(1L, 2L)\n+  expect_true(concat_ints$type == int32())\n+  expect_true(all(concat_ints == Array$create(c(1L, 2L))))\n\nReview comment:\n       \ud83c\udf89 \n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,75 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n\nReview comment:\n       Thanks for testing this! It is a bit funny, but I'm sure there's some convoluted reason to need to do this!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T18:24:11.197+0000",
                    "updated": "2022-02-15T18:24:11.197+0000",
                    "started": "2022-02-15T18:24:11.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727202",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806789891\n\n\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Good call! I thought this would fail:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   arr1 <- Array$create(1:3)\r\n   arr2 <- Array$create(4:5)\r\n   c(arr1, arr2)\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5\r\n   #> ]\r\n   \r\n   class(arr1) <- c(\"SomeSubclass\", class(arr1))\r\n   class(arr2) <- c(\"SomeOtherSubclass\", class(arr2))\r\n   c(arr1, arr2)\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5\r\n   #> ]\r\n   ```\r\n   \r\n   ...but it didn't, and removing all the extra `c()` methods didn't cause any of the tests to break, which means that for all practical purposes we don't need them. A better example of the madness I was thinking of is this:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   c(Array$create(1:3), wk::xy(1:2, 1:2))\r\n   #> Error: Invalid: arrays to be concatenated must be identically typed, but int32 and list<item: double> were encountered.\r\n   c( wk::xy(1:2, 1:2), Array$create(1:3))\r\n   #> Error: Can't combine 'wk_rcrd' objects that do not have identical classes.\r\n   ```\r\n   \r\n   (where if more than one `c()` method is defined you'll get different results depending on which one is first).\r\n   \r\n   The \"right way\" to do this is a full vctrs implementation but I don't think it's time for that quite yet.\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n\nReview comment:\n       Good call! This is another example of the madness around `c()` (which we can do little about except circumvent it by eventually defining a vctrs implementation).\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   c(Array$create(1L), 2L)\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   c(2L, Array$create(1L))\r\n   #> [[1]]\r\n   #> [1] 2\r\n   #> \r\n   #> [[2]]\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1\r\n   #> ]\r\n   ```\r\n   \r\n   <sup>Created on 2022-02-15 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n\nReview comment:\n       ...I added a test from the `concat_arrays()` end since we do have control over that!\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       As @wjones127 noted above, if we *don't* define it we get even weirder behaviour. I think it's more intuitive to define it than omit but am happy to leave it out too. The upside is that it's the first thing an R user might think to do (as Will thought to do immediately based on the comment above).\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,65 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"concat_arrays() coerces its input to Array\", {\n+  concat_ints <- concat_arrays(1L, 2L)\n+  expect_true(concat_ints$type == int32())\n+  expect_true(all(concat_ints == Array$create(c(1L, 2L))))\n\nReview comment:\n       Done!\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Done!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T18:49:15.364+0000",
                    "updated": "2022-02-15T18:49:15.364+0000",
                    "started": "2022-02-15T18:49:15.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727413",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r806267955\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n+  expect_r6_class(c(Array$create(1L), Array$create(1L)), \"Array\")\n+\n+  struct <- call_function(\n+    \"make_struct\",\n+    Array$create(1L),\n+    options = list(field_names = \"\")\n+  )\n+  expect_r6_class(c(struct, struct), \"StructArray\")\n+\n+  list <- Array$create(list(1))\n+  expect_r6_class(c(list, list), \"ListArray\")\n+\n+  list <- Array$create(list(), type = large_list_of(float64()))\n+  expect_r6_class(c(list, list), \"LargeListArray\")\n+\n+  list <- Array$create(list(),type = fixed_size_list_of(float64(), 1L))\n+  expect_r6_class(c(list, list), \"FixedSizeListArray\")\n+\n+  list <- Array$create(list(),type = map_of(string(), float64()))\n\nReview comment:\n       ```suggestion\r\n     list <- Array$create(list(), type = map_of(string(), float64()))\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n+  expect_r6_class(c(Array$create(1L), Array$create(1L)), \"Array\")\n+\n+  struct <- call_function(\n+    \"make_struct\",\n+    Array$create(1L),\n+    options = list(field_names = \"\")\n+  )\n+  expect_r6_class(c(struct, struct), \"StructArray\")\n+\n+  list <- Array$create(list(1))\n+  expect_r6_class(c(list, list), \"ListArray\")\n+\n+  list <- Array$create(list(), type = large_list_of(float64()))\n+  expect_r6_class(c(list, list), \"LargeListArray\")\n+\n+  list <- Array$create(list(),type = fixed_size_list_of(float64(), 1L))\n\nReview comment:\n       ```suggestion\r\n     list <- Array$create(list(), type = fixed_size_list_of(float64(), 1L))\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,59 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"c() works for Array\", {\n\nReview comment:\n       Could? Should? you also test for things like `c(Array$create(1L), 2L)` I imagine that would error, but does it with an informative message? \n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Out of (morbid?) curiosity: what does it do without the subclasses? \n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       _nods_ hmmmm yeah that is madness! And if we do define those extra methods that were here before, does this madness go away? (e.g. if we do `c( wk::xy(1:2, 1:2), Array$create(1:3))` what happens?)\r\n   \r\n   If we still get weird errors there,  I wonder if exposing `c()` is all that helpful before we do it the \"right way\"? \r\n   \r\n   We'll export our own concatenate method \u2014 so it's possible to use it, but I suspect that `c()` working only when the first element is an array will be a less-than-fun experience (with not too much upside anyway!).\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,65 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"concat_arrays() coerces its input to Array\", {\n+  concat_ints <- concat_arrays(1L, 2L)\n+  expect_true(concat_ints$type == int32())\n+  expect_true(all(concat_ints == Array$create(c(1L, 2L))))\n\nReview comment:\n       Could we also add some non-sensical casts here too? (or at least what I would assume to be nonsensical!\r\n   \r\n   `concat_arrays(Array$create(1L), \"foo\")` or the like?\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,76 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' @param ... zero or more [Array] objects to concatenate\n+#' @param type An optional `type` describing the desired\n+#'   type for the final Array.\n+#'\n+#' @return An [Array]\n+#' @export\n+#'\n+#' @examples\n+#' concat_arrays(Array$create(1:3), Array$create(4:5))\n+#'\n+concat_arrays <- function(..., type = NULL) {\n+  dots <- lapply(list2(...), Array$create, type = type)\n+\n+  if (length(dots) == 0 && is.null(type)) {\n+    return(Array$create(logical(), type = null()))\n+  } else if (length(dots) == 0) {\n+    return(Array$create(logical(), type = null())$cast(type))\n+  }\n+\n+  if (!is.null(type)) {\n+    dots <- lapply(dots, function(array) array$cast(type))\n+  }\n+\n+  arrow__Concatenate(dots)\n+}\n+\n+# The c() method uses non-standard dispatch in R\n+# and has some peculiarities when multiple types are passed to ....\n+# However, with a method defined for all subclasses of Array, it will\n+# do what a user expects most of the time.\n\nReview comment:\n       Hmm, maybe this is idiosyncratic but stuffing the arrays themselves into a vector seems not quite as bad to me, but I can see how that's (probably) not what people want. \r\n   \r\n   Then again, even without defining them we get odd behaviors depending on the order already anyway. This is from an arrow install that is not on this branch:\r\n   \r\n   ```\r\n   > c( wk::xy(1:2, 1:2), Array$create(1:3))\r\n   Error: Can't combine 'wk_rcrd' objects that do not have identical classes.\r\n   > c(Array$create(1:3), wk::xy(1:2, 1:2))\r\n   [[1]]\r\n   Array\r\n   <int32>\r\n   [\r\n     1,\r\n     2,\r\n     3\r\n   ]\r\n   \r\n   $x\r\n   [1] 1 2\r\n   \r\n   $y\r\n   [1] 1 2\r\n   ```\r\n   \r\n   I'm fine keeping it, either way we should mention in our docs that `c()` will probably be surprising\n\n##########\nFile path: r/R/array.R\n##########\n@@ -216,6 +216,49 @@ Array$create <- function(x, type = NULL) {\n #' @include arrowExports.R\n Array$import_from_c <- ImportArray\n \n+\n+#' Concatenate zero or more Arrays\n+#'\n+#' Concatenates zero or more [Array] objects into a single\n+#' array. This operation will copy its input; if you need\n+#' the behavior of a single Array but don't need a\n\nReview comment:\n       ```suggestion\r\n   #' array. This operation will make a copy of its input; if you need\r\n   #' the behavior of a single Array but don't need a\r\n   ```\r\n   \r\n   this is minor, but I think makes it a tiny bit clearer that it's doing a copying action (we might even go stronger?)\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,65 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_empty_typed <- concat_arrays(type = int64())\n+  expect_true(concat_empty_typed$type == int64())\n+  expect_equal(concat_empty$length(), 0L)\n+\n+  concat_int <- concat_arrays(Array$create(1:3), Array$create(4:5))\n+  expect_true(concat_int$type == int32())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  concat_int64 <- concat_arrays(\n+    Array$create(1:3),\n+    Array$create(4:5, type = int64()),\n+    type = int64()\n+  )\n+  expect_true(concat_int64$type == int64())\n+  expect_true(all(concat_int == Array$create(1:5)))\n+\n+  expect_error(\n+    concat_arrays(\n+      Array$create(1:3),\n+      Array$create(4:5, type = int64())\n+    ),\n+    \"must be identically typed\"\n+  )\n+})\n+\n+test_that(\"concat_arrays() coerces its input to Array\", {\n+  concat_ints <- concat_arrays(1L, 2L)\n+  expect_true(concat_ints$type == int32())\n+  expect_true(all(concat_ints == Array$create(c(1L, 2L))))\n\nReview comment:\n       \ud83c\udf89 \n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,75 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n\nReview comment:\n       Thanks for testing this! It is a bit funny, but I'm sure there's some convoluted reason to need to do this!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T18:55:00.113+0000",
                    "updated": "2022-02-15T18:55:00.113+0000",
                    "started": "2022-02-15T18:55:00.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727479",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r807192866\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,75 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n\nReview comment:\n       In R, `vctrs::vec_c()` returns `NULL`, which can be inserted into another `vec_c()` call without affecting the (type or size of the) result. A `null()` of length 0 works similarly in Arrow (it can be cast to any type). It's nice when programming (for the same reason that `all(logical(0))` is `TRUE`).\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(vctrs, warn.conflicts = FALSE)\r\n   \r\n   some_user_input1 <- list()\r\n   some_user_input2 <- list()\r\n   \r\n   result_of_some_op <- concat_arrays(!!! some_user_input1, !!! some_user_input2)\r\n   \r\n   some_user_input <- list(1L, 2:4)\r\n   \r\n   (final_result <- concat_arrays(!!! some_user_input, result_of_some_op, type = int32()))\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4\r\n   #> ]\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T19:06:10.198+0000",
                    "updated": "2022-02-15T19:06:10.198+0000",
                    "started": "2022-02-15T19:06:10.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727625",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#discussion_r807207163\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -989,6 +989,75 @@ test_that(\"auto int64 conversion to int can be disabled (ARROW-10093)\", {\n   })\n })\n \n+test_that(\"concat_arrays works\", {\n+  concat_empty <- concat_arrays()\n+  expect_true(concat_empty$type == null())\n+  expect_equal(concat_empty$length(), 0L)\n\nReview comment:\n       Aaah thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T19:07:29.261+0000",
                    "updated": "2022-02-15T19:07:29.261+0000",
                    "started": "2022-02-15T19:07:29.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727646",
                    "issueId": "13415895"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/worklog/727731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12324:\nURL: https://github.com/apache/arrow/pull/12324#issuecomment-1040680517\n\n\n   Benchmark runs are scheduled for baseline = 6a2ee11d30676f99e40dfd9af94915981180510b and contender = cca3800bd95c4476f695cccf2bf9f39abacf4bf3. cca3800bd95c4476f695cccf2bf9f39abacf4bf3 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/76f91706c7c7454abc183876a93df010...56547056e4004c21a8e0a426e97d5187/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/e04b89e7418f407e9273c377eb810a07...3fe240ea54c542d8918963d4704e702d/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/3ed781cf1b704a5eb320d8509aa27f51...6b3eb5d148714c0e86ce9d85df3558d4/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ed5b648699064c1ca4949d72bed2ac83...d19cb70b0fde4c21bc02b1120755ded2/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T19:13:23.094+0000",
                    "updated": "2022-02-15T19:13:23.094+0000",
                    "started": "2022-02-15T19:13:23.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727731",
                    "issueId": "13415895"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@30927c86[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e04274b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fc70dc5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@50564309[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70500162[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d6b3da1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a85b6ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@18a9fcbe[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6802b5d8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@ce01b4c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b85eeea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@c9eb528[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 15 19:07:12 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-15T19:07:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15013/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-12-07T19:19:00.000+0000",
        "updated": "2022-02-16T16:51:33.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently {{arrow::Concatenate()}} is not exposed at the R level. I imagine the preferred way to deal with this from a user perspective is to use {{ChunkedArray$create()}} for this; however, from a developer perspective it's very difficult to replicate this functionality. For example, another package using the Arrow C API might want to use the arrow R package to concatenate record batches complex nested types instead of implementing it themselves.\r\n\r\nExample usage in C++: https://github.com/apache/arrow/blob/9cf4275a19c994879172e5d3b03ade9a96a10721/r/src/r_to_arrow.cpp#L1215",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Expose concatenate at the R level",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/comment/17454809",
                    "id": "17454809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "It looks like this was implemented in Python in ARROW-5554.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2021-12-07T19:22:25.262+0000",
                    "updated": "2021-12-07T19:22:25.262+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415895/comment/17492832",
                    "id": "17492832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 12324\n[https://github.com/apache/arrow/pull/12324]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-15T19:07:12.576+0000",
                    "updated": "2022-02-15T19:07:12.576+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xfuw:",
        "customfield_12314139": null
    }
}