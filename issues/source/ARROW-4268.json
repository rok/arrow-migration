{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13209680",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680",
    "key": "ARROW-4268",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": 3600,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4268/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514\n \n \n   Add convenience support for native types, e.g. `TypeTraits<int8_t>` or\r\n   `auto type = TypeTraits<bool>::singleton_type();`. This is very handy in\r\n   tests.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-28T16:27:22.840+0000",
                    "updated": "2019-01-28T16:27:22.840+0000",
                    "started": "2019-01-28T16:27:22.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191105",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251507603\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -41,102 +41,78 @@ struct TypeTraits<NullType> {\n };\n \n template <>\n-struct TypeTraits<UInt8Type> {\n-  using ArrayType = UInt8Array;\n-  using BuilderType = UInt8Builder;\n-  using TensorType = UInt8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint8(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int8Type> {\n-  using ArrayType = Int8Array;\n-  using BuilderType = Int8Builder;\n-  using TensorType = Int8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int8(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt16Type> {\n-  using ArrayType = UInt16Array;\n-  using BuilderType = UInt16Builder;\n-  using TensorType = UInt16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint16(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int16Type> {\n-  using ArrayType = Int16Array;\n-  using BuilderType = Int16Builder;\n-  using TensorType = Int16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int16(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt32Type> {\n-  using ArrayType = UInt32Array;\n-  using BuilderType = UInt32Builder;\n-  using TensorType = UInt32Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint32_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint32(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int32Type> {\n-  using ArrayType = Int32Array;\n-  using BuilderType = Int32Builder;\n-  using TensorType = Int32Tensor;\n+struct TypeTraits<BooleanType> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using CType = bool;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int32_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int32(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n template <>\n-struct TypeTraits<UInt64Type> {\n-  using ArrayType = UInt64Array;\n-  using BuilderType = UInt64Builder;\n-  using TensorType = UInt64Tensor;\n+struct TypeTraits<bool> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using ArrowType = BooleanType;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint64_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint64(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n-template <>\n-struct TypeTraits<Int64Type> {\n-  using ArrayType = Int64Array;\n-  using BuilderType = Int64Builder;\n-  using TensorType = Int64Tensor;\n+#define PRIMITIVE_TYPE_TRAITS_DEF_(CType_, ArrowType_, ArrowArrayType, ArrowBuilderType, \\\n+                                   ArrowTensorType, SingletonFn)                       \\\n+  template <>                                                                            \\\n+  struct TypeTraits<ArrowType_> {                                                        \\\n+    using ArrayType = ArrowArrayType;                                                    \\\n+    using BuilderType = ArrowBuilderType;                                                \\\n+    using TensorType = ArrowTensorType;                                                  \\\n+    using CType = CType_;                                                                \\\n \n Review comment:\n   We use `c_type` in `CTypeImpl::c_type`. Either way we're inconsistent, though ;-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-28T17:08:42.085+0000",
                    "updated": "2019-01-28T17:08:42.085+0000",
                    "started": "2019-01-28T17:08:42.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191130",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251507175\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -41,102 +41,78 @@ struct TypeTraits<NullType> {\n };\n \n template <>\n-struct TypeTraits<UInt8Type> {\n-  using ArrayType = UInt8Array;\n-  using BuilderType = UInt8Builder;\n-  using TensorType = UInt8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint8(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int8Type> {\n-  using ArrayType = Int8Array;\n-  using BuilderType = Int8Builder;\n-  using TensorType = Int8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int8(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt16Type> {\n-  using ArrayType = UInt16Array;\n-  using BuilderType = UInt16Builder;\n-  using TensorType = UInt16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint16(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int16Type> {\n-  using ArrayType = Int16Array;\n-  using BuilderType = Int16Builder;\n-  using TensorType = Int16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int16(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt32Type> {\n-  using ArrayType = UInt32Array;\n-  using BuilderType = UInt32Builder;\n-  using TensorType = UInt32Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint32_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint32(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int32Type> {\n-  using ArrayType = Int32Array;\n-  using BuilderType = Int32Builder;\n-  using TensorType = Int32Tensor;\n+struct TypeTraits<BooleanType> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using CType = bool;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int32_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int32(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n template <>\n-struct TypeTraits<UInt64Type> {\n-  using ArrayType = UInt64Array;\n-  using BuilderType = UInt64Builder;\n-  using TensorType = UInt64Tensor;\n+struct TypeTraits<bool> {\n \n Review comment:\n   Instead of repeating an identical definition, would it be possible to write `struct TypeTraits<bool>: struct TypeTraits<BooleanType> {}`?\r\n   \r\n   Also I find it confusing to use the same template class name for Arrow type traits and C type traits, so perhaps `CTypeTraits<bool>` instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-28T17:08:42.255+0000",
                    "updated": "2019-01-28T17:08:42.255+0000",
                    "started": "2019-01-28T17:08:42.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191131",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251523902\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -41,102 +41,78 @@ struct TypeTraits<NullType> {\n };\n \n template <>\n-struct TypeTraits<UInt8Type> {\n-  using ArrayType = UInt8Array;\n-  using BuilderType = UInt8Builder;\n-  using TensorType = UInt8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint8(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int8Type> {\n-  using ArrayType = Int8Array;\n-  using BuilderType = Int8Builder;\n-  using TensorType = Int8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int8(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt16Type> {\n-  using ArrayType = UInt16Array;\n-  using BuilderType = UInt16Builder;\n-  using TensorType = UInt16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint16(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int16Type> {\n-  using ArrayType = Int16Array;\n-  using BuilderType = Int16Builder;\n-  using TensorType = Int16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int16(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt32Type> {\n-  using ArrayType = UInt32Array;\n-  using BuilderType = UInt32Builder;\n-  using TensorType = UInt32Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint32_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint32(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int32Type> {\n-  using ArrayType = Int32Array;\n-  using BuilderType = Int32Builder;\n-  using TensorType = Int32Tensor;\n+struct TypeTraits<BooleanType> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using CType = bool;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int32_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int32(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n template <>\n-struct TypeTraits<UInt64Type> {\n-  using ArrayType = UInt64Array;\n-  using BuilderType = UInt64Builder;\n-  using TensorType = UInt64Tensor;\n+struct TypeTraits<bool> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using ArrowType = BooleanType;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint64_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint64(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n-template <>\n-struct TypeTraits<Int64Type> {\n-  using ArrayType = Int64Array;\n-  using BuilderType = Int64Builder;\n-  using TensorType = Int64Tensor;\n+#define PRIMITIVE_TYPE_TRAITS_DEF_(CType_, ArrowType_, ArrowArrayType, ArrowBuilderType, \\\n+                                   ArrowTensorType, SingletonFn)                       \\\n+  template <>                                                                            \\\n+  struct TypeTraits<ArrowType_> {                                                        \\\n+    using ArrayType = ArrowArrayType;                                                    \\\n+    using BuilderType = ArrowBuilderType;                                                \\\n+    using TensorType = ArrowTensorType;                                                  \\\n+    using CType = CType_;                                                                \\\n \n Review comment:\n   Which inconsistency should we prefer? I prefer being close to the other using declaration in the same struct.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-28T17:50:57.328+0000",
                    "updated": "2019-01-28T17:50:57.328+0000",
                    "started": "2019-01-28T17:50:57.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191154",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251528711\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -41,102 +41,78 @@ struct TypeTraits<NullType> {\n };\n \n template <>\n-struct TypeTraits<UInt8Type> {\n-  using ArrayType = UInt8Array;\n-  using BuilderType = UInt8Builder;\n-  using TensorType = UInt8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint8(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int8Type> {\n-  using ArrayType = Int8Array;\n-  using BuilderType = Int8Builder;\n-  using TensorType = Int8Tensor;\n-  static constexpr int64_t bytes_required(int64_t elements) { return elements; }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int8(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt16Type> {\n-  using ArrayType = UInt16Array;\n-  using BuilderType = UInt16Builder;\n-  using TensorType = UInt16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint16(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int16Type> {\n-  using ArrayType = Int16Array;\n-  using BuilderType = Int16Builder;\n-  using TensorType = Int16Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int16_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int16(); }\n-};\n-\n-template <>\n-struct TypeTraits<UInt32Type> {\n-  using ArrayType = UInt32Array;\n-  using BuilderType = UInt32Builder;\n-  using TensorType = UInt32Tensor;\n-\n-  static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint32_t);\n-  }\n-  constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint32(); }\n-};\n-\n-template <>\n-struct TypeTraits<Int32Type> {\n-  using ArrayType = Int32Array;\n-  using BuilderType = Int32Builder;\n-  using TensorType = Int32Tensor;\n+struct TypeTraits<BooleanType> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using CType = bool;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(int32_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return int32(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n template <>\n-struct TypeTraits<UInt64Type> {\n-  using ArrayType = UInt64Array;\n-  using BuilderType = UInt64Builder;\n-  using TensorType = UInt64Tensor;\n+struct TypeTraits<bool> {\n+  using ArrayType = BooleanArray;\n+  using BuilderType = BooleanBuilder;\n+  using ArrowType = BooleanType;\n \n   static constexpr int64_t bytes_required(int64_t elements) {\n-    return elements * sizeof(uint64_t);\n+    return BitUtil::BytesForBits(elements);\n   }\n   constexpr static bool is_parameter_free = true;\n-  static inline std::shared_ptr<DataType> type_singleton() { return uint64(); }\n+  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n };\n \n-template <>\n-struct TypeTraits<Int64Type> {\n-  using ArrayType = Int64Array;\n-  using BuilderType = Int64Builder;\n-  using TensorType = Int64Tensor;\n+#define PRIMITIVE_TYPE_TRAITS_DEF_(CType_, ArrowType_, ArrowArrayType, ArrowBuilderType, \\\n+                                   ArrowTensorType, SingletonFn)                       \\\n+  template <>                                                                            \\\n+  struct TypeTraits<ArrowType_> {                                                        \\\n+    using ArrayType = ArrowArrayType;                                                    \\\n+    using BuilderType = ArrowBuilderType;                                                \\\n+    using TensorType = ArrowTensorType;                                                  \\\n+    using CType = CType_;                                                                \\\n \n Review comment:\n   I have no strong opinion on this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-28T18:04:26.314+0000",
                    "updated": "2019-01-28T18:04:26.314+0000",
                    "started": "2019-01-28T18:04:26.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191163",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251671163\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -24,47 +24,14 @@\n #include <vector>\n \n #include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n \n namespace arrow {\n \n class Schema;\n \n namespace stl {\n \n-/// Traits meta class to map standard C/C++ types to equivalent Arrow types.\n-template <typename T>\n-struct ConversionTraits {};\n \n Review comment:\n   Technically this is an API break, so I'd like @xhochy to sign off on this since he wrote this code initially\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-29T02:28:42.108+0000",
                    "updated": "2019-01-29T02:28:42.108+0000",
                    "started": "2019-01-29T02:28:42.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191348",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251750887\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -24,47 +24,14 @@\n #include <vector>\n \n #include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n \n namespace arrow {\n \n class Schema;\n \n namespace stl {\n \n-/// Traits meta class to map standard C/C++ types to equivalent Arrow types.\n-template <typename T>\n-struct ConversionTraits {};\n \n Review comment:\n   The code is not released yet, so this break is ok. I will test with my consumer code locally this afternoon and report back.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-29T09:27:12.904+0000",
                    "updated": "2019-01-29T09:27:12.904+0000",
                    "started": "2019-01-29T09:27:12.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191561",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/191635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#discussion_r251806901\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -24,47 +24,14 @@\n #include <vector>\n \n #include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n \n namespace arrow {\n \n class Schema;\n \n namespace stl {\n \n-/// Traits meta class to map standard C/C++ types to equivalent Arrow types.\n-template <typename T>\n-struct ConversionTraits {};\n \n Review comment:\n   I think that perhaps we should mark the STL bridge API experimental, as it's not clear yet what the best way to expose the functionality is.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-29T12:12:57.861+0000",
                    "updated": "2019-01-29T12:12:57.861+0000",
                    "started": "2019-01-29T12:12:57.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191635",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/192529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514#issuecomment-459126629\n \n \n   Merging this. If it causes an issue Uwe or others will be able to sort it out quickly\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-30T22:00:01.643+0000",
                    "updated": "2019-01-30T22:00:01.643+0000",
                    "started": "2019-01-30T22:00:01.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "192529",
                    "issueId": "13209680"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/worklog/192530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3514: ARROW-4268: [C++] Native C type TypeTraits\nURL: https://github.com/apache/arrow/pull/3514\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-30T22:00:33.644+0000",
                    "updated": "2019-01-30T22:00:33.644+0000",
                    "started": "2019-01-30T22:00:33.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "192530",
                    "issueId": "13209680"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5a07f8f6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@604c7b20[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5859b60c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b4f435c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76d633e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2abe58f0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f42727d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1e36936a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59b8ca49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1996056[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2de42b82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7635097[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jan 30 22:00:46 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-30T22:00:46.000+0000",
        "workratio": 166,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4268/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-01-15T15:46:02.000+0000",
        "updated": "2019-01-30T22:00:46.000+0000",
        "timeoriginalestimate": 3600,
        "description": "The user would use something like\r\n{code:c++}\r\n...\r\nusing ArrowType = CTypeTraits<int64>::ArrowType;\r\nusing ArrayType = CTypeTraits<int64>::ArrayType;\r\n\r\nauto type = CTypeTraits<int64>::type_singleton();\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "originalEstimate": "1h",
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "originalEstimateSeconds": 3600,
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add C primitive to Arrow:Type compile time in TypeTraits",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/comment/16743182",
                    "id": "16743182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "This is already (nearly) covered by {{arrow::stl::ConversionTraits}}. The intent here is to move that part into a more global header?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-01-15T16:11:25.120+0000",
                    "updated": "2019-01-15T16:11:25.120+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/comment/16743191",
                    "id": "16743191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The current implementation does not AFAIK return compile time information. I think that changing `struct ConversionTraits<c_type> {` to `struct ConversionTraits<c_type> : public TypeTraits<ArrowType_> {` would provide most of it.\r\n\r\nAlso as someone still newish to the codebase, my first instinct was to look into `type_traits.h` and not `stl.h`, but that might just be due to the lack of documentation.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-15T16:17:59.625+0000",
                    "updated": "2019-01-15T16:17:59.625+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/comment/16744227",
                    "id": "16744227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "We can move stuff out from {{arrow::stl}}\u00a0into the {{type_traits.h}} header. Currently it is not at that more central place as the stl functionality has not yet been a first class citizen in the projects. Most of Arrow's structures are built for runtime types, not compile-time types. We still need to support for those that already know their column types during compilation.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-01-16T16:28:50.623+0000",
                    "updated": "2019-01-16T16:28:50.623+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13209680/comment/16756597",
                    "id": "16756597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "resolved by https://github.com/apache/arrow/commit/012f77a96880cff49f588ae1ff2f65d5105ee433",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-30T22:00:46.654+0000",
                    "updated": "2019-01-30T22:00:46.654+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|y00160:",
        "customfield_12314139": null
    }
}