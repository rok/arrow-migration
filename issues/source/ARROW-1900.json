{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13123510",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510",
    "key": "ARROW-1900",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12570066",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12570066",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13103421",
                    "key": "ARROW-1564",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103421",
                    "fields": {
                        "summary": "[C++] Kernel functions for computing minimum and maximum of an array in one pass",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12570064",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12570064",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13103433",
                    "key": "ARROW-1571",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433",
                    "fields": {
                        "summary": "[C++] Implement argsort kernels (sort indices) for integers using O(n) counting sort",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1900/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/330574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697\n \n \n   https://issues.apache.org/jira/browse/ARROW-1900\r\n   \r\n   Some to do's:\r\n   \r\n   - Return min and/or max (should we always return both, or return one of both specified through an option?)\r\n   - Option to not skip nulls?\r\n   - How to handle NaN for floating point? Currently (determined by `std:fmin`) it is ignored, but we should maybe rather propagate it?\r\n   - Corner cases such as zero-length array\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-18T15:37:14.339+0000",
                    "updated": "2019-10-18T15:37:14.339+0000",
                    "started": "2019-10-18T15:37:14.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "330574",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/330580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#issuecomment-543804825\n \n \n   https://issues.apache.org/jira/browse/ARROW-1900\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-18T15:46:24.840+0000",
                    "updated": "2019-10-18T15:46:24.840+0000",
                    "started": "2019-10-18T15:46:24.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "330580",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/334762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#issuecomment-546788358\n \n \n   @jorisvandenbossche did you want this reviewed, or were you planning on fixing the TODOs first?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-28T04:40:53.995+0000",
                    "updated": "2019-10-28T04:40:53.995+0000",
                    "started": "2019-10-28T04:40:53.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334762",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on issue #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#issuecomment-553934441\n \n \n   I rebased this PR. \r\n   I think the main C++ technical question for me is how we want to handle the return value of both min and max (return both? but how to do that with Datum?)\r\n   \r\n   > Corner cases such as zero-length array\r\n   \r\n   Comparing with numpy, and there an error is raised when the array is empty:\r\n   \r\n   ```\r\n   In [4]: np.array([], dtype=float).min() \r\n   ...\r\n   ValueError: zero-size array to reduction operation minimum which has no identity\r\n   ```\r\n   \r\n   We should probably do the same?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T15:19:49.394+0000",
                    "updated": "2019-11-14T15:19:49.394+0000",
                    "started": "2019-11-14T15:19:49.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343466",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#issuecomment-553944728\n \n \n   @jorisvandenbossche that seems reasonable to me\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T15:42:19.893+0000",
                    "updated": "2019-11-14T15:42:19.893+0000",
                    "started": "2019-11-14T15:42:19.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343480",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#issuecomment-553944728\n \n \n   @jorisvandenbossche error on empty seems reasonable to me\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T15:42:38.328+0000",
                    "updated": "2019-11-14T15:42:38.328+0000",
                    "started": "2019-11-14T15:42:38.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343482",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r346409719\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   I think it's fine to return a COLLECTION of the min, max\r\n   ```suggestion\r\n       *output = Datum({Datum(src.min), Datum(src.max)});\r\n   ```\r\n   But explicitly mention in the doccomment that the output is a COLLECTION of two scalars, the min and max (in that order)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:19:18.918+0000",
                    "updated": "2019-11-14T16:19:18.918+0000",
                    "started": "2019-11-14T16:19:18.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343508",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r346461016\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   Ah, didn't know that a Datum could have a vector of items, thanks! OK, this part turned out to be rather easy to adapt.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T17:58:18.648+0000",
                    "updated": "2019-11-14T17:58:18.648+0000",
                    "started": "2019-11-14T17:58:18.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343589",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r346462815\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n ##########\n @@ -308,5 +312,59 @@ TYPED_TEST(TestRandomNumericCountKernel, RandomArrayCount) {\n   }\n }\n \n+///\n+/// Min / Max\n+///\n+\n+template <typename ArrowType>\n+class TestNumericMinMaxKernel : public ComputeFixture, public TestBase {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename ArrayType::value_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  template <typename T>\n+  void AssertMinMaxIs(std::string array_json, T expected_min, T expected_max,\n+                      const MinMaxOptions& options) {\n+    auto array = ArrayFromJSON(Traits::type_singleton(), array_json);\n+    Datum out, out_min, out_max;\n+    ASSERT_OK(MinMax(&this->ctx_, options, *array, &out));\n+\n+    ASSERT_TRUE(out.is_collection());\n+    auto col = out.collection();\n+\n+    out_min = col[0];\n+    ASSERT_TRUE(out_min.is_scalar());\n+    auto min = checked_pointer_cast<ScalarType>(out_min.scalar());\n+    ASSERT_EQ(min->value, static_cast<c_type>(expected_min));\n+\n+    out_max = col[1];\n+    ASSERT_TRUE(out_max.is_scalar());\n+    auto max = checked_pointer_cast<ScalarType>(out_max.scalar());\n+    ASSERT_EQ(max->value, static_cast<c_type>(expected_max));\n+  }\n+};\n+\n+template <typename ArrowType>\n+class TestFloatingMinMaxKernel : public TestNumericMinMaxKernel<ArrowType> {};\n+\n+TYPED_TEST_CASE(TestNumericMinMaxKernel, IntegralArrowTypes);\n+TYPED_TEST(TestNumericMinMaxKernel, Basics) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+}\n+\n+TYPED_TEST_CASE(TestFloatingMinMaxKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingMinMaxKernel, Floats) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+  // this->AssertMinMaxIs(\"[5, Inf, 2, 3, 4]\", 2.0, INFINITY, options);\n \n Review comment:\n   For this line, I run into the following problem:\r\n   \r\n   ```\r\n   ../src/arrow/compute/kernels/aggregate_test.cc: In instantiation of 'void arrow::compute::TestFloatingMinMaxKernel_Floats_Test<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = arrow::DoubleType]':\r\n   ../src/arrow/array/builder_binary.h:398:20:   required from here\r\n   ../src/arrow/compute/kernels/aggregate_test.cc:366:3: error: no matching function for call to 'arrow::compute::TestFloatingMinMaxKernel_Floats_Test<arrow::DoubleType>::AssertMinMaxIs(const char [19], float, int, arrow::compute::MinMaxOptions&)'\r\n      this->AssertMinMaxIs(\"[5, -Inf, 2, 3, 4]\", -INFINITY, 5, options);\r\n      ^~~~\r\n   ../src/arrow/compute/kernels/aggregate_test.cc:329:8: note: candidate: template<class T> void arrow::compute::TestNumericMinMaxKernel<ArrowType>::AssertMinMaxIs(std::__cxx11::string, T, T, const arrow::compute::MinMaxOptions&) [with T = T; ArrowType = arrow::DoubleType]\r\n      void AssertMinMaxIs(std::string array_json, T expected_min, T expected_max, const MinMaxOptions& options) {\r\n           ^~~~~~~~~~~~~~\r\n   ../src/arrow/compute/kernels/aggregate_test.cc:329:8: note:   template argument deduction/substitution failed:\r\n   ../src/arrow/compute/kernels/aggregate_test.cc:366:3: note:   deduced conflicting types for parameter 'T' ('float' and 'int')\r\n      this->AssertMinMaxIs(\"[5, -Inf, 2, 3, 4]\", -INFINITY, 5, options);\r\n   ```\r\n   \r\n   so as long as both arguments are integers (eg the line above), it seems fine to interpret them as floats or doubles. \r\n   Is there a way that I can use one of the template variables of above to already cast this to the correct type?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T18:02:07.796+0000",
                    "updated": "2019-11-14T18:02:07.796+0000",
                    "started": "2019-11-14T18:02:07.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343600",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r346484791\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n ##########\n @@ -308,5 +312,59 @@ TYPED_TEST(TestRandomNumericCountKernel, RandomArrayCount) {\n   }\n }\n \n+///\n+/// Min / Max\n+///\n+\n+template <typename ArrowType>\n+class TestNumericMinMaxKernel : public ComputeFixture, public TestBase {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename ArrayType::value_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  template <typename T>\n+  void AssertMinMaxIs(std::string array_json, T expected_min, T expected_max,\n+                      const MinMaxOptions& options) {\n+    auto array = ArrayFromJSON(Traits::type_singleton(), array_json);\n+    Datum out, out_min, out_max;\n+    ASSERT_OK(MinMax(&this->ctx_, options, *array, &out));\n+\n+    ASSERT_TRUE(out.is_collection());\n+    auto col = out.collection();\n+\n+    out_min = col[0];\n+    ASSERT_TRUE(out_min.is_scalar());\n+    auto min = checked_pointer_cast<ScalarType>(out_min.scalar());\n+    ASSERT_EQ(min->value, static_cast<c_type>(expected_min));\n+\n+    out_max = col[1];\n+    ASSERT_TRUE(out_max.is_scalar());\n+    auto max = checked_pointer_cast<ScalarType>(out_max.scalar());\n+    ASSERT_EQ(max->value, static_cast<c_type>(expected_max));\n+  }\n+};\n+\n+template <typename ArrowType>\n+class TestFloatingMinMaxKernel : public TestNumericMinMaxKernel<ArrowType> {};\n+\n+TYPED_TEST_CASE(TestNumericMinMaxKernel, IntegralArrowTypes);\n+TYPED_TEST(TestNumericMinMaxKernel, Basics) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+}\n+\n+TYPED_TEST_CASE(TestFloatingMinMaxKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingMinMaxKernel, Floats) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+  // this->AssertMinMaxIs(\"[5, Inf, 2, 3, 4]\", 2.0, INFINITY, options);\n \n Review comment:\n   The simplest fix is to rewrite `AssertMinMaxIs` with separate template arguments for min and max type.\r\n   ```c++\r\n     template <typename Min, typename Max>\r\n     void AssertMinMaxIs(std::string array_json, Min expected_min, Max expected_max, \r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T18:48:51.094+0000",
                    "updated": "2019-11-14T18:48:51.094+0000",
                    "started": "2019-11-14T18:48:51.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343643",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r346484791\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n ##########\n @@ -308,5 +312,59 @@ TYPED_TEST(TestRandomNumericCountKernel, RandomArrayCount) {\n   }\n }\n \n+///\n+/// Min / Max\n+///\n+\n+template <typename ArrowType>\n+class TestNumericMinMaxKernel : public ComputeFixture, public TestBase {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename ArrayType::value_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  template <typename T>\n+  void AssertMinMaxIs(std::string array_json, T expected_min, T expected_max,\n+                      const MinMaxOptions& options) {\n+    auto array = ArrayFromJSON(Traits::type_singleton(), array_json);\n+    Datum out, out_min, out_max;\n+    ASSERT_OK(MinMax(&this->ctx_, options, *array, &out));\n+\n+    ASSERT_TRUE(out.is_collection());\n+    auto col = out.collection();\n+\n+    out_min = col[0];\n+    ASSERT_TRUE(out_min.is_scalar());\n+    auto min = checked_pointer_cast<ScalarType>(out_min.scalar());\n+    ASSERT_EQ(min->value, static_cast<c_type>(expected_min));\n+\n+    out_max = col[1];\n+    ASSERT_TRUE(out_max.is_scalar());\n+    auto max = checked_pointer_cast<ScalarType>(out_max.scalar());\n+    ASSERT_EQ(max->value, static_cast<c_type>(expected_max));\n+  }\n+};\n+\n+template <typename ArrowType>\n+class TestFloatingMinMaxKernel : public TestNumericMinMaxKernel<ArrowType> {};\n+\n+TYPED_TEST_CASE(TestNumericMinMaxKernel, IntegralArrowTypes);\n+TYPED_TEST(TestNumericMinMaxKernel, Basics) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+}\n+\n+TYPED_TEST_CASE(TestFloatingMinMaxKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingMinMaxKernel, Floats) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+  // this->AssertMinMaxIs(\"[5, Inf, 2, 3, 4]\", 2.0, INFINITY, options);\n \n Review comment:\n   @jorisvandenbossche The simplest fix is to rewrite `AssertMinMaxIs` with separate template arguments for min and max type.\r\n   ```c++\r\n     template <typename Min, typename Max>\r\n     void AssertMinMaxIs(std::string array_json, Min expected_min, Max expected_max, \r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T18:49:15.475+0000",
                    "updated": "2019-11-14T18:49:15.475+0000",
                    "started": "2019-11-14T18:49:15.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343644",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/343653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r346488172\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n ##########\n @@ -308,5 +312,59 @@ TYPED_TEST(TestRandomNumericCountKernel, RandomArrayCount) {\n   }\n }\n \n+///\n+/// Min / Max\n+///\n+\n+template <typename ArrowType>\n+class TestNumericMinMaxKernel : public ComputeFixture, public TestBase {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename ArrayType::value_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  template <typename T>\n+  void AssertMinMaxIs(std::string array_json, T expected_min, T expected_max,\n+                      const MinMaxOptions& options) {\n+    auto array = ArrayFromJSON(Traits::type_singleton(), array_json);\n+    Datum out, out_min, out_max;\n+    ASSERT_OK(MinMax(&this->ctx_, options, *array, &out));\n+\n+    ASSERT_TRUE(out.is_collection());\n+    auto col = out.collection();\n+\n+    out_min = col[0];\n+    ASSERT_TRUE(out_min.is_scalar());\n+    auto min = checked_pointer_cast<ScalarType>(out_min.scalar());\n+    ASSERT_EQ(min->value, static_cast<c_type>(expected_min));\n+\n+    out_max = col[1];\n+    ASSERT_TRUE(out_max.is_scalar());\n+    auto max = checked_pointer_cast<ScalarType>(out_max.scalar());\n+    ASSERT_EQ(max->value, static_cast<c_type>(expected_max));\n+  }\n+};\n+\n+template <typename ArrowType>\n+class TestFloatingMinMaxKernel : public TestNumericMinMaxKernel<ArrowType> {};\n+\n+TYPED_TEST_CASE(TestNumericMinMaxKernel, IntegralArrowTypes);\n+TYPED_TEST(TestNumericMinMaxKernel, Basics) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+}\n+\n+TYPED_TEST_CASE(TestFloatingMinMaxKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingMinMaxKernel, Floats) {\n+  MinMaxOptions options;\n+  this->AssertMinMaxIs(\"[5, 1, 2, 3, 4]\", 1, 5, options);\n+  this->AssertMinMaxIs(\"[5, null, 2, 3, 4]\", 2, 5, options);\n+  // this->AssertMinMaxIs(\"[5, Inf, 2, 3, 4]\", 2.0, INFINITY, options);\n \n Review comment:\n   Thanks, that works!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T18:55:35.002+0000",
                    "updated": "2019-11-14T18:55:35.002+0000",
                    "started": "2019-11-14T18:55:35.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343653",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/344819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r347092929\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   Should we prefer a struct scalar?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-16T14:03:10.246+0000",
                    "updated": "2019-11-16T14:03:10.246+0000",
                    "started": "2019-11-16T14:03:10.246+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "344819",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/344822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r347093559\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   Is there a reason to prefer that over COLLECTION? It'll be more work to unpack the struct scalar\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-16T14:21:59.587+0000",
                    "updated": "2019-11-16T14:21:59.587+0000",
                    "started": "2019-11-16T14:21:59.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "344822",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/344823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r347094144\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   Scratch that, it's the same. Still, why not COLLECTION?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-16T14:39:03.466+0000",
                    "updated": "2019-11-16T14:39:03.466+0000",
                    "started": "2019-11-16T14:39:03.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "344823",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/344825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r347094773\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   Maybe if we added `StructScalar::GetFieldByName()`:\r\n   \r\n   ```c++\r\n   Datum out;\r\n   MinMax(..., &out);\r\n   checked_pointer_cast<StructScalar>(out.scalar())->GetFieldByName(\"min\");\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-16T14:58:56.610+0000",
                    "updated": "2019-11-16T14:58:56.610+0000",
                    "started": "2019-11-16T14:58:56.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "344825",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/345267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r347362064\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   Struct are easier to evolve since the caller doesn't have to know the absolute index since it's referenced by name. It's also explicit when reading code. We should make a decision global wise for kernel returning complex data.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-18T12:51:00.673+0000",
                    "updated": "2019-11-18T12:51:00.673+0000",
                    "started": "2019-11-18T12:51:00.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "345267",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/345332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#discussion_r347430960\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/minmax.cc\n ##########\n @@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <limits>\n+#include <utility>\n+\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/compute/kernels/minmax.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+template <typename ArrowType, typename Enable = void>\n+struct MinMaxState {};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_integer_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::min(this->min, rhs.min);\n+    this->max = std::max(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::min(this->min, value);\n+    this->max = std::max(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::max();\n+  c_type max = std::numeric_limits<c_type>::min();\n+};\n+\n+template <typename ArrowType>\n+struct MinMaxState<ArrowType,\n+                   typename std::enable_if<is_floating_type<ArrowType>::value>::type> {\n+  using ThisType = MinMaxState<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+\n+  ThisType& operator+=(const ThisType& rhs) {\n+    this->min = std::fmin(this->min, rhs.min);\n+    this->max = std::fmax(this->max, rhs.max);\n+    return *this;\n+  }\n+\n+  void MergeOne(c_type value) {\n+    this->min = std::fmin(this->min, value);\n+    this->max = std::fmax(this->max, value);\n+  }\n+\n+  c_type min = std::numeric_limits<c_type>::infinity();\n+  c_type max = -std::numeric_limits<c_type>::infinity();\n+};\n+\n+template <typename ArrowType>\n+class MinMaxAggregateFunction final\n+    : public AggregateFunctionStaticState<MinMaxState<ArrowType>> {\n+ public:\n+  using StateType = MinMaxState<ArrowType>;\n+\n+  explicit MinMaxAggregateFunction(const MinMaxOptions& options) : options_(options) {}\n+\n+  Status Consume(const Array& array, StateType* state) const override {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values =\n+        checked_cast<const typename TypeTraits<ArrowType>::ArrayType&>(array)\n+            .raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.MergeOne(values[i]);\n+      }\n+      reader.Next();\n+    }\n+    *state = local;\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = Datum(src.min);\n \n Review comment:\n   I think since the name of the kernel is \"MinMax\" either is acceptable in this case\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-18T15:04:13.887+0000",
                    "updated": "2019-11-18T15:04:13.887+0000",
                    "started": "2019-11-18T15:04:13.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "345332",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/345425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697#issuecomment-555117356\n \n \n   merging\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-18T17:18:05.275+0000",
                    "updated": "2019-11-18T17:18:05.275+0000",
                    "started": "2019-11-18T17:18:05.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "345425",
                    "issueId": "13123510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/worklog/345426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5697: ARROW-1900: [C++] Add kernel for min / max\nURL: https://github.com/apache/arrow/pull/5697\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-18T17:18:48.909+0000",
                    "updated": "2019-11-18T17:18:48.909+0000",
                    "started": "2019-11-18T17:18:48.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "345426",
                    "issueId": "13123510"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@57789f29[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12f2efbb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e3b1f0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7e91920[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33e008c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2d26236f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32d57b0a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7dba5469[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e2fd520[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@520eaad1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b1a96b1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@642c8aa7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 18 17:18:52 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-18T17:18:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1900/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-12-07T17:21:35.000+0000",
        "updated": "2019-11-18T17:18:52.000+0000",
        "timeoriginalestimate": null,
        "description": "These functions can be useful internally for determining when a \"small range\" alternative to a hash table can be used for integer arrays. The maximum and minimum is determined in a single scan.\r\n\r\nWe already have infrastructure for aggregate kernels, so this would be an easy addition.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add kernel functions for determining value range (maximum and minimum) of integer arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/comment/16336403",
                    "id": "16336403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Shall we add this function (GetValueRange) to base class Array or derived class PrimitiveArray?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-23T21:32:06.359+0000",
                    "updated": "2018-01-23T21:32:17.322+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/comment/16336497",
                    "id": "16336497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Let's leave this issue lie for a little while -- we can implement this when we get around to implementing \"small range\" optimizations in the hash table algorithms. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-23T22:50:10.067+0000",
                    "updated": "2018-01-23T22:50:10.067+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/comment/16336556",
                    "id": "16336556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Do you mean ARROW-1942?\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-23T23:38:57.793+0000",
                    "updated": "2018-01-23T23:38:57.793+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/comment/16336732",
                    "id": "16336732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "No, with int8, uint8, the range is always small so there is no need to examine the data. With int32 or int64 data, if the range of the data is small you can avoid a normal hash table scan. You need access to the whole array at once to do this so it may not be practical in Arrow in general ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-24T01:51:28.198+0000",
                    "updated": "2018-01-24T01:51:28.198+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/comment/16943794",
                    "id": "16943794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "This would have been helpful in ARROW-3808, not as an optimization but because I literally wanted the min and max of an integer array.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-10-03T17:59:26.873+0000",
                    "updated": "2019-10-03T17:59:26.873+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510/comment/16976717",
                    "id": "16976717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5697\n[https://github.com/apache/arrow/pull/5697]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-18T17:18:52.006+0000",
                    "updated": "2019-11-18T17:18:52.006+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|i3nnpb:",
        "customfield_12314139": null
    }
}