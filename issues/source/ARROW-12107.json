{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13368005",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005",
    "key": "ARROW-12107",
    "fields": {
        "parent": {
            "id": "13366168",
            "key": "ARROW-12020",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13366168",
            "fields": {
                "summary": "[Rust][DataFusion] Adding SHOW TABLES and SHOW COLUMNS + partial information_schema support to DataFusion",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12107/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/573668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840\n\n\n   Note this builds on the code in #9818 so putting up as a draft until that PR is merged\r\n   \r\n   # Rationale\r\n   \r\n   Provide schema metadata access (so a user can see what columns exist and their type).\r\n   \r\n   See the doc for background: https://docs.google.com/document/d/12cpZUSNPqVH9Z0BBx6O8REu7TFqL-NPPAYCUPpDls1k/edit#\r\n   \r\n   I plan to add support for `SHOW COLUMNS` possibly as a follow on PR (though I have found out that `SHOW COLUMNS` and `SHOW TABLES` are not supported by either MySQL or by Postgres :thinking_face:)\r\n   \r\n   # Changes\r\n   I chose to add the firt 15 columns from `information_schema.columns` You can see the full list in Postgres [here](https://www.postgresql.org/docs/9.5/infoschema-columns.html) and SQL Server [here](https://docs.microsoft.com/en-us/sql/relational-databases/system-information-schema-views/columns-transact-sql?view=sql-server-ver15). \r\n   \r\n   There are a bunch more columns that say \"Applies to features not available in PostgreSQL\" and that don't apply to DataFusion either-- since my usecase is to get the basic schema information out I chose not to add a bunch of columns that are always null at this time.\r\n   \r\n   I feel the use of column builders here is somewhat awkward (as it requires many calls to `unwrap`). I am thinking of a follow on PR to refactor this code to use `Vec<String>` and `Vec<u64>` and then create `StringArray` and `UInt64Array` directly from them but for now I just want the functionality\r\n   \r\n   \r\n   # Example use\r\n   \r\n   Setup:\r\n   ```\r\n   echo \"1,Foo,44.9\" > /tmp/table.csv\r\n   echo \"2,Bar,22.1\" >> /tmp/table.csv\r\n   cargo run --bin datafusion-cli\r\n   ```\r\n   \r\n   \r\n   Then run :\r\n   \r\n   ```\r\n   > CREATE EXTERNAL TABLE t(a int, b varchar, c float)\r\n   STORED AS CSV\r\n   LOCATION '/tmp/table.csv';\r\n   0 rows in set. Query took 0 seconds.\r\n   \r\n   >   select table_name, column_name, ordinal_position, is_nullable, data_type from information_schema.columns;\r\n   +------------+-------------+------------------+-------------+-----------+\r\n   | table_name | column_name | ordinal_position | is_nullable | data_type |\r\n   +------------+-------------+------------------+-------------+-----------+\r\n   | t          | a           | 0                | NO          | Int32     |\r\n   | t          | b           | 1                | NO          | Utf8      |\r\n   | t          | c           | 2                | NO          | Float32   |\r\n   +------------+-------------+------------------+-------------+-----------+\r\n   3 row in set. Query took 0 seconds.\r\n   ```\r\n   \r\n   \r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:11:04.537+0000",
                    "updated": "2021-03-29T19:11:04.537+0000",
                    "started": "2021-03-29T19:11:04.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573668",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/573836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#issuecomment-809842655\n\n\n   https://issues.apache.org/jira/browse/ARROW-12107\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T01:46:02.002+0000",
                    "updated": "2021-03-30T01:46:02.002+0000",
                    "started": "2021-03-30T01:46:02.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573836",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#issuecomment-811291912\n\n\n   FYI @returnString  @Dandandan and @jorgecarleitao \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T17:57:47.715+0000",
                    "updated": "2021-03-31T17:57:47.715+0000",
                    "started": "2021-03-31T17:57:47.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575014",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#discussion_r605110586\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n\nReview comment:\n       Not it matters much, just more like an FYI: this can cause large binaries as every variation used is compiled individually.\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n+        column_position: usize,\n+        is_nullable: bool,\n+        data_type: &DataType,\n+    ) {\n+        use DataType::*;\n+\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+\n+        self.column_names\n+            .append_value(column_name.as_ref())\n+            .unwrap();\n+\n+        self.ordinal_positions\n+            .append_value(column_position as u64)\n+            .unwrap();\n+\n+        // DataFusion does not support column default values, so null\n+        self.column_defaults.append_null().unwrap();\n+\n+        // \"YES if the column is possibly nullable, NO if it is known not nullable. \"\n+        let nullable_str = if is_nullable { \"YES\" } else { \"NO\" };\n+        self.is_nullables.append_value(nullable_str).unwrap();\n+\n+        // \"System supplied type\" --> Use debug format of the datatype\n+        self.data_types\n+            .append_value(format!(\"{:?}\", data_type))\n+            .unwrap();\n+\n+        // \"If data_type identifies a character or bit string type, the\n+        // declared maximum length; null for all other data types or\n+        // if no maximum length was declared.\"\n+        //\n+        // Arrow has no equivalent of VARCHAR(20), so we leave this as Null\n+        let max_chars = None;\n+        self.character_maximum_lengths\n+            .append_option(max_chars)\n+            .unwrap();\n+\n+        // \"Maximum length, in bytes, for binary data, character data,\n+        // or text and image data.\"\n+        let char_len: Option<u64> = match data_type {\n+            Utf8 | Binary => Some(i32::MAX as u64),\n+            LargeBinary | LargeUtf8 => Some(i64::MAX as u64),\n+            _ => None,\n+        };\n+        self.character_octet_lengths\n+            .append_option(char_len)\n+            .unwrap();\n+\n+        // numeric_precision: \"If data_type identifies a numeric type, this column\n+        // contains the (declared or implicit) precision of the type\n+        // for this column. The precision indicates the number of\n+        // significant digits. It can be expressed in decimal (base\n+        // 10) or binary (base 2) terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\"\n+        //\n+        // numeric_radix: If data_type identifies a numeric type, this\n+        // column indicates in which base the values in the columns\n+        // numeric_precision and numeric_scale are expressed. The\n+        // value is either 2 or 10. For all other data types, this\n+        // column is null.\n+        //\n+        // numeric_scale: If data_type identifies an exact numeric\n+        // type, this column contains the (declared or implicit) scale\n+        // of the type for this column. The scale indicates the number\n+        // of significant digits to the right of the decimal point. It\n+        // can be expressed in decimal (base 10) or binary (base 2)\n+        // terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\n+        let (numeric_precision, numeric_radix, numeric_scale) = match data_type {\n+            Int8 | UInt8 => (Some(8), Some(2), None),\n+            Int16 | UInt16 => (Some(16), Some(2), None),\n+            Int32 | UInt32 => (Some(32), Some(2), None),\n+            // From max value of 65504 as explained on\n+            // https://en.wikipedia.org/wiki/Half-precision_floating-point_format#Exponent_encoding\n+            Float16 => (Some(15), Some(2), None),\n+            // Numbers from postgres `real` type\n+            Float32 => (Some(24), Some(2), None),\n+            // Numbers from postgres `double` type\n+            Float64 => (Some(24), Some(2), None),\n+            Decimal(precision, scale) => {\n+                (Some(*precision as u64), Some(10), Some(*scale as u64))\n+            }\n+            _ => (None, None, None),\n+        };\n+\n+        self.numeric_precisions\n+            .append_option(numeric_precision)\n+            .unwrap();\n+        self.numeric_precision_radixes\n+            .append_option(numeric_radix)\n+            .unwrap();\n+        self.numeric_scales.append_option(numeric_scale).unwrap();\n+\n+        self.datetime_precisions.append_option(None).unwrap();\n+        self.interval_types.append_null().unwrap();\n+    }\n+\n+    fn build(self) -> MemTable {\n\nReview comment:\n       it may be more idiomatic to use [`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html), or `From`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T18:06:13.106+0000",
                    "updated": "2021-03-31T18:06:13.106+0000",
                    "started": "2021-03-31T18:06:13.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575024",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#discussion_r605120867\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n\nReview comment:\n       I can change it into just taking &str -- though I think in the case since there is just one callsite there is likely to be just one version of the code\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T18:18:26.673+0000",
                    "updated": "2021-03-31T18:18:26.673+0000",
                    "started": "2021-03-31T18:18:26.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575026",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#discussion_r605121436\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n+        column_position: usize,\n+        is_nullable: bool,\n+        data_type: &DataType,\n+    ) {\n+        use DataType::*;\n+\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+\n+        self.column_names\n+            .append_value(column_name.as_ref())\n+            .unwrap();\n+\n+        self.ordinal_positions\n+            .append_value(column_position as u64)\n+            .unwrap();\n+\n+        // DataFusion does not support column default values, so null\n+        self.column_defaults.append_null().unwrap();\n+\n+        // \"YES if the column is possibly nullable, NO if it is known not nullable. \"\n+        let nullable_str = if is_nullable { \"YES\" } else { \"NO\" };\n+        self.is_nullables.append_value(nullable_str).unwrap();\n+\n+        // \"System supplied type\" --> Use debug format of the datatype\n+        self.data_types\n+            .append_value(format!(\"{:?}\", data_type))\n+            .unwrap();\n+\n+        // \"If data_type identifies a character or bit string type, the\n+        // declared maximum length; null for all other data types or\n+        // if no maximum length was declared.\"\n+        //\n+        // Arrow has no equivalent of VARCHAR(20), so we leave this as Null\n+        let max_chars = None;\n+        self.character_maximum_lengths\n+            .append_option(max_chars)\n+            .unwrap();\n+\n+        // \"Maximum length, in bytes, for binary data, character data,\n+        // or text and image data.\"\n+        let char_len: Option<u64> = match data_type {\n+            Utf8 | Binary => Some(i32::MAX as u64),\n+            LargeBinary | LargeUtf8 => Some(i64::MAX as u64),\n+            _ => None,\n+        };\n+        self.character_octet_lengths\n+            .append_option(char_len)\n+            .unwrap();\n+\n+        // numeric_precision: \"If data_type identifies a numeric type, this column\n+        // contains the (declared or implicit) precision of the type\n+        // for this column. The precision indicates the number of\n+        // significant digits. It can be expressed in decimal (base\n+        // 10) or binary (base 2) terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\"\n+        //\n+        // numeric_radix: If data_type identifies a numeric type, this\n+        // column indicates in which base the values in the columns\n+        // numeric_precision and numeric_scale are expressed. The\n+        // value is either 2 or 10. For all other data types, this\n+        // column is null.\n+        //\n+        // numeric_scale: If data_type identifies an exact numeric\n+        // type, this column contains the (declared or implicit) scale\n+        // of the type for this column. The scale indicates the number\n+        // of significant digits to the right of the decimal point. It\n+        // can be expressed in decimal (base 10) or binary (base 2)\n+        // terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\n+        let (numeric_precision, numeric_radix, numeric_scale) = match data_type {\n+            Int8 | UInt8 => (Some(8), Some(2), None),\n+            Int16 | UInt16 => (Some(16), Some(2), None),\n+            Int32 | UInt32 => (Some(32), Some(2), None),\n+            // From max value of 65504 as explained on\n+            // https://en.wikipedia.org/wiki/Half-precision_floating-point_format#Exponent_encoding\n+            Float16 => (Some(15), Some(2), None),\n+            // Numbers from postgres `real` type\n+            Float32 => (Some(24), Some(2), None),\n+            // Numbers from postgres `double` type\n+            Float64 => (Some(24), Some(2), None),\n+            Decimal(precision, scale) => {\n+                (Some(*precision as u64), Some(10), Some(*scale as u64))\n+            }\n+            _ => (None, None, None),\n+        };\n+\n+        self.numeric_precisions\n+            .append_option(numeric_precision)\n+            .unwrap();\n+        self.numeric_precision_radixes\n+            .append_option(numeric_radix)\n+            .unwrap();\n+        self.numeric_scales.append_option(numeric_scale).unwrap();\n+\n+        self.datetime_precisions.append_option(None).unwrap();\n+        self.interval_types.append_null().unwrap();\n+    }\n+\n+    fn build(self) -> MemTable {\n\nReview comment:\n       Ok. Good idea\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T18:19:10.144+0000",
                    "updated": "2021-03-31T18:19:10.144+0000",
                    "started": "2021-03-31T18:19:10.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575027",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#discussion_r605123656\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n\nReview comment:\n       yeah, it was really just if you had not though about it. No need to change anything imo \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T18:22:32.889+0000",
                    "updated": "2021-03-31T18:22:32.889+0000",
                    "started": "2021-03-31T18:22:32.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575032",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#issuecomment-811455583\n\n\n   > Looks great! And selfishly, really happy to see the namespacing stuff being used to power cool new features \ud83d\ude04\r\n   \r\n   \r\n   @returnString  -- the namespacing stuff is pretty cool. I didn't realize how much easier it would make my life when it came in!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T20:49:13.081+0000",
                    "updated": "2021-03-31T20:49:13.081+0000",
                    "started": "2021-03-31T20:49:13.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575120",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#discussion_r605215958\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n+        column_position: usize,\n+        is_nullable: bool,\n+        data_type: &DataType,\n+    ) {\n+        use DataType::*;\n+\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+\n+        self.column_names\n+            .append_value(column_name.as_ref())\n+            .unwrap();\n+\n+        self.ordinal_positions\n+            .append_value(column_position as u64)\n+            .unwrap();\n+\n+        // DataFusion does not support column default values, so null\n+        self.column_defaults.append_null().unwrap();\n+\n+        // \"YES if the column is possibly nullable, NO if it is known not nullable. \"\n+        let nullable_str = if is_nullable { \"YES\" } else { \"NO\" };\n+        self.is_nullables.append_value(nullable_str).unwrap();\n+\n+        // \"System supplied type\" --> Use debug format of the datatype\n+        self.data_types\n+            .append_value(format!(\"{:?}\", data_type))\n+            .unwrap();\n+\n+        // \"If data_type identifies a character or bit string type, the\n+        // declared maximum length; null for all other data types or\n+        // if no maximum length was declared.\"\n+        //\n+        // Arrow has no equivalent of VARCHAR(20), so we leave this as Null\n+        let max_chars = None;\n+        self.character_maximum_lengths\n+            .append_option(max_chars)\n+            .unwrap();\n+\n+        // \"Maximum length, in bytes, for binary data, character data,\n+        // or text and image data.\"\n+        let char_len: Option<u64> = match data_type {\n+            Utf8 | Binary => Some(i32::MAX as u64),\n+            LargeBinary | LargeUtf8 => Some(i64::MAX as u64),\n+            _ => None,\n+        };\n+        self.character_octet_lengths\n+            .append_option(char_len)\n+            .unwrap();\n+\n+        // numeric_precision: \"If data_type identifies a numeric type, this column\n+        // contains the (declared or implicit) precision of the type\n+        // for this column. The precision indicates the number of\n+        // significant digits. It can be expressed in decimal (base\n+        // 10) or binary (base 2) terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\"\n+        //\n+        // numeric_radix: If data_type identifies a numeric type, this\n+        // column indicates in which base the values in the columns\n+        // numeric_precision and numeric_scale are expressed. The\n+        // value is either 2 or 10. For all other data types, this\n+        // column is null.\n+        //\n+        // numeric_scale: If data_type identifies an exact numeric\n+        // type, this column contains the (declared or implicit) scale\n+        // of the type for this column. The scale indicates the number\n+        // of significant digits to the right of the decimal point. It\n+        // can be expressed in decimal (base 10) or binary (base 2)\n+        // terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\n+        let (numeric_precision, numeric_radix, numeric_scale) = match data_type {\n+            Int8 | UInt8 => (Some(8), Some(2), None),\n+            Int16 | UInt16 => (Some(16), Some(2), None),\n+            Int32 | UInt32 => (Some(32), Some(2), None),\n+            // From max value of 65504 as explained on\n+            // https://en.wikipedia.org/wiki/Half-precision_floating-point_format#Exponent_encoding\n+            Float16 => (Some(15), Some(2), None),\n+            // Numbers from postgres `real` type\n+            Float32 => (Some(24), Some(2), None),\n+            // Numbers from postgres `double` type\n+            Float64 => (Some(24), Some(2), None),\n+            Decimal(precision, scale) => {\n+                (Some(*precision as u64), Some(10), Some(*scale as u64))\n+            }\n+            _ => (None, None, None),\n+        };\n+\n+        self.numeric_precisions\n+            .append_option(numeric_precision)\n+            .unwrap();\n+        self.numeric_precision_radixes\n+            .append_option(numeric_radix)\n+            .unwrap();\n+        self.numeric_scales.append_option(numeric_scale).unwrap();\n+\n+        self.datetime_precisions.append_option(None).unwrap();\n+        self.interval_types.append_null().unwrap();\n+    }\n+\n+    fn build(self) -> MemTable {\n\nReview comment:\n       In 98f702da90d18d8ae855a5eca6b0d1d6c1809551\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T20:58:14.188+0000",
                    "updated": "2021-03-31T20:58:14.188+0000",
                    "started": "2021-03-31T20:58:14.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575131",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T11:25:16.038+0000",
                    "updated": "2021-04-01T11:25:16.038+0000",
                    "started": "2021-04-01T11:25:16.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575456",
                    "issueId": "13368005"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/worklog/575478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9840:\nURL: https://github.com/apache/arrow/pull/9840#discussion_r605598128\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -221,3 +262,226 @@ impl InformationSchemaTablesBuilder {\n         MemTable::try_new(schema, vec![vec![batch]]).unwrap()\n     }\n }\n+\n+/// Builds the `information_schema.COLUMNS` table row by row\n+///\n+/// Columns are based on https://www.postgresql.org/docs/current/infoschema-columns.html\n+struct InformationSchemaColumnsBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    column_names: StringBuilder,\n+    ordinal_positions: UInt64Builder,\n+    column_defaults: StringBuilder,\n+    is_nullables: StringBuilder,\n+    data_types: StringBuilder,\n+    character_maximum_lengths: UInt64Builder,\n+    character_octet_lengths: UInt64Builder,\n+    numeric_precisions: UInt64Builder,\n+    numeric_precision_radixes: UInt64Builder,\n+    numeric_scales: UInt64Builder,\n+    datetime_precisions: UInt64Builder,\n+    interval_types: StringBuilder,\n+}\n+\n+impl InformationSchemaColumnsBuilder {\n+    fn new() -> Self {\n+        // StringBuilder requires providing an initial capacity, so\n+        // pick 10 here arbitrarily as this is not performance\n+        // critical code and the number of tables is unavailable here.\n+        let default_capacity = 10;\n+        Self {\n+            catalog_names: StringBuilder::new(default_capacity),\n+            schema_names: StringBuilder::new(default_capacity),\n+            table_names: StringBuilder::new(default_capacity),\n+            column_names: StringBuilder::new(default_capacity),\n+            ordinal_positions: UInt64Builder::new(default_capacity),\n+            column_defaults: StringBuilder::new(default_capacity),\n+            is_nullables: StringBuilder::new(default_capacity),\n+            data_types: StringBuilder::new(default_capacity),\n+            character_maximum_lengths: UInt64Builder::new(default_capacity),\n+            character_octet_lengths: UInt64Builder::new(default_capacity),\n+            numeric_precisions: UInt64Builder::new(default_capacity),\n+            numeric_precision_radixes: UInt64Builder::new(default_capacity),\n+            numeric_scales: UInt64Builder::new(default_capacity),\n+            datetime_precisions: UInt64Builder::new(default_capacity),\n+            interval_types: StringBuilder::new(default_capacity),\n+        }\n+    }\n+\n+    fn add_column(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+        column_name: impl AsRef<str>,\n+        column_position: usize,\n+        is_nullable: bool,\n+        data_type: &DataType,\n+    ) {\n+        use DataType::*;\n+\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+\n+        self.column_names\n+            .append_value(column_name.as_ref())\n+            .unwrap();\n+\n+        self.ordinal_positions\n+            .append_value(column_position as u64)\n+            .unwrap();\n+\n+        // DataFusion does not support column default values, so null\n+        self.column_defaults.append_null().unwrap();\n+\n+        // \"YES if the column is possibly nullable, NO if it is known not nullable. \"\n+        let nullable_str = if is_nullable { \"YES\" } else { \"NO\" };\n+        self.is_nullables.append_value(nullable_str).unwrap();\n+\n+        // \"System supplied type\" --> Use debug format of the datatype\n+        self.data_types\n+            .append_value(format!(\"{:?}\", data_type))\n+            .unwrap();\n+\n+        // \"If data_type identifies a character or bit string type, the\n+        // declared maximum length; null for all other data types or\n+        // if no maximum length was declared.\"\n+        //\n+        // Arrow has no equivalent of VARCHAR(20), so we leave this as Null\n+        let max_chars = None;\n+        self.character_maximum_lengths\n+            .append_option(max_chars)\n+            .unwrap();\n+\n+        // \"Maximum length, in bytes, for binary data, character data,\n+        // or text and image data.\"\n+        let char_len: Option<u64> = match data_type {\n+            Utf8 | Binary => Some(i32::MAX as u64),\n+            LargeBinary | LargeUtf8 => Some(i64::MAX as u64),\n+            _ => None,\n+        };\n+        self.character_octet_lengths\n+            .append_option(char_len)\n+            .unwrap();\n+\n+        // numeric_precision: \"If data_type identifies a numeric type, this column\n+        // contains the (declared or implicit) precision of the type\n+        // for this column. The precision indicates the number of\n+        // significant digits. It can be expressed in decimal (base\n+        // 10) or binary (base 2) terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\"\n+        //\n+        // numeric_radix: If data_type identifies a numeric type, this\n+        // column indicates in which base the values in the columns\n+        // numeric_precision and numeric_scale are expressed. The\n+        // value is either 2 or 10. For all other data types, this\n+        // column is null.\n+        //\n+        // numeric_scale: If data_type identifies an exact numeric\n+        // type, this column contains the (declared or implicit) scale\n+        // of the type for this column. The scale indicates the number\n+        // of significant digits to the right of the decimal point. It\n+        // can be expressed in decimal (base 10) or binary (base 2)\n+        // terms, as specified in the column\n+        // numeric_precision_radix. For all other data types, this\n+        // column is null.\n+        let (numeric_precision, numeric_radix, numeric_scale) = match data_type {\n+            Int8 | UInt8 => (Some(8), Some(2), None),\n+            Int16 | UInt16 => (Some(16), Some(2), None),\n+            Int32 | UInt32 => (Some(32), Some(2), None),\n+            // From max value of 65504 as explained on\n+            // https://en.wikipedia.org/wiki/Half-precision_floating-point_format#Exponent_encoding\n+            Float16 => (Some(15), Some(2), None),\n+            // Numbers from postgres `real` type\n+            Float32 => (Some(24), Some(2), None),\n+            // Numbers from postgres `double` type\n+            Float64 => (Some(24), Some(2), None),\n+            Decimal(precision, scale) => {\n+                (Some(*precision as u64), Some(10), Some(*scale as u64))\n+            }\n+            _ => (None, None, None),\n+        };\n+\n+        self.numeric_precisions\n+            .append_option(numeric_precision)\n+            .unwrap();\n+        self.numeric_precision_radixes\n+            .append_option(numeric_radix)\n+            .unwrap();\n+        self.numeric_scales.append_option(numeric_scale).unwrap();\n+\n+        self.datetime_precisions.append_option(None).unwrap();\n+        self.interval_types.append_null().unwrap();\n+    }\n+\n+    fn build(self) -> MemTable {\n\nReview comment:\n       (which I now realize I put into https://github.com/apache/arrow/pull/9866 rather than this PR \ud83e\udd26 ) -- but it should get in that PR hopefully\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T12:01:10.018+0000",
                    "updated": "2021-04-01T12:01:10.018+0000",
                    "started": "2021-04-01T12:01:10.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575478",
                    "issueId": "13368005"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4e74ccd9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@385a9cf9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f4d707e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@131c863a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5de58af1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@715c5854[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65060881[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@12dc7f4d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@639fdde5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7012b73a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2505fbb9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5452ce43[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 01 11:25:05 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-01T11:25:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12107/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-26T20:58:23.000+0000",
        "updated": "2021-04-01T12:01:11.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Support `SELECT * from information_schema.columns`",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368005/comment/17313094",
                    "id": "17313094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9840\n[https://github.com/apache/arrow/pull/9840]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-01T11:25:05.718+0000",
                    "updated": "2021-04-01T11:25:05.718+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p9i8:",
        "customfield_12314139": null
    }
}