{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13137931",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931",
    "key": "ARROW-2142",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2142/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4801992b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a8d6cdb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25831356[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@14d94889[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a4d11fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@43ef5fd4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ecbed5c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20087f0c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12f85812[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2bd0b466[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a501d4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@69c3f314[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 13 02:38:16 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-13T02:38:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2142/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-02-12T18:34:14.000+0000",
        "updated": "2018-03-13T02:38:16.000+0000",
        "timeoriginalestimate": null,
        "description": "{code:python}\r\n>>> arr = np.array([(1.5,)], dtype=np.dtype([('x', np.float32)]))\r\n>>> arr\r\narray([(1.5,)], dtype=[('x', '<f4')])\r\n>>> arr[0]\r\n(1.5,)\r\n>>> arr['x']\r\narray([1.5], dtype=float32)\r\n>>> arr['x'][0]\r\n1.5\r\n>>> pa.array(arr, type=pa.struct([pa.field('x', pa.float32())]))\r\nTraceback (most recent call last):\r\n\u00a0 File \"<ipython-input-18-27a52820b7d8>\", line 1, in <module>\r\n\u00a0\u00a0\u00a0 pa.array(arr, type=pa.struct([pa.field('x', pa.float32())]))\r\n\u00a0 File \"array.pxi\", line 177, in pyarrow.lib.array\r\n\u00a0 File \"error.pxi\", line 77, in pyarrow.lib.check_status\r\n\u00a0 File \"error.pxi\", line 85, in pyarrow.lib.check_status\r\nArrowNotImplementedError: /home/antoine/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:1585 code: converter.Convert()\r\nNumPyConverter doesn't implement <struct<x: float>> conversion.\r\n{code}",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Conversion from Numpy struct array unimplemented",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16368958",
                    "id": "16368958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "After looking at this, it seems there's a roadblock in the current {{NumPyConverter}} design: as it produces a {{ChunkedArray}} output and not a single array, it cannot be used recursively (i.e. you can not create child {{NumPyConverters}} for each of the struct fields and combine their results into a struct array). This also reflects in how {{NumPyConverter::ConvertTypedLists}} is implemented: it is itself specialized for each list item type...",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-02-19T10:22:52.368+0000",
                    "updated": "2018-02-19T10:22:52.368+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16369222",
                    "id": "16369222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~wesmckinn] [~xhochy] what is your opinion about this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-02-19T15:10:12.014+0000",
                    "updated": "2018-02-19T15:10:12.014+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16369605",
                    "id": "16369605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It sounds like we will need to write a function that combines a sequence of chunked arrays into a struct, where each of the arrays possibly has a different chunked layout. So something like\r\n\r\n{{NestChunkedArrays(fields, chunked_arrays, &result)}} \r\n\r\n(or some other such name, actually kind of hard to name this operation). The result would be another {{ChunkedArray}}. The implementation will be like https://github.com/apache/arrow/blob/master/cpp/src/arrow/table.h#L223, where we convert possibly chunked columns into a sequence of record batches, each of whose fields is non-chunked",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-20T00:01:57.461+0000",
                    "updated": "2018-02-20T00:01:57.461+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16371721",
                    "id": "16371721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T17:33:39.266+0000",
                    "updated": "2018-02-21T17:33:39.266+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16371723",
                    "id": "16371723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r169718158\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype = reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype);  /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */,\n+                                  field->type(), use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+\n+  // Compute null bitmap and store it as a Null Array to include it\n+  // in the rechunking below\n+  {\n+    int64_t null_count = 0;\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    auto null_data = ArrayData::Make(std::make_shared<NullType>(), length_,\n+                                     {null_bitmap_}, null_count, 0);\n \n Review comment:\n   Note this is a bit of hack, since typically null arrays don't have an underlying buffer at all.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T17:35:52.682+0000",
                    "updated": "2018-02-21T17:35:52.682+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16371726",
                    "id": "16371726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I ended up applied your suggestion on array vectors rather than chunked array (see attached PR).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-02-21T17:38:13.591+0000",
                    "updated": "2018-02-21T17:38:13.591+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16371763",
                    "id": "16371763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-367414689\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.101\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T18:00:10.286+0000",
                    "updated": "2018-02-21T18:00:10.286+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16371828",
                    "id": "16371828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-367414689\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.101\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T18:34:33.515+0000",
                    "updated": "2018-02-21T18:34:33.515+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16371875",
                    "id": "16371875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-367435997\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.102\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T19:08:56.136+0000",
                    "updated": "2018-02-21T19:08:56.136+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16372192",
                    "id": "16372192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-367511441\n \n \n   rebased\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T23:17:16.389+0000",
                    "updated": "2018-02-21T23:17:16.389+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16380984",
                    "id": "16380984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-369370006\n \n \n   Sorry for the delay, beginning to review this now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:21:11.370+0000",
                    "updated": "2018-02-28T20:21:11.370+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382848",
                    "id": "16382848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171721221\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -772,6 +773,105 @@ std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data) {\n   return out;\n }\n \n+// ----------------------------------------------------------------------\n+// Misc APIs\n+\n+namespace internal {\n+\n+std::vector<ArrayVector> RechunkArraysConsistently(\n+    const std::vector<ArrayVector>& groups) {\n+  if (groups.size() <= 1) {\n+    return groups;\n+  }\n+  // Adjacent slices defining the desired rechunking\n+  std::vector<std::pair<int64_t, int64_t>> slices;\n+  // Total number of elements common to all array groups\n+  int64_t total_length = -1;\n+\n+  {\n+    // Compute a vector of slices such that each array spans\n+    // one or more *entire* slices only\n+    // e.g. if group #1 has bounds {0, 2, 4, 5, 10}\n+    //     and group #2 has bounds {0, 5, 7, 10}\n+    // then the computed slices are\n+    //     {(0, 2), (2, 4), (4, 5), (5, 7), (7, 10)}\n+    std::set<int64_t> bounds;\n+    for (auto& group : groups) {\n \n Review comment:\n   `const auto&` would be a bit more idiomatic\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.014+0000",
                    "updated": "2018-03-01T23:24:32.014+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382849",
                    "id": "16382849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171722310\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -772,6 +773,105 @@ std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data) {\n   return out;\n }\n \n+// ----------------------------------------------------------------------\n+// Misc APIs\n+\n+namespace internal {\n+\n+std::vector<ArrayVector> RechunkArraysConsistently(\n+    const std::vector<ArrayVector>& groups) {\n+  if (groups.size() <= 1) {\n+    return groups;\n+  }\n+  // Adjacent slices defining the desired rechunking\n+  std::vector<std::pair<int64_t, int64_t>> slices;\n+  // Total number of elements common to all array groups\n+  int64_t total_length = -1;\n+\n+  {\n+    // Compute a vector of slices such that each array spans\n+    // one or more *entire* slices only\n+    // e.g. if group #1 has bounds {0, 2, 4, 5, 10}\n+    //     and group #2 has bounds {0, 5, 7, 10}\n+    // then the computed slices are\n+    //     {(0, 2), (2, 4), (4, 5), (5, 7), (7, 10)}\n+    std::set<int64_t> bounds;\n+    for (auto& group : groups) {\n+      int64_t cur = 0;\n+      bounds.insert(cur);\n+      for (auto& array : group) {\n+        cur += array->length();\n+        bounds.insert(cur);\n \n Review comment:\n   The complexity of this code roughly O(ncolumns * log(num chunks)). The algorithm in `TableBatchReader::ReadNext` is linear-time -- where it's more complex than what's below may be a matter of opinion\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.047+0000",
                    "updated": "2018-03-01T23:24:32.047+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382850",
                    "id": "16382850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171722648\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -772,6 +773,105 @@ std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data) {\n   return out;\n }\n \n+// ----------------------------------------------------------------------\n+// Misc APIs\n+\n+namespace internal {\n+\n+std::vector<ArrayVector> RechunkArraysConsistently(\n+    const std::vector<ArrayVector>& groups) {\n+  if (groups.size() <= 1) {\n+    return groups;\n+  }\n+  // Adjacent slices defining the desired rechunking\n+  std::vector<std::pair<int64_t, int64_t>> slices;\n+  // Total number of elements common to all array groups\n+  int64_t total_length = -1;\n+\n+  {\n+    // Compute a vector of slices such that each array spans\n+    // one or more *entire* slices only\n+    // e.g. if group #1 has bounds {0, 2, 4, 5, 10}\n+    //     and group #2 has bounds {0, 5, 7, 10}\n+    // then the computed slices are\n+    //     {(0, 2), (2, 4), (4, 5), (5, 7), (7, 10)}\n+    std::set<int64_t> bounds;\n+    for (auto& group : groups) {\n+      int64_t cur = 0;\n+      bounds.insert(cur);\n+      for (auto& array : group) {\n+        cur += array->length();\n+        bounds.insert(cur);\n+      }\n+      if (total_length == -1) {\n+        total_length = cur;\n+      } else {\n+        // XXX Should we return an error code instead?\n+        DCHECK_EQ(total_length, cur)\n+            << \"Array groups should have the same number of elements\";\n+      }\n+    }\n+    if (total_length == 0) {\n+      return groups;\n+    }\n+    auto it = bounds.cbegin();\n+    auto end = bounds.cend();\n+    int64_t start = *it;\n+    while (++it != end) {\n+      int64_t stop = *it;\n+      DCHECK_GE(stop, start);\n+      slices.emplace_back(start, stop);\n+      start = stop;\n+    }\n+    DCHECK_EQ(slices.front().first, 0);\n+    DCHECK_EQ(slices.back().second, total_length);\n+  }\n+\n+  // Rechunk each array group along the computed slices\n+  std::vector<ArrayVector> rechunked_groups;\n+  for (auto& group : groups) {\n+    ArrayVector rechunked;\n+    int64_t cur = 0;\n+    auto slices_it = slices.cbegin();\n+    auto slices_end = slices.cend();\n+\n+    for (auto& array : group) {\n+      int64_t array_start = cur, array_stop = cur + array->length();\n \n Review comment:\n   It's better for readability to put each assignment on its own line\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.058+0000",
                    "updated": "2018-03-01T23:24:32.058+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382851",
                    "id": "16382851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171721758\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -772,6 +773,105 @@ std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data) {\n   return out;\n }\n \n+// ----------------------------------------------------------------------\n+// Misc APIs\n+\n+namespace internal {\n+\n+std::vector<ArrayVector> RechunkArraysConsistently(\n+    const std::vector<ArrayVector>& groups) {\n+  if (groups.size() <= 1) {\n+    return groups;\n+  }\n+  // Adjacent slices defining the desired rechunking\n+  std::vector<std::pair<int64_t, int64_t>> slices;\n+  // Total number of elements common to all array groups\n+  int64_t total_length = -1;\n+\n+  {\n+    // Compute a vector of slices such that each array spans\n+    // one or more *entire* slices only\n+    // e.g. if group #1 has bounds {0, 2, 4, 5, 10}\n+    //     and group #2 has bounds {0, 5, 7, 10}\n+    // then the computed slices are\n+    //     {(0, 2), (2, 4), (4, 5), (5, 7), (7, 10)}\n+    std::set<int64_t> bounds;\n+    for (auto& group : groups) {\n+      int64_t cur = 0;\n+      bounds.insert(cur);\n+      for (auto& array : group) {\n+        cur += array->length();\n+        bounds.insert(cur);\n+      }\n+      if (total_length == -1) {\n+        total_length = cur;\n+      } else {\n+        // XXX Should we return an error code instead?\n+        DCHECK_EQ(total_length, cur)\n+            << \"Array groups should have the same number of elements\";\n \n Review comment:\n   Since this API is internal, it's not necessary. Reaching this code path would indicate an internal programming error by the Arrow developer. Should this code path ever be exposed in some way to user input, then returning an error code would make more sense\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.067+0000",
                    "updated": "2018-03-01T23:24:32.067+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382852",
                    "id": "16382852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171723407\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n \n Review comment:\n   Does this function presume UTF-8 for the 2nd argument for unicode? The C API docs don't say https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemString\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.186+0000",
                    "updated": "2018-03-01T23:24:32.186+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382853",
                    "id": "16382853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171726050\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -1371,6 +1371,69 @@ def test_structarray(self):\n         series = pd.Series(arr.to_pandas())\n         tm.assert_series_equal(series, expected)\n \n+    def test_from_numpy(self):\n+        dt = np.dtype([('x', np.int32),\n+                       (('y_title', 'y'), np.bool_)])\n+        ty = pa.struct([pa.field('x', pa.int32()),\n+                        pa.field('y', pa.bool_())])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([(42, True), (43, False)], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{'x': 42, 'y': True},\n+                                   {'x': 43, 'y': False}]\n+\n+        # With mask\n+        arr = pa.array(data, mask=np.bool_([False, True]), type=ty)\n+        assert arr.to_pylist() == [{'x': 42, 'y': True}, None]\n+\n+        # Trivial struct type\n+        dt = np.dtype([])\n+        ty = pa.struct([])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([(), ()], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{}, {}]\n+\n+    def test_from_numpy_nested(self):\n+        dt = np.dtype([('x', np.dtype([('xx', np.int8),\n+                                       ('yy', np.bool_)])),\n+                       ('y', np.int16)])\n+        ty = pa.struct([pa.field('x', pa.struct([pa.field('xx', pa.int8()),\n+                                                 pa.field('yy', pa.bool_())])),\n+                        pa.field('y', pa.int16())])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([((1, True), 2), ((3, False), 4)], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{'x': {'xx': 1, 'yy': True}, 'y': 2},\n+                                   {'x': {'xx': 3, 'yy': False}, 'y': 4}]\n+\n+    def test_from_numpy_bad_input(self):\n+        ty = pa.struct([pa.field('x', pa.int32()),\n+                        pa.field('y', pa.bool_())])\n+        dt = np.dtype([('x', np.int32),\n+                       ('z', np.bool_)])\n+\n+        data = np.array([], dtype=dt)\n+        with pytest.raises(TypeError,\n+                           match=\"Missing field 'y'\"):\n+            pa.array(data, type=ty)\n+        data = np.int32([])\n+        with pytest.raises(TypeError,\n+                           match=\"Expected struct array\"):\n+            pa.array(data, type=ty)\n \n Review comment:\n   Per above, it may be worth writing a \"large memory\" test with the `large_memory` pytest mark (which we can run locally, but not in Travis CI) where we have a field that overflows the 2G in a BinaryArray so we can test the rechunking / splitting of the null bitmap. I guess you'll have to pass a mask to get some nulls to make sure the logic is correct\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.188+0000",
                    "updated": "2018-03-01T23:24:32.188+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382854",
                    "id": "16382854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171724263\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+\n+  // Compute null bitmap and store it as a Null Array to include it\n+  // in the rechunking below\n+  {\n+    int64_t null_count = 0;\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    auto null_data = ArrayData::Make(std::make_shared<NullType>(), length_,\n+                                     {null_bitmap_}, null_count, 0);\n+    DCHECK_EQ(null_data->buffers.size(), 1);\n+    groups.push_back({std::make_shared<NullArray>(null_data)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t chunk, nchunks = groups[0].size();\n+  for (chunk = 0; chunk < nchunks; chunk++) {\n \n Review comment:\n   Maybe declare `size_t chunk` here and remove from previous line, for readability\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.194+0000",
                    "updated": "2018-03-01T23:24:32.194+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382855",
                    "id": "16382855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171724042\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype = reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype);  /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */,\n+                                  field->type(), use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+\n+  // Compute null bitmap and store it as a Null Array to include it\n+  // in the rechunking below\n+  {\n+    int64_t null_count = 0;\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    auto null_data = ArrayData::Make(std::make_shared<NullType>(), length_,\n+                                     {null_bitmap_}, null_count, 0);\n \n Review comment:\n   You could use a boolean array (which is bit-packed) to make it less hacky\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.258+0000",
                    "updated": "2018-03-01T23:24:32.258+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16382856",
                    "id": "16382856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r171725444\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+\n+  // Compute null bitmap and store it as a Null Array to include it\n+  // in the rechunking below\n+  {\n+    int64_t null_count = 0;\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    auto null_data = ArrayData::Make(std::make_shared<NullType>(), length_,\n+                                     {null_bitmap_}, null_count, 0);\n+    DCHECK_EQ(null_data->buffers.size(), 1);\n+    groups.push_back({std::make_shared<NullArray>(null_data)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t chunk, nchunks = groups[0].size();\n+  for (chunk = 0; chunk < nchunks; chunk++) {\n+    // Create struct array chunk and populate it\n+    // First group has the null bitmaps as Null Arrays\n+    auto null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::NA);\n+    DCHECK_EQ(null_data->buffers.size(), 1);\n+\n+    auto arr_data = ArrayData::Make(type_, length_, null_data->null_count, 0);\n \n Review comment:\n   Interacting with `data()->null_count` post-slicing can be hazardous, since it can be set to -1 as part of the slice operation. I just opened a bug https://issues.apache.org/jira/browse/ARROW-2244. \r\n   \r\n   I think you also need to preserve the `offset` from each `null_data` because it may be sliced. The ways in which this would fail from these bugs right now are pretty esoteric, but it will eventually happen -- I'm not sure off hand what's the best way to write unit tests for this. \r\n   \r\n   let me know if this is unclear as I can explain in more detail\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T23:24:32.379+0000",
                    "updated": "2018-03-01T23:24:32.379+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389414",
                    "id": "16389414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172811688\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n \n Review comment:\n   On Python 3, yes, a unicode object is constructed assuming a UTF-8 input (using `PyUnicode_FromString`). On Python 2, a bytes object is constructed for lookup, and any non-ASCII bytes-unicode comparison would fail.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T11:20:40.581+0000",
                    "updated": "2018-03-07T11:20:40.581+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389417",
                    "id": "16389417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172811919\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -772,6 +773,105 @@ std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data) {\n   return out;\n }\n \n+// ----------------------------------------------------------------------\n+// Misc APIs\n+\n+namespace internal {\n+\n+std::vector<ArrayVector> RechunkArraysConsistently(\n+    const std::vector<ArrayVector>& groups) {\n+  if (groups.size() <= 1) {\n+    return groups;\n+  }\n+  // Adjacent slices defining the desired rechunking\n+  std::vector<std::pair<int64_t, int64_t>> slices;\n+  // Total number of elements common to all array groups\n+  int64_t total_length = -1;\n+\n+  {\n+    // Compute a vector of slices such that each array spans\n+    // one or more *entire* slices only\n+    // e.g. if group #1 has bounds {0, 2, 4, 5, 10}\n+    //     and group #2 has bounds {0, 5, 7, 10}\n+    // then the computed slices are\n+    //     {(0, 2), (2, 4), (4, 5), (5, 7), (7, 10)}\n+    std::set<int64_t> bounds;\n+    for (auto& group : groups) {\n+      int64_t cur = 0;\n+      bounds.insert(cur);\n+      for (auto& array : group) {\n+        cur += array->length();\n+        bounds.insert(cur);\n \n Review comment:\n   You're right, rechunking can simply be done on the way. I've now pushed a change.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T11:21:54.104+0000",
                    "updated": "2018-03-07T11:21:54.104+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389431",
                    "id": "16389431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172814583\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1590,6 +1592,85 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+\n+  // Compute null bitmap and store it as a Null Array to include it\n+  // in the rechunking below\n+  {\n+    int64_t null_count = 0;\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    auto null_data = ArrayData::Make(std::make_shared<NullType>(), length_,\n+                                     {null_bitmap_}, null_count, 0);\n+    DCHECK_EQ(null_data->buffers.size(), 1);\n+    groups.push_back({std::make_shared<NullArray>(null_data)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t chunk, nchunks = groups[0].size();\n+  for (chunk = 0; chunk < nchunks; chunk++) {\n+    // Create struct array chunk and populate it\n+    // First group has the null bitmaps as Null Arrays\n+    auto null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::NA);\n+    DCHECK_EQ(null_data->buffers.size(), 1);\n+\n+    auto arr_data = ArrayData::Make(type_, length_, null_data->null_count, 0);\n \n Review comment:\n   Is it problematic to have `null_count == -1`? From my understanding it seems to be a supported condition (i.e. \"I don't know the exact number of nulls, just use the null bitmap to compute it when necessary\").\r\n   \r\n   Understood about the offset. Indeed, testing it may involve passing some large data...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T11:33:11.967+0000",
                    "updated": "2018-03-07T11:33:11.967+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389623",
                    "id": "16389623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-371155236\n \n \n   Ok, so I fixed the null bitmap offset issue and wrote a large memory test exercising it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T14:28:53.212+0000",
                    "updated": "2018-03-07T14:28:53.212+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389625",
                    "id": "16389625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172858643\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1566,6 +1568,113 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+  int64_t null_count = 0;\n+\n+  // Compute null bitmap and store it as a Boolean Array to include it\n+  // in the rechunking below\n+  {\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    groups.push_back({std::make_shared<BooleanArray>(length_, null_bitmap_)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+    const auto& group = groups.back();\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+  for (const auto& group : groups) {\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t nchunks = groups[0].size();\n+  for (size_t chunk = 0; chunk < nchunks; chunk++) {\n+    // First group has the null bitmaps as Boolean Arrays\n+    const auto& null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::BOOL);\n+    DCHECK_EQ(null_data->buffers.size(), 2);\n+    const auto& null_buffer = null_data->buffers[1];\n+    // Careful: the rechunked null bitmap may have a non-zero offset\n+    // to its buffer, and it may not even start on a byte boundary\n+    int64_t null_offset = null_data->offset;\n+    std::shared_ptr<Buffer> fixed_null_buffer;\n+\n+    if (!null_buffer) {\n \n Review comment:\n   Is there a more idiomatic way to write this fixup step? Is this a primitive we want to expose somewhere?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T14:30:00.354+0000",
                    "updated": "2018-03-07T14:30:00.354+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389626",
                    "id": "16389626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172858790\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -1463,6 +1463,124 @@ def test_structarray(self):\n         series = pd.Series(arr.to_pandas())\n         tm.assert_series_equal(series, expected)\n \n+    def test_from_numpy(self):\n+        dt = np.dtype([('x', np.int32),\n+                       (('y_title', 'y'), np.bool_)])\n+        ty = pa.struct([pa.field('x', pa.int32()),\n+                        pa.field('y', pa.bool_())])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([(42, True), (43, False)], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{'x': 42, 'y': True},\n+                                   {'x': 43, 'y': False}]\n+\n+        # With mask\n+        arr = pa.array(data, mask=np.bool_([False, True]), type=ty)\n+        assert arr.to_pylist() == [{'x': 42, 'y': True}, None]\n+\n+        # Trivial struct type\n+        dt = np.dtype([])\n+        ty = pa.struct([])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([(), ()], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{}, {}]\n+\n+    def test_from_numpy_nested(self):\n+        dt = np.dtype([('x', np.dtype([('xx', np.int8),\n+                                       ('yy', np.bool_)])),\n+                       ('y', np.int16)])\n+        ty = pa.struct([pa.field('x', pa.struct([pa.field('xx', pa.int8()),\n+                                                 pa.field('yy', pa.bool_())])),\n+                        pa.field('y', pa.int16())])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([((1, True), 2), ((3, False), 4)], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{'x': {'xx': 1, 'yy': True}, 'y': 2},\n+                                   {'x': {'xx': 3, 'yy': False}, 'y': 4}]\n+\n+    @pytest.mark.large_memory\n+    def test_from_numpy_large(self):\n+        # Exercise rechunking + nulls\n+        target_size = 3 * 1024**3  # 4GB\n+        dt = np.dtype([('x', np.float64), ('y', 'object')])\n+        bs = 65536 - dt.itemsize\n+        block = b'.' * bs\n+        n = target_size // (bs + dt.itemsize)\n+        data = np.zeros(n, dtype=dt)\n+        data['x'] = np.random.random_sample(n)\n+        data['y'] = block\n+        # Add implicit nulls\n+        data['x'][data['x'] < 0.2] = np.nan\n+\n+        ty = pa.struct([pa.field('x', pa.float64()),\n+                        pa.field('y', pa.binary(bs))])\n+        arr = pa.array(data, type=ty, from_pandas=True)\n+        assert arr.num_chunks == 2\n+\n+        def iter_chunked_array(arr):\n+            for chunk in arr.iterchunks():\n+                for item in chunk:\n+                    yield item\n+\n+        def check(arr, data, mask=None):\n \n Review comment:\n   Not sure whether there's a more compact form of writing this function...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T14:30:26.143+0000",
                    "updated": "2018-03-07T14:30:26.143+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389697",
                    "id": "16389697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-371177216\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.170\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T15:34:02.099+0000",
                    "updated": "2018-03-07T15:34:02.099+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389716",
                    "id": "16389716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172886127\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1566,6 +1568,113 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+  int64_t null_count = 0;\n+\n+  // Compute null bitmap and store it as a Boolean Array to include it\n+  // in the rechunking below\n+  {\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    groups.push_back({std::make_shared<BooleanArray>(length_, null_bitmap_)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+    const auto& group = groups.back();\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+  for (const auto& group : groups) {\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t nchunks = groups[0].size();\n+  for (size_t chunk = 0; chunk < nchunks; chunk++) {\n+    // First group has the null bitmaps as Boolean Arrays\n+    const auto& null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::BOOL);\n+    DCHECK_EQ(null_data->buffers.size(), 2);\n+    const auto& null_buffer = null_data->buffers[1];\n+    // Careful: the rechunked null bitmap may have a non-zero offset\n+    // to its buffer, and it may not even start on a byte boundary\n+    int64_t null_offset = null_data->offset;\n+    std::shared_ptr<Buffer> fixed_null_buffer;\n+\n+    if (!null_buffer) {\n \n Review comment:\n   I'm wondering if we can use the struct's offset parameter here and simply share the buffer between each array without copying\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T15:47:03.869+0000",
                    "updated": "2018-03-07T15:47:03.869+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389719",
                    "id": "16389719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172887556\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1566,6 +1568,113 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+  int64_t null_count = 0;\n+\n+  // Compute null bitmap and store it as a Boolean Array to include it\n+  // in the rechunking below\n+  {\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    groups.push_back({std::make_shared<BooleanArray>(length_, null_bitmap_)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+    const auto& group = groups.back();\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+  for (const auto& group : groups) {\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t nchunks = groups[0].size();\n+  for (size_t chunk = 0; chunk < nchunks; chunk++) {\n+    // First group has the null bitmaps as Boolean Arrays\n+    const auto& null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::BOOL);\n+    DCHECK_EQ(null_data->buffers.size(), 2);\n+    const auto& null_buffer = null_data->buffers[1];\n+    // Careful: the rechunked null bitmap may have a non-zero offset\n+    // to its buffer, and it may not even start on a byte boundary\n+    int64_t null_offset = null_data->offset;\n+    std::shared_ptr<Buffer> fixed_null_buffer;\n+\n+    if (!null_buffer) {\n \n Review comment:\n   Hmm... is the offset used only for the null bitmap or for looking into the child arrays as well?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T15:50:10.407+0000",
                    "updated": "2018-03-07T15:50:10.407+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389731",
                    "id": "16389731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172889299\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1566,6 +1568,113 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+  int64_t null_count = 0;\n+\n+  // Compute null bitmap and store it as a Boolean Array to include it\n+  // in the rechunking below\n+  {\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    groups.push_back({std::make_shared<BooleanArray>(length_, null_bitmap_)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+    const auto& group = groups.back();\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+  for (const auto& group : groups) {\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t nchunks = groups[0].size();\n+  for (size_t chunk = 0; chunk < nchunks; chunk++) {\n+    // First group has the null bitmaps as Boolean Arrays\n+    const auto& null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::BOOL);\n+    DCHECK_EQ(null_data->buffers.size(), 2);\n+    const auto& null_buffer = null_data->buffers[1];\n+    // Careful: the rechunked null bitmap may have a non-zero offset\n+    // to its buffer, and it may not even start on a byte boundary\n+    int64_t null_offset = null_data->offset;\n+    std::shared_ptr<Buffer> fixed_null_buffer;\n+\n+    if (!null_buffer) {\n \n Review comment:\n   Given how slicing is implemented, I'm assuming the offset is used when looking into the child arrays as well...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T15:54:41.864+0000",
                    "updated": "2018-03-07T15:54:41.864+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16389748",
                    "id": "16389748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#discussion_r172896221\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1566,6 +1568,113 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+  int64_t null_count = 0;\n+\n+  // Compute null bitmap and store it as a Boolean Array to include it\n+  // in the rechunking below\n+  {\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    groups.push_back({std::make_shared<BooleanArray>(length_, null_bitmap_)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+    const auto& group = groups.back();\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+  for (const auto& group : groups) {\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t nchunks = groups[0].size();\n+  for (size_t chunk = 0; chunk < nchunks; chunk++) {\n+    // First group has the null bitmaps as Boolean Arrays\n+    const auto& null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::BOOL);\n+    DCHECK_EQ(null_data->buffers.size(), 2);\n+    const auto& null_buffer = null_data->buffers[1];\n+    // Careful: the rechunked null bitmap may have a non-zero offset\n+    // to its buffer, and it may not even start on a byte boundary\n+    int64_t null_offset = null_data->offset;\n+    std::shared_ptr<Buffer> fixed_null_buffer;\n+\n+    if (!null_buffer) {\n \n Review comment:\n   Good question. We haven't really done anything with sliced StructArray yet. With the way that `Array::Slice` works, the parent/struct offset should be added to whatever offset is in the child arrays. So here the safest thing then is probably to copy the bitmap. Might need to think about it some more\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-07T16:14:12.777+0000",
                    "updated": "2018-03-07T16:14:12.777+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16395741",
                    "id": "16395741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635#issuecomment-372429670\n \n \n   Having a last look at this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-12T19:12:52.649+0000",
                    "updated": "2018-03-12T19:12:52.649+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16396432",
                    "id": "16396432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1635\n[https://github.com/apache/arrow/pull/1635]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-13T02:38:13.695+0000",
                    "updated": "2018-03-13T02:38:13.695+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137931/comment/16396433",
                    "id": "16396433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1635: ARROW-2142: [Python] Allow conversion from Numpy struct array\nURL: https://github.com/apache/arrow/pull/1635\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex bda1946c6..ad2335fa1 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -3256,4 +3256,68 @@ TEST_P(DecimalTest, WithNulls) {\n \n INSTANTIATE_TEST_CASE_P(DecimalTest, DecimalTest, ::testing::Range(1, 38));\n \n+// ----------------------------------------------------------------------\n+// Test rechunking\n+\n+TEST(TestRechunkArraysConsistently, Trivial) {\n+  std::vector<ArrayVector> groups, rechunked;\n+  rechunked = internal::RechunkArraysConsistently(groups);\n+  ASSERT_EQ(rechunked.size(), 0);\n+\n+  std::shared_ptr<Array> a1, a2, b1;\n+  ArrayFromVector<Int16Type, int16_t>({}, &a1);\n+  ArrayFromVector<Int16Type, int16_t>({}, &a2);\n+  ArrayFromVector<Int32Type, int32_t>({}, &b1);\n+\n+  groups = {{a1, a2}, {}, {b1}};\n+  rechunked = internal::RechunkArraysConsistently(groups);\n+  ASSERT_EQ(rechunked.size(), 3);\n+}\n+\n+TEST(TestRechunkArraysConsistently, Plain) {\n+  std::shared_ptr<Array> expected;\n+  std::shared_ptr<Array> a1, a2, a3, b1, b2, b3, b4;\n+  ArrayFromVector<Int16Type, int16_t>({1, 2, 3}, &a1);\n+  ArrayFromVector<Int16Type, int16_t>({4, 5}, &a2);\n+  ArrayFromVector<Int16Type, int16_t>({6, 7, 8, 9}, &a3);\n+\n+  ArrayFromVector<Int32Type, int32_t>({41, 42}, &b1);\n+  ArrayFromVector<Int32Type, int32_t>({43, 44, 45}, &b2);\n+  ArrayFromVector<Int32Type, int32_t>({46, 47}, &b3);\n+  ArrayFromVector<Int32Type, int32_t>({48, 49}, &b4);\n+\n+  ArrayVector a{a1, a2, a3};\n+  ArrayVector b{b1, b2, b3, b4};\n+\n+  std::vector<ArrayVector> groups{a, b}, rechunked;\n+  rechunked = internal::RechunkArraysConsistently(groups);\n+  ASSERT_EQ(rechunked.size(), 2);\n+  auto ra = rechunked[0];\n+  auto rb = rechunked[1];\n+\n+  ASSERT_EQ(ra.size(), 5);\n+  ArrayFromVector<Int16Type, int16_t>({1, 2}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*ra[0], *expected);\n+  ArrayFromVector<Int16Type, int16_t>({3}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*ra[1], *expected);\n+  ArrayFromVector<Int16Type, int16_t>({4, 5}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*ra[2], *expected);\n+  ArrayFromVector<Int16Type, int16_t>({6, 7}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*ra[3], *expected);\n+  ArrayFromVector<Int16Type, int16_t>({8, 9}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*ra[4], *expected);\n+\n+  ASSERT_EQ(rb.size(), 5);\n+  ArrayFromVector<Int32Type, int32_t>({41, 42}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*rb[0], *expected);\n+  ArrayFromVector<Int32Type, int32_t>({43}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*rb[1], *expected);\n+  ArrayFromVector<Int32Type, int32_t>({44, 45}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*rb[2], *expected);\n+  ArrayFromVector<Int32Type, int32_t>({46, 47}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*rb[3], *expected);\n+  ArrayFromVector<Int32Type, int32_t>({48, 49}, &expected);\n+  ASSERT_ARRAYS_EQUAL(*rb[4], *expected);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex 83142dfef..bd2b40c1a 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -20,6 +20,8 @@\n #include <algorithm>\n #include <cstdint>\n #include <cstring>\n+#include <limits>\n+#include <set>\n #include <sstream>\n #include <utility>\n \n@@ -752,6 +754,85 @@ std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data) {\n   return out;\n }\n \n+// ----------------------------------------------------------------------\n+// Misc APIs\n+\n+namespace internal {\n+\n+std::vector<ArrayVector> RechunkArraysConsistently(\n+    const std::vector<ArrayVector>& groups) {\n+  if (groups.size() <= 1) {\n+    return groups;\n+  }\n+  int64_t total_length = 0;\n+  for (const auto& array : groups.front()) {\n+    total_length += array->length();\n+  }\n+#ifndef NDEBUG\n+  for (const auto& group : groups) {\n+    int64_t group_length = 0;\n+    for (const auto& array : group) {\n+      group_length += array->length();\n+    }\n+    DCHECK_EQ(group_length, total_length)\n+        << \"Array groups should have the same total number of elements\";\n+  }\n+#endif\n+  if (total_length == 0) {\n+    return groups;\n+  }\n+\n+  // Set up result vectors\n+  std::vector<ArrayVector> rechunked_groups(groups.size());\n+\n+  // Set up progress counters\n+  std::vector<ArrayVector::const_iterator> current_arrays;\n+  std::vector<int64_t> array_offsets;\n+  for (const auto& group : groups) {\n+    current_arrays.emplace_back(group.cbegin());\n+    array_offsets.emplace_back(0);\n+  }\n+\n+  // Scan all array vectors at once, rechunking along the way\n+  int64_t start = 0;\n+  while (start < total_length) {\n+    // First compute max possible length for next chunk\n+    int64_t chunk_length = std::numeric_limits<int64_t>::max();\n+    for (size_t i = 0; i < groups.size(); i++) {\n+      auto& arr_it = current_arrays[i];\n+      auto& offset = array_offsets[i];\n+      // Skip any done arrays (including 0-length arrays)\n+      while (offset == (*arr_it)->length()) {\n+        ++arr_it;\n+        offset = 0;\n+      }\n+      const auto& array = *arr_it;\n+      DCHECK_GT(array->length(), offset);\n+      chunk_length = std::min(chunk_length, array->length() - offset);\n+    }\n+    DCHECK_GT(chunk_length, 0);\n+\n+    // Then slice all arrays along this chunk size\n+    for (size_t i = 0; i < groups.size(); i++) {\n+      const auto& array = *current_arrays[i];\n+      auto& offset = array_offsets[i];\n+      if (offset == 0 && array->length() == chunk_length) {\n+        // Slice spans entire array\n+        rechunked_groups[i].emplace_back(array);\n+      } else {\n+        DCHECK_LT(chunk_length - offset, array->length());\n+        rechunked_groups[i].emplace_back(array->Slice(offset, chunk_length));\n+      }\n+      offset += chunk_length;\n+    }\n+    start += chunk_length;\n+  }\n+\n+  return rechunked_groups;\n+}\n+\n+}  // namespace internal\n+\n // ----------------------------------------------------------------------\n // Instantiate templates\n \ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex faa9211c6..04bd01261 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -278,6 +278,17 @@ class ARROW_EXPORT Array {\n \n using ArrayVector = std::vector<std::shared_ptr<Array>>;\n \n+namespace internal {\n+\n+/// Given a number of ArrayVectors, treat each ArrayVector as the\n+/// chunks of a chunked array.  Then rechunk each ArrayVector such that\n+/// all ArrayVectors are chunked identically.  It is mandatory that\n+/// all ArrayVectors contain the same total number of elements.\n+ARROW_EXPORT\n+std::vector<ArrayVector> RechunkArraysConsistently(const std::vector<ArrayVector>&);\n+\n+}  // namespace internal\n+\n static inline std::ostream& operator<<(std::ostream& os, const Array& x) {\n   os << x.ToString();\n   return os;\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 04a71c1f6..6f3ade523 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -318,7 +318,7 @@ class NumPyConverter {\n \n   Status Convert();\n \n-  const std::vector<std::shared_ptr<Array>>& result() const { return out_arrays_; }\n+  const ArrayVector& result() const { return out_arrays_; }\n \n   template <typename T>\n   typename std::enable_if<std::is_base_of<PrimitiveCType, T>::value ||\n@@ -344,6 +344,8 @@ class NumPyConverter {\n   // NumPy unicode arrays\n   Status Visit(const StringType& type);\n \n+  Status Visit(const StructType& type);\n+\n   Status Visit(const FixedSizeBinaryType& type) {\n     return TypeNotImplemented(type.ToString());\n   }\n@@ -489,7 +491,7 @@ class NumPyConverter {\n   OwnedRefNoGIL decimal_type_;\n \n   // Used in visitor pattern\n-  std::vector<std::shared_ptr<Array>> out_arrays_;\n+  ArrayVector out_arrays_;\n \n   std::shared_ptr<ResizableBuffer> null_bitmap_;\n   uint8_t* null_bitmap_data_;\n@@ -1566,6 +1568,113 @@ Status NumPyConverter::Visit(const StringType& type) {\n   return PushArray(result->data());\n }\n \n+Status NumPyConverter::Visit(const StructType& type) {\n+  std::vector<NumPyConverter> sub_converters;\n+  std::vector<OwnedRefNoGIL> sub_arrays;\n+\n+  {\n+    PyAcquireGIL gil_lock;\n+\n+    // Create converters for each struct type field\n+    if (dtype_->fields == NULL || !PyDict_Check(dtype_->fields)) {\n+      return Status::TypeError(\"Expected struct array\");\n+    }\n+\n+    for (auto field : type.children()) {\n+      PyObject* tup = PyDict_GetItemString(dtype_->fields, field->name().c_str());\n+      if (tup == NULL) {\n+        std::stringstream ss;\n+        ss << \"Missing field '\" << field->name() << \"' in struct array\";\n+        return Status::TypeError(ss.str());\n+      }\n+      PyArray_Descr* sub_dtype =\n+          reinterpret_cast<PyArray_Descr*>(PyTuple_GET_ITEM(tup, 0));\n+      DCHECK(PyArray_DescrCheck(sub_dtype));\n+      int offset = static_cast<int>(PyLong_AsLong(PyTuple_GET_ITEM(tup, 1)));\n+      RETURN_IF_PYERROR();\n+      Py_INCREF(sub_dtype); /* PyArray_GetField() steals ref */\n+      PyObject* sub_array = PyArray_GetField(arr_, sub_dtype, offset);\n+      RETURN_IF_PYERROR();\n+      sub_arrays.emplace_back(sub_array);\n+      sub_converters.emplace_back(pool_, sub_array, nullptr /* mask */, field->type(),\n+                                  use_pandas_null_sentinels_);\n+    }\n+  }\n+\n+  std::vector<ArrayVector> groups;\n+  int64_t null_count = 0;\n+\n+  // Compute null bitmap and store it as a Boolean Array to include it\n+  // in the rechunking below\n+  {\n+    if (mask_ != nullptr) {\n+      RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    }\n+    groups.push_back({std::make_shared<BooleanArray>(length_, null_bitmap_)});\n+  }\n+\n+  // Convert child data\n+  for (auto& converter : sub_converters) {\n+    RETURN_NOT_OK(converter.Convert());\n+    groups.push_back(converter.result());\n+    const auto& group = groups.back();\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+  // Ensure the different array groups are chunked consistently\n+  groups = ::arrow::internal::RechunkArraysConsistently(groups);\n+  for (const auto& group : groups) {\n+    int64_t n = 0;\n+    for (const auto& array : group) {\n+      n += array->length();\n+    }\n+  }\n+\n+  // Make struct array chunks by combining groups\n+  size_t ngroups = groups.size();\n+  size_t nchunks = groups[0].size();\n+  for (size_t chunk = 0; chunk < nchunks; chunk++) {\n+    // First group has the null bitmaps as Boolean Arrays\n+    const auto& null_data = groups[0][chunk]->data();\n+    DCHECK_EQ(null_data->type->id(), Type::BOOL);\n+    DCHECK_EQ(null_data->buffers.size(), 2);\n+    const auto& null_buffer = null_data->buffers[1];\n+    // Careful: the rechunked null bitmap may have a non-zero offset\n+    // to its buffer, and it may not even start on a byte boundary\n+    int64_t null_offset = null_data->offset;\n+    std::shared_ptr<Buffer> fixed_null_buffer;\n+\n+    if (!null_buffer) {\n+      fixed_null_buffer = null_buffer;\n+    } else if (null_offset % 8 == 0) {\n+      fixed_null_buffer =\n+          std::make_shared<Buffer>(null_buffer,\n+                                   // byte offset\n+                                   null_offset / 8,\n+                                   // byte size\n+                                   BitUtil::BytesForBits(null_data->length));\n+    } else {\n+      RETURN_NOT_OK(CopyBitmap(pool_, null_buffer->data(), null_offset, null_data->length,\n+                               &fixed_null_buffer));\n+    }\n+\n+    // Create struct array chunk and populate it\n+    auto arr_data =\n+        ArrayData::Make(type_, null_data->length, null_count ? kUnknownNullCount : 0, 0);\n+    arr_data->buffers.push_back(fixed_null_buffer);\n+    // Append child chunks\n+    for (size_t i = 1; i < ngroups; i++) {\n+      arr_data->child_data.push_back(groups[i][chunk]->data());\n+    }\n+    RETURN_NOT_OK(PushArray(arr_data));\n+  }\n+\n+  return Status::OK();\n+}\n+\n Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo,\n                       bool use_pandas_null_sentinels,\n                       const std::shared_ptr<DataType>& type,\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex ab68fd442..fdd42a67a 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -401,8 +401,8 @@ void ArrayFromVector(const std::vector<bool>& is_valid, const std::vector<C_TYPE\n template <typename TYPE, typename C_TYPE>\n void ArrayFromVector(const std::vector<C_TYPE>& values, std::shared_ptr<Array>* out) {\n   typename TypeTraits<TYPE>::BuilderType builder;\n-  for (size_t i = 0; i < values.size(); ++i) {\n-    ASSERT_OK(builder.Append(values[i]));\n+  for (auto& value : values) {\n+    ASSERT_OK(builder.Append(value));\n   }\n   ASSERT_OK(builder.Finish(out));\n }\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 5abc026bf..85bfd0493 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -1446,7 +1446,7 @@ class TestConvertStructTypes(object):\n     Conversion tests for struct types.\n     \"\"\"\n \n-    def test_structarray(self):\n+    def test_to_pandas(self):\n         ints = pa.array([None, 2, 3], type=pa.int64())\n         strs = pa.array([u'a', None, u'c'], type=pa.string())\n         bools = pa.array([True, False, None], type=pa.bool_())\n@@ -1463,6 +1463,124 @@ def test_structarray(self):\n         series = pd.Series(arr.to_pandas())\n         tm.assert_series_equal(series, expected)\n \n+    def test_from_numpy(self):\n+        dt = np.dtype([('x', np.int32),\n+                       (('y_title', 'y'), np.bool_)])\n+        ty = pa.struct([pa.field('x', pa.int32()),\n+                        pa.field('y', pa.bool_())])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([(42, True), (43, False)], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{'x': 42, 'y': True},\n+                                   {'x': 43, 'y': False}]\n+\n+        # With mask\n+        arr = pa.array(data, mask=np.bool_([False, True]), type=ty)\n+        assert arr.to_pylist() == [{'x': 42, 'y': True}, None]\n+\n+        # Trivial struct type\n+        dt = np.dtype([])\n+        ty = pa.struct([])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([(), ()], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{}, {}]\n+\n+    def test_from_numpy_nested(self):\n+        dt = np.dtype([('x', np.dtype([('xx', np.int8),\n+                                       ('yy', np.bool_)])),\n+                       ('y', np.int16)])\n+        ty = pa.struct([pa.field('x', pa.struct([pa.field('xx', pa.int8()),\n+                                                 pa.field('yy', pa.bool_())])),\n+                        pa.field('y', pa.int16())])\n+\n+        data = np.array([], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == []\n+\n+        data = np.array([((1, True), 2), ((3, False), 4)], dtype=dt)\n+        arr = pa.array(data, type=ty)\n+        assert arr.to_pylist() == [{'x': {'xx': 1, 'yy': True}, 'y': 2},\n+                                   {'x': {'xx': 3, 'yy': False}, 'y': 4}]\n+\n+    @pytest.mark.large_memory\n+    def test_from_numpy_large(self):\n+        # Exercise rechunking + nulls\n+        target_size = 3 * 1024**3  # 4GB\n+        dt = np.dtype([('x', np.float64), ('y', 'object')])\n+        bs = 65536 - dt.itemsize\n+        block = b'.' * bs\n+        n = target_size // (bs + dt.itemsize)\n+        data = np.zeros(n, dtype=dt)\n+        data['x'] = np.random.random_sample(n)\n+        data['y'] = block\n+        # Add implicit nulls\n+        data['x'][data['x'] < 0.2] = np.nan\n+\n+        ty = pa.struct([pa.field('x', pa.float64()),\n+                        pa.field('y', pa.binary(bs))])\n+        arr = pa.array(data, type=ty, from_pandas=True)\n+        assert arr.num_chunks == 2\n+\n+        def iter_chunked_array(arr):\n+            for chunk in arr.iterchunks():\n+                for item in chunk:\n+                    yield item\n+\n+        def check(arr, data, mask=None):\n+            assert len(arr) == len(data)\n+            xs = data['x']\n+            ys = data['y']\n+            for i, obj in enumerate(iter_chunked_array(arr)):\n+                try:\n+                    d = obj.as_py()\n+                    if mask is not None and mask[i]:\n+                        assert d is None\n+                    else:\n+                        x = xs[i]\n+                        if np.isnan(x):\n+                            assert d['x'] is None\n+                        else:\n+                            assert d['x'] == x\n+                        assert d['y'] == ys[i]\n+                except Exception:\n+                    print(\"Failed at index\", i)\n+                    raise\n+\n+        check(arr, data)\n+        del arr\n+\n+        # Now with explicit mask\n+        mask = np.random.random_sample(n) < 0.2\n+        arr = pa.array(data, type=ty, mask=mask, from_pandas=True)\n+        assert arr.num_chunks == 2\n+\n+        check(arr, data, mask)\n+        del arr\n+\n+    def test_from_numpy_bad_input(self):\n+        ty = pa.struct([pa.field('x', pa.int32()),\n+                        pa.field('y', pa.bool_())])\n+        dt = np.dtype([('x', np.int32),\n+                       ('z', np.bool_)])\n+\n+        data = np.array([], dtype=dt)\n+        with pytest.raises(TypeError,\n+                           match=\"Missing field 'y'\"):\n+            pa.array(data, type=ty)\n+        data = np.int32([])\n+        with pytest.raises(TypeError,\n+                           match=\"Expected struct array\"):\n+            pa.array(data, type=ty)\n+\n \n class TestZeroCopyConversion(object):\n     \"\"\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-13T02:38:16.870+0000",
                    "updated": "2018-03-13T02:38:16.870+0000"
                }
            ],
            "maxResults": 34,
            "total": 34,
            "startAt": 0
        },
        "customfield_12311820": "0|i3q307:",
        "customfield_12314139": null
    }
}