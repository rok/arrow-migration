{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13476674",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674",
    "key": "ARROW-17407",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "flight",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 50400,
            "total": 50400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 50400,
            "total": 50400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17407/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 84,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok opened a new pull request, #13873:\nURL: https://github.com/apache/arrow/pull/13873\n\n   We want to provide best practices and debugging section in:\r\n   \r\n   [cpp flight docs](https://arrow.apache.org/docs/cpp/flight.html)\r\n   [python flight docs](https://arrow.apache.org/docs/python/flight.html)\r\n   [java flight docs](https://arrow.apache.org/docs/java/flight.html)\r\n   [R flight docs](https://arrow.apache.org/docs/r/articles/flight.html)\n\n\n",
                    "created": "2022-08-14T02:44:55.912+0000",
                    "updated": "2022-08-14T02:44:55.912+0000",
                    "started": "2022-08-14T02:44:55.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800450",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1214272688\n\n   https://issues.apache.org/jira/browse/ARROW-17407\n\n\n",
                    "created": "2022-08-14T02:45:13.770+0000",
                    "updated": "2022-08-14T02:45:13.770+0000",
                    "started": "2022-08-14T02:45:13.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800451",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1214412185\n\n   @rok  Can we also add best practices and debugging sections in the Go docs too?\r\n   \r\n   This can be done by either a README.md in the `go/arrow/flight` directory or by having a \"package comment\" in the directory (a comment directly above the `package flight` line in one of the .go files (convention is usually a file named `doc.go`).\r\n   \r\n   Would you prefer for me to add it to this branch?\n\n\n",
                    "created": "2022-08-14T16:38:37.114+0000",
                    "updated": "2022-08-14T16:38:37.114+0000",
                    "started": "2022-08-14T16:38:37.114+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800466",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1215083555\n\n   > @rok Can we also add best practices and debugging sections in the Go docs too?\r\n   \r\n   Thanks for chiming in @zeroshade! I was going to ask you where to put the Go specific content :).\r\n   I'll add it and ping you back.\n\n\n",
                    "created": "2022-08-15T14:34:01.530+0000",
                    "updated": "2022-08-15T14:34:01.530+0000",
                    "started": "2022-08-15T14:34:01.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800618",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1215240106\n\n   @rok Sounds great! Have a look at `go/arrow/doc.go` or `go/parquet/doc.go` for some examples.\r\n   \r\n   https://tip.golang.org/doc/comment also gives a good rundown of how the format of the comment gets translated into the formatting of the rendered docs on pkg.go.dev (TL;DR it's similar to just using markdown)\n\n\n",
                    "created": "2022-08-15T16:02:21.486+0000",
                    "updated": "2022-08-15T16:02:21.486+0000",
                    "started": "2022-08-15T16:02:21.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800650",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1215986199\n\n   @zeroshade I've added the Go doc. Please check if it makes sense, it's my first time touching Go docs.\n\n\n",
                    "created": "2022-08-15T23:37:35.359+0000",
                    "updated": "2022-08-15T23:37:35.359+0000",
                    "started": "2022-08-15T23:37:35.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800762",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1215998075\n\n   @lidavidm I'm now linking to c++ from python/java/R docs which is not ideal, but duplicating text is not either. Any thoughts?\n\n\n",
                    "created": "2022-08-16T00:02:14.986+0000",
                    "updated": "2022-08-16T00:02:14.986+0000",
                    "started": "2022-08-16T00:02:14.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800764",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216006675\n\n   > I'm now linking to c++ from python/java/R docs which is not ideal, but duplicating text is not either. Any thoughts?\r\n   \r\n   IMO, I would think there should be a common area for the text since that is common across languages. Then, the c++ docs can include code snippets as appropriate which don't seem too relevant to the other languages.\r\n   \r\n   The \"[Arrow Flight RPC](https://arrow.apache.org/docs/format/Flight.html)\" section under \"Specifications and Protocols\" seems like a good place to me, since those descriptions seem to be more related to best practices of using the protocol overall.\n\n\n",
                    "created": "2022-08-16T00:16:40.717+0000",
                    "updated": "2022-08-16T00:16:40.717+0000",
                    "started": "2022-08-16T00:16:40.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800769",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216007665\n\n   The code snippet could potentially be moved to a cookbook type thing too?\n\n\n",
                    "created": "2022-08-16T00:18:26.456+0000",
                    "updated": "2022-08-16T00:18:26.456+0000",
                    "started": "2022-08-16T00:18:26.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800771",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216007683\n\n   What's wrong with linking to the C++ docs?\r\n   \r\n   The format/ page for Flight RPC is meant more for things all implementations agree on, I don't think these tips really go there\n\n\n",
                    "created": "2022-08-16T00:18:27.221+0000",
                    "updated": "2022-08-16T00:18:27.221+0000",
                    "started": "2022-08-16T00:18:27.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800772",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216007978\n\n   Also, linking to the C++ docs isn't applicable in all situations, they don't apply to Java for instance.\n\n\n",
                    "created": "2022-08-16T00:18:59.909+0000",
                    "updated": "2022-08-16T00:18:59.909+0000",
                    "started": "2022-08-16T00:18:59.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800773",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216008749\n\n   The same goes for Go.\r\n   \r\n   If we want to centralize things, we should think about where to do that. And then all the language docs can link there. (I think Sphinx has a 'tabs' extension we could use for the language-specific snippets too.)\n\n\n",
                    "created": "2022-08-16T00:20:34.821+0000",
                    "updated": "2022-08-16T00:20:34.821+0000",
                    "started": "2022-08-16T00:20:34.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800774",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216009446\n\n   > What's wrong with linking to the C++ docs?\r\n   \r\n   I don't think there's anything wrong with it. I was just thinking through alternatives since Rok didn't seem to like it.\r\n   \r\n   > Also, linking to the C++ docs isn't applicable in all situations, they don't apply to Java for instance.\r\n   \r\n   Maybe I misread that portion of the PR, but I think it references it at the moment? I don't know the details, so not sure if some of the descriptions need disentangling\r\n   \r\n   \r\n   \r\n   \n\n\n",
                    "created": "2022-08-16T00:22:07.879+0000",
                    "updated": "2022-08-16T00:22:07.879+0000",
                    "started": "2022-08-16T00:22:07.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800776",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216010069\n\n   The Java docs link to the C++ docs - but the C++ docs don't apply to Java. The bit about allocations doesn't apply to Java at all, for instance.\n\n\n",
                    "created": "2022-08-16T00:23:26.694+0000",
                    "updated": "2022-08-16T00:23:26.694+0000",
                    "started": "2022-08-16T00:23:26.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800777",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216012617\n\n   options that make the most sense to me are:\r\n   1. make a new page, perhaps under the \"development\" section?\r\n   2. leave the structure as is, and let a PR for ARROW-17378 and/or ARROW-6390 re-structure?\n\n\n",
                    "created": "2022-08-16T00:28:06.469+0000",
                    "updated": "2022-08-16T00:28:06.469+0000",
                    "started": "2022-08-16T00:28:06.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800778",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216013568\n\n   Maybe we should consider a separate tutorial section then? Even if they're language-specific? (Well, 'tutorials and guides' or something\u2026) The Flight tutorials could probably be made to work with the same 'tab' structure so they can cover multiple languages at once (though that should be used sparingly)\n\n\n",
                    "created": "2022-08-16T00:29:50.678+0000",
                    "updated": "2022-08-16T00:29:50.678+0000",
                    "started": "2022-08-16T00:29:50.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800779",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/800780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1216017621\n\n   Assuming [this tab structure](https://sphinx-tabs.readthedocs.io/en/latest/):\r\n   I like the idea of a tab structure in cases where code snippets are small, which seems to apply to what I see in this documentation. I also think that for something like flight, the focus is more on the protocol and communication so it's a case where there is a lot of conceptual overlap so tabs may work well here.\r\n   \r\n   Otherwise, I don't have strong opinions about \"best practices\" being in, or separate from, a tutorial section.\n\n\n",
                    "created": "2022-08-16T00:37:31.148+0000",
                    "updated": "2022-08-16T00:37:31.148+0000",
                    "started": "2022-08-16T00:37:31.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800780",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/801149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#issuecomment-1217234982\n\n   I didn't get to this today, should hopefully get to look at it this week\n\n\n",
                    "created": "2022-08-16T22:29:44.061+0000",
                    "updated": "2022-08-16T22:29:44.061+0000",
                    "started": "2022-08-16T22:29:44.060+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801149",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/801454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#discussion_r945843007\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,108 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:func:`arrow::flight::FlightClientOptions.generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+See available `gRPC keys_`.\n+Best gRPC practices are described here_.\n+\n+\n+Re-use clients whenever possible\n+\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n\nReview Comment:\n   Should we explain why this is? IIUC this reduces data copies, right?\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,108 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:func:`arrow::flight::FlightClientOptions.generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+See available `gRPC keys_`.\n+Best gRPC practices are described here_.\n+\n+\n+Re-use clients whenever possible\n+\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n\nReview Comment:\n   Could we be clearer about what `\"connect\"` is referring to? Is this in the netstat output? Or a method on a flight client?\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n+\n+gRPC will spawn an unbounded number of threads for concurrent clients. Those\n+threads are not necessarily cleaned up (cached thread pool in java parlance).\n+glibc malloc clears some per thread state and the default tuning never clears\n+caches in some workloads. But you can explicitly tell malloc to dump caches.\n+See ARROW-16697_ as an example.\n+\n+A quick way of testing: attach to the process with a debugger and call malloc_trim\n+\n+\n+Excessive traffic\n+-----------------\n+\n+There are basically two ways to handle excessive traffic:\n+* unbounded thread pool -> everyone gets serviced, but it might take forever.\n+This is what you are seeing now.\n+bounded thread pool -> Reject connections / requests when under load, and have\n+clients retry with backoff. This also gives an opportunity to retry with a\n+different node. Not everyone gets serviced but quality of service stays consistent.\n+\n\nReview Comment:\n   ```suggestion\r\n   \r\n   Limiting DoPut Batch Size\r\n   --------------------------\r\n   \r\n   You may wish to limit the maximum size a client can submit to a server through\r\n   DoPut, to prevent a request from taking up too much memory on the server. On\r\n   the client-side, set `write_size_limit_bytes` on `FlightClientOptions`. On the \r\n   server-side, set the gRPC option `GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH`.\r\n   The client-side option will return an error that can be retried with smaller batches,\r\n   while the server-side limit will close out the connection. Setting both can be wise, since\r\n   the former provides a better user experience but the latter may be necessary to defend\r\n   against impolite clients.\r\n   \r\n   ```\n\n\n\n",
                    "created": "2022-08-17T18:01:26.817+0000",
                    "updated": "2022-08-17T18:01:26.817+0000",
                    "started": "2022-08-17T18:01:26.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801454",
                    "issueId": "13476674"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/worklog/801460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13873:\nURL: https://github.com/apache/arrow/pull/13873#discussion_r948277546\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n\nReview Comment:\n   This is less a best practice, more of a \"howto\" so I think this should go in the cookbook\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n\nReview Comment:\n   ```suggestion\r\n   Round robin balancing means every client can have an open connection to\r\n   every server, causing an unexpected number of open connections and depleting\r\n   server resources.\r\n   ```\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n\nReview Comment:\n   Link to the gRPC page describing load balancing? https://github.com/grpc/grpc/blob/master/doc/load-balancing.md#round_robin\r\n   \r\n   \n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n\nReview Comment:\n   This is too specific to have, IMO\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n\nReview Comment:\n   ```suggestion\r\n   gRPC may not report connection errors until a call is actually made.\r\n   Hence, to detect connection errors when creating a client, some sort\r\n   of dummy RPC should be made.\r\n   ```\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n\nReview Comment:\n   Link to the grpc best practices doc as well?\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n+\n+gRPC will spawn an unbounded number of threads for concurrent clients. Those\n+threads are not necessarily cleaned up (cached thread pool in java parlance).\n+glibc malloc clears some per thread state and the default tuning never clears\n+caches in some workloads. But you can explicitly tell malloc to dump caches.\n+See ARROW-16697_ as an example.\n+\n+A quick way of testing: attach to the process with a debugger and call malloc_trim\n+\n+\n+Excessive traffic\n+-----------------\n+\n+There are basically two ways to handle excessive traffic:\n+* unbounded thread pool -> everyone gets serviced, but it might take forever.\n+This is what you are seeing now.\n+bounded thread pool -> Reject connections / requests when under load, and have\n+clients retry with backoff. This also gives an opportunity to retry with a\n+different node. Not everyone gets serviced but quality of service stays consistent.\n+\n+Closing unresponsive connections\n+--------------------------------\n+\n+1. A stale connection can be closed using\n+   :member:`arrow::flight::FlightClientOptions::stop_token`. This requires recording the\n+   stop token at connection establishment time.\n\nReview Comment:\n   this needs code samples\r\n   \r\n   (it would be great if all code samples linked to the cookbook)\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n+\n+gRPC will spawn an unbounded number of threads for concurrent clients. Those\n\nReview Comment:\n    Move this to 'excessive traffic' below?\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n+\n+gRPC will spawn an unbounded number of threads for concurrent clients. Those\n+threads are not necessarily cleaned up (cached thread pool in java parlance).\n+glibc malloc clears some per thread state and the default tuning never clears\n+caches in some workloads. But you can explicitly tell malloc to dump caches.\n+See ARROW-16697_ as an example.\n+\n+A quick way of testing: attach to the process with a debugger and call malloc_trim\n\nReview Comment:\n   or call ReleaseUnused on the system pool\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n+\n+gRPC will spawn an unbounded number of threads for concurrent clients. Those\n+threads are not necessarily cleaned up (cached thread pool in java parlance).\n+glibc malloc clears some per thread state and the default tuning never clears\n+caches in some workloads. But you can explicitly tell malloc to dump caches.\n+See ARROW-16697_ as an example.\n+\n+A quick way of testing: attach to the process with a debugger and call malloc_trim\n+\n+\n+Excessive traffic\n+-----------------\n+\n+There are basically two ways to handle excessive traffic:\n+* unbounded thread pool -> everyone gets serviced, but it might take forever.\n+This is what you are seeing now.\n+bounded thread pool -> Reject connections / requests when under load, and have\n+clients retry with backoff. This also gives an opportunity to retry with a\n+different node. Not everyone gets serviced but quality of service stays consistent.\n\nReview Comment:\n   we should add code to configure these modes \n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,110 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+.. _flight-best-practices:\n+\n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:member:`arrow::flight::FlightClientOptions::generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+Also see `best gRPC practices`_ and available `gRPC keys`_.\n+\n+\n+Re-use clients whenever possible\n+--------------------------------\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n\nReview Comment:\n   this isn't specific to the client\n\n\n\n##########\ndocs/source/cpp/flight.rst:\n##########\n@@ -172,6 +172,108 @@ request/response. On the server, they can inspect incoming headers and\n fail the request; hence, they can be used to implement custom\n authentication methods.\n \n+Best practices\n+==============\n+\n+gRPC\n+----\n+\n+When using default gRPC transport options can be passed to it via\n+:func:`arrow::flight::FlightClientOptions.generic_options`. For example:\n+\n+.. code-block:: cpp\n+\n+   auto options = FlightClientOptions::Defaults();\n+   // Set a very low limit at the gRPC layer to fail all calls\n+   options.generic_options.emplace_back(GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH, 4);\n+\n+See available `gRPC keys_`.\n+Best gRPC practices are described here_.\n+\n+\n+Re-use clients whenever possible\n+\n+\n+Closing clients causes gRPC to close and clean up connections which can take\n+several seconds per connection. This will stall server and client threads if\n+done too frequently. Client reuse will avoid this issue.\n+\n+Don\u2019t round-robin load balance\n+------------------------------\n+\n+Round robin balancing can cause every client to have an open connection to\n+every server causing an unexpected number of open connections and a depletion\n+of resources.\n+\n+Debugging\n+---------\n+\n+Use netstat to see the number of open connections.\n+For debug - env GRPC_VERBOSITY=info GRPC_TRACE=http will print the initial\n+headers (on both sides) so you can see if grpc established the connection or\n+not. It will also print when a message is sent, so you can tell if the\n+connection is open or not.\n+Note: \"connect\" isn't really a connect and we\u2019ve observed that gRPC does not\n+give you the actual error until you first try to make a call. This can cause\n+error being reported at unexpected times.\n+\n+Use ListFlights sparingly\n+-------------------------\n+\n+ListFlights endpoint is largely just implemented as a normal GRPC stream\n+endpoint and can hit transfer bottlenecks if used too much. To estimate data\n+transfer bottleneck:\n+5k schemas will serialize to about 1-5 MB/call. Assuming a gRPC localhost\n+bottleneck of 3GB/s you can at best serve 600-3000 clients/s.\n+\n+ARROW-15764_ proposes a caching optimisation for server side, but it was not\n+yet implemented.\n+\n+\n+Memory cache client-side\n+------------------------\n+\n+Flight uses gRPC allocator wherever possible.\n\nReview Comment:\n   ```suggestion\r\n   Flight tries to reuse allocations made by gRPC to avoid redundant\r\n   data copies.  However, this means that those allocations may not\r\n   be tracked by the Arrow memory pool, and that memory usage behavior,\r\n   such as whether free memory is returned to the system, is dependent\r\n   on the allocator that gRPC uses (usually the system allocator).\r\n   ```\n\n\n\n",
                    "created": "2022-08-17T18:25:04.617+0000",
                    "updated": "2022-08-17T18:25:04.617+0000",
                    "started": "2022-08-17T18:25:04.617+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801460",
                    "issueId": "13476674"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 50400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f4d220a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59bc5889[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38bfe6d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37c895a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@752a931f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6d25c404[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a6b0632[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4d3a7c7c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c29bcaf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f6f50ca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5dc79983[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4300c7db[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 50400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 15 23:01:10 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-15T23:01:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17407/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-14T02:01:54.000+0000",
        "updated": "2022-09-16T14:12:28.000+0000",
        "timeoriginalestimate": null,
        "description": "We want to provide best practices and debugging section in:\r\n* [cpp flight docs|https://arrow.apache.org/docs/cpp/flight.html]\r\n* [python flight docs|https://arrow.apache.org/docs/python/flight.html]\r\n* [java flight docs|https://arrow.apache.org/docs/java/flight.html]\r\n* [R flight docs|https://arrow.apache.org/docs/r/articles/flight.html]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "14h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 50400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc][FlightRPC] Flight/gRPC best practices",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13476674/comment/17605542",
                    "id": "17605542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Issue resolved by pull request 13873\n[https://github.com/apache/arrow/pull/13873]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-09-15T23:01:10.763+0000",
                    "updated": "2022-09-15T23:01:10.763+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z17qe0:",
        "customfield_12314139": null
    }
}