{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13358944",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944",
    "key": "ARROW-11655",
    "fields": {
        "parent": {
            "id": "13352985",
            "key": "ARROW-11298",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985",
            "fields": {
                "summary": "[Rust][DataFusion] Implement Postgres String Functions",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                    "name": "Minor",
                    "id": "4"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11655/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/557329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 opened a new pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T21:29:16.486+0000",
                    "updated": "2021-02-24T21:29:16.486+0000",
                    "started": "2021-02-24T21:29:16.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557329",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/557567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#issuecomment-785433746\n\n\n   https://issues.apache.org/jira/browse/ARROW-11655\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T22:44:10.255+0000",
                    "updated": "2021-02-24T22:44:10.255+0000",
                    "started": "2021-02-24T22:44:10.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557567",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/558042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r583024015\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       This code seems inconsistent with the comments of `can_coerce_from`: \r\n   ```\r\n   /// Return true if a value of type `type_from` can be coerced\r\n   /// (losslessly converted) into a value of `type_to`\r\n   ```\r\n   \r\n   What would happen if we tried to coerce `\"foo\"` into an `Int8`? I think the correct answer is that that we should get a runtime error. I worry that we would end up silently converting to `Null`. \r\n   \r\n   Can you explain why these coercion rules are needed?  And if we decide they are, can we please update the comments of this function to reflect the newfound understanding?\r\n   \r\n   @jorgecarleitao  I think did some previous work in this area, so he may have some relevant perspective. cc @andygrove  in case you are interested\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -530,17 +530,6 @@ async fn sqrt_f32_vs_f64() -> Result<()> {\n     Ok(())\n }\n \n-#[tokio::test]\n-async fn csv_query_error() -> Result<()> {\n-    // sin(utf8) should error\n-    let mut ctx = create_ctx()?;\n-    register_aggregate_csv(&mut ctx)?;\n-    let sql = \"SELECT sin(c1) FROM aggregate_test_100\";\n-    let plan = ctx.create_logical_plan(&sql);\n-    assert!(plan.is_err());\n\nReview comment:\n       I think we should leave this test in (even if we decide that `sin(utf8)` should not error) and update it to show the expected results as a way of documenting the expected behavior. \n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -1137,295 +1259,831 @@ mod tests {\n             Float64Array\n         );\n         test_function!(\n-            Ltrim,\n-            &[lit(ScalarValue::Utf8(Some(\" trim\".to_string())))],\n-            Ok(Some(\"trim\")),\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"abcde\".to_string()))),\n+                lit(ScalarValue::Int8(Some(2))),\n+            ],\n+            Ok(Some(\"ab\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Ltrim,\n-            &[lit(ScalarValue::Utf8(Some(\" trim \".to_string())))],\n-            Ok(Some(\"trim \")),\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"abcde\".to_string()))),\n+                lit(ScalarValue::Int64(Some(200))),\n+            ],\n+            Ok(Some(\"abcde\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Ltrim,\n-            &[lit(ScalarValue::Utf8(Some(\"trim \".to_string())))],\n-            Ok(Some(\"trim \")),\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"abcde\".to_string()))),\n+                lit(ScalarValue::Int64(Some(-2))),\n+            ],\n+            Ok(Some(\"abc\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Ltrim,\n-            &[lit(ScalarValue::Utf8(Some(\"trim\".to_string())))],\n-            Ok(Some(\"trim\")),\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"abcde\".to_string()))),\n+                lit(ScalarValue::Int64(Some(-200))),\n+            ],\n+            Ok(Some(\"\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Ltrim,\n-            &[lit(ScalarValue::Utf8(Some(\"\\n trim \".to_string())))],\n-            Ok(Some(\"\\n trim \")),\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"abcde\".to_string()))),\n+                lit(ScalarValue::Int64(Some(0))),\n+            ],\n+            Ok(Some(\"\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Ltrim,\n-            &[lit(ScalarValue::Utf8(None))],\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(None)),\n+                lit(ScalarValue::Int64(Some(2))),\n+            ],\n             Ok(None),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            OctetLength,\n-            &[lit(ScalarValue::Utf8(Some(\"chars\".to_string())))],\n-            Ok(Some(5)),\n-            i32,\n-            Int32,\n-            Int32Array\n-        );\n-        test_function!(\n-            OctetLength,\n-            &[lit(ScalarValue::Utf8(Some(\"jos\u00e9\".to_string())))],\n-            Ok(Some(5)),\n-            i32,\n-            Int32,\n-            Int32Array\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"abcde\".to_string()))),\n+                lit(ScalarValue::Int64(None)),\n+            ],\n+            Ok(None),\n+            &str,\n+            Utf8,\n+            StringArray\n         );\n         test_function!(\n-            OctetLength,\n-            &[lit(ScalarValue::Utf8(Some(\"\".to_string())))],\n-            Ok(Some(0)),\n-            i32,\n-            Int32,\n-            Int32Array\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"jos\u00e9\u00e9soj\".to_string()))),\n+                lit(ScalarValue::Int64(Some(5))),\n+            ],\n+            Ok(Some(\"jos\u00e9\u00e9\")),\n+            &str,\n+            Utf8,\n+            StringArray\n         );\n         test_function!(\n-            OctetLength,\n-            &[lit(ScalarValue::Utf8(None))],\n-            Ok(None),\n-            i32,\n-            Int32,\n-            Int32Array\n+            Left,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"jos\u00e9\u00e9soj\".to_string()))),\n+                lit(ScalarValue::Int64(Some(-3))),\n+            ],\n+            Ok(Some(\"jos\u00e9\u00e9\")),\n+            &str,\n+            Utf8,\n+            StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(0))),\n+                lit(ScalarValue::Utf8(Some(\"jos\u00e9\".to_string()))),\n+                lit(ScalarValue::Int64(Some(5))),\n             ],\n-            Ok(Some(\"alphabet\")),\n+            Ok(Some(\" jos\u00e9\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"jos\u00e9\u00e9soj\".to_string()))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n                 lit(ScalarValue::Int64(Some(5))),\n             ],\n-            Ok(Some(\"\u00e9soj\")),\n+            Ok(Some(\"   hi\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(1))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(Some(0))),\n             ],\n-            Ok(Some(\"alphabet\")),\n+            Ok(Some(\"\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(2))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(None)),\n             ],\n-            Ok(Some(\"lphabet\")),\n+            Ok(None),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(3))),\n+                lit(ScalarValue::Utf8(None)),\n+                lit(ScalarValue::Int64(Some(5))),\n             ],\n-            Ok(Some(\"phabet\")),\n+            Ok(None),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(-3))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(Some(5))),\n+                lit(ScalarValue::Utf8(Some(\"xy\".to_string()))),\n             ],\n-            Ok(Some(\"alphabet\")),\n+            Ok(Some(\"xyxhi\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(30))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(Some(21))),\n+                lit(ScalarValue::Utf8(Some(\"abcdef\".to_string()))),\n             ],\n-            Ok(Some(\"\")),\n+            Ok(Some(\"abcdefabcdefabcdefahi\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(None)),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(Some(5))),\n+                lit(ScalarValue::Utf8(Some(\" \".to_string()))),\n             ],\n-            Ok(None),\n+            Ok(Some(\"   hi\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(3))),\n-                lit(ScalarValue::Int64(Some(2))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(Some(5))),\n+                lit(ScalarValue::Utf8(Some(\"\".to_string()))),\n             ],\n-            Ok(Some(\"ph\")),\n+            Ok(Some(\"hi\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(3))),\n-                lit(ScalarValue::Int64(Some(20))),\n+                lit(ScalarValue::Utf8(None)),\n+                lit(ScalarValue::Int64(Some(5))),\n+                lit(ScalarValue::Utf8(Some(\"xy\".to_string()))),\n             ],\n-            Ok(Some(\"phabet\")),\n+            Ok(None),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n                 lit(ScalarValue::Int64(None)),\n-                lit(ScalarValue::Int64(Some(20))),\n+                lit(ScalarValue::Utf8(Some(\"xy\".to_string()))),\n             ],\n             Ok(None),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(3))),\n-                lit(ScalarValue::Int64(None)),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Int64(Some(5))),\n+                lit(ScalarValue::Utf8(None)),\n             ],\n             Ok(None),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"alphabet\".to_string()))),\n-                lit(ScalarValue::Int64(Some(1))),\n-                lit(ScalarValue::Int64(Some(-1))),\n+                lit(ScalarValue::Utf8(Some(\"hi\".to_string()))),\n+                lit(ScalarValue::Utf8(Some(\"5\".to_string()))),\n+                lit(ScalarValue::Utf8(Some(\"xy\".to_string()))),\n             ],\n-            Err(DataFusionError::Execution(\n-                \"negative substring length not allowed\".to_string(),\n-            )),\n+            Ok(Some(\"xyxhi\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Substr,\n+            Lpad,\n             &[\n-                lit(ScalarValue::Utf8(Some(\"jos\u00e9\u00e9soj\".to_string()))),\n-                lit(ScalarValue::Int64(Some(5))),\n-                lit(ScalarValue::Int64(Some(2))),\n+                lit(ScalarValue::Utf8(Some(\"jos\u00e9\".to_string()))),\n+                lit(ScalarValue::Int64(Some(10))),\n+                lit(ScalarValue::Utf8(Some(\"xy\".to_string()))),\n             ],\n-            Ok(Some(\"\u00e9s\")),\n+            Ok(Some(\"xyxyxyjos\u00e9\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Rtrim,\n-            &[lit(ScalarValue::Utf8(Some(\"trim \".to_string())))],\n-            Ok(Some(\"trim\")),\n+            Lpad,\n+            &[\n+                lit(ScalarValue::Utf8(Some(\"jos\u00e9\".to_string()))),\n+                lit(ScalarValue::Int64(Some(10))),\n+                lit(ScalarValue::Utf8(Some(\"\u00e9\u00f1\".to_string()))),\n+            ],\n+            Ok(Some(\"\u00e9\u00f1\u00e9\u00f1\u00e9\u00f1jos\u00e9\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Rtrim,\n-            &[lit(ScalarValue::Utf8(Some(\" trim \".to_string())))],\n-            Ok(Some(\" trim\")),\n+            Ltrim,\n+            &[lit(ScalarValue::Utf8(Some(\" trim\".to_string())))],\n+            Ok(Some(\"trim\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Rtrim,\n-            &[lit(ScalarValue::Utf8(Some(\" trim \\n\".to_string())))],\n-            Ok(Some(\" trim \\n\")),\n+            Ltrim,\n+            &[lit(ScalarValue::Utf8(Some(\" trim \".to_string())))],\n+            Ok(Some(\"trim \")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Rtrim,\n-            &[lit(ScalarValue::Utf8(Some(\" trim\".to_string())))],\n-            Ok(Some(\" trim\")),\n+            Ltrim,\n+            &[lit(ScalarValue::Utf8(Some(\"trim \".to_string())))],\n+            Ok(Some(\"trim \")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Rtrim,\n+            Ltrim,\n             &[lit(ScalarValue::Utf8(Some(\"trim\".to_string())))],\n             Ok(Some(\"trim\")),\n             &str,\n             Utf8,\n             StringArray\n         );\n         test_function!(\n-            Rtrim,\n+            Ltrim,\n+            &[lit(ScalarValue::Utf8(Some(\"\\n trim \".to_string())))],\n+            Ok(Some(\"\\n trim \")),\n+            &str,\n+            Utf8,\n+            StringArray\n+        );\n+        test_function!(\n\nReview comment:\n       I love these tests\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -2079,11 +2104,11 @@ async fn test_string_expressions() -> Result<()> {\n     test_expression!(\"substr('alphabet', 2)\", \"lphabet\");\n     test_expression!(\"substr('alphabet', 3)\", \"phabet\");\n     test_expression!(\"substr('alphabet', 30)\", \"\");\n-    test_expression!(\"substr('alphabet', CAST(NULL AS int))\", \"NULL\");\n\nReview comment:\n       \ud83d\udc4d \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-25T17:28:49.174+0000",
                    "updated": "2021-02-25T17:28:49.174+0000",
                    "started": "2021-02-25T17:28:49.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558042",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/558152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r583147592\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       @alamb I think you have hit on a bigger issue.\r\n   \r\n   Postgres will do this type coercion silently: `SELECT LEFT('abcde', '1');` will return `a`.  And `SELECT LEFT('abcde', 'a');` will return `invalid input syntax for type integer: \"a\"`.\r\n   \r\n   I think the default return of a failed `CAST` in DataFusion is currently `NULL` which is not good and not an ANSI expected behavior. I will volunteer to fix it if we can reach a consensus.\r\n   \r\n   This is one of my major issues with Spark. Some other engines explicitly call out this behavior with `SAFE CAST`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-25T20:24:23.439+0000",
                    "updated": "2021-02-25T20:24:23.439+0000",
                    "started": "2021-02-25T20:24:23.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558152",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/558154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r583147743\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -530,17 +530,6 @@ async fn sqrt_f32_vs_f64() -> Result<()> {\n     Ok(())\n }\n \n-#[tokio::test]\n-async fn csv_query_error() -> Result<()> {\n-    // sin(utf8) should error\n-    let mut ctx = create_ctx()?;\n-    register_aggregate_csv(&mut ctx)?;\n-    let sql = \"SELECT sin(c1) FROM aggregate_test_100\";\n-    let plan = ctx.create_logical_plan(&sql);\n-    assert!(plan.is_err());\n\nReview comment:\n       Ok ill re-add.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-25T20:24:39.759+0000",
                    "updated": "2021-02-25T20:24:39.759+0000",
                    "started": "2021-02-25T20:24:39.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558154",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/558240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r583238365\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       I think the cast in DataFusion relies on the `cast` in Arrow. I think Arrow should have an option (I think there is a JIRA issue for that already) that would return an error on a failing cast instead of nulls, which is I think what we then can/should use for DataFusion.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-25T22:11:52.407+0000",
                    "updated": "2021-02-25T22:11:52.407+0000",
                    "started": "2021-02-25T22:11:52.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558240",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/558322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r583302248\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       @Dandandan @alamb if you agree I can try to add it as I still have the function work in my head.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-26T00:35:27.702+0000",
                    "updated": "2021-02-26T00:35:27.702+0000",
                    "started": "2021-02-26T00:35:27.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558322",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r584288331\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       I agree that adding an option to the arrow cast kernel to error (rather than silently return `Null` would be very valuable). I can see usecases for returning `Null` which is why I don't think we could just change the cast kernel's behavior. But an option would be lovely \u2764\ufe0f \r\n   \r\n   Sorry for the delay in responding\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-28T12:28:38.150+0000",
                    "updated": "2021-02-28T12:28:38.150+0000",
                    "started": "2021-02-28T12:28:38.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559051",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r584420423\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       No problem @alamb. How about I revert the coercion logic from this PR and re-add the explicit cast in the tests. I think there is a _major_ piece of work to fully address CAST/coercion.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T03:05:30.604+0000",
                    "updated": "2021-03-01T03:05:30.604+0000",
                    "started": "2021-03-01T03:05:30.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559161",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r584911188\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       > How about I revert the coercion logic from this PR and re-add the explicit cast in the tests. \r\n   Sounds like a great plan\r\n   \r\n   > I think there is a major piece of work to fully address CAST/coercion.\r\n   I agree \ud83d\udcaf \n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       > How about I revert the coercion logic from this PR and re-add the explicit cast in the tests. \r\n   \r\n   Sounds like a great plan\r\n   \r\n   > I think there is a major piece of work to fully address CAST/coercion.\r\n   \r\n   I agree \ud83d\udcaf \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T17:30:50.468+0000",
                    "updated": "2021-03-01T17:30:50.468+0000",
                    "started": "2021-03-01T17:30:50.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559493",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r584924393\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -361,10 +534,167 @@ pub fn ltrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<ArrayRef> {\n     }\n }\n \n-/// Converts the string to all lower case.\n-/// lower('TOM') = 'tom'\n-pub fn lower(args: &[ColumnarValue]) -> Result<ColumnarValue> {\n-    handle(args, |x| x.to_ascii_lowercase(), \"lower\")\n+/// Returns last n characters in the string, or when n is negative, returns all but first |n| characters.\n+/// right('abcde', 2) = 'de'\n+pub fn right<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<ArrayRef> {\n+    let string_array: &GenericStringArray<T> = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .ok_or_else(|| {\n+            DataFusionError::Internal(\"could not cast string to StringArray\".to_string())\n+        })?;\n+\n+    let n_array: &Int64Array =\n+        args[1]\n+            .as_any()\n+            .downcast_ref::<Int64Array>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\"could not cast n to Int64Array\".to_string())\n+            })?;\n+\n+    let result = string_array\n+        .iter()\n+        .enumerate()\n+        .map(|(i, x)| {\n+            if n_array.is_null(i) {\n+                None\n+            } else {\n+                x.map(|x: &str| {\n+                    let n: i64 = n_array.value(i);\n\nReview comment:\n       First of all, thanks a lot for this, @seddonm1 . Impressive.\r\n   \r\n   I do not have time to go through all of this, but I will try to comment over what I find.\r\n   \r\n   Because we do not check that the length of the two arrays are equal, I think that this will read out of bounds whenever `n_array.len() < string_array.len()`.\r\n   \r\n   I would recommend tthat we do not use `.value` or `is_null` and instead only use the corresponding iterators and `zip`. The reason being that even if the iterators have a different length, the resulting code is still sound as the zipped iterator stops at the shortest iterator.\r\n   \r\n   More generally, I think we should set a specific guideline and not allow new code to use these `unsafe`-yet-safe APIs, or better, just mark them as deprecated so that people use the corresponding safe ones.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T17:49:35.421+0000",
                    "updated": "2021-03-01T17:49:35.421+0000",
                    "started": "2021-03-01T17:49:35.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559512",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r584926908\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       Another option is to add a new function `maybe_cast -> Result<Arc<dyn Array>>`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T17:53:22.942+0000",
                    "updated": "2021-03-01T17:53:22.942+0000",
                    "started": "2021-03-01T17:53:22.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559513",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r585040519\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -361,10 +534,167 @@ pub fn ltrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<ArrayRef> {\n     }\n }\n \n-/// Converts the string to all lower case.\n-/// lower('TOM') = 'tom'\n-pub fn lower(args: &[ColumnarValue]) -> Result<ColumnarValue> {\n-    handle(args, |x| x.to_ascii_lowercase(), \"lower\")\n+/// Returns last n characters in the string, or when n is negative, returns all but first |n| characters.\n+/// right('abcde', 2) = 'de'\n+pub fn right<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<ArrayRef> {\n+    let string_array: &GenericStringArray<T> = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .ok_or_else(|| {\n+            DataFusionError::Internal(\"could not cast string to StringArray\".to_string())\n+        })?;\n+\n+    let n_array: &Int64Array =\n+        args[1]\n+            .as_any()\n+            .downcast_ref::<Int64Array>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\"could not cast n to Int64Array\".to_string())\n+            })?;\n+\n+    let result = string_array\n+        .iter()\n+        .enumerate()\n+        .map(|(i, x)| {\n+            if n_array.is_null(i) {\n+                None\n+            } else {\n+                x.map(|x: &str| {\n+                    let n: i64 = n_array.value(i);\n\nReview comment:\n       Hi @jorgecarleitao thanks for this.\r\n   \r\n   My understanding is that one of the core properties of a `RecordBatch` is that all columns must have the same length: https://github.com/apache/arrow/blob/master/rust/arrow/src/record_batch.rs#L52 implemented here: https://github.com/apache/arrow/blob/master/rust/arrow/src/record_batch.rs#L134\r\n   \r\n   From what I can see, if we did adopt a `zip` then we would implicitly be treating the shorter argument as a `None` which wont break the out of bounds check but might produce some very strange function results.\r\n   \r\n   I do agree with you that many of the core Rust Arrow implementations are throwing away the benefits of the Rust compiler so we should try to sensibly refactor for safety.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T20:51:35.807+0000",
                    "updated": "2021-03-01T20:51:35.807+0000",
                    "started": "2021-03-01T20:51:35.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559570",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r585042342\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -168,20 +168,35 @@ fn maybe_data_types(\n pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     use self::DataType::*;\n     match type_into {\n-        Int8 => matches!(type_from, Int8),\n-        Int16 => matches!(type_from, Int8 | Int16 | UInt8),\n-        Int32 => matches!(type_from, Int8 | Int16 | Int32 | UInt8 | UInt16),\n+        Int8 => matches!(type_from, Int8 | Utf8 | LargeUtf8),\n\nReview comment:\n       @jorgecarleitao @alamb \r\n   \r\n   I would like to get the rest of these SQL functions implemented then pick up the type-coercion work. I was also thinking a `try_cast` implementation but it will be a lot of work. \r\n   \r\n   I think we also need to produce a matrix like this: https://docs.microsoft.com/en-us/sql/t-sql/functions/cast-and-convert-transact-sql?view=sql-server-ver15#implicit-conversions to work out the scope of the changes as I think we have a very imbalanced set of implementations at the moment.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T20:54:51.955+0000",
                    "updated": "2021-03-01T20:54:51.955+0000",
                    "started": "2021-03-01T20:54:51.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559571",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/559574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#issuecomment-788291128\n\n\n   @alamb This is the PR with the type-coercion changes removed and the explicit `CAST(NULL AS INT)` re-added to ensure tests will pass.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T21:12:46.150+0000",
                    "updated": "2021-03-01T21:12:46.150+0000",
                    "started": "2021-03-01T21:12:46.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559574",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/560152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#issuecomment-789237527\n\n\n   @alamb @jorgecarleitao \r\n   I have reworked these functions to use `zip` instead of `enumerate` `.is_null(i)`. I think it is good to go. I will do the same for the next batch of functions once this is merged.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T21:37:50.284+0000",
                    "updated": "2021-03-02T21:37:50.284+0000",
                    "started": "2021-03-02T21:37:50.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560152",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/560413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r586347165\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -2058,17 +2058,53 @@ async fn test_string_expressions() -> Result<()> {\n     test_expression!(\"concat_ws('|','a','b','c')\", \"a|b|c\");\n     test_expression!(\"concat_ws('|',NULL)\", \"\");\n     test_expression!(\"concat_ws(NULL,'a',NULL,'b','c')\", \"NULL\");\n+    test_expression!(\"left('abcde', -2)\", \"abc\");\n+    test_expression!(\"left('abcde', -200)\", \"\");\n+    test_expression!(\"left('abcde', 0)\", \"\");\n+    test_expression!(\"left('abcde', 2)\", \"ab\");\n+    test_expression!(\"left('abcde', 200)\", \"abcde\");\n+    test_expression!(\"left('abcde', CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"left(NULL, 2)\", \"NULL\");\n+    test_expression!(\"left(NULL, CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"lower('')\", \"\");\n+    test_expression!(\"lower('TOM')\", \"tom\");\n+    test_expression!(\"lower(NULL)\", \"NULL\");\n+    test_expression!(\"lpad('hi', 5, 'xy')\", \"xyxhi\");\n+    test_expression!(\"lpad('hi', 0)\", \"\");\n+    test_expression!(\"lpad('hi', 21, 'abcdef')\", \"abcdefabcdefabcdefahi\");\n+    test_expression!(\"lpad('hi', 5, 'xy')\", \"xyxhi\");\n+    test_expression!(\"lpad('hi', 5, NULL)\", \"NULL\");\n+    test_expression!(\"lpad('hi', 5)\", \"   hi\");\n+    test_expression!(\"lpad('hi', CAST(NULL AS INT), 'xy')\", \"NULL\");\n+    test_expression!(\"lpad('hi', CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"lpad('xyxhi', 3)\", \"xyx\");\n+    test_expression!(\"lpad(NULL, 0)\", \"NULL\");\n+    test_expression!(\"lpad(NULL, 5, 'xy')\", \"NULL\");\n     test_expression!(\"ltrim(' zzzytest ', NULL)\", \"NULL\");\n     test_expression!(\"ltrim(' zzzytest ')\", \"zzzytest \");\n     test_expression!(\"ltrim('zzzytest', 'xyz')\", \"test\");\n     test_expression!(\"ltrim(NULL, 'xyz')\", \"NULL\");\n-    test_expression!(\"lower('')\", \"\");\n-    test_expression!(\"lower('TOM')\", \"tom\");\n-    test_expression!(\"lower(NULL)\", \"NULL\");\n     test_expression!(\"octet_length('')\", \"0\");\n     test_expression!(\"octet_length('chars')\", \"5\");\n     test_expression!(\"octet_length('jos\u00e9')\", \"5\");\n     test_expression!(\"octet_length(NULL)\", \"NULL\");\n+    test_expression!(\"right('abcde', -2)\", \"cde\");\n+    test_expression!(\"right('abcde', -200)\", \"\");\n+    test_expression!(\"right('abcde', 0)\", \"\");\n+    test_expression!(\"right('abcde', 2)\", \"de\");\n+    test_expression!(\"right('abcde', 200)\", \"abcde\");\n+    test_expression!(\"right('abcde', CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"right(NULL, 2)\", \"NULL\");\n+    test_expression!(\"right(NULL, CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"rpad('hi', 5, 'xy')\", \"hixyx\");\n+    test_expression!(\"rpad('hi', 0)\", \"\");\n+    test_expression!(\"rpad('hi', 21, 'abcdef')\", \"hiabcdefabcdefabcdefa\");\n+    test_expression!(\"rpad('hi', 5, 'xy')\", \"hixyx\");\n+    test_expression!(\"rpad('hi', 5, NULL)\", \"NULL\");\n+    test_expression!(\"rpad('hi', 5)\", \"hi   \");\n+    test_expression!(\"rpad('hi', CAST(NULL AS INT), 'xy')\", \"NULL\");\n\nReview comment:\n       it is interesting that the casts that are required are for casting Nulls `CAST(NULL AS INT)` --- I'll file a ticket to potentially allow that to work (I think it is fine to coerce a null constant into any type)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-03T11:43:43.391+0000",
                    "updated": "2021-03-03T11:43:43.391+0000",
                    "started": "2021-03-03T11:43:43.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560413",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/560415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#discussion_r586351860\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -2058,17 +2058,53 @@ async fn test_string_expressions() -> Result<()> {\n     test_expression!(\"concat_ws('|','a','b','c')\", \"a|b|c\");\n     test_expression!(\"concat_ws('|',NULL)\", \"\");\n     test_expression!(\"concat_ws(NULL,'a',NULL,'b','c')\", \"NULL\");\n+    test_expression!(\"left('abcde', -2)\", \"abc\");\n+    test_expression!(\"left('abcde', -200)\", \"\");\n+    test_expression!(\"left('abcde', 0)\", \"\");\n+    test_expression!(\"left('abcde', 2)\", \"ab\");\n+    test_expression!(\"left('abcde', 200)\", \"abcde\");\n+    test_expression!(\"left('abcde', CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"left(NULL, 2)\", \"NULL\");\n+    test_expression!(\"left(NULL, CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"lower('')\", \"\");\n+    test_expression!(\"lower('TOM')\", \"tom\");\n+    test_expression!(\"lower(NULL)\", \"NULL\");\n+    test_expression!(\"lpad('hi', 5, 'xy')\", \"xyxhi\");\n+    test_expression!(\"lpad('hi', 0)\", \"\");\n+    test_expression!(\"lpad('hi', 21, 'abcdef')\", \"abcdefabcdefabcdefahi\");\n+    test_expression!(\"lpad('hi', 5, 'xy')\", \"xyxhi\");\n+    test_expression!(\"lpad('hi', 5, NULL)\", \"NULL\");\n+    test_expression!(\"lpad('hi', 5)\", \"   hi\");\n+    test_expression!(\"lpad('hi', CAST(NULL AS INT), 'xy')\", \"NULL\");\n+    test_expression!(\"lpad('hi', CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"lpad('xyxhi', 3)\", \"xyx\");\n+    test_expression!(\"lpad(NULL, 0)\", \"NULL\");\n+    test_expression!(\"lpad(NULL, 5, 'xy')\", \"NULL\");\n     test_expression!(\"ltrim(' zzzytest ', NULL)\", \"NULL\");\n     test_expression!(\"ltrim(' zzzytest ')\", \"zzzytest \");\n     test_expression!(\"ltrim('zzzytest', 'xyz')\", \"test\");\n     test_expression!(\"ltrim(NULL, 'xyz')\", \"NULL\");\n-    test_expression!(\"lower('')\", \"\");\n-    test_expression!(\"lower('TOM')\", \"tom\");\n-    test_expression!(\"lower(NULL)\", \"NULL\");\n     test_expression!(\"octet_length('')\", \"0\");\n     test_expression!(\"octet_length('chars')\", \"5\");\n     test_expression!(\"octet_length('jos\u00e9')\", \"5\");\n     test_expression!(\"octet_length(NULL)\", \"NULL\");\n+    test_expression!(\"right('abcde', -2)\", \"cde\");\n+    test_expression!(\"right('abcde', -200)\", \"\");\n+    test_expression!(\"right('abcde', 0)\", \"\");\n+    test_expression!(\"right('abcde', 2)\", \"de\");\n+    test_expression!(\"right('abcde', 200)\", \"abcde\");\n+    test_expression!(\"right('abcde', CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"right(NULL, 2)\", \"NULL\");\n+    test_expression!(\"right(NULL, CAST(NULL AS INT))\", \"NULL\");\n+    test_expression!(\"rpad('hi', 5, 'xy')\", \"hixyx\");\n+    test_expression!(\"rpad('hi', 0)\", \"\");\n+    test_expression!(\"rpad('hi', 21, 'abcdef')\", \"hiabcdefabcdefabcdefa\");\n+    test_expression!(\"rpad('hi', 5, 'xy')\", \"hixyx\");\n+    test_expression!(\"rpad('hi', 5, NULL)\", \"NULL\");\n+    test_expression!(\"rpad('hi', 5)\", \"hi   \");\n+    test_expression!(\"rpad('hi', CAST(NULL AS INT), 'xy')\", \"NULL\");\n\nReview comment:\n       https://issues.apache.org/jira/browse/ARROW-11851\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-03T11:49:31.594+0000",
                    "updated": "2021-03-03T11:49:31.594+0000",
                    "started": "2021-03-03T11:49:31.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560415",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/560416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#issuecomment-789658697\n\n\n   Thanks again @seddonm1  -- I think this PR is ready to go and has been hanging out for a long time -- we can improve things in subsequent PRs. I am going to merge it in. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-03T11:50:24.552+0000",
                    "updated": "2021-03-03T11:50:24.552+0000",
                    "started": "2021-03-03T11:50:24.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560416",
                    "issueId": "13358944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/worklog/560417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb edited a comment on pull request #9565:\nURL: https://github.com/apache/arrow/pull/9565#issuecomment-789658697\n\n\n   Thanks again @seddonm1  -- I think this PR is ready to go and has been hanging out for a long time -- we can improve things in subsequent PRs. I am going to merge it in. FYI @jorgecarleitao \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-03T11:50:37.455+0000",
                    "updated": "2021-03-03T11:50:37.455+0000",
                    "started": "2021-03-03T11:50:37.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560417",
                    "issueId": "13358944"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@9bfa969[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@776eb157[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1052930a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@12346c5e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32e94761[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@421b89fe[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46d59874[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@77324a6c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f98d9a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@11d2f5d0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7baed9a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1e2a9d95[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 03 11:51:56 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-03T11:51:56.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11655/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-02-16T21:19:38.000+0000",
        "updated": "2021-03-03T11:52:01.000+0000",
        "timeoriginalestimate": null,
        "description": "The Pad and Trimming functions",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Pad/trim functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944/comment/17294494",
                    "id": "17294494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9565\n[https://github.com/apache/arrow/pull/9565]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-03T11:51:56.355+0000",
                    "updated": "2021-03-03T11:51:56.355+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0nqe8:",
        "customfield_12314139": null
    }
}