{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13388698",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698",
    "key": "ARROW-13296",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12619102",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619102",
                "type": {
                    "id": "12310040",
                    "name": "Required",
                    "inward": "is required by",
                    "outward": "requires",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310040"
                },
                "inwardIssue": {
                    "id": "13389144",
                    "key": "ARROW-13307",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389144",
                    "fields": {
                        "summary": "[C++] Remove reflection-based enums (was: Use reflection-based enums for compute options)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13296/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:38:18.796+0000",
                    "updated": "2021-07-09T19:38:18.796+0000",
                    "started": "2021-07-09T19:38:18.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621150",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#issuecomment-877414280\n\n\n   https://issues.apache.org/jira/browse/ARROW-13296\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:38:33.430+0000",
                    "updated": "2021-07-09T19:38:33.430+0000",
                    "started": "2021-07-09T19:38:33.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621151",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667174171\n\n\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n\nReview comment:\n       These are properly tests, no?\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+constexpr const char* SkipWhitespace(const char* raw) {\n+  return *raw == '\\0' || !IsSpace(*raw) ? raw : SkipWhitespace(raw + 1);\n+}\n+\n+constexpr const char* SkipNonWhitespace(const char* raw) {\n+  return *raw == '\\0' || IsSpace(*raw) ? raw : SkipNonWhitespace(raw + 1);\n+}\n+\n+constexpr size_t TokenSize(const char* token_start) {\n+  return SkipNonWhitespace(token_start) - token_start;\n+}\n+\n+constexpr size_t NextTokenStart(const char* raw, size_t token_start) {\n+  return SkipWhitespace(SkipNonWhitespace(raw + token_start)) - raw;\n+}\n+\n+static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+\n+using StringConstant = const char* const&;\n+\n+template <StringConstant Raw, size_t... Offsets>\n+struct EnumTypeImpl {\n+  static constexpr const char* raw = SkipWhitespace(Raw);\n+\n+  static constexpr int size = sizeof...(Offsets);\n\nReview comment:\n       nit: these should all be named kSize, kRaw, etc. right?\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n\nReview comment:\n       nit: can we write this as an if-else if-else instead of nested ternary expressions?\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+constexpr const char* SkipWhitespace(const char* raw) {\n+  return *raw == '\\0' || !IsSpace(*raw) ? raw : SkipWhitespace(raw + 1);\n+}\n+\n+constexpr const char* SkipNonWhitespace(const char* raw) {\n+  return *raw == '\\0' || IsSpace(*raw) ? raw : SkipNonWhitespace(raw + 1);\n+}\n+\n+constexpr size_t TokenSize(const char* token_start) {\n+  return SkipNonWhitespace(token_start) - token_start;\n+}\n+\n+constexpr size_t NextTokenStart(const char* raw, size_t token_start) {\n+  return SkipWhitespace(SkipNonWhitespace(raw + token_start)) - raw;\n+}\n+\n+static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+\n+using StringConstant = const char* const&;\n+\n+template <StringConstant Raw, size_t... Offsets>\n+struct EnumTypeImpl {\n+  static constexpr const char* raw = SkipWhitespace(Raw);\n+\n+  static constexpr int size = sizeof...(Offsets);\n+\n+  static constexpr util::string_view values[sizeof...(Offsets)] = {\n+      {raw + Offsets, TokenSize(raw + Offsets)}...};\n+\n+  static constexpr int GetIndex(util::string_view repr, int i = 0) {\n+    return i == size ? -1\n+                     : CaseInsensitiveEquals(values[i], repr) ? i : GetIndex(repr, i + 1);\n+  }\n+};\n+\n+template <StringConstant Raw, size_t... Offsets>\n+constexpr util::string_view const\n+    EnumTypeImpl<Raw, Offsets...>::values[sizeof...(Offsets)];\n+\n+template <StringConstant Raw, bool IsEnd = false,\n+          size_t MaxOffset = SkipWhitespace(Raw) - Raw, size_t... Offsets>\n+struct EnumTypeBuilder\n+    : EnumTypeBuilder<Raw, Raw[NextTokenStart(Raw, MaxOffset)] == '\\0',\n+                      NextTokenStart(Raw, MaxOffset), Offsets..., MaxOffset> {};\n+\n+template <StringConstant Raw, size_t MaxOffset, size_t... Offsets>\n+struct EnumTypeBuilder<Raw, true, MaxOffset, Offsets...> {\n+  using ImplType = EnumTypeImpl<Raw, Offsets...>;\n+};\n+\n+template <StringConstant Raw>\n+struct EnumType : EnumTypeBuilder<Raw>::ImplType {\n+  constexpr EnumType() = default;\n+  constexpr explicit EnumType(int i) : index{i < this->size ? i : -1} {}\n+  constexpr explicit EnumType(util::string_view repr) : index{this->GetIndex(repr)} {}\n+\n+  constexpr bool operator==(EnumType other) const { return index == other.index; }\n+  constexpr bool operator!=(EnumType other) const { return index != other.index; }\n+\n+  std::string ToString() const { return this->values[index].to_string(); }\n+  constexpr explicit operator bool() const { return index != -1; }\n\nReview comment:\n       nit: either the constructor should also guard for negative indices or this check should be for any negative index\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+constexpr const char* SkipWhitespace(const char* raw) {\n+  return *raw == '\\0' || !IsSpace(*raw) ? raw : SkipWhitespace(raw + 1);\n+}\n+\n+constexpr const char* SkipNonWhitespace(const char* raw) {\n+  return *raw == '\\0' || IsSpace(*raw) ? raw : SkipNonWhitespace(raw + 1);\n+}\n+\n+constexpr size_t TokenSize(const char* token_start) {\n+  return SkipNonWhitespace(token_start) - token_start;\n+}\n+\n+constexpr size_t NextTokenStart(const char* raw, size_t token_start) {\n+  return SkipWhitespace(SkipNonWhitespace(raw + token_start)) - raw;\n+}\n+\n+static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+\n+using StringConstant = const char* const&;\n+\n+template <StringConstant Raw, size_t... Offsets>\n+struct EnumTypeImpl {\n+  static constexpr const char* raw = SkipWhitespace(Raw);\n+\n+  static constexpr int size = sizeof...(Offsets);\n+\n+  static constexpr util::string_view values[sizeof...(Offsets)] = {\n+      {raw + Offsets, TokenSize(raw + Offsets)}...};\n+\n+  static constexpr int GetIndex(util::string_view repr, int i = 0) {\n+    return i == size ? -1\n+                     : CaseInsensitiveEquals(values[i], repr) ? i : GetIndex(repr, i + 1);\n+  }\n\nReview comment:\n       The case-insensitivity is nice, but I'd almost rather we just pick a case and stick with it for consistency.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:50:04.301+0000",
                    "updated": "2021-07-09T19:50:04.301+0000",
                    "started": "2021-07-09T19:50:04.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621158",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667178551\n\n\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n\nReview comment:\n       Unfortunately not; in c++11 a constexpr function's body must be a single return statement.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:51:57.635+0000",
                    "updated": "2021-07-09T19:51:57.635+0000",
                    "started": "2021-07-09T19:51:57.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621159",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667178646\n\n\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n\nReview comment:\n       I'll move them\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:52:10.800+0000",
                    "updated": "2021-07-09T19:52:10.800+0000",
                    "started": "2021-07-09T19:52:10.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621160",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667178903\n\n\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+constexpr const char* SkipWhitespace(const char* raw) {\n+  return *raw == '\\0' || !IsSpace(*raw) ? raw : SkipWhitespace(raw + 1);\n+}\n+\n+constexpr const char* SkipNonWhitespace(const char* raw) {\n+  return *raw == '\\0' || IsSpace(*raw) ? raw : SkipNonWhitespace(raw + 1);\n+}\n+\n+constexpr size_t TokenSize(const char* token_start) {\n+  return SkipNonWhitespace(token_start) - token_start;\n+}\n+\n+constexpr size_t NextTokenStart(const char* raw, size_t token_start) {\n+  return SkipWhitespace(SkipNonWhitespace(raw + token_start)) - raw;\n+}\n+\n+static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+\n+using StringConstant = const char* const&;\n+\n+template <StringConstant Raw, size_t... Offsets>\n+struct EnumTypeImpl {\n+  static constexpr const char* raw = SkipWhitespace(Raw);\n+\n+  static constexpr int size = sizeof...(Offsets);\n+\n+  static constexpr util::string_view values[sizeof...(Offsets)] = {\n+      {raw + Offsets, TokenSize(raw + Offsets)}...};\n+\n+  static constexpr int GetIndex(util::string_view repr, int i = 0) {\n+    return i == size ? -1\n+                     : CaseInsensitiveEquals(values[i], repr) ? i : GetIndex(repr, i + 1);\n+  }\n+};\n+\n+template <StringConstant Raw, size_t... Offsets>\n+constexpr util::string_view const\n+    EnumTypeImpl<Raw, Offsets...>::values[sizeof...(Offsets)];\n+\n+template <StringConstant Raw, bool IsEnd = false,\n+          size_t MaxOffset = SkipWhitespace(Raw) - Raw, size_t... Offsets>\n+struct EnumTypeBuilder\n+    : EnumTypeBuilder<Raw, Raw[NextTokenStart(Raw, MaxOffset)] == '\\0',\n+                      NextTokenStart(Raw, MaxOffset), Offsets..., MaxOffset> {};\n+\n+template <StringConstant Raw, size_t MaxOffset, size_t... Offsets>\n+struct EnumTypeBuilder<Raw, true, MaxOffset, Offsets...> {\n+  using ImplType = EnumTypeImpl<Raw, Offsets...>;\n+};\n+\n+template <StringConstant Raw>\n+struct EnumType : EnumTypeBuilder<Raw>::ImplType {\n+  constexpr EnumType() = default;\n+  constexpr explicit EnumType(int i) : index{i < this->size ? i : -1} {}\n+  constexpr explicit EnumType(util::string_view repr) : index{this->GetIndex(repr)} {}\n+\n+  constexpr bool operator==(EnumType other) const { return index == other.index; }\n+  constexpr bool operator!=(EnumType other) const { return index != other.index; }\n+\n+  std::string ToString() const { return this->values[index].to_string(); }\n+  constexpr explicit operator bool() const { return index != -1; }\n\nReview comment:\n       I'll guard for any index outside [0, size)\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n+             ? true\n+             : ToLower(l[0]) != ToLower(r[0])\n+                   ? false\n+                   : l[0] == '\\0' ? true : CaseInsensitiveEquals(l + 1, r + 1, limit - 1);\n+}\n+\n+constexpr bool CaseInsensitiveEquals(util::string_view l, util::string_view r) {\n+  return l.size() == r.size() && CaseInsensitiveEquals(l.data(), r.data(), l.size());\n+}\n+\n+static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+constexpr const char* SkipWhitespace(const char* raw) {\n+  return *raw == '\\0' || !IsSpace(*raw) ? raw : SkipWhitespace(raw + 1);\n+}\n+\n+constexpr const char* SkipNonWhitespace(const char* raw) {\n+  return *raw == '\\0' || IsSpace(*raw) ? raw : SkipNonWhitespace(raw + 1);\n+}\n+\n+constexpr size_t TokenSize(const char* token_start) {\n+  return SkipNonWhitespace(token_start) - token_start;\n+}\n+\n+constexpr size_t NextTokenStart(const char* raw, size_t token_start) {\n+  return SkipWhitespace(SkipNonWhitespace(raw + token_start)) - raw;\n+}\n+\n+static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+\n+using StringConstant = const char* const&;\n+\n+template <StringConstant Raw, size_t... Offsets>\n+struct EnumTypeImpl {\n+  static constexpr const char* raw = SkipWhitespace(Raw);\n+\n+  static constexpr int size = sizeof...(Offsets);\n\nReview comment:\n       Alright\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:52:54.088+0000",
                    "updated": "2021-07-09T19:52:54.088+0000",
                    "started": "2021-07-09T19:52:54.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621161",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667179022\n\n\n\n##########\nFile path: cpp/src/arrow/util/enum.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+constexpr bool IsSpace(char c) { return c == ' ' || c == '\\n' || c == '\\r'; }\n+\n+constexpr char ToLower(char c) { return c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c; }\n+\n+constexpr bool CaseInsensitiveEquals(const char* l, const char* r,\n+                                     size_t limit = util::string_view::npos) {\n+  return limit == 0\n\nReview comment:\n       Oh, huh, the more you know. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T19:52:57.205+0000",
                    "updated": "2021-07-09T19:52:57.205+0000",
                    "started": "2021-07-09T19:52:57.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621162",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#issuecomment-877881536\n\n\n   I recommend avoiding macros whenever possible, but for completeness I'll note that we could replace\r\n   ```c++\r\n   // color.h\r\n   struct Color : EnumType<Color> {\r\n     using EnumType::EnumType;\r\n     static constexpr const char* kValues = R\"(red green blue)\";\r\n   };\r\n   // color.cc\r\n   constexpr const char* Color::kValues;\r\n   ```\r\n   \r\n   with\r\n   ```c++\r\n   ARROW_ENUM(Color, red green blue);\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-11T23:53:56.275+0000",
                    "updated": "2021-07-11T23:53:56.275+0000",
                    "started": "2021-07-11T23:53:56.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621406",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667666517\n\n\n\n##########\nFile path: cpp/src/arrow/util/reflection_test.cc\n##########\n@@ -220,5 +221,63 @@ TEST(Reflection, EnumTraits) {\n   static_assert(std::is_same<EnumTraits<PersonType>::Type, Int8Type>::value, \"\");\n }\n \n+TEST(Reflection, CompileTimeStringOps) {\n+  static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+  static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+  static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+  static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+  static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+  static_assert(CaseInsensitiveEquals(SkipWhitespace(\"a  b\"), \"a  b\"), \"\");\n+\n+  static_assert(CaseInsensitiveEquals(SkipNonWhitespace(\"  a\"), \"  a\"), \"\");\n+  static_assert(CaseInsensitiveEquals(SkipNonWhitespace(\"a  b\"), \"  b\"), \"\");\n+\n+  static_assert(TokenSize(\"aba ddf\") == 3, \"\");\n+\n+  static_assert(NextTokenStart(\"aba ddf dfas\", 4) == 8, \"\");\n+}\n+\n+struct Color : EnumType<Color> {\n+  using EnumType<Color>::EnumType;\n+  static constexpr const char* kValues = R\"(red green blue)\";\n+};\n+\n+TEST(Reflection, EnumType) {\n+  static_assert(Color::size() == 3, \"\");\n+\n+  static_assert(Color(\"red\").index == 0, \"\");\n+  static_assert(*Color(\"GREEN\") == 1, \"\");\n+  static_assert(Color(\"Blue\") == Color(2), \"\");\n+\n+  EXPECT_EQ(Color(\"red\").ToString(), \"red\");\n+  EXPECT_EQ(Color(\"GREEN\").ToString(), \"green\");\n+  EXPECT_EQ(Color(\"Blue\").ToString(), \"blue\");\n+\n+  static_assert(Color(\"GREEN\") == Color(\"Green\"), \"\");\n+  static_assert(Color(\"GREEN\") == Color(1), \"\");\n+  static_assert(Color(\"GREEN\") != Color(), \"\");\n+\n+  static_assert(!Color(\"chartreuse\"), \"\");\n+  static_assert(Color(\"violet\") == Color(), \"\");\n+  static_assert(Color(-1) == Color(), \"\");\n+  static_assert(Color(-29) == Color(), \"\");\n+  static_assert(Color(12334) == Color(), \"\");\n+\n+  for (util::string_view repr : {\"Red\", \"orange\", \"BLUE\"}) {\n+    switch (*Color(repr)) {\n+      case* Color(\"blue\"):\n+        EXPECT_EQ(repr, \"BLUE\");\n+        break;\n+      case* Color(\"red\"):\n+        EXPECT_EQ(repr, \"Red\");\n+        break;\n+      default:\n\nReview comment:\n       Can all the compilers recognize when there's an exhaustive match or no? (I assume not, unfortunately?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T06:48:15.402+0000",
                    "updated": "2021-07-12T06:48:15.402+0000",
                    "started": "2021-07-12T06:48:15.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621461",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#discussion_r667667208\n\n\n\n##########\nFile path: cpp/src/arrow/util/reflection_test.cc\n##########\n@@ -220,5 +221,63 @@ TEST(Reflection, EnumTraits) {\n   static_assert(std::is_same<EnumTraits<PersonType>::Type, Int8Type>::value, \"\");\n }\n \n+TEST(Reflection, CompileTimeStringOps) {\n+  static_assert(CaseInsensitiveEquals(\"a\", \"a\"), \"\");\n+  static_assert(CaseInsensitiveEquals(\"Ab\", \"ab\"), \"\");\n+  static_assert(CaseInsensitiveEquals(\"Ab \", \"ab\", 2), \"\");\n+  static_assert(CaseInsensitiveEquals(util::string_view{\"Ab \", 2}, \"ab\"), \"\");\n+\n+  static_assert(CaseInsensitiveEquals(SkipWhitespace(\"  a\"), \"a\"), \"\");\n+  static_assert(CaseInsensitiveEquals(SkipWhitespace(\"a  b\"), \"a  b\"), \"\");\n+\n+  static_assert(CaseInsensitiveEquals(SkipNonWhitespace(\"  a\"), \"  a\"), \"\");\n+  static_assert(CaseInsensitiveEquals(SkipNonWhitespace(\"a  b\"), \"  b\"), \"\");\n+\n+  static_assert(TokenSize(\"aba ddf\") == 3, \"\");\n+\n+  static_assert(NextTokenStart(\"aba ddf dfas\", 4) == 8, \"\");\n+}\n+\n+struct Color : EnumType<Color> {\n+  using EnumType<Color>::EnumType;\n+  static constexpr const char* kValues = R\"(red green blue)\";\n+};\n+\n+TEST(Reflection, EnumType) {\n+  static_assert(Color::size() == 3, \"\");\n+\n+  static_assert(Color(\"red\").index == 0, \"\");\n+  static_assert(*Color(\"GREEN\") == 1, \"\");\n+  static_assert(Color(\"Blue\") == Color(2), \"\");\n+\n+  EXPECT_EQ(Color(\"red\").ToString(), \"red\");\n+  EXPECT_EQ(Color(\"GREEN\").ToString(), \"green\");\n+  EXPECT_EQ(Color(\"Blue\").ToString(), \"blue\");\n+\n+  static_assert(Color(\"GREEN\") == Color(\"Green\"), \"\");\n+  static_assert(Color(\"GREEN\") == Color(1), \"\");\n+  static_assert(Color(\"GREEN\") != Color(), \"\");\n+\n+  static_assert(!Color(\"chartreuse\"), \"\");\n+  static_assert(Color(\"violet\") == Color(), \"\");\n+  static_assert(Color(-1) == Color(), \"\");\n+  static_assert(Color(-29) == Color(), \"\");\n+  static_assert(Color(12334) == Color(), \"\");\n+\n+  for (util::string_view repr : {\"Red\", \"orange\", \"BLUE\"}) {\n+    switch (*Color(repr)) {\n+      case* Color(\"blue\"):\n+        EXPECT_EQ(repr, \"BLUE\");\n+        break;\n+      case* Color(\"red\"):\n+        EXPECT_EQ(repr, \"Red\");\n+        break;\n+      default:\n\nReview comment:\n       Oh I guess no by definition since we're switching on int here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T06:49:23.485+0000",
                    "updated": "2021-07-12T06:49:23.485+0000",
                    "started": "2021-07-12T06:49:23.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621464",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#issuecomment-878274316\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T19:48:03.814+0000",
                    "updated": "2021-07-12T19:48:03.814+0000",
                    "started": "2021-07-12T19:48:03.814+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621521",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691#issuecomment-878258074\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:00:30.578+0000",
                    "updated": "2021-07-12T20:00:30.578+0000",
                    "started": "2021-07-12T20:00:30.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621634",
                    "issueId": "13388698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/worklog/621651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #10691:\nURL: https://github.com/apache/arrow/pull/10691\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:02:39.881+0000",
                    "updated": "2021-07-12T20:02:39.881+0000",
                    "started": "2021-07-12T20:02:39.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621651",
                    "issueId": "13388698"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@96c78d1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f0154de[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55245eaf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@60364771[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69f63876[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7616d9b9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13020f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@53eff26a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b8245e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4b998e31[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bae1000[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@67fed7bd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 12 19:04:55 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-12T19:04:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13296/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-09T16:20:04.000+0000",
        "updated": "2021-07-12T20:02:40.000+0000",
        "timeoriginalestimate": null,
        "description": "There's significant boilerplate associated with using enumerations in arrow, since we need to expose them to the bindings which involves a mapping to/from strings per binding. That's not ideal and we could do better with a metaprogramming utility which provides enum semantics but supports basic reflection (min/max value, number of values, to/from string).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Provide reflection-compatible enum replacement",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388698/comment/17379328",
                    "id": "17379328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10691\n[https://github.com/apache/arrow/pull/10691]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-12T19:04:55.586+0000",
                    "updated": "2021-07-12T19:04:55.586+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ssag:",
        "customfield_12314139": null
    }
}