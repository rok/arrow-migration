{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13133212",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212",
    "key": "ARROW-2019",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "name": "Critical",
            "id": "2"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2019/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3b0353c0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41784808[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34076020[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37bc46a0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f645484[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@67f70670[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@687e7cce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d22be27[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30ef1d73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f744998[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7477c0b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5c0c9b9b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jan 25 18:33:30 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-02-22T18:55:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2019/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-01-23T23:02:16.000+0000",
        "updated": "2018-02-22T18:57:23.000+0000",
        "timeoriginalestimate": null,
        "description": "We have observed cases in our external sort code where the amount of memory actually allocated for a record batch sometimes turns out to be more than necessary and also more than what was reserved by the operator for special purposes. Thus queries fail with OOM.\r\n\r\nUsually to control the memory allocated by vector.allocateNew() is to do a setInitialCapacity() and the latter modifies the vector state variables which are then used to allocate memory. However, due to the multiplier of 5 used in List Vector, we end up asking for more memory than necessary. For example, for a value count of 4095, we asked for 128KB of memory for an offset buffer of VarCharVector for a field which was list of varchars.\u00a0\r\n\r\nWe did ((4095 * 5) + 1) * 4 => 80KB . => 128KB (rounded off to power of 2 allocation).\u00a0\r\n\r\nWe had earlier made changes to setInitialCapacity() of ListVector when we were facing problems with deeply nested lists and decided to use the multiplier only for the leaf scalar vector.\u00a0\r\n\r\nIt looks like there is a need for a specialized setInitialCapacity() for ListVector where the caller dictates the repeatedness.\r\n\r\nAlso, there is another bug in setInitialCapacity() where the allocation of validity buffer doesn't obey the capacity specified in setInitialCapacity().\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Control the memory allocated for inner vector in LIST",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16336542",
                    "id": "16336542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia opened a new pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497\n \n \n   We have observed cases in our external sort code where the amount of memory actually allocated for a record batch sometimes turns out to be more than necessary and also more than what was reserved by the operator for special purposes. Thus queries fail with OOM.\r\n   \r\n   Usually to control the memory allocated by vector.allocateNew() is to do a setInitialCapacity() and the latter modifies the vector state variables which are then used to allocate memory. However, due to the multiplier of 5 used in List Vector, we end up asking for more memory than necessary. For example, for a value count of 4095, we asked for 128KB of memory for an offset buffer of VarCharVector for a field which was list of varchars. \r\n   \r\n   We did ((4095 * 5) + 1) * 4 => 80KB . => 128KB (rounded off to power of 2 allocation). \r\n   \r\n   We had earlier made changes to setInitialCapacity() of ListVector when we were facing problems with deeply nested lists and decided to use the multiplier only for the leaf scalar vector. \r\n   \r\n   It looks like there is a need for a specialized setInitialCapacity() for ListVector where the caller dictates the repeatedness.\r\n   \r\n   Also, there is another bug in setInitialCapacity() where the allocation of validity buffer doesn't obey the capacity specified in setInitialCapacity(). \r\n   \r\n   cc @jacques-n , @BryanCutler , @icexelloss , @vkorukanti \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-23T23:28:17.263+0000",
                    "updated": "2018-01-23T23:28:17.263+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16336882",
                    "id": "16336882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on issue #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#issuecomment-360017657\n \n \n   The change makes sense but I don't understand why the tests change the way they do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T04:30:35.315+0000",
                    "updated": "2018-01-24T04:30:35.315+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16336905",
                    "id": "16336905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#issuecomment-360021601\n \n \n   @jacques-n , in addition to the new API of setInitialCapacity(valueCount, multiplier), another bug has been fixed as part of this patch. \r\n   \r\n   Until now setInitialCapacity() was a part of super class BaseRepeatedValueVector so doing setInitialCapacity() would not control the allocation of validity buffer which is part of sub class ListVector. The call only impacted the offset buffer and data vector since they are members of super class.\r\n   \r\n   So if we do setInitialCapacity(512), it would still allocate validity buffer with default state, i.e for 4096 values. Subsequently, getValueCapacity() does a MIN (offset buffer value capacity - 1, validity buffer capacity) and that's why the result was 1023  -- \r\n   \r\n   we allocated offset buffer for (512 + 1) * 4 => 2052 bytes => 4096 bytes and thus 1024 value capacity of offset buffer. So the result was 1023.\r\n   \r\n   In other words, getValueCapacity() was previously returning the value capacity of offset buffer. Now since both versions of setInitialCapacity() are implemented in the base class, it correctly reflects the value capacity w.r.t validity buffer.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T05:02:11.974+0000",
                    "updated": "2018-01-24T05:02:11.974+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16336944",
                    "id": "16336944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163457008\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n ##########\n @@ -143,6 +143,26 @@ public void setInitialCapacity(int numRecords) {\n     }\n   }\n \n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param multiplier repeated value multiplier\n+   */\n+  public void setInitialCapacity(int numRecords, int multiplier) {\n \n Review comment:\n   multiplier should be double.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T05:36:01.949+0000",
                    "updated": "2018-01-24T05:36:01.949+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16337819",
                    "id": "16337819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on issue #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#issuecomment-360184071\n \n \n   I gave this some more thought and I think the actual concept is variable width data density. So I think the parameter should probably be called density and we should allow it to be set on varchar/varbinary as well. I think we should also add a new method on each of these types which is getDensity() which returns the relative density of the structure.\r\n   \r\n   For example, density for list vector would be the average list size per entry. Such as:\r\n   \r\n   10 => on average, each position has a list of 10 values.\r\n   0.1 => out of ten lists, one has a single element and all the other lists are null.\r\n   \r\n   The same could be applied to varchar/varbinary but the density would be the number of data bytes on average per element. If we have a large amount of null varchars, those would naturally decrease the density of the vector.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T16:07:40.063+0000",
                    "updated": "2018-01-24T16:07:40.063+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338266",
                    "id": "16338266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#issuecomment-360281246\n \n \n   addressed review comments, added unit tests.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T21:35:29.042+0000",
                    "updated": "2018-01-24T21:35:29.042+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338422",
                    "id": "16338422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163711349\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n ##########\n @@ -143,6 +143,35 @@ public void setInitialCapacity(int numRecords) {\n     }\n   }\n \n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists). This helps\n+   *                in tightly controlling the memory we provision for\n+   *                inner data vector.\n+   */\n+  public void setInitialCapacity(int numRecords, double density) {\n+    offsetAllocationSizeInBytes = (numRecords + 1) * OFFSET_WIDTH;\n+    final int innerValueCapacity = (int)(numRecords * density);\n \n Review comment:\n   let's throw exception here if we're truncating.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:31:22.628+0000",
                    "updated": "2018-01-24T23:31:22.628+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338423",
                    "id": "16338423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163711284\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -169,6 +169,45 @@ public void setInitialCapacity(int valueCount) {\n     offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n   }\n \n+  /**\n+   * Sets the desired value capacity for the vector. This function doesn't\n+   * allocate any memory for the vector.\n+   * @param valueCount desired number of elements in the vector\n+   * @param density average number of bytes per variable width element\n+   */\n+  public void setInitialCapacity(int valueCount, double density) {\n+    final long size = (long) (valueCount * density);\n+    if (size > MAX_ALLOCATION_SIZE) {\n+      throw new OversizedAllocationException(\"Requested amount of memory is more than max allowed\");\n+    }\n+    valueAllocationSizeInBytes = (int) size;\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(valueCount);\n+    /* to track the end offset of last data element in vector, we need\n+     * an additional slot in offset buffer.\n+     */\n+    offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n+  }\n+\n+  /**\n+   * Get the density of this ListVector\n+   * @return density\n+   */\n+  public double getDensity() {\n+    if (valueCount == 0) {\n+      return 0.0D;\n+    }\n+    double totalDataSize = 0.0D;\n+    for (int i = 0; i < valueCount; i++) {\n+      if (isSet(i) == 1) {\n \n Review comment:\n   this can be done in aggregate, no need for loop.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:31:22.710+0000",
                    "updated": "2018-01-24T23:31:22.710+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338424",
                    "id": "16338424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163711431\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n ##########\n @@ -102,6 +97,60 @@ public void initializeChildrenFromFields(List<Field> children) {\n     addOrGetVector.getVector().initializeChildrenFromFields(field.getChildren());\n   }\n \n+  @Override\n+  public void setInitialCapacity(int numRecords) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords);\n+  }\n+\n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists). This helps\n \n Review comment:\n   null (no lists) or empty lists\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:31:22.731+0000",
                    "updated": "2018-01-24T23:31:22.731+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338425",
                    "id": "16338425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163711449\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n ##########\n @@ -102,6 +97,60 @@ public void initializeChildrenFromFields(List<Field> children) {\n     addOrGetVector.getVector().initializeChildrenFromFields(field.getChildren());\n   }\n \n+  @Override\n+  public void setInitialCapacity(int numRecords) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords);\n+  }\n+\n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists). This helps\n+   *                in tightly controlling the memory we provision for\n+   *                inner data vector.\n+   */\n+  public void setInitialCapacity(int numRecords, double density) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords, density);\n+  }\n+\n+  /**\n+   * Get the density of this ListVector\n+   * @return density\n+   */\n+  public double getDensity() {\n+    if (valueCount == 0) {\n+      return 0.0D;\n+    }\n+    double totalListSize = 0.0D;\n+    for (int i = 0; i < valueCount; i++) {\n+      if (isSet(i) == 1) {\n \n Review comment:\n   as above, no need for a loop.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:31:22.777+0000",
                    "updated": "2018-01-24T23:31:22.777+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338450",
                    "id": "16338450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163716077\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n ##########\n @@ -143,6 +143,35 @@ public void setInitialCapacity(int numRecords) {\n     }\n   }\n \n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists). This helps\n+   *                in tightly controlling the memory we provision for\n+   *                inner data vector.\n+   */\n+  public void setInitialCapacity(int numRecords, double density) {\n+    offsetAllocationSizeInBytes = (numRecords + 1) * OFFSET_WIDTH;\n+    final int innerValueCapacity = (int)(numRecords * density);\n \n Review comment:\n   done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:59:00.531+0000",
                    "updated": "2018-01-24T23:59:00.531+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338451",
                    "id": "16338451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163716092\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -169,6 +169,45 @@ public void setInitialCapacity(int valueCount) {\n     offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n   }\n \n+  /**\n+   * Sets the desired value capacity for the vector. This function doesn't\n+   * allocate any memory for the vector.\n+   * @param valueCount desired number of elements in the vector\n+   * @param density average number of bytes per variable width element\n+   */\n+  public void setInitialCapacity(int valueCount, double density) {\n+    final long size = (long) (valueCount * density);\n+    if (size > MAX_ALLOCATION_SIZE) {\n+      throw new OversizedAllocationException(\"Requested amount of memory is more than max allowed\");\n+    }\n+    valueAllocationSizeInBytes = (int) size;\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(valueCount);\n+    /* to track the end offset of last data element in vector, we need\n+     * an additional slot in offset buffer.\n+     */\n+    offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n+  }\n+\n+  /**\n+   * Get the density of this ListVector\n+   * @return density\n+   */\n+  public double getDensity() {\n+    if (valueCount == 0) {\n+      return 0.0D;\n+    }\n+    double totalDataSize = 0.0D;\n+    for (int i = 0; i < valueCount; i++) {\n+      if (isSet(i) == 1) {\n \n Review comment:\n   done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:59:07.349+0000",
                    "updated": "2018-01-24T23:59:07.349+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338453",
                    "id": "16338453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163716112\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n ##########\n @@ -102,6 +97,60 @@ public void initializeChildrenFromFields(List<Field> children) {\n     addOrGetVector.getVector().initializeChildrenFromFields(field.getChildren());\n   }\n \n+  @Override\n+  public void setInitialCapacity(int numRecords) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords);\n+  }\n+\n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists). This helps\n \n Review comment:\n   done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:59:15.985+0000",
                    "updated": "2018-01-24T23:59:15.985+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338454",
                    "id": "16338454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163716125\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n ##########\n @@ -102,6 +97,60 @@ public void initializeChildrenFromFields(List<Field> children) {\n     addOrGetVector.getVector().initializeChildrenFromFields(field.getChildren());\n   }\n \n+  @Override\n+  public void setInitialCapacity(int numRecords) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords);\n+  }\n+\n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists). This helps\n+   *                in tightly controlling the memory we provision for\n+   *                inner data vector.\n+   */\n+  public void setInitialCapacity(int numRecords, double density) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords, density);\n+  }\n+\n+  /**\n+   * Get the density of this ListVector\n+   * @return density\n+   */\n+  public double getDensity() {\n+    if (valueCount == 0) {\n+      return 0.0D;\n+    }\n+    double totalListSize = 0.0D;\n+    for (int i = 0; i < valueCount; i++) {\n+      if (isSet(i) == 1) {\n \n Review comment:\n   done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-24T23:59:21.334+0000",
                    "updated": "2018-01-24T23:59:21.334+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338464",
                    "id": "16338464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#issuecomment-360318075\n \n \n   addressed review comments\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-25T00:15:00.356+0000",
                    "updated": "2018-01-25T00:15:00.356+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338632",
                    "id": "16338632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "vkorukanti commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163736658\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -169,6 +169,42 @@ public void setInitialCapacity(int valueCount) {\n     offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n   }\n \n+  /**\n+   * Sets the desired value capacity for the vector. This function doesn't\n+   * allocate any memory for the vector.\n+   * @param valueCount desired number of elements in the vector\n+   * @param density average number of bytes per variable width element\n+   */\n+  public void setInitialCapacity(int valueCount, double density) {\n+    final long size = (long) (valueCount * density);\n+    if (size < 1) {\n+      throw new IllegalArgumentException(\"With the provided density and value count, potential capacity of the data buffer is 0\");\n+    }\n+    if (size > MAX_ALLOCATION_SIZE) {\n+      throw new OversizedAllocationException(\"Requested amount of memory is more than max allowed\");\n+    }\n+    valueAllocationSizeInBytes = (int) size;\n \n Review comment:\n   Do we need to round this up to nearest 2^n?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-25T02:40:11.560+0000",
                    "updated": "2018-01-25T02:40:11.560+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16338636",
                    "id": "16338636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on a change in pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497#discussion_r163737707\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -169,6 +169,42 @@ public void setInitialCapacity(int valueCount) {\n     offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n   }\n \n+  /**\n+   * Sets the desired value capacity for the vector. This function doesn't\n+   * allocate any memory for the vector.\n+   * @param valueCount desired number of elements in the vector\n+   * @param density average number of bytes per variable width element\n+   */\n+  public void setInitialCapacity(int valueCount, double density) {\n+    final long size = (long) (valueCount * density);\n+    if (size < 1) {\n+      throw new IllegalArgumentException(\"With the provided density and value count, potential capacity of the data buffer is 0\");\n+    }\n+    if (size > MAX_ALLOCATION_SIZE) {\n+      throw new OversizedAllocationException(\"Requested amount of memory is more than max allowed\");\n+    }\n+    valueAllocationSizeInBytes = (int) size;\n \n Review comment:\n   It happens during actual allocation. setInitialCapacity() doesn't allocate but just records the state for amount of memory we want to allocate.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-25T02:43:20.598+0000",
                    "updated": "2018-01-25T02:43:20.598+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133212/comment/16339602",
                    "id": "16339602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia closed pull request #1497: ARROW-2019: [JAVA] Control the memory allocated for inner vector in LIST\nURL: https://github.com/apache/arrow/pull/1497\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\nindex fff329a9b..d1190ceb7 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n@@ -169,6 +169,42 @@ public void setInitialCapacity(int valueCount) {\n     offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n   }\n \n+  /**\n+   * Sets the desired value capacity for the vector. This function doesn't\n+   * allocate any memory for the vector.\n+   * @param valueCount desired number of elements in the vector\n+   * @param density average number of bytes per variable width element\n+   */\n+  public void setInitialCapacity(int valueCount, double density) {\n+    final long size = (long) (valueCount * density);\n+    if (size < 1) {\n+      throw new IllegalArgumentException(\"With the provided density and value count, potential capacity of the data buffer is 0\");\n+    }\n+    if (size > MAX_ALLOCATION_SIZE) {\n+      throw new OversizedAllocationException(\"Requested amount of memory is more than max allowed\");\n+    }\n+    valueAllocationSizeInBytes = (int) size;\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(valueCount);\n+    /* to track the end offset of last data element in vector, we need\n+     * an additional slot in offset buffer.\n+     */\n+    offsetAllocationSizeInBytes = (valueCount + 1) * OFFSET_WIDTH;\n+  }\n+\n+  /**\n+   * Get the density of this ListVector\n+   * @return density\n+   */\n+  public double getDensity() {\n+    if (valueCount == 0) {\n+      return 0.0D;\n+    }\n+    final int startOffset = offsetBuffer.getInt(0);\n+    final int endOffset = offsetBuffer.getInt(valueCount * OFFSET_WIDTH);\n+    final double totalListSize = endOffset - startOffset;\n+    return totalListSize/valueCount;\n+  }\n+\n   /**\n    * Get the current value capacity for the vector\n    * @return number of elements that vector can hold.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\nindex d0a664ac0..50ee3a757 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n@@ -143,6 +143,38 @@ public void setInitialCapacity(int numRecords) {\n     }\n   }\n \n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists) or empty lists.\n+   *                This helps in tightly controlling the memory we provision\n+   *                for inner data vector.\n+   */\n+  public void setInitialCapacity(int numRecords, double density) {\n+    offsetAllocationSizeInBytes = (numRecords + 1) * OFFSET_WIDTH;\n+    final int innerValueCapacity = (int)(numRecords * density);\n+    if (innerValueCapacity < 1) {\n+      throw new IllegalArgumentException(\"With the provided density and value count, potential value capacity for the data vector is 0\");\n+    }\n+    vector.setInitialCapacity(innerValueCapacity);\n+  }\n+\n   @Override\n   public int getValueCapacity() {\n     final int offsetValueCapacity = Math.max(getOffsetBufferValueCapacity() - 1, 0);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\nindex 8aeeb7e5a..b472dae06 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n@@ -31,12 +31,7 @@\n import org.apache.arrow.memory.BaseAllocator;\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.OutOfMemoryException;\n-import org.apache.arrow.vector.AddOrGetResult;\n-import org.apache.arrow.vector.BufferBacked;\n-import org.apache.arrow.vector.FieldVector;\n-import org.apache.arrow.vector.ValueVector;\n-import org.apache.arrow.vector.ZeroVector;\n-import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.*;\n import org.apache.arrow.vector.complex.impl.ComplexCopier;\n import org.apache.arrow.vector.complex.impl.UnionListReader;\n import org.apache.arrow.vector.complex.impl.UnionListWriter;\n@@ -102,6 +97,54 @@ public void initializeChildrenFromFields(List<Field> children) {\n     addOrGetVector.getVector().initializeChildrenFromFields(field.getChildren());\n   }\n \n+  @Override\n+  public void setInitialCapacity(int numRecords) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords);\n+  }\n+\n+  /**\n+   * Specialized version of setInitialCapacity() for ListVector. This is\n+   * used by some callers when they want to explicitly control and be\n+   * conservative about memory allocated for inner data vector. This is\n+   * very useful when we are working with memory constraints for a query\n+   * and have a fixed amount of memory reserved for the record batch. In\n+   * such cases, we are likely to face OOM or related problems when\n+   * we reserve memory for a record batch with value count x and\n+   * do setInitialCapacity(x) such that each vector allocates only\n+   * what is necessary and not the default amount but the multiplier\n+   * forces the memory requirement to go beyond what was needed.\n+   *\n+   * @param numRecords value count\n+   * @param density density of ListVector. Density is the average size of\n+   *                list per position in the List vector. For example, a\n+   *                density value of 10 implies each position in the list\n+   *                vector has a list of 10 values.\n+   *                A density value of 0.1 implies out of 10 positions in\n+   *                the list vector, 1 position has a list of size 1 and\n+   *                remaining positions are null (no lists) or empty lists.\n+   *                This helps in tightly controlling the memory we provision\n+   *                for inner data vector.\n+   */\n+  public void setInitialCapacity(int numRecords, double density) {\n+    validityAllocationSizeInBytes = getValidityBufferSizeFromCount(numRecords);\n+    super.setInitialCapacity(numRecords, density);\n+  }\n+\n+  /**\n+   * Get the density of this ListVector\n+   * @return density\n+   */\n+  public double getDensity() {\n+    if (valueCount == 0) {\n+      return 0.0D;\n+    }\n+    final int startOffset = offsetBuffer.getInt(0);\n+    final int endOffset = offsetBuffer.getInt(valueCount * OFFSET_WIDTH);\n+    final double totalListSize = endOffset - startOffset;\n+    return totalListSize/valueCount;\n+  }\n+\n   @Override\n   public List<FieldVector> getChildrenFromFields() {\n     return singletonList(getDataVector());\n@@ -623,7 +666,7 @@ public int getNullCount() {\n    */\n   @Override\n   public int getValueCapacity() {\n-    return Math.min(getValidityBufferValueCapacity(), super.getValueCapacity());\n+    return getValidityAndOffsetValueCapacity();\n   }\n \n   private int getValidityAndOffsetValueCapacity() {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\nindex e2023f446..d49a677f6 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n@@ -112,6 +112,9 @@ public void testCopyFrom() throws Exception {\n       result = outVector.getObject(2);\n       resultSet = (ArrayList<Long>) result;\n       assertEquals(0, resultSet.size());\n+\n+      /* 3+0+0/3 */\n+      assertEquals(1.0D, inVector.getDensity(), 0);\n     }\n   }\n \n@@ -209,6 +212,9 @@ public void testSetLastSetUsage() throws Exception {\n       listVector.setLastSet(3);\n       listVector.setValueCount(10);\n \n+      /* (3+2+3)/10 */\n+      assertEquals(0.8D, listVector.getDensity(), 0);\n+\n       index = 0;\n       offset = offsetBuffer.getInt(index * ListVector.OFFSET_WIDTH);\n       assertEquals(Integer.toString(0), Integer.toString(offset));\n@@ -709,6 +715,8 @@ public void testGetBufferAddress() throws Exception {\n       listWriter.bigInt().writeBigInt(300);\n       listWriter.endList();\n \n+      listVector.setValueCount(2);\n+\n       /* check listVector contents */\n       Object result = listVector.getObject(0);\n       ArrayList<Long> resultSet = (ArrayList<Long>) result;\n@@ -739,6 +747,9 @@ public void testGetBufferAddress() throws Exception {\n       assertEquals(2, buffers.size());\n       assertEquals(bitAddress, buffers.get(0).memoryAddress());\n       assertEquals(offsetAddress, buffers.get(1).memoryAddress());\n+\n+      /* (3+2)/2 */\n+      assertEquals(2.5, listVector.getDensity(), 0);\n     }\n   }\n \n@@ -753,4 +764,61 @@ public void testConsistentChildName() throws Exception {\n       assertTrue(emptyVectorStr.contains(ListVector.DATA_VECTOR_NAME));\n     }\n   }\n+\n+  @Test\n+  public void testSetInitialCapacity() {\n+    try (final ListVector vector = ListVector.empty(\"\", allocator)) {\n+      vector.addOrGetVector(FieldType.nullable(MinorType.INT.getType()));\n+\n+      /**\n+       * use the default multiplier of 5,\n+       * 512 * 5 => 2560 * 4 => 10240 bytes => 16KB => 4096 value capacity.\n+       */\n+      vector.setInitialCapacity(512);\n+      vector.allocateNew();\n+      assertEquals(512, vector.getValueCapacity());\n+      assertEquals(4096, vector.getDataVector().getValueCapacity());\n+\n+      /* use density as 4 */\n+      vector.setInitialCapacity(512, 4);\n+      vector.allocateNew();\n+      assertEquals(512, vector.getValueCapacity());\n+      assertEquals(512*4, vector.getDataVector().getValueCapacity());\n+\n+      /**\n+       * inner value capacity we pass to data vector is 512 * 0.1 => 51\n+       * For an int vector this is 204 bytes of memory for data buffer\n+       * and 7 bytes for validity buffer.\n+       * and with power of 2 allocation, we allocate 256 bytes and 8 bytes\n+       * for the data buffer and validity buffer of the inner vector. Thus\n+       * value capacity of inner vector is 64\n+       */\n+      vector.setInitialCapacity(512, 0.1);\n+      vector.allocateNew();\n+      assertEquals(512, vector.getValueCapacity());\n+      assertEquals(64, vector.getDataVector().getValueCapacity());\n+\n+      /**\n+       * inner value capacity we pass to data vector is 512 * 0.01 => 5\n+       * For an int vector this is 20 bytes of memory for data buffer\n+       * and 1 byte for validity buffer.\n+       * and with power of 2 allocation, we allocate 32 bytes and 1 bytes\n+       * for the data buffer and validity buffer of the inner vector. Thus\n+       * value capacity of inner vector is 8\n+       */\n+      vector.setInitialCapacity(512, 0.01);\n+      vector.allocateNew();\n+      assertEquals(512, vector.getValueCapacity());\n+      assertEquals(8, vector.getDataVector().getValueCapacity());\n+\n+      boolean error = false;\n+      try {\n+        vector.setInitialCapacity(5, 0.1);\n+      } catch (IllegalArgumentException e) {\n+        error = true;\n+      } finally {\n+        assertTrue(error);\n+      }\n+    }\n+  }\n }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex 601b2062f..992bb6264 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -1908,4 +1908,40 @@ public static void setBytes(int index, byte[] bytes, VarCharVector vector) {\n     vector.offsetBuffer.setInt((index + 1) * vector.OFFSET_WIDTH, currentOffset + bytes.length);\n     vector.valueBuffer.setBytes(currentOffset, bytes, 0, bytes.length);\n   }\n+\n+  @Test /* VarCharVector */\n+  public void testSetInitialCapacity() {\n+    try (final VarCharVector vector = new VarCharVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      /* use the default 8 data bytes on average per element */\n+      vector.setInitialCapacity(4096);\n+      vector.allocateNew();\n+      assertEquals(4096, vector.getValueCapacity());\n+      assertEquals(4096 * 8, vector.getDataBuffer().capacity());\n+\n+      vector.setInitialCapacity(4096, 1);\n+      vector.allocateNew();\n+      assertEquals(4096, vector.getValueCapacity());\n+      assertEquals(4096, vector.getDataBuffer().capacity());\n+\n+      vector.setInitialCapacity(4096, 0.1);\n+      vector.allocateNew();\n+      assertEquals(4096, vector.getValueCapacity());\n+      assertEquals(512, vector.getDataBuffer().capacity());\n+\n+      vector.setInitialCapacity(4096, 0.01);\n+      vector.allocateNew();\n+      assertEquals(4096, vector.getValueCapacity());\n+      assertEquals(64, vector.getDataBuffer().capacity());\n+\n+      boolean error = false;\n+      try {\n+        vector.setInitialCapacity(5, 0.1);\n+      } catch (IllegalArgumentException e) {\n+        error = true;\n+      } finally {\n+        assertTrue(error);\n+      }\n+    }\n+  }\n }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReAlloc.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReAlloc.java\nindex f8edf8904..ca039c52f 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReAlloc.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReAlloc.java\n@@ -104,7 +104,7 @@ public void testListType() {\n       vector.setInitialCapacity(512);\n       vector.allocateNew();\n \n-      assertEquals(1023, vector.getValueCapacity());\n+      assertEquals(512, vector.getValueCapacity());\n \n       try {\n         vector.getInnerValueCountAt(2014);\n@@ -114,7 +114,7 @@ public void testListType() {\n       }\n \n       vector.reAlloc();\n-      assertEquals(2047, vector.getValueCapacity()); // note: size - 1\n+      assertEquals(1024, vector.getValueCapacity());\n       assertEquals(0, vector.getOffsetBuffer().getInt(2014 * ListVector.OFFSET_WIDTH));\n     }\n   }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-25T18:33:30.323+0000",
                    "updated": "2018-01-25T18:33:30.323+0000"
                }
            ],
            "maxResults": 18,
            "total": 18,
            "startAt": 0
        },
        "customfield_12311820": "0|i3p9xz:",
        "customfield_12314139": null
    }
}