{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13210813",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813",
    "key": "ARROW-4313",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "2.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12552515",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12552515",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13211466",
                    "key": "ARROW-4354",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211466",
                    "fields": {
                        "summary": "Explore Codespeed feasibility and ease of customization",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
            "name": "tanya",
            "key": "tanya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
            },
            "displayName": "Tanya Schlusser",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334978",
                "id": "12334978",
                "name": "Benchmarking"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 71400,
            "total": 71400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 71400,
            "total": 71400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4313/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 130,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/195981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tanyaschlusser commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586\n \n \n   This is a work in progress. It provides the ddl for a proposed schema for the benchmark database.\r\n   \r\n   - The Dockerfile loads the ddl into the appropriate directory so that it will be added upon startup.\r\n   - The `examples` directory will probably be deleted before this is completed. Some of the queries do not work (was surprised that 'null' does not compare to equal).\r\n   - My SQL style may be ugly (depending on preference) so it can change; no problem.\r\n   \r\n   Thank you for this opportunity to learn!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-07T22:33:51.083+0000",
                    "updated": "2019-02-07T22:33:51.083+0000",
                    "started": "2019-02-07T22:33:51.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "195981",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/196434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#issuecomment-461955013\n \n \n   Rebased.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-08T21:36:18.296+0000",
                    "updated": "2019-02-08T21:36:18.296+0000",
                    "started": "2019-02-08T21:36:18.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196434",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tanyaschlusser commented on issue #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#issuecomment-462585867\n \n \n   Now all of the examples work. Also, hopefully a few more examples make this easier for benchmark authors. Happy to change things that are surprising, undesired, or extraneous.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T02:19:49.229+0000",
                    "updated": "2019-02-12T02:19:49.229+0000",
                    "started": "2019-02-12T02:19:49.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197324",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256246297\n \n \n\n ##########\n File path: dev/benchmarking/make_machine_json.sh\n ##########\n @@ -0,0 +1,54 @@\n+#!/usr/bin/env bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n \n Review comment:\n   It might pay to have \"set -e\" here to make sure the program exits if there are a problem with lookups.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:31.696+0000",
                    "updated": "2019-02-13T05:43:31.696+0000",
                    "started": "2019-02-13T05:43:31.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197919",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256246113\n \n \n\n ##########\n File path: dev/benchmarking/README.md\n ##########\n @@ -0,0 +1,305 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Benchmark database\n+\n+This directory contains files related to the benchmark database.\n+\n+- 'ddl/\\*.sql' contains the database definition.\n+- 'examples/' contain code to test the database and demonstrate its use.\n+- 'Dockerfile' and 'docker-compose.yml' are for developing benchmarks\n+  against a teting database.\n+\n+## Setup\n+\n+To create a 'machine.json' file that will uniquely identify a computer for\n+benchmark submission, run the provided shell script and fill in the prompts\n+to identify the GPU:\n+\n+```shell\n \n Review comment:\n   We probably shouldn't be running benchmarks on VMs  but the sysctl lookups in this command don't work on mine (linux on VirtualBox).  It might be worth documenting the script is meant to be run on physical machines only.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:31.698+0000",
                    "updated": "2019-02-13T05:43:31.698+0000",
                    "started": "2019-02-13T05:43:31.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197920",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256249176\n \n \n\n ##########\n File path: dev/benchmarking/ddl/2_constraints.sql\n ##########\n @@ -0,0 +1,153 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+-- BENCHMARK\n \n Review comment:\n   Is it typical in postgres to have constraints in a separate file from the tables.  It would be my preference (but we should probably get others opinions) if we were trying to make file sizes reasonable to split by table (and put as many constraints as possible with the table) \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:31.716+0000",
                    "updated": "2019-02-13T05:43:31.716+0000",
                    "started": "2019-02-13T05:43:31.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197921",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256251354\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n \n Review comment:\n   why use the pair here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:31.930+0000",
                    "updated": "2019-02-13T05:43:31.930+0000",
                    "started": "2019-02-13T05:43:31.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197922",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256250975\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n \n Review comment:\n   While redundant, in the past, I have found it useful to prefix ID with the name of the table as well (i.e. cpu_id).  But this has also been a contentious point.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.020+0000",
                    "updated": "2019-02-13T05:43:32.020+0000",
                    "started": "2019-02-13T05:43:32.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197923",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256254493\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n \n Review comment:\n   might be useful to have key-value pairs here to describe other attributes until they can be incorporated more fully into the schema (e.g. hard disk type)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.028+0000",
                    "updated": "2019-02-13T05:43:32.028+0000",
                    "started": "2019-02-13T05:43:32.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197924",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256254195\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n+  , FOREIGN KEY (gpu_id) REFERENCES public.gpu\n+  , FOREIGN KEY (os_id) REFERENCES public.os\n+);\n+COMMENT ON TABLE public.machine\n+  IS 'Unique identifiers for a machine.';\n+COMMENT ON COLUMN public.machine.machine_name\n+  IS 'A unique machine name of your choice.';\n+COMMENT ON COLUMN public.machine.memory_bytes\n+  IS 'The output of `sysctl -n hw.memsize`.';\n+COMMENT ON COLUMN public.machine.cpu_actual_frequency_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency`.';\n+\n+-- UNIT\n+CREATE TABLE IF NOT EXISTS public.unit\n+(\n+  id SERIAL PRIMARY KEY\n+  , unit_name citext NOT NULL UNIQUE\n+  , benchmark_type_id integer NOT NULL\n+  , FOREIGN KEY (benchmark_type_id) REFERENCES public.benchmark_type(id)\n+);\n+COMMENT ON TABLE public.unit IS 'The actual units for a reported benchmark.';\n+COMMENT ON COLUMN public.unit.unit_name\n+  IS 'For example: ms, ns, microseconds.';\n+\n+-- ENVIRONMENT\n+CREATE TABLE IF NOT EXISTS public.environment\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version_id integer NOT NULL\n+  , language_dependencies_id integer NOT NULL\n+  , PRIMARY KEY\n+      (id, benchmark_language_id, language_version_id)\n+  , FOREIGN KEY\n+      (benchmark_language_id)\n+      REFERENCES public.benchmark_language\n+  , FOREIGN KEY\n+      (language_version_id, benchmark_language_id)\n+      REFERENCES public.language_version(id, benchmark_language_id)\n+  , FOREIGN KEY\n+      (language_dependencies_id, benchmark_language_id)\n+      REFERENCES public.language_dependencies(id, benchmark_language_id)\n+);\n+COMMENT ON TABLE public.environment\n+  IS 'Identifies a build environment for a specific suite of benchmarks.';\n+\n+-- BENCHMARK\n+CREATE TABLE IF NOT EXISTS public.benchmark\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , benchmark_name citext NOT NULL\n+  , parameter_names text[]\n+  , lessisbetter boolean NOT NULL\n+  , benchmark_description text NOT NULL\n+  , benchmark_version citext NOT NULL\n+  , unit_id integer NOT NULL\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+  , FOREIGN KEY (unit_id) REFERENCES public.unit\n+);\n+COMMENT ON TABLE public.benchmark\n+  IS 'Identifies an individual benchmark.';\n+COMMENT ON COLUMN public.benchmark.parameter_names\n+  IS 'A list of strings identifying the parameter names in the benchmark.';\n+COMMENT ON COLUMN public.benchmark.lessisbetter\n+  IS 'True if a smaller benchmark value is better.';\n+COMMENT ON COLUMN public.benchmark.benchmark_version\n+  IS 'Can be any string. In Airspeed Velocity, the version is '\n+     'by default the hash of the entire code string for the benchmark.';\n+\n+-- BENCHMARK_RESULT\n+CREATE TABLE IF NOT EXISTS public.benchmark_result\n+(\n+  id BIGSERIAL PRIMARY KEY\n+  , parameter_values jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , value numeric NOT NULL\n+  , git_commit_timestamp timestamp (0) with time zone NOT NULL\n+  , git_hash text NOT NULL\n+  , val_min numeric\n+  , val_q1 numeric\n+  , val_q3 numeric\n+  , val_max numeric\n+  , std_dev numeric NOT NULL\n+  , n_obs integer NOT NULL\n+  , machine_id integer NOT NULL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version_id integer NOT NULL\n+  , environment_id integer NOT NULL\n+  , benchmark_id integer NOT NULL\n \n Review comment:\n   it might be useful to have a notes field on this table, so results can be annotated with other interesting information.  Also potentially a key-value pair relationship to add additional metadata (one thing that comes to mind is average load or some other measure of CPU utilization)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.036+0000",
                    "updated": "2019-02-13T05:43:32.036+0000",
                    "started": "2019-02-13T05:43:32.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197925",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256249347\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n+  , FOREIGN KEY (gpu_id) REFERENCES public.gpu\n+  , FOREIGN KEY (os_id) REFERENCES public.os\n+);\n+COMMENT ON TABLE public.machine\n+  IS 'Unique identifiers for a machine.';\n+COMMENT ON COLUMN public.machine.machine_name\n+  IS 'A unique machine name of your choice.';\n+COMMENT ON COLUMN public.machine.memory_bytes\n+  IS 'The output of `sysctl -n hw.memsize`.';\n+COMMENT ON COLUMN public.machine.cpu_actual_frequency_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency`.';\n+\n+-- UNIT\n+CREATE TABLE IF NOT EXISTS public.unit\n+(\n+  id SERIAL PRIMARY KEY\n+  , unit_name citext NOT NULL UNIQUE\n+  , benchmark_type_id integer NOT NULL\n+  , FOREIGN KEY (benchmark_type_id) REFERENCES public.benchmark_type(id)\n+);\n+COMMENT ON TABLE public.unit IS 'The actual units for a reported benchmark.';\n+COMMENT ON COLUMN public.unit.unit_name\n+  IS 'For example: ms, ns, microseconds.';\n+\n+-- ENVIRONMENT\n+CREATE TABLE IF NOT EXISTS public.environment\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version_id integer NOT NULL\n+  , language_dependencies_id integer NOT NULL\n+  , PRIMARY KEY\n+      (id, benchmark_language_id, language_version_id)\n+  , FOREIGN KEY\n+      (benchmark_language_id)\n+      REFERENCES public.benchmark_language\n+  , FOREIGN KEY\n+      (language_version_id, benchmark_language_id)\n+      REFERENCES public.language_version(id, benchmark_language_id)\n+  , FOREIGN KEY\n+      (language_dependencies_id, benchmark_language_id)\n+      REFERENCES public.language_dependencies(id, benchmark_language_id)\n+);\n+COMMENT ON TABLE public.environment\n+  IS 'Identifies a build environment for a specific suite of benchmarks.';\n+\n+-- BENCHMARK\n+CREATE TABLE IF NOT EXISTS public.benchmark\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , benchmark_name citext NOT NULL\n+  , parameter_names text[]\n+  , lessisbetter boolean NOT NULL\n+  , benchmark_description text NOT NULL\n+  , benchmark_version citext NOT NULL\n+  , unit_id integer NOT NULL\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+  , FOREIGN KEY (unit_id) REFERENCES public.unit\n+);\n+COMMENT ON TABLE public.benchmark\n+  IS 'Identifies an individual benchmark.';\n+COMMENT ON COLUMN public.benchmark.parameter_names\n+  IS 'A list of strings identifying the parameter names in the benchmark.';\n+COMMENT ON COLUMN public.benchmark.lessisbetter\n+  IS 'True if a smaller benchmark value is better.';\n+COMMENT ON COLUMN public.benchmark.benchmark_version\n+  IS 'Can be any string. In Airspeed Velocity, the version is '\n+     'by default the hash of the entire code string for the benchmark.';\n+\n+-- BENCHMARK_RESULT\n+CREATE TABLE IF NOT EXISTS public.benchmark_result\n+(\n+  id BIGSERIAL PRIMARY KEY\n+  , parameter_values jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , value numeric NOT NULL\n+  , git_commit_timestamp timestamp (0) with time zone NOT NULL\n \n Review comment:\n   I think having a run timestamp here might also be helpful (even it it isn't part of the logical key it is potentially useful information.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.046+0000",
                    "updated": "2019-02-13T05:43:32.046+0000",
                    "started": "2019-02-13T05:43:32.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197926",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256252403\n \n \n\n ##########\n File path: dev/benchmarking/README.md\n ##########\n @@ -0,0 +1,305 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Benchmark database\n+\n+This directory contains files related to the benchmark database.\n+\n+- 'ddl/\\*.sql' contains the database definition.\n+- 'examples/' contain code to test the database and demonstrate its use.\n+- 'Dockerfile' and 'docker-compose.yml' are for developing benchmarks\n+  against a teting database.\n+\n+## Setup\n+\n+To create a 'machine.json' file that will uniquely identify a computer for\n+benchmark submission, run the provided shell script and fill in the prompts\n+to identify the GPU:\n+\n+```shell\n+./make_machine_json.sh\n+```\n+\n+Submit the machine details via http using the command\n+\n+```shell\n+./graphql_submit.sh machine machine.json localhost:5000/graphql\n+```\n+\n+or submit after starting up the psql client from this directory, using\n+\n+```\n+\\set content `cat machine.json`\n+SELECT ingest_machine_view(:'content'::jsonb);\n+```\n+\n+## Local testing\n+\n+For local testing, create a file in this directory named '.env' for\n+`docker-compose`, with username and password:\n+\n+```\n+PG_USER=<username>  # Database name defaults to username\n+PG_PASS=<user password>\n+```\n+\n+The Postgres Alpine image runs added '\\*.sql' and '\\*.sh' scripts placed in\n+'/docker-entrypoint-initdb.d/' during its startup script, so the database\n+will be set up once the container is running.\n+\n+\n+### Postgres client\n+\n+The `psql` shell client is bundled with the PostgreSQL core distribution\n+available from the [Postgres download page][postgres-downloads].\n+Using the 'username' defined in the `.env` file, the command to connect\n+to the container is:\n+```shell\n+psql -h localhost -p 5432 -U <username>\n+```\n+There is an example script in [examples/example.sql](examples/example.sql) that\n+runs some queries against the database. To run it in the psql client, type\n+the following in the psql command-line interface:\n+\n+```\n+\\i examples/example.sql\n+```\n+\n+#### Bulk ingestion using CSV\n+\n+An example CSV file for bulk ingestion is in\n+[examples/benchmark_result_example.csv](examples/benchmark_result_example.csv).\n+The columns are listed in the same order as they are defined, to avoid having\n+to explicitly name every colum in ingestion. The \"id\" column is left empty\n+and will be automatically assigned on insert.\n+\n+To ingest the example CSV file from the command line,\n+use the command below, substituting the 'PG_USER' username in the\n+'.env' file for '&lt;username&gt;'.\n+\n+```shell\n+CSV='examples/benchmark_result_example.csv' && \\\n+psql -U <username> -h localhost -p 5432 \\\n+ -c \"\\copy benchmark_result_view FROM '${CSV}' WITH (FORMAT csv, HEADER);\"\n+```\n+\n+#### Bulk ingestion using JSON\n+\n+To ingest the example JSON file using the psql client, use the command below.\n+\n+```\n+\\set content `cat examples/benchmark_example.json`\n+SELECT ingest_benchmark_view(:'content'::jsonb);\n+```\n+\n+### HTTP client\n+\n+The 'graphile/postgraphile' container provides an HTTP interface\n+to the database via two url routes:\n+\n+- A GraphiQL page ([localhost:5000/graphiql][graphiql])\n+  to aid visual exploration of the data model.\n+  (The `--watch` flag on the command line. Not recommended for production.)\n+- An endpoint that receives POST requests only (localhost:5000/graphql).\n+\n+#### Ingestion\n+\n+The script [graphql_submit.sh](./graphql_submit.sh) simplifies submission\n+to the database via curl. Examples:\n+\n+```shell\n+./graphql_submit.sh benchmarks examples/benchmark_example.json \n+./graphql_submit.sh results examples/benchmark_result_example.json\n+```\n+\n+#### Querying\n+\n+The output of the query is a JSON object that is hard to read on the command line.\n+Here is an example query in the shell:\n+```shell\n+curl -X POST \\\n+  -H \"Content-Type: application/json\"  \\\n+  --data '{\"query\": \"{projectDetails{ projectName }}\"}' \\\n+  localhost:5000/graphql\n+```\n+which yields\n+```\n+{\"data\":{\"projectDetails\":{\"projectName\":\"Apache Arrow\"}}}\n+```\n+\n+Here is an example query using Python:\n+```python\n+>>> import json\n+>>> import requests\n+>>>\n+>>> uri = \"http://localhost:5000/graphql\"\n+>>> query = json.load(open(\"examples/graphql_query_environment_view.json\"))\n+>>> result = requests.post(uri, json=query)\n+>>> message = \"{benchmarkLanguage} {languageVersion} {dependencies}\"\n+>>>\n+>>> for row in result.json()['data']['allEnvironmentViews']['edges']:\n+...     print(message.format(**row['node']))\n+...\n+Python 2.7 {\"six\":\"\",\"numpy\":\"1.14\",\"other_lib\":\"1.0\"}\n+Python 2.7 {\"six\":\"\",\"numpy\":\"1.15\",\"other_lib\":\"1.0\"}\n+Python 3.6 {\"boost\":\"1.42\",\"numpy\":\"1.15\"}\n+```\n+\n+## Deployment\n+\n+(work in progress).\n+\n+\n+## Quick reference\n+\n+- String variables `'have single quotes'`\n+- Arrays `'{\"have\", \"curly\", \"braces\"}'::text[]` or `'{1, 2, 3}'::integer[]`\n+- JSONb `'{\"has\":\"this\", \"format\":42}'::jsonb`\n+- When comparing nullable values use `x IS DISTINCT FROM y` rather than `x = y`\n+\n+\n+## Data model\n+\n+The primary view in the database is the\n+[`benchmark_result_view`](#benchmark_result_view),\n+which joins the actual benchmark result data with its context:\n+\n+- [`machine_view`](#machine_view): Hardware and OS\n+- [`evironment_view`](#environment_view): Build environment\n+  (language, dependencies)\n+- [`benchmark_view`](#benchmark_view): Benchmark definition\n+  (type and units, e.g. 'Time', 'ms')\n+\n+The following views can be inserted to directly: trigger\n+functions (in ['5_triggers.sql'](ddl/5_triggers.sql))\n+will look up the relevant ID numbers machine ID, benchmark ID and other\n+ID numbers to use when inserting a new result.\n+\n+\n+### machine_view\n+\n+The machine  environment (CPU, GPU, OS) used for a reported benchmark result.\n+- \"machine_name\" is unique in the \"machine\" table\n+- \"gpu_model_name\" is unique in the \"gpu\" (graphics processing unit) table\n+    - Empty string (''), not null, is used for machines that won't use the GPU\n+- \"cpu_model_name\" is unique in the \"cpu\" (central processing unit) table\n+- \"os_name\", \"os_architecture_name\", and \"os_kernel_name\"\n+  are unique in the \"os\" (operating system) table\n+\n+Column                  |  Type   | Nullable | Note\n \n Review comment:\n   are these autogenerated somehow?  If not I'd be afraid they would go out of date with the actual schema.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.078+0000",
                    "updated": "2019-02-13T05:43:32.078+0000",
                    "started": "2019-02-13T05:43:32.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197927",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256250541\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n+  , FOREIGN KEY (gpu_id) REFERENCES public.gpu\n+  , FOREIGN KEY (os_id) REFERENCES public.os\n+);\n+COMMENT ON TABLE public.machine\n+  IS 'Unique identifiers for a machine.';\n+COMMENT ON COLUMN public.machine.machine_name\n+  IS 'A unique machine name of your choice.';\n+COMMENT ON COLUMN public.machine.memory_bytes\n+  IS 'The output of `sysctl -n hw.memsize`.';\n+COMMENT ON COLUMN public.machine.cpu_actual_frequency_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency`.';\n+\n+-- UNIT\n+CREATE TABLE IF NOT EXISTS public.unit\n+(\n+  id SERIAL PRIMARY KEY\n+  , unit_name citext NOT NULL UNIQUE\n+  , benchmark_type_id integer NOT NULL\n+  , FOREIGN KEY (benchmark_type_id) REFERENCES public.benchmark_type(id)\n+);\n+COMMENT ON TABLE public.unit IS 'The actual units for a reported benchmark.';\n+COMMENT ON COLUMN public.unit.unit_name\n+  IS 'For example: ms, ns, microseconds.';\n \n Review comment:\n   we should probably have guidelines on whether to use abbreviations or not.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.082+0000",
                    "updated": "2019-02-13T05:43:32.082+0000",
                    "started": "2019-02-13T05:43:32.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197928",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256253198\n \n \n\n ##########\n File path: dev/benchmarking/README.md\n ##########\n @@ -0,0 +1,305 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Benchmark database\n+\n+This directory contains files related to the benchmark database.\n+\n+- 'ddl/\\*.sql' contains the database definition.\n+- 'examples/' contain code to test the database and demonstrate its use.\n+- 'Dockerfile' and 'docker-compose.yml' are for developing benchmarks\n+  against a teting database.\n+\n+## Setup\n+\n+To create a 'machine.json' file that will uniquely identify a computer for\n+benchmark submission, run the provided shell script and fill in the prompts\n+to identify the GPU:\n+\n+```shell\n+./make_machine_json.sh\n+```\n+\n+Submit the machine details via http using the command\n+\n+```shell\n+./graphql_submit.sh machine machine.json localhost:5000/graphql\n+```\n+\n+or submit after starting up the psql client from this directory, using\n+\n+```\n+\\set content `cat machine.json`\n+SELECT ingest_machine_view(:'content'::jsonb);\n+```\n+\n+## Local testing\n+\n+For local testing, create a file in this directory named '.env' for\n+`docker-compose`, with username and password:\n+\n+```\n+PG_USER=<username>  # Database name defaults to username\n+PG_PASS=<user password>\n+```\n+\n+The Postgres Alpine image runs added '\\*.sql' and '\\*.sh' scripts placed in\n+'/docker-entrypoint-initdb.d/' during its startup script, so the database\n+will be set up once the container is running.\n+\n+\n+### Postgres client\n+\n+The `psql` shell client is bundled with the PostgreSQL core distribution\n+available from the [Postgres download page][postgres-downloads].\n+Using the 'username' defined in the `.env` file, the command to connect\n+to the container is:\n+```shell\n+psql -h localhost -p 5432 -U <username>\n+```\n+There is an example script in [examples/example.sql](examples/example.sql) that\n+runs some queries against the database. To run it in the psql client, type\n+the following in the psql command-line interface:\n+\n+```\n+\\i examples/example.sql\n+```\n+\n+#### Bulk ingestion using CSV\n+\n+An example CSV file for bulk ingestion is in\n+[examples/benchmark_result_example.csv](examples/benchmark_result_example.csv).\n+The columns are listed in the same order as they are defined, to avoid having\n+to explicitly name every colum in ingestion. The \"id\" column is left empty\n+and will be automatically assigned on insert.\n+\n+To ingest the example CSV file from the command line,\n+use the command below, substituting the 'PG_USER' username in the\n+'.env' file for '&lt;username&gt;'.\n+\n+```shell\n+CSV='examples/benchmark_result_example.csv' && \\\n+psql -U <username> -h localhost -p 5432 \\\n+ -c \"\\copy benchmark_result_view FROM '${CSV}' WITH (FORMAT csv, HEADER);\"\n+```\n+\n+#### Bulk ingestion using JSON\n+\n+To ingest the example JSON file using the psql client, use the command below.\n+\n+```\n+\\set content `cat examples/benchmark_example.json`\n+SELECT ingest_benchmark_view(:'content'::jsonb);\n+```\n+\n+### HTTP client\n+\n+The 'graphile/postgraphile' container provides an HTTP interface\n+to the database via two url routes:\n+\n+- A GraphiQL page ([localhost:5000/graphiql][graphiql])\n+  to aid visual exploration of the data model.\n+  (The `--watch` flag on the command line. Not recommended for production.)\n+- An endpoint that receives POST requests only (localhost:5000/graphql).\n+\n+#### Ingestion\n+\n+The script [graphql_submit.sh](./graphql_submit.sh) simplifies submission\n+to the database via curl. Examples:\n+\n+```shell\n+./graphql_submit.sh benchmarks examples/benchmark_example.json \n+./graphql_submit.sh results examples/benchmark_result_example.json\n+```\n+\n+#### Querying\n+\n+The output of the query is a JSON object that is hard to read on the command line.\n+Here is an example query in the shell:\n+```shell\n+curl -X POST \\\n+  -H \"Content-Type: application/json\"  \\\n+  --data '{\"query\": \"{projectDetails{ projectName }}\"}' \\\n+  localhost:5000/graphql\n+```\n+which yields\n+```\n+{\"data\":{\"projectDetails\":{\"projectName\":\"Apache Arrow\"}}}\n+```\n+\n+Here is an example query using Python:\n+```python\n+>>> import json\n+>>> import requests\n+>>>\n+>>> uri = \"http://localhost:5000/graphql\"\n+>>> query = json.load(open(\"examples/graphql_query_environment_view.json\"))\n+>>> result = requests.post(uri, json=query)\n+>>> message = \"{benchmarkLanguage} {languageVersion} {dependencies}\"\n+>>>\n+>>> for row in result.json()['data']['allEnvironmentViews']['edges']:\n+...     print(message.format(**row['node']))\n+...\n+Python 2.7 {\"six\":\"\",\"numpy\":\"1.14\",\"other_lib\":\"1.0\"}\n+Python 2.7 {\"six\":\"\",\"numpy\":\"1.15\",\"other_lib\":\"1.0\"}\n+Python 3.6 {\"boost\":\"1.42\",\"numpy\":\"1.15\"}\n+```\n+\n+## Deployment\n+\n+(work in progress).\n+\n+\n+## Quick reference\n+\n+- String variables `'have single quotes'`\n+- Arrays `'{\"have\", \"curly\", \"braces\"}'::text[]` or `'{1, 2, 3}'::integer[]`\n+- JSONb `'{\"has\":\"this\", \"format\":42}'::jsonb`\n+- When comparing nullable values use `x IS DISTINCT FROM y` rather than `x = y`\n+\n+\n+## Data model\n+\n+The primary view in the database is the\n+[`benchmark_result_view`](#benchmark_result_view),\n+which joins the actual benchmark result data with its context:\n \n Review comment:\n   it would be helpful here (perhaps as a follow-up task) to have a visual of the data-model (I don't know if our current doc-build supports it but one way would be to use [graphviz](https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html) to draw an [ER diagram](http://graphviz.996277.n3.nabble.com/Drawing-Database-ER-Diagrams-td1718.html) )\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.101+0000",
                    "updated": "2019-02-13T05:43:32.101+0000",
                    "started": "2019-02-13T05:43:32.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197929",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256252191\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n+  , FOREIGN KEY (gpu_id) REFERENCES public.gpu\n+  , FOREIGN KEY (os_id) REFERENCES public.os\n+);\n+COMMENT ON TABLE public.machine\n+  IS 'Unique identifiers for a machine.';\n+COMMENT ON COLUMN public.machine.machine_name\n+  IS 'A unique machine name of your choice.';\n+COMMENT ON COLUMN public.machine.memory_bytes\n+  IS 'The output of `sysctl -n hw.memsize`.';\n+COMMENT ON COLUMN public.machine.cpu_actual_frequency_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency`.';\n+\n+-- UNIT\n+CREATE TABLE IF NOT EXISTS public.unit\n+(\n+  id SERIAL PRIMARY KEY\n+  , unit_name citext NOT NULL UNIQUE\n+  , benchmark_type_id integer NOT NULL\n+  , FOREIGN KEY (benchmark_type_id) REFERENCES public.benchmark_type(id)\n+);\n+COMMENT ON TABLE public.unit IS 'The actual units for a reported benchmark.';\n+COMMENT ON COLUMN public.unit.unit_name\n+  IS 'For example: ms, ns, microseconds.';\n+\n+-- ENVIRONMENT\n+CREATE TABLE IF NOT EXISTS public.environment\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version_id integer NOT NULL\n+  , language_dependencies_id integer NOT NULL\n+  , PRIMARY KEY\n+      (id, benchmark_language_id, language_version_id)\n+  , FOREIGN KEY\n+      (benchmark_language_id)\n+      REFERENCES public.benchmark_language\n+  , FOREIGN KEY\n+      (language_version_id, benchmark_language_id)\n+      REFERENCES public.language_version(id, benchmark_language_id)\n+  , FOREIGN KEY\n+      (language_dependencies_id, benchmark_language_id)\n+      REFERENCES public.language_dependencies(id, benchmark_language_id)\n+);\n+COMMENT ON TABLE public.environment\n+  IS 'Identifies a build environment for a specific suite of benchmarks.';\n+\n+-- BENCHMARK\n+CREATE TABLE IF NOT EXISTS public.benchmark\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , benchmark_name citext NOT NULL\n+  , parameter_names text[]\n+  , lessisbetter boolean NOT NULL\n+  , benchmark_description text NOT NULL\n+  , benchmark_version citext NOT NULL\n+  , unit_id integer NOT NULL\n+  , PRIMARY KEY (id, benchmark_language_id)\n \n Review comment:\n   why the compound key, when there is already a synthetic key?  \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.178+0000",
                    "updated": "2019-02-13T05:43:32.178+0000",
                    "started": "2019-02-13T05:43:32.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197930",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/197931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256253466\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n+  , FOREIGN KEY (gpu_id) REFERENCES public.gpu\n+  , FOREIGN KEY (os_id) REFERENCES public.os\n+);\n+COMMENT ON TABLE public.machine\n+  IS 'Unique identifiers for a machine.';\n+COMMENT ON COLUMN public.machine.machine_name\n+  IS 'A unique machine name of your choice.';\n+COMMENT ON COLUMN public.machine.memory_bytes\n+  IS 'The output of `sysctl -n hw.memsize`.';\n+COMMENT ON COLUMN public.machine.cpu_actual_frequency_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency`.';\n+\n+-- UNIT\n+CREATE TABLE IF NOT EXISTS public.unit\n+(\n+  id SERIAL PRIMARY KEY\n+  , unit_name citext NOT NULL UNIQUE\n+  , benchmark_type_id integer NOT NULL\n+  , FOREIGN KEY (benchmark_type_id) REFERENCES public.benchmark_type(id)\n+);\n+COMMENT ON TABLE public.unit IS 'The actual units for a reported benchmark.';\n+COMMENT ON COLUMN public.unit.unit_name\n+  IS 'For example: ms, ns, microseconds.';\n+\n+-- ENVIRONMENT\n+CREATE TABLE IF NOT EXISTS public.environment\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version_id integer NOT NULL\n+  , language_dependencies_id integer NOT NULL\n+  , PRIMARY KEY\n+      (id, benchmark_language_id, language_version_id)\n+  , FOREIGN KEY\n+      (benchmark_language_id)\n+      REFERENCES public.benchmark_language\n+  , FOREIGN KEY\n+      (language_version_id, benchmark_language_id)\n+      REFERENCES public.language_version(id, benchmark_language_id)\n+  , FOREIGN KEY\n+      (language_dependencies_id, benchmark_language_id)\n+      REFERENCES public.language_dependencies(id, benchmark_language_id)\n+);\n+COMMENT ON TABLE public.environment\n+  IS 'Identifies a build environment for a specific suite of benchmarks.';\n+\n+-- BENCHMARK\n+CREATE TABLE IF NOT EXISTS public.benchmark\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , benchmark_name citext NOT NULL\n+  , parameter_names text[]\n+  , lessisbetter boolean NOT NULL\n+  , benchmark_description text NOT NULL\n+  , benchmark_version citext NOT NULL\n+  , unit_id integer NOT NULL\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+  , FOREIGN KEY (unit_id) REFERENCES public.unit\n+);\n+COMMENT ON TABLE public.benchmark\n+  IS 'Identifies an individual benchmark.';\n+COMMENT ON COLUMN public.benchmark.parameter_names\n+  IS 'A list of strings identifying the parameter names in the benchmark.';\n+COMMENT ON COLUMN public.benchmark.lessisbetter\n+  IS 'True if a smaller benchmark value is better.';\n+COMMENT ON COLUMN public.benchmark.benchmark_version\n+  IS 'Can be any string. In Airspeed Velocity, the version is '\n+     'by default the hash of the entire code string for the benchmark.';\n+\n+-- BENCHMARK_RESULT\n+CREATE TABLE IF NOT EXISTS public.benchmark_result\n \n Review comment:\n   bikeshedding: what do you think of \"run\" or \"execution\" instead of name for result\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T05:43:32.218+0000",
                    "updated": "2019-02-13T05:43:32.218+0000",
                    "started": "2019-02-13T05:43:32.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197931",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/198102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tanyaschlusser commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256406134\n \n \n\n ##########\n File path: dev/benchmarking/README.md\n ##########\n @@ -0,0 +1,305 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Benchmark database\n+\n+This directory contains files related to the benchmark database.\n+\n+- 'ddl/\\*.sql' contains the database definition.\n+- 'examples/' contain code to test the database and demonstrate its use.\n+- 'Dockerfile' and 'docker-compose.yml' are for developing benchmarks\n+  against a teting database.\n+\n+## Setup\n+\n+To create a 'machine.json' file that will uniquely identify a computer for\n+benchmark submission, run the provided shell script and fill in the prompts\n+to identify the GPU:\n+\n+```shell\n \n Review comment:\n   Thank you, yes! Added a note in the script + Readme.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T13:59:46.141+0000",
                    "updated": "2019-02-13T13:59:46.141+0000",
                    "started": "2019-02-13T13:59:46.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198102",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/198103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tanyaschlusser commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256406304\n \n \n\n ##########\n File path: dev/benchmarking/make_machine_json.sh\n ##########\n @@ -0,0 +1,54 @@\n+#!/usr/bin/env bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n \n Review comment:\n   Yes, thank you. Added.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T14:00:12.101+0000",
                    "updated": "2019-02-13T14:00:12.101+0000",
                    "started": "2019-02-13T14:00:12.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198103",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/198104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tanyaschlusser commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256408660\n \n \n\n ##########\n File path: dev/benchmarking/ddl/2_constraints.sql\n ##########\n @@ -0,0 +1,153 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+-- BENCHMARK\n \n Review comment:\n   +1. Happy to do this unless other people feel strongly. It's actually my preference too; it slowed me down to switch between files while double-checking table specs. Will wait a day or two then just do it barring strong counter-opinions.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T14:06:02.665+0000",
                    "updated": "2019-02-13T14:06:02.665+0000",
                    "started": "2019-02-13T14:06:02.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198104",
                    "issueId": "13210813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/worklog/198135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tanyaschlusser commented on pull request #3586: ARROW-4313: Define general benchmark database schema\nURL: https://github.com/apache/arrow/pull/3586#discussion_r256438216\n \n \n\n ##########\n File path: dev/benchmarking/ddl/1_tables.sql\n ##########\n @@ -0,0 +1,291 @@\n+/*\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+*/\n+\n+CREATE EXTENSION IF NOT EXISTS \"citext\";  -- type for case-insensitive text\n+\n+-- CPU\n+CREATE TABLE IF NOT EXISTS public.cpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , cpu_model_name citext NOT NULL UNIQUE\n+  , cpu_core_count integer NOT NULL\n+  , cpu_thread_count integer NOT NULL\n+  , cpu_frequency_max_Hz bigint NOT NULL\n+  , cpu_frequency_min_Hz bigint NOT NULL\n+  , cpu_L1d_cache_bytes integer NOT NULL\n+  , cpu_L1i_cache_bytes integer NOT NULL\n+  , cpu_L2_cache_bytes integer NOT NULL\n+  , cpu_L3_cache_bytes integer NOT NULL\n+  , cpu_RAM_bytes integer NOT NULL\n+);\n+COMMENT ON TABLE public.cpu\n+  IS 'CPU model and its specifications.';\n+COMMENT ON COLUMN public.cpu.cpu_model_name\n+  IS 'The output of `sysctl -n machdep.cpu.brand_stringp`.';\n+COMMENT ON COLUMN public.cpu.cpu_core_count\n+  IS 'The output of `sysctl -n hw.physicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_thread_count\n+  IS 'The output of `sysctl -n hw.logicalcpu`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_max_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_max`.';\n+COMMENT ON COLUMN public.cpu.cpu_frequency_min_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency_min`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1d_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1dcachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L1i_cache_bytes\n+  IS 'The output of `sysctl -n hw.l1icachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L2_cache_bytes\n+  IS 'The output of `sysctl -n hw.l2cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_L3_cache_bytes\n+  IS 'The output of `sysctl -n hw.l3cachesize`.';\n+COMMENT ON COLUMN public.cpu.cpu_RAM_bytes\n+  IS 'The output of `sysctl -n machdep.cpu.cache.size`.';\n+\n+-- GPU\n+CREATE TABLE IF NOT EXISTS public.gpu\n+(\n+  id SERIAL PRIMARY KEY\n+  , gpu_model_name citext UNIQUE NOT NULL DEFAULT ''\n+  , gpu_core_count integer\n+  , gpu_RAM_bytes bigint\n+);\n+COMMENT ON TABLE public.gpu IS 'GPU specifications.';\n+\n+-- OS\n+CREATE TABLE IF NOT EXISTS public.os\n+(\n+  id SERIAL PRIMARY KEY\n+  , os_name citext NOT NULL\n+  , architecture_name citext NOT NULL\n+  , kernel_name citext NOT NULL DEFAULT ''\n+);\n+-- @name os. forces retention of an `s` in the Graphile GraphQL api.\n+COMMENT ON TABLE public.os\n+  IS E'@name os.\\nOperating system name and kernel (version).';\n+COMMENT ON COLUMN public.os.os_name\n+  IS 'Operating system name. For example, OSX, Ubuntu, Windows`.';\n+COMMENT ON COLUMN public.os.architecture_name\n+  IS 'Operating system architecture; the output of `uname -m`.';\n+COMMENT ON COLUMN public.os.kernel_name\n+  IS 'Operating system kernel, or NULL. '\n+     'On Linux/OSX, the output of `uname -r`. '\n+     'On Windows, the output of `ver`.';\n+\n+-- PROJECT\n+CREATE TABLE IF NOT EXISTS public.project\n+(\n+  id SERIAL PRIMARY KEY\n+  , project_name citext NOT NULL\n+  , project_url text NOT NULL\n+  , repo_url text NOT NULL\n+  , last_changed timestamp (0) without time zone NOT NULL DEFAULT now()\n+);\n+COMMENT ON TABLE public.project\n+  IS 'Project name and relevant URLs.';\n+COMMENT ON COLUMN public.project.project_url\n+  IS 'Homepage URL.';\n+COMMENT ON COLUMN public.project.repo_url\n+  IS 'Git repo URL to link stored commit hashes to code in a webpage.';\n+COMMENT ON COLUMN public.project.last_changed\n+  IS 'New project details are added with a new timestamp. '\n+     'The project details with the newest timestamp will be used.';\n+\n+-- BENCHMARK_LANGUAGE\n+CREATE TABLE IF NOT EXISTS public.benchmark_language\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_language citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_language\n+  IS 'The language the benchmark was written in (and presumably for).';\n+COMMENT ON COLUMN public.benchmark_language.benchmark_language\n+  IS 'The benchmark language. For example: Python';\n+\n+-- LANGUAGE_DEPENDENCIES\n+CREATE TABLE IF NOT EXISTS public.language_dependencies\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , dependencies jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_dependencies\n+  IS E'@name language_dependencies.\\n'\n+      'A JSON string mapping dependencies to their versions for each language.';\n+COMMENT ON COLUMN public.language_dependencies.dependencies\n+  IS 'For example: ''{\"boost\": \"1.69\", \"conda\": \"\", \"numpy\": \"1.15\"}''.';\n+\n+-- LANGUAGE_VERSION\n+CREATE TABLE IF NOT EXISTS public.language_version\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version citext NOT NULL DEFAULT ''\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+);\n+COMMENT ON TABLE public.language_version\n+  IS 'The benchmark language version, e.g. ''2.7'' for Python 2.7';\n+COMMENT ON COLUMN public.language_version.language_version\n+  IS 'The version number used in the benchmark environment (e.g. ''2.7'').';\n+\n+-- BENCHMARK_TYPE\n+CREATE TABLE IF NOT EXISTS public.benchmark_type\n+(\n+  id SERIAL PRIMARY KEY\n+  , benchmark_type citext NOT NULL UNIQUE\n+);\n+COMMENT ON TABLE public.benchmark_type\n+  IS 'The type of benchmark. For example \"time\", \"mem\", \"peakmem\", \"track\"';\n+COMMENT ON COLUMN public.benchmark_type.benchmark_type\n+  IS 'The type of units, so \"time\" for sec/ns/ms or \"mem\" for kB, MB, GB.';\n+\n+-- MACHINE\n+CREATE TABLE IF NOT EXISTS public.machine\n+(\n+  id SERIAL PRIMARY KEY\n+  , machine_name citext NOT NULL UNIQUE\n+  , memory_bytes bigint NOT NULL\n+  , cpu_actual_frequency_Hz bigint NOT NULL\n+  , cpu_id integer NOT NULL\n+  , gpu_id integer NOT NULL\n+  , os_id integer NOT NULL\n+  , FOREIGN KEY (cpu_id) REFERENCES public.cpu\n+  , FOREIGN KEY (gpu_id) REFERENCES public.gpu\n+  , FOREIGN KEY (os_id) REFERENCES public.os\n+);\n+COMMENT ON TABLE public.machine\n+  IS 'Unique identifiers for a machine.';\n+COMMENT ON COLUMN public.machine.machine_name\n+  IS 'A unique machine name of your choice.';\n+COMMENT ON COLUMN public.machine.memory_bytes\n+  IS 'The output of `sysctl -n hw.memsize`.';\n+COMMENT ON COLUMN public.machine.cpu_actual_frequency_Hz\n+  IS 'The output of `sysctl -n hw.cpufrequency`.';\n+\n+-- UNIT\n+CREATE TABLE IF NOT EXISTS public.unit\n+(\n+  id SERIAL PRIMARY KEY\n+  , unit_name citext NOT NULL UNIQUE\n+  , benchmark_type_id integer NOT NULL\n+  , FOREIGN KEY (benchmark_type_id) REFERENCES public.benchmark_type(id)\n+);\n+COMMENT ON TABLE public.unit IS 'The actual units for a reported benchmark.';\n+COMMENT ON COLUMN public.unit.unit_name\n+  IS 'For example: ms, ns, microseconds.';\n+\n+-- ENVIRONMENT\n+CREATE TABLE IF NOT EXISTS public.environment\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , language_version_id integer NOT NULL\n+  , language_dependencies_id integer NOT NULL\n+  , PRIMARY KEY\n+      (id, benchmark_language_id, language_version_id)\n+  , FOREIGN KEY\n+      (benchmark_language_id)\n+      REFERENCES public.benchmark_language\n+  , FOREIGN KEY\n+      (language_version_id, benchmark_language_id)\n+      REFERENCES public.language_version(id, benchmark_language_id)\n+  , FOREIGN KEY\n+      (language_dependencies_id, benchmark_language_id)\n+      REFERENCES public.language_dependencies(id, benchmark_language_id)\n+);\n+COMMENT ON TABLE public.environment\n+  IS 'Identifies a build environment for a specific suite of benchmarks.';\n+\n+-- BENCHMARK\n+CREATE TABLE IF NOT EXISTS public.benchmark\n+(\n+  id SERIAL\n+  , benchmark_language_id integer NOT NULL\n+  , benchmark_name citext NOT NULL\n+  , parameter_names text[]\n+  , lessisbetter boolean NOT NULL\n+  , benchmark_description text NOT NULL\n+  , benchmark_version citext NOT NULL\n+  , unit_id integer NOT NULL\n+  , PRIMARY KEY (id, benchmark_language_id)\n+  , FOREIGN KEY (benchmark_language_id) REFERENCES public.benchmark_language\n+  , FOREIGN KEY (unit_id) REFERENCES public.unit\n+);\n+COMMENT ON TABLE public.benchmark\n+  IS 'Identifies an individual benchmark.';\n+COMMENT ON COLUMN public.benchmark.parameter_names\n+  IS 'A list of strings identifying the parameter names in the benchmark.';\n+COMMENT ON COLUMN public.benchmark.lessisbetter\n+  IS 'True if a smaller benchmark value is better.';\n+COMMENT ON COLUMN public.benchmark.benchmark_version\n+  IS 'Can be any string. In Airspeed Velocity, the version is '\n+     'by default the hash of the entire code string for the benchmark.';\n+\n+-- BENCHMARK_RESULT\n+CREATE TABLE IF NOT EXISTS public.benchmark_result\n+(\n+  id BIGSERIAL PRIMARY KEY\n+  , parameter_values jsonb NOT NULL DEFAULT '{}'::jsonb\n+  , value numeric NOT NULL\n+  , git_commit_timestamp timestamp (0) with time zone NOT NULL\n \n Review comment:\n   Added!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T15:11:26.308+0000",
                    "updated": "2019-02-13T15:11:26.308+0000",
                    "started": "2019-02-13T15:11:26.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198135",
                    "issueId": "13210813"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 71400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@fc8ec3a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8eb719c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34338c8e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@67077c05[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b60a04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6938ee26[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41c75873[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1d7ce31a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@282f2c9b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@648ae66[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d377a1c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7a93293[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 71400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 27 14:18:19 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-27T14:18:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4313/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2019-01-21T17:14:15.000+0000",
        "updated": "2019-02-28T13:38:28.000+0000",
        "timeoriginalestimate": null,
        "description": "Some possible attributes that the benchmark database should track, to permit heterogeneity of hardware and programming languages\r\n\r\n* Timestamp of benchmark run\r\n* Git commit hash of codebase\r\n* Machine unique name (sort of the \"user id\")\r\n* CPU identification for machine, and clock frequency (in case of overclocking)\r\n* CPU cache sizes (L1/L2/L3)\r\n* Whether or not CPU throttling is enabled (if it can be easily determined)\r\n* RAM size\r\n* GPU identification (if any)\r\n* Benchmark unique name\r\n* Programming language(s) associated with benchmark (e.g. a benchmark\r\nmay involve both C++ and Python)\r\n* Benchmark time, plus mean and standard deviation if available, else NULL\r\n\r\nsee discussion on mailing list https://lists.apache.org/thread.html/278e573445c83bbd8ee66474b9356c5291a16f6b6eca11dbbe4b473a@%3Cdev.arrow.apache.org%3E",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "19h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 71400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/12957978",
                "id": "12957978",
                "filename": "benchmark-data-model.erdplus",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                    "name": "tanya",
                    "key": "tanya",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                    },
                    "displayName": "Tanya Schlusser",
                    "active": true,
                    "timeZone": "America/Chicago"
                },
                "created": "2019-02-07T22:41:45.435+0000",
                "size": 15189,
                "mimeType": "application/octet-stream",
                "content": "https://issues.apache.org/jira/secure/attachment/12957978/benchmark-data-model.erdplus"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/12957979",
                "id": "12957979",
                "filename": "benchmark-data-model.png",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                    "name": "tanya",
                    "key": "tanya",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                    },
                    "displayName": "Tanya Schlusser",
                    "active": true,
                    "timeZone": "America/Chicago"
                },
                "created": "2019-02-07T22:41:58.234+0000",
                "size": 149111,
                "mimeType": "image/png",
                "content": "https://issues.apache.org/jira/secure/attachment/12957979/benchmark-data-model.png"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Define general benchmark database schema",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16748117",
                    "id": "16748117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Note that some benchmarks may not give you a time (for example [memory benchmarks|https://asv.readthedocs.io/en/stable/writing_benchmarks.html#memory] with ASV). For some other benchmarks, the preferred unit of reporting may be something else (for example MB/s for a memory copy benchmark).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-21T17:32:14.181+0000",
                    "updated": "2019-01-21T17:33:08.569+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16748119",
                    "id": "16748119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Very good point. So we should generalize to:\r\n\r\n* Benchmark result\r\n* Benchmark unit\r\n\r\nOr something else?\r\n\r\nWe should make an effort to standardize the permitted values of \"Unit\". ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-21T17:34:34.700+0000",
                    "updated": "2019-01-21T17:34:34.700+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16748125",
                    "id": "16748125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Yes, result + unit sounds good. Plus a boolean flag that indicates \"higher is better\" or something (to be able to distinguish regressions from improvements). In this manner, the unit could be pretty much arbitrary (as long as a given benchmark always reports the same unit, instead of e.g. switching between \"MB\" and \"GB\").",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-21T17:38:20.882+0000",
                    "updated": "2019-01-21T17:39:04.756+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16748260",
                    "id": "16748260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Pinging [~aregm]\u00a0who started the email discussion, and\u00a0volunteering to help in what ways I can \ud83d\udc4b. I said I'd mock\u00a0a backend and will edit this comment with a hyperlink\u00a0when a mock is up.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-21T23:01:35.897+0000",
                    "updated": "2019-01-21T23:01:35.897+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16748409",
                    "id": "16748409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "\u00a0I think it will be easy if we keep it a little bit simple in the beginning, not to redo a lot in the future.\r\n\r\nSo replies to original comments:\r\n * Timestamp of benchmark run - *We should be careful, as this is helpful, but you cannot rely on this timestamp as, there is no guarantee that systems are synced in time. So for purely informational purposes, it is fine.*\u00a0\r\n * Git commit hash of codebase\u00a0\r\n * Machine unique name (sort of the \"user id\") - *Machine ID and machine information should go to a\u00a0different database, as they can change, come and go, you do not want to keep that info tied to benchmarks*\r\n * CPU identification for machine, and clock frequency (in case of overclocking)\r\n * CPU cache sizes (L1/L2/L3)\r\n * Whether or not CPU throttling is enabled (if it can be easily determined) - *for benchmarking you should always set it to max, not fixing the governor will add additional unpredictable flakiness to the benchmarks. Also you need to lock machine\u00a0when the benchmarks are running to prevent\u00a0noise.*\u00a0\r\n * RAM size\r\n * GPU identification (if any)\r\n * Benchmark unique name -\u00a0*For the start I would say yes, but it can quickly get out of control, as you have e.g. TestFeatureA, then it gets flavors, like input size, and you start naming it TestFeatureA5GB, then*\u00a0*TestFeatureA5GB-CPU,*\u00a0*TestFeatureA5GB-GPU-Nvidia,*\u00a0*TestFeatureA5GB-GPU-Radeon, and it gets out of control. The best know method to control is hierarchical name or unique id with benchmark\u00a0table, which is kind of overkill for now.***\r\n * Programming language(s) associated with benchmark (e.g. a benchmark\r\nmay involve both C++ and Python)\u00a0 -\u00a0*Why would you need this? Maybe put into hierarchical name?*\r\n * Benchmark time, plus mean and standard deviation if available, else NULL \u00a0**\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-22T06:02:20.097+0000",
                    "updated": "2019-01-22T06:02:20.097+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16750812",
                    "id": "16750812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "[~tanya] I have created the task 4354 - can you please take a look?\r\n\r\nMeanwhile I have created the first version of teh spec to work on - [https://cwiki.apache.org/confluence/display/ARROW/Performance+Dashboard]\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-24T07:27:37.834+0000",
                    "updated": "2019-01-24T07:27:37.834+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16753301",
                    "id": "16753301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "I've attached a diagram [benchmark-data-model.png|https://issues.apache.org/jira/secure/attachment/12956481/benchmark-data-model.png] and a corresponding {{.erdplus}} file [benchmark-data-model.erdplus|https://issues.apache.org/jira/secure/attachment/12956482/benchmark-data-model.erdplus] (JSON--viewable and editable by getting a free account on [erdplus.com|https://erdplus.com/#/]) with a draft data model for everyone's consideration.  I tried to incorporate elements of both the codespeed and the ASV projects.\r\n\r\nHappy to modify per feedback\u2014or leave this to a more experienced person if I'm becoming the slow link.\r\nOf course there will be a view with all of the relevant information joined.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-27T06:08:02.500+0000",
                    "updated": "2019-01-27T06:08:02.500+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16754973",
                    "id": "16754973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Some thoughts:\r\n\r\n* in `cpu_dim`, perhaps add a `cpu_thread_count` (the CPU's number of hardware threads, which can be a multiple of the number of distinct cores)\r\n* either in `machine_dim` or `os_dim`, store the bitness? (usually 64-bit I suppose, though perhaps some people will want to benchmark on 32-bit). Or, more generally perhaps, the architecture name (such as \"x86-64\" or \"ARMv8\" or \"AArch64\").\r\n* not sure why tables are suffixed with `_dim`?\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-29T12:49:23.821+0000",
                    "updated": "2019-01-29T12:49:23.821+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755291",
                    "id": "16755291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "* in `cpu_dim`, perhaps add a `cpu_thread_count` (the CPU's number of hardware threads, which can be a multiple of the number of distinct cores)\r\n ** there is a 'core_count', for IA it is better to\u00a0have\u00a0HT flag, for others threads=cores\r\n * either in `machine_dim` or `os_dim`, store the bitness? (usually 64-bit I suppose, though perhaps some people will want to benchmark on 32-bit). Or, more generally perhaps, the architecture name (such as \"x86-64\" or \"ARMv8\" or \"AArch64\").\r\n ** short uname\u00a0-i should be\u00a0enough.\u00a0\r\n * not sure why tables are suffixed with `_dim`?\r\n ** I guess those are conditional names and not necessarily the resulting.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-29T18:58:10.105+0000",
                    "updated": "2019-01-29T18:58:10.105+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755350",
                    "id": "16755350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> there is a 'core_count', for IA it is better to have HT flag, for others threads=cores\r\n\r\nNot really, for example IBM POWER CPUs can have 2, 4 or 8 threads per core.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-29T20:13:05.068+0000",
                    "updated": "2019-01-29T20:13:05.068+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755360",
                    "id": "16755360",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Ok, if we want to add them, then it should be named 'smt_thread_count' or 'threads_per_core'. And\u00a0there is a case for multiple CPUs also. Do you anticipate using Arrow on mainframes? I would say that most likely FPGA usage will preceed\u00a0Power usage.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-29T20:23:16.401+0000",
                    "updated": "2019-01-29T20:23:42.596+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755383",
                    "id": "16755383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Multiple CPUs would go under the core_count IMO.\r\n\r\nAs for mainframes, no, but AFAIK there are regular Linux-based (or AIX-based) POWER servers.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-29T21:11:33.435+0000",
                    "updated": "2019-01-29T21:11:33.435+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755433",
                    "id": "16755433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I recall an e-mail thread some time back about IBM POWER support -- some of us (myself, [~kou]) were given access to Power Z -based CI infrastructure for testing but we have yet to try it. I doubt that the project works on big endian right now (Arrow is current little-endian, even running on big-endian hardware)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-29T22:22:17.785+0000",
                    "updated": "2019-01-29T22:22:17.785+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755504",
                    "id": "16755504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Thank you very much for everyone's detailed feedback. I absolutely need guidance with the Machine / CPU / GPU specs. I have updated the [^benchmark-data-model.png] and the [^benchmark-data-model.erdplus], and added all of the recommended columns.\r\n\r\n\u00a0\r\n\r\n*Summary of changes:*\r\n * All the dimension tables have been renamed to exclude the\u00a0`_dim`. (It was to distinguish dimension vs. fact tables.)\r\n\r\n * `cpu`\r\n ** Added a `cpu_thread_count`.\u00a0\r\n ** Changed `cpu.speed_Hz` to two columns: `frequency_max_Hz` and `frequency_min_Hz` and also added a column `machine.overclock_frequency_Hz` to the `machine` table to allow for overclocking like Wes mentioned in the beginning.\r\n\r\n * `os`\r\n ** Added both `os.architecture_name` and `os.architecture_bits`, the latter forced to be in \\{32, 64}, and pulled from the architecture name (maybe it will become just a computed column in the joined view...). I think it's a good idea.\r\n\r\n * `project`\r\n ** Added a `project.project_name` (oversight before)\r\n\r\n * `benchmark_language`\r\n ** Split out `language` to `language_name` and `language_version` because maybe people will want to compare between them (e.g. Python 2.7, 3.5+)\r\n\r\n * `environment`\r\n ** Removed foreign key for `machine_id` \u2014\u00a0that should be in the benchmark report separately. Many machines will have the same environment.\r\n\r\n * `benchmark`\r\n ** Added foreign key for `benchmark_language_id`\u2014a benchmark with the same name may exist for different languages.\r\n ** Added foreign key for `project_id`\u2014moved it from table `benchmark_result`\r\n\r\n * `benchmark_result`\r\n ** Added foreign key for `machine_id` (was removed from `environment`)\r\n ** Deleted foreign key for `project_id`, placing it in `benchmark` (as stated above)\r\n\r\n*Questions*\r\n * `cpu` and `gpu` dimension\r\n ** Is it a mistake to make `cpu.cpu_model_name` unique? I mean, are the LX cache levels, core counts, or any other attribute ever different for the same CPU model string?\r\n ** The same for GPU.\r\n ** I have commented the columns to say that\u00a0 `cpu_thread_count` corresponds to `sysctl -n hw.logicalcpu` and `cpu_core_count` corresponds to `sysctl -n hw.physicalcpu`; corrections gratefully accepted.\r\n ** Would it be less confusing to make the column names the exact same strings as correspond to their value from `sysctl`, e.g. change `cpu.cpu_model_name` to `cpu.cpu_brand_string` to correspond to the output of `sysctl -n machdep.cpu.brand_string`?\r\n ** On that note is CPU RAM the same thing as `sysctl -n machdep.cpu.cache.size`?\r\n * `environment`\r\n ** I'm worried I'm doing something inelegant with the dependency list. It will hold everything \u2013 Conda / virtualenv; versions of Numpy; all permutations of the various dependencies in what in ASV is the dependency matrix.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-30T00:23:01.216+0000",
                    "updated": "2019-01-30T00:23:01.216+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755506",
                    "id": "16755506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "[~tanya] why we need 'overclock_freq_HZ'? What is the practical usage model for this field?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-30T00:24:27.427+0000",
                    "updated": "2019-01-30T00:24:27.427+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755509",
                    "id": "16755509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "[~aregm] I do not know. I am depending on the other people commenting here to make sure the hardware\u00a0tables\u00a0make sense because honestly I don't ever pay attention to\u00a0hardware\u00a0because my use cases never stress my system.\u00a0At one point Wes suggested it. I am glad there is a debate.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-30T00:28:21.400+0000",
                    "updated": "2019-01-30T00:28:21.400+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755513",
                    "id": "16755513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Got it. I think that mostly those numbers are never used because you run benchmarks on a fixed freq always to get consistent results in time. So they can be easily determined from the model name or cpuid, just for informational purposes, but will never be used in a serial benchmarking. In a serial benchmarking everything should be fixed, nailed and unchanged, except the variable you are measuring, and it is the arrow code measured through the benchmark code.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-30T00:33:04.180+0000",
                    "updated": "2019-01-30T00:33:04.180+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755570",
                    "id": "16755570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "I think part of this was to allow anybody to contribute benchmarks from their own machine. And while dedicated benchmarking machines like the ones you will set up will have all parameters set for\u00a0optimal benchmarking, benchmarks run on other machines may give different results. Collecting details about the machine that might explain those differences (in case someone cares to explore the dataset) is part of the goal of the data model.\r\n\r\nOne concern, of course, is that people get wildly different results than a benchmark says, and may say \"Oh boo\u2013the representative person from the company made fake results that I can't replicate on my machine\" ... and with details about a system, performance differences can maybe be traced back to differences in setup, because they were recorded.\r\n\r\nNot all fields need to be filled out all the time. My priorities are:\r\n # Identifying which\u00a0fields flat-out wrong\r\n # Differentiating between necessary columns and extraneous ones that can be left null\r\n\r\n\r\nTo me, it is not a big deal to have an extra column dangling around that almost nobody uses. No harm. (Unless it's mislabeled or otherwise wrong; that's what I'm interested in getting out of the discussion here.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-01-30T01:59:15.857+0000",
                    "updated": "2019-01-30T01:59:15.857+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755807",
                    "id": "16755807",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "For the record, IBM POWER CPUs support little-endian mode on Linux:\r\nhttps://www.ibm.com/developerworks/library/l-power-little-endian-faq-trs/index.html\r\n\r\nSo big-endian support in Arrow would probably not be a roadblock.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-30T07:54:15.815+0000",
                    "updated": "2019-01-30T07:54:15.815+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16755808",
                    "id": "16755808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "\"Is it a mistake to make `cpu.cpu_model_name` unique? I mean, are the LX cache levels, core counts, or any other attribute ever different for the same CPU model string?\"\r\n\r\nThe overclocked frequency may vary (which we could also call \"actual frequency\"), the rest should be the same.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-30T07:55:18.915+0000",
                    "updated": "2019-01-30T07:55:18.915+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16763145",
                    "id": "16763145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Thank you Antoine! I missed this last comment. \"actual frequency\" is a good name, and I used it.\r\n * I did not understand the conversations about little-and-big-endian, and did not add fields related to that to the database.\r\n * I was surprised during testing about the behavior of nulls in the database, so some things don't yet work the way I'd like (the example script fails in one place.)\r\n\r\nThank you everyone for so much feedback. I have uploaded new files for the current data model and am happy to change things according to feedback. If you don't like something, it can be fixed :)\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tanya",
                        "name": "tanya",
                        "key": "tanya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tanya&avatarId=37360",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tanya&avatarId=37360",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tanya&avatarId=37360",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tanya&avatarId=37360"
                        },
                        "displayName": "Tanya Schlusser",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-02-07T22:45:18.005+0000",
                    "updated": "2019-02-07T22:45:18.005+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16772241",
                    "id": "16772241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "[~wesmckinn] and [~pitrou] - need your input.\r\n\r\n> My understanding of [this conversation] (https://lists.apache.org/thread.html/dcc08ab10507a5139178d7f816c0f5177ff0657546a4ade3ed71ffd5@%3Cdev.arrow.apache.org%3E) was that a data model not tied to any ORM tool was the desired path to take.\r\n> \r\nI think we need to take a step back, and sync and agree with the @wesm and @pitrou on the goals for this little project: \r\n* for me the goal is to continuously track the performance for the core C++ library and help everybody who is doing performance work to catch regressions and contribute improvements. \r\n* do that in a validated form, so we can rely on the numbers.\r\n* there is no goal to provide infrastructure for contributing 3rd party numbers, as they cannot be validated in a quick manner.\r\n* there is no goal to bench other languages, as they rely on C++ library calls and you will benchmark the wrapper conversion speed\r\n* there is no goal, for now, to anticipate and satisfy all the future possible needs.\r\n\r\nThe ability of the Arrow test library (practically GTest) to provide performance numbers on a run platform is more than enough. I would not like to limit users to have a different kind of databases, performance monitors or dashboards of their need. I am duplicating this in the issue 4313 to move the discussion from code review.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aregm",
                        "name": "aregm",
                        "key": "aregm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Areg Melik-Adamyan",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-02-19T19:03:11.189+0000",
                    "updated": "2019-02-19T19:03:11.189+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16772315",
                    "id": "16772315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm involved many projects so I haven't been able to follow the discussion to see where there is disagreement or conflict. \r\n\r\nFrom my perspective I want the following in the short term\r\n\r\n* A general purpose database schema, preferably for PostgreSQL, which can be used to easily provision a new benchmark database\r\n* A script for running the C++ benchmarks and inserting the results into _any instance_ of that database. This script should capture hardware information as well as any additional information that is known about the environment (OS, thirdparty library versions -- e.g. so we can see if upgrading a dependency, like gRPC for example, causes a performance problem). The script should not be coupled to a particular instance of the database. It should work in an air-gapped environment\r\n\r\nI think until we should work as quickly as possible to have a working version of both of these to validate that we are on the right track. If we try to come up with the \"perfect database schema\" and punt the benchmark collector script until later we could be waiting a long time. \r\n\r\nIdeally the database schema can accommodate results from multiple benchmark execution frameworks other than Google benchmark for C++. So we could write an adapter script to export data from ASV (for Python) into this database.\r\n\r\n[~aregm] this does not seem to be out of line with the requirements you listed unless I am misunderstanding. I would rather not be too involved with the details right now unless the project stalls out for some reason and needs me to help push it through to completion. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-19T20:43:03.191+0000",
                    "updated": "2019-02-19T20:43:50.728+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16772959",
                    "id": "16772959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Indeed, agreed with Wes.\r\n\r\nJust to answer one comment:\r\n\r\n> there is no goal to bench other languages, as they rely on C++ library calls and you will benchmark the wrapper conversion speed\r\n\r\nIt's a bit more involved than that. For example the speed of creating an Arrow array (or an Arrow dataframe) from Python objects is important, and this requires specific optimizations inside Arrow. Technically we _could_ benchmark it using the C++ infrastructure, it's just massively easier to write the benchmarks in Python using ASV, so that's what we're doing now.\r\n\r\nThat said, yes, recording C++ benchmark results is a good first-priority goal. The thing to keep in mind is that we don't want the adopted DB schema to limit ourselves in this regard.\r\n\r\n(also, some implementations are not based on the C++ library, they are independent reimplementations of the Arrow data model, e.g. Java, C# or Rust)\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-02-20T12:13:56.056+0000",
                    "updated": "2019-02-20T12:13:56.056+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210813/comment/16779359",
                    "id": "16779359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3586\n[https://github.com/apache/arrow/pull/3586]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-02-27T14:18:19.655+0000",
                    "updated": "2019-02-27T14:18:19.655+0000"
                }
            ],
            "maxResults": 25,
            "total": 25,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0534:",
        "customfield_12314139": null
    }
}