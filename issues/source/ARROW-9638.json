{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13320768",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768",
    "key": "ARROW-9638",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [
            {
                "id": "13326136",
                "key": "ARROW-9917",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13326136",
                "fields": {
                    "summary": "[Python][Compute] Add bindings for mode kernel",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9638/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 opened a new pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T01:31:11.397+0000",
                    "updated": "2020-08-10T01:31:11.397+0000",
                    "started": "2020-08-10T01:31:11.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468363",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#issuecomment-671131363\n\n\n   https://issues.apache.org/jira/browse/ARROW-9638\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T01:41:00.197+0000",
                    "updated": "2020-08-10T01:41:00.197+0000",
                    "started": "2020-08-10T01:41:00.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468365",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#issuecomment-671162987\n\n\n   From CI failure, looks different platform/compiler handles NaN differently.\r\n   \r\n   Would like to ask for comments: **should NaN be ignored or included in mode calculation**.\r\n   Per my test, scipy ignores NaN.\r\n   \r\n   ```\r\n   In [3]: scipy.stats.mode([np.nan, np.nan, 1], nan_policy='propagate')\r\n   Out[3]: ModeResult(mode=array([1.]), count=array([1]))\r\n   \r\n   In [4]: scipy.stats.mode([np.nan, np.nan, 1], nan_policy='omit')\r\n   Out[4]: ModeResult(mode=array([1.]), count=array([1.]))\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T05:05:27.653+0000",
                    "updated": "2020-08-10T05:05:27.653+0000",
                    "started": "2020-08-10T05:05:27.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468419",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#issuecomment-671174962\n\n\n   > From CI failure, looks different platform/compiler handles NaN differently.\r\n   > \r\n   > Would like to ask for comments: **should NaN be ignored or included in mode calculation**.\r\n   > Per my test, scipy ignores NaN.\r\n   > \r\n   > ```\r\n   > In [3]: scipy.stats.mode([np.nan, np.nan, 1], nan_policy='propagate')\r\n   > Out[3]: ModeResult(mode=array([1.]), count=array([1]))\r\n   > \r\n   > In [4]: scipy.stats.mode([np.nan, np.nan, 1], nan_policy='omit')\r\n   > Out[4]: ModeResult(mode=array([1.]), count=array([1.]))\r\n   > ```\r\n   \r\n   The error is because I'm using NaN as key of a map. It's not allowed, as comparing NaN is meaningless.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T05:56:26.704+0000",
                    "updated": "2020-08-10T05:56:26.704+0000",
                    "started": "2020-08-10T05:56:26.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468429",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#issuecomment-671208057\n\n\n   >  Per my test, scipy ignores NaN.\r\n   \r\n   I don't think it is necessarily ignoring NaN (with the default nan policy), but rather because NaNs are not considered equal to each other, each of the NaN values has a count of 1 (and sorts last), and thus it is not picked as mode, unless there are only NaNs. \r\n   (not fully sure this is the logic, but guessing based on the behaviour I see)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T07:39:32.852+0000",
                    "updated": "2020-08-10T07:39:32.852+0000",
                    "started": "2020-08-10T07:39:32.852+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468443",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#issuecomment-671211654\n\n\n   > > Per my test, scipy ignores NaN.\r\n   > \r\n   > I don't think it is necessarily ignoring NaN (with the default nan policy), but rather because NaNs are not considered equal to each other, each of the NaN values has a count of 1 (and sorts last), and thus it is not picked as mode, unless there are only NaNs.\r\n   > (not fully sure this is the logic, but guessing based on the behaviour I see)\r\n   \r\n   You are right. I see NaNs are in separated bins of a hash table (std::unordered_map) with all counts 1, this is reasonable as NaN != NaN. So for list (nan, nan, nan, 100, 100), the value counts hash table are \"nan:1, nan:1, nan:1, 100:2\", mode is 100.\r\n   But in Windows build looks \"nan\" is accumulated, and the mode becomes nan.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T07:49:34.877+0000",
                    "updated": "2020-08-10T07:49:34.877+0000",
                    "started": "2020-08-10T07:49:34.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468448",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r467911033\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -147,5 +147,20 @@ Result<Datum> MinMax(const Array& array,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Calculate the modal (most common) value of a numeric array\n+///\n+/// This function returns both mode and count as a struct scalar, with type\n+/// struct<mode: T, count: int64>, where T is the input type.\n+/// If there is more than one such value, the smallest one is returned.\n+///\n+/// \\param[in] value input datum, expecting Array\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return resulting datum as a struct<mode: T, count: int64> scalar\n+///\n+/// \\since 1.0.0\n\nReview comment:\n       Rather 2.0.0.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n+/// Mode\n+///\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n\nReview comment:\n       Also test an empty array?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -44,6 +48,9 @@ void AddMeanAvx2AggKernels(ScalarAggregateFunction* func);\n void AddSumAvx512AggKernels(ScalarAggregateFunction* func);\n void AddMeanAvx512AggKernels(ScalarAggregateFunction* func);\n \n+// Aggregate kernels in separated source files\n\nReview comment:\n       I don't understand what this comment means?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/kernels/aggregate_basic_internal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace aggregate {\n+\n+namespace {\n+\n+template <typename ArrowType>\n+struct ModeState {\n+  using ThisType = ModeState<ArrowType>;\n+  using T = typename ArrowType::c_type;\n+\n+  void MergeFrom(const ThisType& state) {\n+    for (const auto& value_count : state.value_counts) {\n+      auto value = value_count.first;\n+      auto count = value_count.second;\n+      this->value_counts[value] += count;\n+    }\n+    this->has_values |= state.has_values;\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<!is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    ++this->value_counts[value];\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    if (!std::isnan(value)) {\n\nReview comment:\n       +1\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n\nReview comment:\n       For the record, we have our own hash table in `arrow/util/hashing.h`. It's definitely not as user-friendly, though...\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/kernels/aggregate_basic_internal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace aggregate {\n+\n+namespace {\n+\n+template <typename ArrowType>\n+struct ModeState {\n+  using ThisType = ModeState<ArrowType>;\n+  using T = typename ArrowType::c_type;\n+\n+  void MergeFrom(const ThisType& state) {\n+    for (const auto& value_count : state.value_counts) {\n+      auto value = value_count.first;\n+      auto count = value_count.second;\n+      this->value_counts[value] += count;\n+    }\n+    this->has_values |= state.has_values;\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<!is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    ++this->value_counts[value];\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    if (!std::isnan(value)) {\n+      ++this->value_counts[value];\n+    }\n+  }\n+\n+  std::pair<T, int64_t> Finalize() {\n+    T mode = std::numeric_limits<T>::min();\n+    int64_t count = 0;\n+\n+    for (const auto& value_count : this->value_counts) {\n+      auto this_value = value_count.first;\n+      auto this_count = value_count.second;\n+      if (this_count > count || (this_count == count && this_value < mode)) {\n+        count = this_count;\n+        mode = this_value;\n+      }\n+    }\n+    return std::make_pair(mode, count);\n+  }\n+\n+  bool has_values = false;\n+  std::unordered_map<T, int64_t> value_counts{};\n+};\n+\n+template <typename ArrowType>\n+struct ModeImpl : public ScalarAggregator {\n+  using ThisType = ModeImpl<ArrowType>;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  explicit ModeImpl(const std::shared_ptr<DataType>& out_type) : out_type(out_type) {}\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    ModeState<ArrowType> local_state;\n+    ArrayType arr(batch[0].array());\n+\n+    local_state.has_values = (arr.length() - arr.null_count()) > 0;\n+    if (arr.null_count() > 0) {\n+      BitmapReader reader(arr.null_bitmap_data(), arr.offset(), arr.length());\n+      for (int64_t i = 0; i < arr.length(); i++) {\n+        if (reader.IsSet()) {\n+          local_state.MergeOne(arr.Value(i));\n+        }\n+        reader.Next();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < arr.length(); i++) {\n+        local_state.MergeOne(arr.Value(i));\n+      }\n+    }\n+    this->state = std::move(local_state);\n+  }\n+\n+  void MergeFrom(KernelContext*, const KernelState& src) override {\n+    const auto& other = checked_cast<const ThisType&>(src);\n+    this->state.MergeFrom(other.state);\n+  }\n+\n+  void Finalize(KernelContext*, Datum* out) override {\n+    using ModeType = typename TypeTraits<ArrowType>::ScalarType;\n+    using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+    std::vector<std::shared_ptr<Scalar>> values;\n+    if (!this->state.has_values) {\n\nReview comment:\n       Can this simply be written `if (state.value_counts.empty())`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n\nReview comment:\n       Nit: \"///\" (triple-slash comments) should be reserved for Doxygen docstrings.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/kernels/aggregate_basic_internal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace aggregate {\n+\n+namespace {\n+\n+template <typename ArrowType>\n+struct ModeState {\n+  using ThisType = ModeState<ArrowType>;\n+  using T = typename ArrowType::c_type;\n+\n+  void MergeFrom(const ThisType& state) {\n+    for (const auto& value_count : state.value_counts) {\n+      auto value = value_count.first;\n+      auto count = value_count.second;\n+      this->value_counts[value] += count;\n+    }\n+    this->has_values |= state.has_values;\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<!is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    ++this->value_counts[value];\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    if (!std::isnan(value)) {\n+      ++this->value_counts[value];\n+    }\n+  }\n+\n+  std::pair<T, int64_t> Finalize() {\n+    T mode = std::numeric_limits<T>::min();\n+    int64_t count = 0;\n+\n+    for (const auto& value_count : this->value_counts) {\n+      auto this_value = value_count.first;\n+      auto this_count = value_count.second;\n+      if (this_count > count || (this_count == count && this_value < mode)) {\n+        count = this_count;\n+        mode = this_value;\n+      }\n+    }\n+    return std::make_pair(mode, count);\n+  }\n+\n+  bool has_values = false;\n+  std::unordered_map<T, int64_t> value_counts{};\n+};\n+\n+template <typename ArrowType>\n+struct ModeImpl : public ScalarAggregator {\n+  using ThisType = ModeImpl<ArrowType>;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  explicit ModeImpl(const std::shared_ptr<DataType>& out_type) : out_type(out_type) {}\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    ModeState<ArrowType> local_state;\n+    ArrayType arr(batch[0].array());\n+\n+    local_state.has_values = (arr.length() - arr.null_count()) > 0;\n\nReview comment:\n       Note that at the end, `state.has_values` should simply be `!state.value_counts.empty()`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n+/// Mode\n+///\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n\nReview comment:\n       And also test an empty array?\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.cc\n##########\n@@ -41,5 +41,9 @@ Result<Datum> MinMax(const Datum& value, const MinMaxOptions& options, ExecConte\n   return CallFunction(\"min_max\", {value}, &options, ctx);\n }\n \n+Result<Datum> Mode(const Datum& value, ExecContext* ctx) {\n+  return CallFunction(\"mode\", {value}, ctx);\n\nReview comment:\n       We have a comprehensive doc for compute functions here:\r\n   https://arrow.apache.org/docs/cpp/compute.html\r\n   \r\n   You should add your mode function to `docs/source/cpp/compute.rst`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/kernels/aggregate_basic_internal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace aggregate {\n+\n+namespace {\n+\n+template <typename ArrowType>\n+struct ModeState {\n+  using ThisType = ModeState<ArrowType>;\n+  using T = typename ArrowType::c_type;\n+\n+  void MergeFrom(const ThisType& state) {\n+    for (const auto& value_count : state.value_counts) {\n+      auto value = value_count.first;\n+      auto count = value_count.second;\n+      this->value_counts[value] += count;\n+    }\n+    this->has_values |= state.has_values;\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<!is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    ++this->value_counts[value];\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    if (!std::isnan(value)) {\n+      ++this->value_counts[value];\n+    }\n+  }\n+\n+  std::pair<T, int64_t> Finalize() {\n+    T mode = std::numeric_limits<T>::min();\n+    int64_t count = 0;\n+\n+    for (const auto& value_count : this->value_counts) {\n+      auto this_value = value_count.first;\n+      auto this_count = value_count.second;\n+      if (this_count > count || (this_count == count && this_value < mode)) {\n+        count = this_count;\n+        mode = this_value;\n+      }\n+    }\n+    return std::make_pair(mode, count);\n+  }\n+\n+  bool has_values = false;\n+  std::unordered_map<T, int64_t> value_counts{};\n+};\n+\n+template <typename ArrowType>\n+struct ModeImpl : public ScalarAggregator {\n+  using ThisType = ModeImpl<ArrowType>;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  explicit ModeImpl(const std::shared_ptr<DataType>& out_type) : out_type(out_type) {}\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    ModeState<ArrowType> local_state;\n+    ArrayType arr(batch[0].array());\n+\n+    local_state.has_values = (arr.length() - arr.null_count()) > 0;\n\nReview comment:\n       This is not correct if you have a floating point array full of NaNs.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n+/// Mode\n+///\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n\nReview comment:\n       Can you also add a test for e.g. `[NaN, NaN, null]`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T14:09:04.652+0000",
                    "updated": "2020-08-10T14:09:04.652+0000",
                    "started": "2020-08-10T14:09:04.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468600",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468289599\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -44,6 +48,9 @@ void AddMeanAvx2AggKernels(ScalarAggregateFunction* func);\n void AddSumAvx512AggKernels(ScalarAggregateFunction* func);\n void AddMeanAvx512AggKernels(ScalarAggregateFunction* func);\n \n+// Aggregate kernels in separated source files\n\nReview comment:\n       deleted\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:26:42.423+0000",
                    "updated": "2020-08-11T02:26:42.423+0000",
                    "started": "2020-08-11T02:26:42.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468976",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468290289\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/kernels/aggregate_basic_internal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace aggregate {\n+\n+namespace {\n+\n+template <typename ArrowType>\n+struct ModeState {\n+  using ThisType = ModeState<ArrowType>;\n+  using T = typename ArrowType::c_type;\n+\n+  void MergeFrom(const ThisType& state) {\n+    for (const auto& value_count : state.value_counts) {\n+      auto value = value_count.first;\n+      auto count = value_count.second;\n+      this->value_counts[value] += count;\n+    }\n+    this->has_values |= state.has_values;\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<!is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    ++this->value_counts[value];\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    if (!std::isnan(value)) {\n+      ++this->value_counts[value];\n+    }\n+  }\n+\n+  std::pair<T, int64_t> Finalize() {\n+    T mode = std::numeric_limits<T>::min();\n+    int64_t count = 0;\n+\n+    for (const auto& value_count : this->value_counts) {\n+      auto this_value = value_count.first;\n+      auto this_count = value_count.second;\n+      if (this_count > count || (this_count == count && this_value < mode)) {\n+        count = this_count;\n+        mode = this_value;\n+      }\n+    }\n+    return std::make_pair(mode, count);\n+  }\n+\n+  bool has_values = false;\n+  std::unordered_map<T, int64_t> value_counts{};\n+};\n+\n+template <typename ArrowType>\n+struct ModeImpl : public ScalarAggregator {\n+  using ThisType = ModeImpl<ArrowType>;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  explicit ModeImpl(const std::shared_ptr<DataType>& out_type) : out_type(out_type) {}\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    ModeState<ArrowType> local_state;\n+    ArrayType arr(batch[0].array());\n+\n+    local_state.has_values = (arr.length() - arr.null_count()) > 0;\n\nReview comment:\n       Updated code to check map emptiness, it's much simpler.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:29:18.149+0000",
                    "updated": "2020-08-11T02:29:18.149+0000",
                    "started": "2020-08-11T02:29:18.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468977",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468290585\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n\nReview comment:\n       Also updated other comment lines with /// in this file\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:30:18.326+0000",
                    "updated": "2020-08-11T02:30:18.326+0000",
                    "started": "2020-08-11T02:30:18.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468980",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468290687\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n+/// Mode\n+///\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:30:31.423+0000",
                    "updated": "2020-08-11T02:30:31.423+0000",
                    "started": "2020-08-11T02:30:31.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468981",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468290787\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,92 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+///\n+/// Mode\n+///\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:30:54.528+0000",
                    "updated": "2020-08-11T02:30:54.528+0000",
                    "started": "2020-08-11T02:30:54.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468982",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468290837\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.cc\n##########\n@@ -41,5 +41,9 @@ Result<Datum> MinMax(const Datum& value, const MinMaxOptions& options, ExecConte\n   return CallFunction(\"min_max\", {value}, &options, ctx);\n }\n \n+Result<Datum> Mode(const Datum& value, ExecContext* ctx) {\n+  return CallFunction(\"mode\", {value}, ctx);\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:31:07.667+0000",
                    "updated": "2020-08-11T02:31:07.667+0000",
                    "started": "2020-08-11T02:31:07.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468983",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/468985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r468291277\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/kernels/aggregate_basic_internal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace aggregate {\n+\n+namespace {\n+\n+template <typename ArrowType>\n+struct ModeState {\n+  using ThisType = ModeState<ArrowType>;\n+  using T = typename ArrowType::c_type;\n+\n+  void MergeFrom(const ThisType& state) {\n+    for (const auto& value_count : state.value_counts) {\n+      auto value = value_count.first;\n+      auto count = value_count.second;\n+      this->value_counts[value] += count;\n+    }\n+    this->has_values |= state.has_values;\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<!is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    ++this->value_counts[value];\n+  }\n+\n+  template <typename ArrowType_ = ArrowType>\n+  enable_if_t<is_floating_type<ArrowType_>::value> MergeOne(T value) {\n+    if (!std::isnan(value)) {\n+      ++this->value_counts[value];\n+    }\n+  }\n+\n+  std::pair<T, int64_t> Finalize() {\n+    T mode = std::numeric_limits<T>::min();\n+    int64_t count = 0;\n+\n+    for (const auto& value_count : this->value_counts) {\n+      auto this_value = value_count.first;\n+      auto this_count = value_count.second;\n+      if (this_count > count || (this_count == count && this_value < mode)) {\n+        count = this_count;\n+        mode = this_value;\n+      }\n+    }\n+    return std::make_pair(mode, count);\n+  }\n+\n+  bool has_values = false;\n+  std::unordered_map<T, int64_t> value_counts{};\n+};\n+\n+template <typename ArrowType>\n+struct ModeImpl : public ScalarAggregator {\n+  using ThisType = ModeImpl<ArrowType>;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  explicit ModeImpl(const std::shared_ptr<DataType>& out_type) : out_type(out_type) {}\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    ModeState<ArrowType> local_state;\n+    ArrayType arr(batch[0].array());\n+\n+    local_state.has_values = (arr.length() - arr.null_count()) > 0;\n+    if (arr.null_count() > 0) {\n+      BitmapReader reader(arr.null_bitmap_data(), arr.offset(), arr.length());\n+      for (int64_t i = 0; i < arr.length(); i++) {\n+        if (reader.IsSet()) {\n+          local_state.MergeOne(arr.Value(i));\n+        }\n+        reader.Next();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < arr.length(); i++) {\n+        local_state.MergeOne(arr.Value(i));\n+      }\n+    }\n+    this->state = std::move(local_state);\n+  }\n+\n+  void MergeFrom(KernelContext*, const KernelState& src) override {\n+    const auto& other = checked_cast<const ThisType&>(src);\n+    this->state.MergeFrom(other.state);\n+  }\n+\n+  void Finalize(KernelContext*, Datum* out) override {\n+    using ModeType = typename TypeTraits<ArrowType>::ScalarType;\n+    using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+    std::vector<std::shared_ptr<Scalar>> values;\n+    if (!this->state.has_values) {\n\nReview comment:\n       Yes, done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T02:32:53.487+0000",
                    "updated": "2020-08-11T02:32:53.487+0000",
                    "started": "2020-08-11T02:32:53.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468985",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/469222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#issuecomment-671958639\n\n\n   Rebased and pushed a tiny change. Will merge if/when CI is green.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T13:50:07.880+0000",
                    "updated": "2020-08-11T13:50:07.880+0000",
                    "started": "2020-08-11T13:50:07.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469222",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/469279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-11T15:45:03.859+0000",
                    "updated": "2020-08-11T15:45:03.859+0000",
                    "started": "2020-08-11T15:45:03.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469279",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/469648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r469186653\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,96 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+//\n+// Mode\n+//\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, NaN]\");\n\nReview comment:\n       Should this return NaN instead of Null?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T11:21:27.663+0000",
                    "updated": "2020-08-12T11:21:27.663+0000",
                    "started": "2020-08-12T11:21:27.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469648",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/469650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r469187578\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,96 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+//\n+// Mode\n+//\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, NaN]\");\n\nReview comment:\n       Good question. Since NaN is not equal to itself, you would get `{\"mode\": NaN, \"count\": 1}` (each NaN is unequal to all others) which is not really a satisfying answer.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T11:23:33.266+0000",
                    "updated": "2020-08-12T11:23:33.266+0000",
                    "started": "2020-08-12T11:23:33.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469650",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/469651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r469190159\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,96 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+//\n+// Mode\n+//\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, NaN]\");\n\nReview comment:\n       It's what scipy does, for example. I agree it's not the most useful answer, but consistency in how NaN is treated is also nice (eg in other reductions like sum, NaN is not skipped like Null is)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T11:28:49.613+0000",
                    "updated": "2020-08-12T11:28:49.613+0000",
                    "started": "2020-08-12T11:28:49.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469651",
                    "issueId": "13320768"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/worklog/469654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7920:\nURL: https://github.com/apache/arrow/pull/7920#discussion_r469192140\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,5 +594,96 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+//\n+// Mode\n+//\n+\n+template <typename ArrowType>\n+class TestPrimitiveModeKernel : public ::testing::Test {\n+  using Traits = TypeTraits<ArrowType>;\n+  using c_type = typename ArrowType::c_type;\n+  using ModeType = typename Traits::ScalarType;\n+  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+\n+ public:\n+  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n+    ASSERT_EQ(expected_mode, out_mode.value);\n+\n+    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n+    ASSERT_EQ(expected_count, out_count.value);\n+  }\n+\n+  void AssertModeIs(const std::string& json, c_type expected_mode,\n+                    int64_t expected_count) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIs(array, expected_mode, expected_count);\n+  }\n+\n+  void AssertModeIsNull(const Datum& array) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n+    const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+    for (const auto& val : value.value) {\n+      ASSERT_FALSE(val->is_valid);\n+    }\n+  }\n+\n+  void AssertModeIsNull(const std::string& json) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModeIsNull(array);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+template <typename ArrowType>\n+class TestIntegerModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+template <typename ArrowType>\n+class TestFloatingModeKernel : public TestPrimitiveModeKernel<ArrowType> {};\n+\n+class TestBooleanModeKernel : public TestPrimitiveModeKernel<BooleanType> {};\n+\n+TEST_F(TestBooleanModeKernel, Basics) {\n+  this->AssertModeIs(\"[false, false]\", false, 2);\n+  this->AssertModeIs(\"[false, false, true, true, true]\", true, 3);\n+  this->AssertModeIs(\"[true, false, false, true, true]\", true, 3);\n+  this->AssertModeIs(\"[false, false, true, true, true, false]\", false, 3);\n+\n+  this->AssertModeIs(\"[true, null, false, false, null, true, null, null, true]\", true, 3);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestIntegerModeKernel, IntegralArrowTypes);\n+TYPED_TEST(TestIntegerModeKernel, Basics) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[127, 0, 127, 127, 0, 1, 0, 127]\", 127, 4);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[]\");\n+}\n+\n+TYPED_TEST_SUITE(TestFloatingModeKernel, RealArrowTypes);\n+TYPED_TEST(TestFloatingModeKernel, Floats) {\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5]\", 5, 3);\n+  this->AssertModeIs(\"[5, 1, 1, 5, 5, 1]\", 1, 3);\n+  this->AssertModeIs(\"[Inf, 100, Inf, 100, Inf]\", INFINITY, 3);\n+  this->AssertModeIs(\"[Inf, -Inf, Inf, -Inf]\", -INFINITY, 2);\n+\n+  this->AssertModeIs(\"[null, null, 2, null, 1]\", 1, 1);\n+  this->AssertModeIs(\"[NaN, NaN, 1]\", 1, 1);\n+  this->AssertModeIsNull(\"[null, null, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, null]\");\n+  this->AssertModeIsNull(\"[NaN, NaN, NaN]\");\n\nReview comment:\n       It's a bit easier for sum, though: NaN simply propagates to the result. The sum result may not entirely be useful, but it's not misleading either.\r\n   Feel free to open an issue so that we can discuss this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T11:33:04.822+0000",
                    "updated": "2020-08-12T11:33:04.822+0000",
                    "started": "2020-08-12T11:33:04.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469654",
                    "issueId": "13320768"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4bf06d4a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32ef202c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a818548[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@51243874[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ca56f7c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@57fefc8d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41c388ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@31d4ff2b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63db8e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2607263c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bdec673[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6de55384[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 11 15:45:18 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-11T15:45:18.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9638/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-08-04T02:12:01.000+0000",
        "updated": "2020-08-13T12:46:46.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Implement mode(most frequent number) kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17170664",
                    "id": "17170664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "One question might be what to do in case of\u00a0 \"multiple\" mode.\r\n\r\n\u00a0\r\n\r\nFor example, scipy returns only the smalles mode ([https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mode.html),] pandas always returns a list of elements (and thus returns all modes if there are multiple)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-08-04T09:01:51.140+0000",
                    "updated": "2020-08-04T09:01:51.140+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17170679",
                    "id": "17170679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'm not certain to return top mode or all modes sorted.\r\nI plan to return only the top mode. To return all modes looks similar to value_count() operation.\r\nThat said, I think the implementation should be similar. Even if only the top mode is required, we still need to count all elements internally. The difference is at finalizing time, non-trivial extra work is required to return all modes.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-04T09:25:11.318+0000",
                    "updated": "2020-08-04T09:25:11.318+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17173117",
                    "id": "17173117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "To be clear, my comment was specifically about when the top mode is ambiguous (eg in the set [1, 1, 2, 2, 3] both 1 and 2 are modes). So what do you see as the \"top\" mode in such a case? (the first occurring, the smallest/largest value, ..) ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-08-07T12:47:30.620+0000",
                    "updated": "2020-08-07T12:47:30.620+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17173464",
                    "id": "17173464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It might be worth thinking about generalizing to compute the \"nth_largest\". So the mode would be \"nth_largest(data, n=0)\"",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-08-07T20:43:55.420+0000",
                    "updated": "2020-08-07T20:43:55.420+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17173590",
                    "id": "17173590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~jorisvandenbossche] I think the common practice is to return the smallest value",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-08T06:17:59.568+0000",
                    "updated": "2020-08-08T06:17:59.568+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17173600",
                    "id": "17173600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~wesm] Didn't find obvious way to compute nth_largest efficiently in both time and space. Guess we can start with simpler approach and impove it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-08T07:48:51.664+0000",
                    "updated": "2020-08-08T07:48:51.664+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320768/comment/17175654",
                    "id": "17175654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 7920\n[https://github.com/apache/arrow/pull/7920]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-08-11T15:45:18.251+0000",
                    "updated": "2020-08-11T15:45:18.251+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hfwg:",
        "customfield_12314139": null
    }
}