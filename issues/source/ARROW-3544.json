{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13192331",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331",
    "key": "ARROW-3544",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddharthdave",
            "name": "siddharthdave",
            "key": "siddharthdave",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Siddharth Dave",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3544/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 71,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/170589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthdave opened a new pull request #3051: ARROW-3544: [Gandiva] [C++] Extremely long compile time for function_\u2026\nURL: https://github.com/apache/arrow/pull/3051\n \n \n   \u2026registry.cc in release mode on clang 6\r\n   \r\n   Refactored function_registry into separate files. The function signatures are now split across\r\n   3 different files viz. function_registry.cc, function_registry_binaryfn.cc & function_registry_unaryfn.cc.\r\n   This approach reduces the build times on my setup with little refactoring.\r\n   \r\n   I looked into tensorflow as well, as Wes had suggested, however tensorflow heavily utilizes tempalate based\r\n   approach, which is quite different from this & may require quite a bit of refactoring in gandiva.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-29T07:10:52.971+0000",
                    "updated": "2018-11-29T07:10:52.971+0000",
                    "started": "2018-11-29T07:10:52.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170589",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/170616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Extremely long compile time for function_\u2026\nURL: https://github.com/apache/arrow/pull/3051#discussion_r237396010\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry.cc\n ##########\n @@ -453,6 +274,16 @@ FunctionRegistry::SignatureMap FunctionRegistry::InitPCMap() {\n     // printf(\"%s -> %s\\n\", entry->signature().ToString().c_str(),\n     //      entry->pc_name().c_str());\n   }\n+\n+  FunctionRegistryBin::SignatureMap& binaryFnMap =\n+      FunctionRegistryBin::GetBinaryFnSignature();\n \n Review comment:\n   might be more optimal to pass the map as arg to Get*FnSignature() and update the same inside the function? would avoid double copy..\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-29T08:51:08.007+0000",
                    "updated": "2018-11-29T08:51:08.007+0000",
                    "started": "2018-11-29T08:51:08.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170616",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/170656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3051: ARROW-3544: [Gandiva] [C++] Extremely long compile time for function_\u2026\nURL: https://github.com/apache/arrow/pull/3051#issuecomment-442824571\n \n \n   > looks like unary and binary is the factor we are using to distribute the functions..will that hold in the future when we add more functions? should we instead use type (time vs string vs arithmetic etc)..\r\n   \r\n   Agreed, it will make more sense to use a semantic categorization (either parameter types or general operation category - such as math, calendar, etc.).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-29T12:58:49.141+0000",
                    "updated": "2018-11-29T12:58:49.141+0000",
                    "started": "2018-11-29T12:58:49.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170656",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/170657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Extremely long compile time for function_\u2026\nURL: https://github.com/apache/arrow/pull/3051#discussion_r237476299\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_unaryfn.cc\n ##########\n @@ -0,0 +1,285 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_unaryfn.h\"\n+\n+#include <vector>\n+\n+namespace gandiva {\n+\n+using arrow::binary;\n+using arrow::boolean;\n+using arrow::date64;\n+using arrow::float32;\n+using arrow::float64;\n+using arrow::int16;\n+using arrow::int32;\n+using arrow::int64;\n+using arrow::int8;\n+using arrow::uint16;\n+using arrow::uint32;\n+using arrow::uint64;\n+using arrow::uint8;\n+using arrow::utf8;\n+using std::vector;\n+\n+#define STRINGIFY(a) #a\n+\n+// Binary functions that :\n+// - have the same input type for both params\n+// - output type is same as the input type\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type names. eg. add_int32_int32\n+#define BINARY_SYMMETRIC_SAFE_NULL_IF_NULL(NAME, TYPE)                             \\\n \n Review comment:\n   Rather than repeating those macros in several `.cc` files, perhaps you can share them a in a private `.h` file?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-29T12:59:42.124+0000",
                    "updated": "2018-11-29T12:59:42.124+0000",
                    "started": "2018-11-29T12:59:42.124+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170657",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/170658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Extremely long compile time for function_\u2026\nURL: https://github.com/apache/arrow/pull/3051#discussion_r237478152\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_binaryfn.cc\n ##########\n @@ -0,0 +1,313 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_binaryfn.h\"\n+\n+#include <memory>\n+#include <vector>\n+\n+namespace gandiva {\n+\n+using arrow::binary;\n+using arrow::boolean;\n+using arrow::date64;\n+using arrow::float32;\n+using arrow::float64;\n+using arrow::int16;\n+using arrow::int32;\n+using arrow::int64;\n+using arrow::int8;\n+using arrow::uint16;\n+using arrow::uint32;\n+using arrow::uint64;\n+using arrow::uint8;\n+using arrow::utf8;\n+using std::vector;\n+\n+#define STRINGIFY(a) #a\n+\n+// Binary functions that :\n+// - have the same input type for both params\n+// - output type is same as the input type\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type names. eg. add_int32_int32\n+#define BINARY_SYMMETRIC_SAFE_NULL_IF_NULL(NAME, TYPE)                             \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE(), TYPE()}, TYPE(), kResultNullIfNull, \\\n+                 STRINGIFY(NAME##_##TYPE##_##TYPE))\n+\n+// Binary functions that :\n+// - have the same input type for both params\n+// - NULL handling is of type NULL_IINTERNAL\n+// - can return error.\n+//\n+// The pre-compiled fn name includes the base name & input type names. eg. add_int32_int32\n+#define BINARY_UNSAFE_NULL_IF_NULL(NAME, IN_TYPE, OUT_TYPE)                  \\\n+  NativeFunction(#NAME, DataTypeVector{IN_TYPE(), IN_TYPE()}, OUT_TYPE(),    \\\n+                 kResultNullIfNull, STRINGIFY(NAME##_##IN_TYPE##_##IN_TYPE), \\\n+                 NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors)\n+\n+#define BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL(NAME, TYPE) \\\n+  BINARY_UNSAFE_NULL_IF_NULL(NAME, TYPE, TYPE)\n+\n+// Binary functions that :\n+// - have different input types, or output type\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type names. eg. mod_int64_int32\n+#define BINARY_GENERIC_SAFE_NULL_IF_NULL(NAME, IN_TYPE1, IN_TYPE2, OUT_TYPE) \\\n+  NativeFunction(#NAME, DataTypeVector{IN_TYPE1(), IN_TYPE2()}, OUT_TYPE(),  \\\n+                 kResultNullIfNull, STRINGIFY(NAME##_##IN_TYPE1##_##IN_TYPE2))\n+\n+// Binary functions that :\n+// - have the same input type\n+// - output type is boolean\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type names.\n+// eg. equal_int32_int32\n+#define BINARY_RELATIONAL_SAFE_NULL_IF_NULL(NAME, TYPE)                               \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE(), TYPE()}, boolean(), kResultNullIfNull, \\\n+                 STRINGIFY(NAME##_##TYPE##_##TYPE))\n+\n+// Unary functions that :\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type name. eg. castFloat_int32\n+#define UNARY_SAFE_NULL_IF_NULL(NAME, IN_TYPE, OUT_TYPE)                          \\\n+  NativeFunction(#NAME, DataTypeVector{IN_TYPE()}, OUT_TYPE(), kResultNullIfNull, \\\n+                 STRINGIFY(NAME##_##IN_TYPE))\n+\n+// Unary functions that :\n+// - NULL handling is of type NULL_NEVER\n+//\n+// The pre-compiled fn name includes the base name & input type name. eg. isnull_int32\n+#define UNARY_SAFE_NULL_NEVER_BOOL(NAME, TYPE)                               \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE()}, boolean(), kResultNullNever, \\\n+                 STRINGIFY(NAME##_##TYPE))\n+\n+// Unary functions that :\n+// - NULL handling is of type NULL_INTERNAL\n+//\n+// The pre-compiled fn name includes the base name & input type name. eg. castFloat_int32\n+#define UNARY_UNSAFE_NULL_IF_NULL(NAME, IN_TYPE, OUT_TYPE)                        \\\n+  NativeFunction(#NAME, DataTypeVector{IN_TYPE()}, OUT_TYPE(), kResultNullIfNull, \\\n+                 STRINGIFY(NAME##_##IN_TYPE),                                     \\\n+                 NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors)\n+\n+// Binary functions that :\n+// - NULL handling is of type NULL_NEVER\n+//\n+// The pre-compiled fn name includes the base name & input type names,\n+// eg. is_distinct_from_int32_int32\n+#define BINARY_SAFE_NULL_NEVER_BOOL(NAME, TYPE)                                      \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE(), TYPE()}, boolean(), kResultNullNever, \\\n+                 STRINGIFY(NAME##_##TYPE##_##TYPE))\n+\n+// Extract functions (used with data/time types) that :\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type name. eg. extractYear_date\n+#define EXTRACT_SAFE_NULL_IF_NULL(NAME, TYPE)                               \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE()}, int64(), kResultNullIfNull, \\\n+                 STRINGIFY(NAME##_##TYPE))\n+\n+// Hash32 functions that :\n+// - NULL handling is of type NULL_NEVER\n+//\n+// The pre-compiled fn name includes the base name & input type name. hash32_int8\n+#define HASH32_SAFE_NULL_NEVER(NAME, TYPE)                                 \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE()}, int32(), kResultNullNever, \\\n+                 STRINGIFY(NAME##_##TYPE))\n+\n+// Hash32 functions that :\n+// - NULL handling is of type NULL_NEVER\n+//\n+// The pre-compiled fn name includes the base name & input type name. hash32_int8\n+#define HASH64_SAFE_NULL_NEVER(NAME, TYPE)                                 \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE()}, int64(), kResultNullNever, \\\n+                 STRINGIFY(NAME##_##TYPE))\n+\n+// Hash32 functions with seed that :\n+// - NULL handling is of type NULL_NEVER\n+//\n+// The pre-compiled fn name includes the base name & input type name. hash32WithSeed_int8\n+#define HASH32_SEED_SAFE_NULL_NEVER(NAME, TYPE)                                     \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE(), int32()}, int32(), kResultNullNever, \\\n+                 STRINGIFY(NAME##WithSeed_##TYPE))\n+\n+// Hash64 functions with seed that :\n+// - NULL handling is of type NULL_NEVER\n+//\n+// The pre-compiled fn name includes the base name & input type name. hash32WithSeed_int8\n+#define HASH64_SEED_SAFE_NULL_NEVER(NAME, TYPE)                                     \\\n+  NativeFunction(#NAME, DataTypeVector{TYPE(), int64()}, int64(), kResultNullNever, \\\n+                 STRINGIFY(NAME##WithSeed_##TYPE))\n+\n+// Iterate the inner macro over all numeric types\n+#define NUMERIC_TYPES(INNER, NAME)                                                       \\\n+  INNER(NAME, int8), INNER(NAME, int16), INNER(NAME, int32), INNER(NAME, int64),         \\\n+      INNER(NAME, uint8), INNER(NAME, uint16), INNER(NAME, uint32), INNER(NAME, uint64), \\\n+      INNER(NAME, float32), INNER(NAME, float64)\n+\n+// Iterate the inner macro over numeric and date/time types\n+#define NUMERIC_DATE_TYPES(INNER, NAME) \\\n+  NUMERIC_TYPES(INNER, NAME), DATE_TYPES(INNER, NAME), TIME_TYPES(INNER, NAME)\n+\n+// Iterate the inner macro over all date types\n+#define DATE_TYPES(INNER, NAME) INNER(NAME, date64), INNER(NAME, timestamp)\n+\n+// Iterate the inner macro over all time types\n+#define TIME_TYPES(INNER, NAME) INNER(NAME, time32)\n+\n+// Iterate the inner macro over all data types\n+#define VAR_LEN_TYPES(INNER, NAME) INNER(NAME, utf8), INNER(NAME, binary)\n+\n+// Iterate the inner macro over all numeric types, date types and bool type\n+#define NUMERIC_BOOL_DATE_TYPES(INNER, NAME) \\\n+  NUMERIC_DATE_TYPES(INNER, NAME), INNER(NAME, boolean)\n+\n+// Iterate the inner macro over all numeric types, date types, bool and varlen types\n+#define NUMERIC_BOOL_DATE_VAR_LEN_TYPES(INNER, NAME) \\\n+  NUMERIC_BOOL_DATE_TYPES(INNER, NAME), VAR_LEN_TYPES(INNER, NAME)\n+\n+\n+\n+FunctionRegistryBin::SignatureMap& FunctionRegistryBin::GetBinaryFnSignature() {\n+  static NativeFunction binary_fn_registry_[] = {\n+    BINARY_UNSAFE_NULL_IF_NULL(log, int32, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, int64, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, uint32, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, uint64, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, float32, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, float64, float64),\n+\n+    BINARY_SYMMETRIC_SAFE_NULL_IF_NULL(power, float64),\n+\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(months_between, date64, date64, float64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(months_between, timestamp, timestamp, float64),\n+\n+    // timestamp diff operations\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffSecond, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffMinute, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffHour, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffDay, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffWeek, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffMonth, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffQuarter, timestamp, timestamp, int32),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffYear, timestamp, timestamp, int32),\n+\n+    // timestamp add int32 operations\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddSecond, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMinute, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddHour, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddDay, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddWeek, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMonth, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddQuarter, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddYear, timestamp, int32, timestamp),\n+    // date add int32 operations\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddSecond, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMinute, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddHour, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddDay, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddWeek, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMonth, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddQuarter, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddYear, date64, int32, date64),\n+\n+    // timestamp add int64 operations\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddSecond, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMinute, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddHour, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddDay, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddWeek, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMonth, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddQuarter, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddYear, timestamp, int64, timestamp),\n+    // date add int64 operations\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddSecond, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMinute, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddHour, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddDay, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddWeek, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddMonth, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddQuarter, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampaddYear, date64, int64, date64),\n+\n+    // date_add(date64, int32), date_add(timestamp, int32)\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, timestamp, int32, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, timestamp, int32, timestamp),\n+\n+    // date_add(date64, int64), date_add(timestamp, int64)\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, timestamp, int64, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, timestamp, int64, timestamp),\n+\n+    // date_add(int32, date64), date_add(int32, timestamp)\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, int32, date64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, int32, date64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, int32, timestamp, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, int32, timestamp, timestamp),\n+\n+    // date_add(int64, date64), date_add(int64, timestamp)\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, int64, date64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, int64, date64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_add, int64, timestamp, timestamp),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(add, int64, timestamp, timestamp),\n+\n+    // date_sub(date64, int32), subtract and date_diff\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_sub, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(subtract, date64, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_diff, date64, int32, date64),\n+    // date_sub(timestamp, int32), subtract and date_diff\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_sub, timestamp, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(subtract, timestamp, int32, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_diff, timestamp, int32, date64),\n+\n+    // date_sub(date64, int64), subtract and date_diff\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_sub, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(subtract, date64, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_diff, date64, int64, date64),\n+    // date_sub(timestamp, int64), subtract and date_diff\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_sub, timestamp, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(subtract, timestamp, int64, date64),\n+    BINARY_GENERIC_SAFE_NULL_IF_NULL(date_diff, timestamp, int64, date64),\n+\n+\n+    BINARY_RELATIONAL_SAFE_NULL_IF_NULL(starts_with, utf8),\n+    BINARY_RELATIONAL_SAFE_NULL_IF_NULL(ends_with, utf8)\n+  };\n+\n+  static FunctionRegistryBin::SignatureMap map;\n+\n+  const int num_entries =\n+      static_cast<int>(sizeof(binary_fn_registry_) / sizeof(NativeFunction));\n+  for (int i = 0; i < num_entries; i++) {\n+    const NativeFunction* entry = &binary_fn_registry_[i];\n+\n+    DCHECK(map.find(&entry->signature()) == map.end());\n \n Review comment:\n   What happens if this function is called twice? It looks like this check may trigger. I'm not sure that's a concern.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-29T13:05:44.663+0000",
                    "updated": "2018-11-29T13:05:44.663+0000",
                    "started": "2018-11-29T13:05:44.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170658",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/170789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r237638001\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_unaryfn.cc\n ##########\n @@ -0,0 +1,285 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_unaryfn.h\"\n+\n+#include <vector>\n+\n+namespace gandiva {\n+\n+using arrow::binary;\n+using arrow::boolean;\n+using arrow::date64;\n+using arrow::float32;\n+using arrow::float64;\n+using arrow::int16;\n+using arrow::int32;\n+using arrow::int64;\n+using arrow::int8;\n+using arrow::uint16;\n+using arrow::uint32;\n+using arrow::uint64;\n+using arrow::uint8;\n+using arrow::utf8;\n+using std::vector;\n+\n+#define STRINGIFY(a) #a\n+\n+// Binary functions that :\n+// - have the same input type for both params\n+// - output type is same as the input type\n+// - NULL handling is of type NULL_IF_NULL\n+//\n+// The pre-compiled fn name includes the base name & input type names. eg. add_int32_int32\n+#define BINARY_SYMMETRIC_SAFE_NULL_IF_NULL(NAME, TYPE)                             \\\n \n Review comment:\n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-29T19:59:17.307+0000",
                    "updated": "2018-11-29T19:59:17.307+0000",
                    "started": "2018-11-29T19:59:17.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170789",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/171611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r238275633\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_binaryfn.cc\n ##########\n @@ -0,0 +1,313 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_binaryfn.h\"\n+\n+#include <memory>\n+#include <vector>\n+\n+namespace gandiva {\n+\n+using arrow::binary;\n+using arrow::boolean;\n+using arrow::date64;\n+using arrow::float32;\n+using arrow::float64;\n+using arrow::int16;\n+using arrow::int32;\n+using arrow::int64;\n+using arrow::int8;\n+using arrow::uint16;\n+using arrow::uint32;\n+using arrow::uint64;\n+using arrow::uint8;\n+using arrow::utf8;\n+using std::vector;\n+\n+#define STRINGIFY(a) #a\n \n Review comment:\n   I'd move this under `arrow/util/macros.h` and name it `ARROW_STRINGIFY` this is common enough to warrant this change.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T15:12:41.845+0000",
                    "updated": "2018-12-03T15:12:41.845+0000",
                    "started": "2018-12-03T15:12:41.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171611",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/171612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#issuecomment-443744650\n \n \n   In general it seems there's a lot of shared code between `FunctionRegistryBin` and `FunctionRegistryUnary` can we do it with a single class and template?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T15:13:55.549+0000",
                    "updated": "2018-12-03T15:13:55.549+0000",
                    "started": "2018-12-03T15:13:55.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171612",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/171616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthdave commented on issue #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#issuecomment-443750189\n \n \n   Yes, I agree with the feedback. I am working on a patch that cleans up the code & de-dupes the shared stuff. Once it passes all the gandiva tests shall update this review. Thanks.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T15:28:48.346+0000",
                    "updated": "2018-12-03T15:28:48.346+0000",
                    "started": "2018-12-03T15:28:48.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171616",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/172583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#issuecomment-444757482\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=h1) Report\n   > Merging [#3051](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1f099c7e6e186ae3897adfb3e2e87934942bef01?src=pr&el=desc) will **increase** coverage by `1.12%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3051/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3051      +/-   ##\n   ==========================================\n   + Coverage   87.05%   88.17%   +1.12%     \n   ==========================================\n     Files         492      445      -47     \n     Lines       69122    65425    -3697     \n   ==========================================\n   - Hits        60171    57686    -2485     \n   + Misses       8850     7739    -1111     \n   + Partials      101        0     -101\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/gandiva/native\\_function.h](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL25hdGl2ZV9mdW5jdGlvbi5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/function\\_registry\\_string.cc](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X3N0cmluZy5jYw==) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/gandiva/function\\_registry\\_datetime.h](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2RhdGV0aW1lLmg=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/gandiva/function\\_registry\\_datetime.cc](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2RhdGV0aW1lLmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/gandiva/function\\_registry\\_arithmetic.cc](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2FyaXRobWV0aWMuY2M=) | `100% <100%> (\u00f8)` | |\n   | [.../gandiva/function\\_registry\\_timestamp\\_arithmetic.cc](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X3RpbWVzdGFtcF9hcml0aG1ldGljLmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/gandiva/function\\_registry\\_hash.cc](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2hhc2guY2M=) | `100% <100%> (\u00f8)` | |\n   | [...c/gandiva/function\\_registry\\_timestamp\\_arithmetic.h](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X3RpbWVzdGFtcF9hcml0aG1ldGljLmg=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/gandiva/function\\_registry\\_arithmetic.h](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2FyaXRobWV0aWMuaA==) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/gandiva/function\\_registry.cc](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [81 more](https://codecov.io/gh/apache/arrow/pull/3051/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=footer). Last update [1f099c7...83ab23b](https://codecov.io/gh/apache/arrow/pull/3051?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T05:56:43.223+0000",
                    "updated": "2018-12-06T05:56:43.223+0000",
                    "started": "2018-12-06T05:56:43.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172583",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242662996\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_arithmetic.cc\n ##########\n @@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_arithmetic.h\"\n+#include <utility>\n+#include <vector>\n+#include \"gandiva/function_registry_common.h\"\n+\n+namespace gandiva {\n+\n+void FunctionRegistryArithmetic::GetArithmeticFnSignature(SignatureMap* map) {\n+  // list of registered native functions.\n+\n+  static NativeFunction arithmetic_fn_registry_[] = {\n+      // Arithmetic operations\n+      UNARY_SAFE_NULL_IF_NULL(not, boolean, boolean),\n+\n+      // cast operations\n+      UNARY_SAFE_NULL_IF_NULL(castBIGINT, int32, int64),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT4, int32, float32),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT4, int64, float32),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT8, int32, float64),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT8, int64, float64),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT8, float32, float64),\n+      UNARY_SAFE_NULL_IF_NULL(castDATE, int64, date64),\n+\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, add),\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, subtract),\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, multiply),\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL, divide),\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(mod, int64, int32, int32),\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(mod, int64, int64, int64),\n+      NUMERIC_BOOL_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, equal),\n+      NUMERIC_BOOL_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, not_equal),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, less_than),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, less_than_or_equal_to),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, greater_than),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, greater_than_or_equal_to),\n+\n+      // utf8/binary operations\n+      UNARY_SAFE_NULL_IF_NULL(octet_length, utf8, int32),\n+      UNARY_SAFE_NULL_IF_NULL(octet_length, binary, int32),\n+      UNARY_SAFE_NULL_IF_NULL(bit_length, utf8, int32),\n+      UNARY_SAFE_NULL_IF_NULL(bit_length, binary, int32),\n+      UNARY_UNSAFE_NULL_IF_NULL(char_length, utf8, int32),\n+      UNARY_UNSAFE_NULL_IF_NULL(length, utf8, int32),\n+      UNARY_UNSAFE_NULL_IF_NULL(lengthUtf8, binary, int32)};\n+\n+  const int num_entries =\n+      static_cast<int>(sizeof(arithmetic_fn_registry_) / sizeof(NativeFunction));\n \n Review comment:\n   This is frequent enought to warrant a macro `ARROW_ARRAY_SIZE_OF`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T18:57:36.711+0000",
                    "updated": "2018-12-18T18:57:36.711+0000",
                    "started": "2018-12-18T18:57:36.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176676",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242666172\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_hash.cc\n ##########\n @@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_hash.h\"\n+#include <utility>\n+#include <vector>\n+\n+namespace gandiva {\n+\n+void FunctionRegistryHash::GetHashFnSignature(SignatureMap* map) {\n+  // list of registered native functions.\n+\n+  static NativeFunction hash_fn_registry_[] = {\n+      // hash functions\n \n Review comment:\n   This comment is not needed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:05.725+0000",
                    "updated": "2018-12-18T19:20:05.725+0000",
                    "started": "2018-12-18T19:20:05.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176706",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242664951\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_common.h\n ##########\n @@ -0,0 +1,211 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef GANDIVA_FUNCTION_REGISTRY_COMMON_H\n+#define GANDIVA_FUNCTION_REGISTRY_COMMON_H\n+\n+#include <memory>\n+#include <unordered_map>\n+#include <vector>\n+\n+#include \"gandiva/arrow.h\"\n+#include \"gandiva/function_signature.h\"\n+#include \"gandiva/gandiva_aliases.h\"\n+#include \"gandiva/native_function.h\"\n+\n+namespace gandiva {\n+\n+using arrow::binary;\n+using arrow::boolean;\n+using arrow::date64;\n+using arrow::float32;\n+using arrow::float64;\n+using arrow::int16;\n+using arrow::int32;\n+using arrow::int64;\n+using arrow::int8;\n+using arrow::uint16;\n+using arrow::uint32;\n+using arrow::uint64;\n+using arrow::uint8;\n+using arrow::utf8;\n+using std::vector;\n+\n+struct KeyHash {\n+  std::size_t operator()(const FunctionSignature* k) const { return k->Hash(); }\n+};\n+\n+struct KeyEquals {\n+  bool operator()(const FunctionSignature* s1, const FunctionSignature* s2) const {\n+    return *s1 == *s2;\n+  }\n+};\n+\n+typedef std::unordered_map<const FunctionSignature*, const NativeFunction*, KeyHash,\n+                           KeyEquals>\n+    SignatureMap;\n+\n+#define STRINGIFY(a) #a\n \n Review comment:\n   As I said previously, move this in `arrow/util/macro.h` and name it `ARROW_STRINGIFY`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:05.728+0000",
                    "updated": "2018-12-18T19:20:05.728+0000",
                    "started": "2018-12-18T19:20:05.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176707",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242665849\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry.h\n ##########\n @@ -19,7 +19,9 @@\n #define GANDIVA_FUNCTION_REGISTRY_H\n \n #include <unordered_map>\n \n Review comment:\n   Not needed anymore.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:05.738+0000",
                    "updated": "2018-12-18T19:20:05.738+0000",
                    "started": "2018-12-18T19:20:05.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176708",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242666525\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_timestamp_arithmetic.cc\n ##########\n @@ -0,0 +1,132 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_timestamp_arithmetic.h\"\n+#include <utility>\n+#include <vector>\n+\n+namespace gandiva {\n+\n+void FunctionRegistryDateTimeArithmetic::GetDateTimeArithmeticFnSignature(\n+    SignatureMap* map) {\n+  // list of registered native functions.\n \n Review comment:\n   This comment is not needed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:05.747+0000",
                    "updated": "2018-12-18T19:20:05.747+0000",
                    "started": "2018-12-18T19:20:05.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176709",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242670729\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_timestamp_arithmetic.cc\n ##########\n @@ -0,0 +1,132 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_timestamp_arithmetic.h\"\n+#include <utility>\n+#include <vector>\n+\n+namespace gandiva {\n+\n+void FunctionRegistryDateTimeArithmetic::GetDateTimeArithmeticFnSignature(\n+    SignatureMap* map) {\n+  // list of registered native functions.\n+  static NativeFunction datetime_fn_registry_[] = {\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(months_between, date64, date64, float64),\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(months_between, timestamp, timestamp, float64),\n+\n+      // timestamp diff operations\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(timestampdiffSecond, timestamp, timestamp, int32),\n \n Review comment:\n   Again, macros.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:05.768+0000",
                    "updated": "2018-12-18T19:20:05.768+0000",
                    "started": "2018-12-18T19:20:05.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176710",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242663681\n \n \n\n ##########\n File path: cpp/src/gandiva/CMakeLists.txt\n ##########\n @@ -49,6 +49,12 @@ set(SRC_FILES annotator.cc\n       exported_funcs_registry.cc\n       filter.cc\n       function_registry.cc\n+      function_registry_arithmetic.cc\n+      function_registry_datetime.cc\n+\t  function_registry_hash.cc\n \n Review comment:\n   tab/space mix?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:07.856+0000",
                    "updated": "2018-12-18T19:20:07.856+0000",
                    "started": "2018-12-18T19:20:07.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176711",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242666147\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_hash.cc\n ##########\n @@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_hash.h\"\n+#include <utility>\n+#include <vector>\n+\n+namespace gandiva {\n+\n+void FunctionRegistryHash::GetHashFnSignature(SignatureMap* map) {\n+  // list of registered native functions.\n \n Review comment:\n   This comment is not needed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:08.003+0000",
                    "updated": "2018-12-18T19:20:08.003+0000",
                    "started": "2018-12-18T19:20:08.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176712",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242668061\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry.h\n ##########\n @@ -37,28 +39,16 @@ class FunctionRegistry {\n   iterator end() const;\n \n  private:\n-  struct KeyHash {\n-    std::size_t operator()(const FunctionSignature* k) const { return k->Hash(); }\n-  };\n-\n-  struct KeyEquals {\n-    bool operator()(const FunctionSignature* s1, const FunctionSignature* s2) const {\n-      return *s1 == *s2;\n-    }\n-  };\n-\n   static DataTypePtr time32() { return arrow::time32(arrow::TimeUnit::MILLI); }\n \n   static DataTypePtr time64() { return arrow::time64(arrow::TimeUnit::MICRO); }\n \n   static DataTypePtr timestamp() { return arrow::timestamp(arrow::TimeUnit::MILLI); }\n \n-  typedef std::unordered_map<const FunctionSignature*, const NativeFunction*, KeyHash,\n-                             KeyEquals>\n-      SignatureMap;\n   static SignatureMap InitPCMap();\n \n-  static NativeFunction pc_registry_[];\n+  // static NativeFunction pc_registry_[];\n \n Review comment:\n   Comment?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:08.095+0000",
                    "updated": "2018-12-18T19:20:08.095+0000",
                    "started": "2018-12-18T19:20:08.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176713",
                    "issueId": "13192331"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/worklog/176714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3051: ARROW-3544: [Gandiva] [C++] Create function registry in multiple compilation units to reduce build times\nURL: https://github.com/apache/arrow/pull/3051#discussion_r242664219\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_arithmetic.cc\n ##########\n @@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_registry_arithmetic.h\"\n+#include <utility>\n+#include <vector>\n+#include \"gandiva/function_registry_common.h\"\n+\n+namespace gandiva {\n+\n+void FunctionRegistryArithmetic::GetArithmeticFnSignature(SignatureMap* map) {\n+  // list of registered native functions.\n+\n+  static NativeFunction arithmetic_fn_registry_[] = {\n+      // Arithmetic operations\n+      UNARY_SAFE_NULL_IF_NULL(not, boolean, boolean),\n+\n+      // cast operations\n+      UNARY_SAFE_NULL_IF_NULL(castBIGINT, int32, int64),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT4, int32, float32),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT4, int64, float32),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT8, int32, float64),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT8, int64, float64),\n+      UNARY_SAFE_NULL_IF_NULL(castFLOAT8, float32, float64),\n+      UNARY_SAFE_NULL_IF_NULL(castDATE, int64, date64),\n+\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, add),\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, subtract),\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, multiply),\n+      NUMERIC_TYPES(BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL, divide),\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(mod, int64, int32, int32),\n+      BINARY_GENERIC_SAFE_NULL_IF_NULL(mod, int64, int64, int64),\n+      NUMERIC_BOOL_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, equal),\n+      NUMERIC_BOOL_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, not_equal),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, less_than),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, less_than_or_equal_to),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, greater_than),\n+      NUMERIC_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, greater_than_or_equal_to),\n+\n+      // utf8/binary operations\n+      UNARY_SAFE_NULL_IF_NULL(octet_length, utf8, int32),\n+      UNARY_SAFE_NULL_IF_NULL(octet_length, binary, int32),\n+      UNARY_SAFE_NULL_IF_NULL(bit_length, utf8, int32),\n+      UNARY_SAFE_NULL_IF_NULL(bit_length, binary, int32),\n+      UNARY_UNSAFE_NULL_IF_NULL(char_length, utf8, int32),\n+      UNARY_UNSAFE_NULL_IF_NULL(length, utf8, int32),\n+      UNARY_UNSAFE_NULL_IF_NULL(lengthUtf8, binary, int32)};\n+\n+  const int num_entries =\n+      static_cast<int>(sizeof(arithmetic_fn_registry_) / sizeof(NativeFunction));\n+  for (int i = 0; i < num_entries; i++) {\n \n Review comment:\n   This loop body is repeated many times, make this a separate function in registry common that takes `static NativeFunction arithmetic_fn_registry_[]`, `size_t`, and `SignatureMap *` as input.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T19:20:08.185+0000",
                    "updated": "2018-12-18T19:20:08.185+0000",
                    "started": "2018-12-18T19:20:08.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176714",
                    "issueId": "13192331"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 39000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7b77abab[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33e96a76[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1672e4e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6eb09681[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@acaa1af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2bc874a9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a9cc8cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@40f24783[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fea41eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@776f1383[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bf96711[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6965e1b2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 07 16:42:58 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-07T16:42:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3544/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-10-17T18:27:29.000+0000",
        "updated": "2019-01-07T16:43:08.000+0000",
        "timeoriginalestimate": null,
        "description": "On clang 6 / Ubuntu 14.04, this file takes about 3 minutes to compile with {{-O3}}. Probably you want to break up this file into smaller compilation units since the complexity in the amount of generated code is apparently overwhelming clang. TensorFlow's function registry is broken up into a large number of smaller compilation units: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/kernels",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva] Populate function registry in multiple compilation units to mitigate long compile times in release mode",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192331/comment/16736035",
                    "id": "16736035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3051\n[https://github.com/apache/arrow/pull/3051]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-07T16:42:58.267+0000",
                    "updated": "2019-01-07T16:42:58.267+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zbpb:",
        "customfield_12314139": null
    }
}