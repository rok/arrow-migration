{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13447995",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995",
    "key": "ARROW-16716",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "2.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
            "name": "ichauster",
            "key": "JIRAUSER290345",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Ivan Chau",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334978",
                "id": "12334978",
                "name": "Benchmarking"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16716/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster opened a new pull request, #13314:\nURL: https://github.com/apache/arrow/pull/13314\n\n   Create `project_benchmark.cc` and add to `CMakeLists`\n\n\n",
                    "created": "2022-06-03T18:48:37.676+0000",
                    "updated": "2022-06-03T18:48:37.676+0000",
                    "started": "2022-06-03T18:48:37.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778255",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#issuecomment-1146264210\n\n   https://issues.apache.org/jira/browse/ARROW-16716\n\n\n",
                    "created": "2022-06-03T18:48:59.714+0000",
                    "updated": "2022-06-03T18:48:59.714+0000",
                    "started": "2022-06-03T18:48:59.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778256",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#issuecomment-1146264231\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-03T18:49:01.588+0000",
                    "updated": "2022-06-03T18:49:01.588+0000",
                    "started": "2022-06-03T18:49:01.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778257",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r889246454\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   Ideally, we do not want to have to create the plan within the `for(auto _ : state)`, however it seems like each plan can only be executed once with `StartAndCollect`, is there another alternative?\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n\nReview Comment:\n   `field_ref(bool)` is here, but may not contribute must to the tests.\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   Also, this will also benchmark the performance of source and sink which we consider as noise. Is there a better way to isolate and benchmark only the performance of a single node within a plan?\n\n\n\n",
                    "created": "2022-06-03T18:53:33.239+0000",
                    "updated": "2022-06-03T18:53:33.239+0000",
                    "started": "2022-06-03T18:53:33.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778259",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#issuecomment-1146270071\n\n   Two other general questions:\r\n   \r\n   - How to measure the data rate, since it seems we are measuring in rows / batches.\r\n   - I saw some examples of controlling the threads used in ExecuteScalarExpressionOverhead, how can we control threads per core?\n\n\n",
                    "created": "2022-06-03T18:56:48.658+0000",
                    "updated": "2022-06-03T18:56:48.658+0000",
                    "started": "2022-06-03T18:56:48.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778260",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r889245497\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n\nReview Comment:\n   `field_ref(bool)` is here, but may not contribute much information in the benchmarks.\n\n\n\n",
                    "created": "2022-06-03T20:10:48.602+0000",
                    "updated": "2022-06-03T20:10:48.602+0000",
                    "started": "2022-06-03T20:10:48.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778283",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r889245497\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n\nReview Comment:\n   `field_ref(bool)` is here, but may not contribute much information in the benchmarks. (Keep / Delete ?)\n\n\n\n",
                    "created": "2022-06-03T20:11:08.661+0000",
                    "updated": "2022-06-03T20:11:08.661+0000",
                    "started": "2022-06-03T20:11:08.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778285",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r889247377\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   Also, this will also benchmark the performance of source and sink which we consider as noise. Because we only care about the ProjectNode, is there a better way to isolate and benchmark only the performance of a single node within a plan?\n\n\n\n",
                    "created": "2022-06-03T20:11:48.751+0000",
                    "updated": "2022-06-03T20:11:48.751+0000",
                    "started": "2022-06-03T20:11:48.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778286",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#issuecomment-1147574537\n\n   Hi @westonpace, following up on our JIRA conversation with @icexelloss, here is the open PR for Projection Benchmarks. I think it is ready for review (however, I cannot request it as a first time contributor).\n\n\n",
                    "created": "2022-06-06T15:24:10.607+0000",
                    "updated": "2022-06-06T15:24:10.607+0000",
                    "started": "2022-06-06T15:24:10.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778669",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890270682\n\n\n##########\ncpp/src/arrow/compute/exec/CMakeLists.txt:\n##########\n@@ -43,6 +43,8 @@ add_arrow_compute_test(util_test\n \n add_arrow_benchmark(expression_benchmark PREFIX \"arrow-compute\")\n \n+add_arrow_benchmark(project_benchmark PREFIX \"arrow-compute\")\n\nReview Comment:\n   Minor nit: Since we are benchmarking nodes and not the kernel functions we might want to start using a new prefix just to help distinguish.  Maybe `arrow-engine`?\r\n   \r\n   CC @lidavidm for second opinion.\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n\nReview Comment:\n   ```suggestion\r\n   static constexpr int64_t total_batch_size = 1e6;\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n+      ->DenseThreadRange(1, std::thread::hardware_concurrency(),\n+                         std::thread::hardware_concurrency())\n+      ->UseRealTime();\n+}\n+\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = total_batch_size / batch_size;\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext* ctx = default_exec_context();\n+  *ctx = ExecContext(default_memory_pool(), arrow::internal::GetCpuThreadPool());\n+  for (auto _ : state) {\n+    state.PauseTiming();\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make(ctx));\n\nReview Comment:\n   ```suggestion\r\n     ExecContext ctx(default_memory_pool(), arrow::internal::GetCpuThreadPool());\r\n     for (auto _ : state) {\r\n       state.PauseTiming();\r\n       ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make(&ctx));\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n\nReview Comment:\n   Let's remove so that the benchmark focuses purely on expr.\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n\nReview Comment:\n   We can probably skip 1, 10, and 100 as those batch sizes are too small to be realistic.\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n\nReview Comment:\n   This style is kind of nice for avoiding repeating ourselves.  However, can you move the helper method closer to where the benchmarks are actually declared?\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n+      ->DenseThreadRange(1, std::thread::hardware_concurrency(),\n+                         std::thread::hardware_concurrency())\n+      ->UseRealTime();\n+}\n+\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n\nReview Comment:\n   ```suggestion\r\n   static void ProjectionOverhead(benchmark::State& state, Expression expr) {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n+      ->DenseThreadRange(1, std::thread::hardware_concurrency(),\n+                         std::thread::hardware_concurrency())\n+      ->UseRealTime();\n+}\n+\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = total_batch_size / batch_size;\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext* ctx = default_exec_context();\n+  *ctx = ExecContext(default_memory_pool(), arrow::internal::GetCpuThreadPool());\n+  for (auto _ : state) {\n+    state.PauseTiming();\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make(ctx));\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n\nReview Comment:\n   ```suggestion\r\n                                            data.gen(/*parallel=*/true, /*slow=*/false)},\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   It's possible to run a node in isolation.  You can manually instantiate the node and then just keep running `InputReceived` against it followed by `InputFinished` and then wait for it to mark finished.  This logic could be similar across a number of benchmarks.  I'm also interested in the node's performance with source/sink too (but maybe just because we don't have any source/sink benchmarks yet).  More thoughts on the top-level review comment.\n\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n+      ->DenseThreadRange(1, std::thread::hardware_concurrency(),\n+                         std::thread::hardware_concurrency())\n\nReview Comment:\n   I think it might be more interesting to actually not set threading here with google benchmark but instead make sure the compute engine is configured to run in parallel on the CPU thread pool (which will use `std::thread::hardware_concurrency`.\n\n\n\n",
                    "created": "2022-06-06T15:48:53.483+0000",
                    "updated": "2022-06-06T15:48:53.483+0000",
                    "started": "2022-06-06T15:48:53.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778673",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890371447\n\n\n##########\ncpp/src/arrow/compute/exec/CMakeLists.txt:\n##########\n@@ -43,6 +43,8 @@ add_arrow_compute_test(util_test\n \n add_arrow_benchmark(expression_benchmark PREFIX \"arrow-compute\")\n \n+add_arrow_benchmark(project_benchmark PREFIX \"arrow-compute\")\n\nReview Comment:\n   Practically everything is still under `arrow::compute` so I don't think it's a big deal. If/when we ever refactor the code structure we can fix it then.\n\n\n\n",
                    "created": "2022-06-06T17:27:42.152+0000",
                    "updated": "2022-06-06T17:27:42.152+0000",
                    "started": "2022-06-06T17:27:42.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778704",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890478754\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   I had a look around the codebase and haven't yet seen any manual implementation like this ",
                    "created": "2022-06-06T19:29:32.991+0000",
                    "updated": "2022-06-06T19:29:32.991+0000",
                    "started": "2022-06-06T19:29:32.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778731",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890479880\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n+      ->DenseThreadRange(1, std::thread::hardware_concurrency(),\n+                         std::thread::hardware_concurrency())\n\nReview Comment:\n   Is this something we set explicitly within the execution context?\n\n\n\n",
                    "created": "2022-06-06T19:31:08.024+0000",
                    "updated": "2022-06-06T19:31:08.024+0000",
                    "started": "2022-06-06T19:31:08.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778732",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890478754\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   I had a look around the codebase and haven't yet seen any manual implementation like this ",
                    "created": "2022-06-06T20:26:29.255+0000",
                    "updated": "2022-06-06T20:26:29.255+0000",
                    "started": "2022-06-06T20:26:29.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778746",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890478754\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   I had a look around the codebase and haven't yet seen any manual implementation like this ",
                    "created": "2022-06-06T20:26:49.603+0000",
                    "updated": "2022-06-06T20:26:49.603+0000",
                    "started": "2022-06-06T20:26:49.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778747",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890478754\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   I had a look around the codebase and haven't yet seen any manual implementation like this ",
                    "created": "2022-06-06T20:27:04.296+0000",
                    "updated": "2022-06-06T20:27:04.296+0000",
                    "started": "2022-06-06T20:27:04.295+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778748",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890478754\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   I had a look around the codebase and haven't yet seen any manual implementation like this ",
                    "created": "2022-06-06T20:27:49.234+0000",
                    "updated": "2022-06-06T20:27:49.234+0000",
                    "started": "2022-06-06T20:27:49.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778749",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890607183\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e6;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  for (auto batch_size = 1; batch_size <= 1e6; batch_size *= 10) {\n+    auto num_batches = total_batch_size / batch_size;\n+    bench->ArgNames({\"batch_size, num_batches\"})\n+        ->Args({batch_size, num_batches})\n+        ->UseRealTime();\n+  }\n+}\n+\n+/*\n+should be able to vary\n+1. batch size\n+2. expression complexity\n+*/\n+static void ExecuteScalarProjectionOverhead(benchmark::State& state, Expression expr) {\n+  const auto batch_size = static_cast<int32_t>(state.range(0));\n+  const auto num_batches = static_cast<int32_t>(state.range(1));\n+\n+  auto data = MakeRandomBatches(schema({field(\"i64\", int64()), field(\"bool\", boolean())}),\n+                                num_batches, batch_size);\n+  ExecContext ctx;\n+\n+  for (auto _ : state) {\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    // CountOptions options(CountOptions::ONLY_VALID);\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\",\n+                       SourceNodeOptions{data.schema,\n+                                         data.gen(/*parallel=*/false, /*slow=*/false)},\n+                       \"custom_source_label\"},\n+                      {\"project\", ProjectNodeOptions{{\n+                                      field_ref(\"bool\"),\n+                                      expr,\n+                                  }}},\n+                      {\"sink\", SinkNodeOptions{&sink_gen}, \"custom_sink_label\"},\n+                  })\n+                  .AddToPlan(plan.get()));\n+    ASSERT_FINISHES_OK(StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   That looks like the right steps.  If you push your changes I can maybe help debug the segfaults.\n\n\n\n",
                    "created": "2022-06-06T22:07:09.448+0000",
                    "updated": "2022-06-06T22:07:09.448+0000",
                    "started": "2022-06-06T22:07:09.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778773",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/778774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#discussion_r890607751\n\n\n##########\ncpp/src/arrow/compute/exec/project_benchmark.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/test_util.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/generator.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static constexpr int64_t total_batch_size = 1e5;\n+\n+void SetArgs(benchmark::internal::Benchmark* bench) {\n+  bench->ArgNames({\"batch_size\"})\n+      ->RangeMultiplier(10)\n+      ->Range(1, total_batch_size)\n+      ->DenseThreadRange(1, std::thread::hardware_concurrency(),\n+                         std::thread::hardware_concurrency())\n\nReview Comment:\n   If you do this...\r\n   ```\r\n     ExecContext ctx(default_memory_pool(), arrow::internal::GetCpuThreadPool());\r\n   ```\r\n   \r\n   ...then it will use one thread per core (i.e. `std::thread::hardware_concurrency`).  You can create your own thread pool if you need finer grained control over the number of threads (but I don't think that is necessary here).\n\n\n\n",
                    "created": "2022-06-06T22:08:19.412+0000",
                    "updated": "2022-06-06T22:08:19.412+0000",
                    "started": "2022-06-06T22:08:19.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778774",
                    "issueId": "13447995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/worklog/779123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on PR #13314:\nURL: https://github.com/apache/arrow/pull/13314#issuecomment-1148749327\n\n   Hi @westonpace, I was able to debug everything ",
                    "created": "2022-06-07T14:26:10.006+0000",
                    "updated": "2022-06-07T14:26:10.006+0000",
                    "started": "2022-06-07T14:26:10.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779123",
                    "issueId": "13447995"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7a08695f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24296f6d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17460960[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@78fb5ee2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40f7f5f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@f1bc16[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27dbb861[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5f5fe36[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ad2e33b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@774ef17b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dac4743[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@27020c8e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 10 17:14:09 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-10T17:14:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16716/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-06-01T18:30:43.000+0000",
        "updated": "2022-06-16T21:51:58.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13044691",
                "id": "13044691",
                "filename": "out",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                    "name": "ichauster",
                    "key": "JIRAUSER290345",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                    },
                    "displayName": "Ivan Chau",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2022-06-06T15:43:18.304+0000",
                "size": 9610,
                "mimeType": "text/html",
                "content": "https://issues.apache.org/jira/secure/attachment/13044691/out"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13044624",
                "id": "13044624",
                "filename": "out_expression",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                    "name": "ichauster",
                    "key": "JIRAUSER290345",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                    },
                    "displayName": "Ivan Chau",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2022-06-03T15:39:49.055+0000",
                "size": 8351,
                "mimeType": "text/html",
                "content": "https://issues.apache.org/jira/secure/attachment/13044624/out_expression"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Benchmarks] Create Projection benchmark for Acero",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/comment/17545087",
                    "id": "17545087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~ichauster] is an intern that is going to work on Acero benchmarks. I talked to @Weston Pace offline and seems Projection is a good place to start.\r\n\r\nPasting [~westonpace] 's comments on this \"\r\n\u00a0* Presumably, for a complex expression, with a large enough batch\r\nsize, the majority of time will be spent in the kernel functions.\r\n\u00a0 \u00a0 * How far can you shrink the exec batch before the overhead of the\r\nnode impacts runtime?\r\n\u00a0 \u00a0 * How complex does the expression need to be?\r\n\u00a0* I expect the results to be very similar to\r\nExecuteScalarExpressionOverhead in expression_benchmark.cc.\u00a0 Is it?\r\nIf not, what is the difference?\r\n\u00a0* What is the data rate of the project node (in bytes/second) for all\r\nof the above?\r\n\u00a0* For all of the above run with both 1 thread and 1 thread per core\r\n\r\nThe ExecuteScalarExpressionOverhead benchmarks would be a good\r\nexisting example that should be pretty similar to how we benchmark\r\nproject node.\r\n!https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif!\r\n\"",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-01T18:32:42.877+0000",
                    "updated": "2022-06-01T18:32:42.877+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/comment/17546060",
                    "id": "17546060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                        "name": "ichauster",
                        "key": "JIRAUSER290345",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Ivan Chau",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi [~westonpace], it's nice to meet you!\r\n\r\nI've got a first draft of the benchmarks and have some clarification questions for you!\r\n\r\nI am working on pushing the code soon, but the current benchmark right now is processing 1e6 elements with varying batch size. The pipeline includes a source node, a projection node which contains a field_ref and an expression (we carry over the same expressions used in ExecuteScalarExpressionOverhead and vary them per run), and then a basic sink (no agg or ordering).\r\n\r\nI am currently using rows_per_second to measure performance, and I have found that they are not exactly the same as the ExecuteScalarExpressionOverhead, although the relative performance (comparing complex_expression vs simple_expression\u00a0 for a 2x speedup, for example), is very similar. This other overhead could be from the other `field_ref` operation I have in the projection, or the source/sink portions (I am not sure how hefty these are).\r\n\r\nHere are some of my follow-ups as I tune these benchmarks:\r\n * How do we isolate and find the performance of _only_ the project node rather than source/project/sink\r\n * How to measure the data rate, since it seems we are measuring in rows / batches.\r\n * I saw some examples of controlling the threads used in ExecuteScalarExpressionOverhead, how can we control threads per core?\r\n\r\nThank you! I will have the code up shortly.\r\n\r\n[^out]\r\n\r\n^[^out_expression]^",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                        "name": "ichauster",
                        "key": "JIRAUSER290345",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Ivan Chau",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-03T15:52:32.296+0000",
                    "updated": "2022-06-03T15:53:44.940+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/comment/17546086",
                    "id": "17546086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                        "name": "ichauster",
                        "key": "JIRAUSER290345",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Ivan Chau",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Here is the code! [https://github.com/apache/arrow/compare/master...iChauster:projection_benchmark?expand=1|http://example.com]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                        "name": "ichauster",
                        "key": "JIRAUSER290345",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Ivan Chau",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-03T16:05:28.481+0000",
                    "updated": "2022-06-03T16:05:28.481+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/comment/17550653",
                    "id": "17550653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                        "name": "ichauster",
                        "key": "JIRAUSER290345",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Ivan Chau",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi [~icexelloss] , I wrote this part of the code corresponding to Weston's review and have been running into some segfaults, I think pertaining to the `ExecNode* input` parameter. Do you see any smells / errors in logic here?\r\n\r\n*This is fixed now, just requires the addition of a sink.*\r\n{code:java}\r\nASSERT_OK_AND_ASSIGN(auto sn, MakeExecNode(\"source\", plan.get(), {}, SourceNodeOptions\r\n{data.schema, data.gen(/*parallel=*/true, /*slow=*/false)}\r\n)); // does source node need input? \r\nASSERT_OK_AND_ASSIGN(auto pn, MakeExecNode(\"project\", plan.get(), {sn}, ProjectNodeOptions{{\r\nexpr,\r\n}})); // {sn}, as the input is the source node\r\nstate.ResumeTiming();\r\npn->InputFinished(sn, num_batches); // segfault occurs on this line\r\nfor (auto b : data.batches)\r\n{ pn->InputReceived(sn, b); } // segfault occurs on this line, if the other faulting line is removed.\r\npn->finished();\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
                        "name": "ichauster",
                        "key": "JIRAUSER290345",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Ivan Chau",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-06T20:35:04.747+0000",
                    "updated": "2022-06-07T14:30:19.472+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447995/comment/17552870",
                    "id": "17552870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13314\n[https://github.com/apache/arrow/pull/13314]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-10T17:14:09.630+0000",
                    "updated": "2022-06-10T17:14:09.630+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z12vqo:",
        "customfield_12314139": null
    }
}