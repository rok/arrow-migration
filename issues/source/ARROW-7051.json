{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13265911",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911",
    "key": "ARROW-7051",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "beginner",
            "good-first-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12633378",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633378",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13427734",
                    "key": "ARROW-15643",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734",
                    "fields": {
                        "summary": "[C++] Kernel to select subset of fields of a StructArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 37200,
            "total": 37200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 37200,
            "total": 37200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7051/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 62,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/687726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas opened a new pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798\n\n\n   Refactor CreateEmptyArray and CreateEmptyChunkedArray, and create CreateEmptyRecordBatch and CreateEmptyTable.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-30T02:39:23.439+0000",
                    "updated": "2021-11-30T02:39:23.439+0000",
                    "started": "2021-11-30T02:39:23.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "687726",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/687727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#issuecomment-982225882\n\n\n   https://issues.apache.org/jira/browse/ARROW-7051\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-30T02:39:59.431+0000",
                    "updated": "2021-11-30T02:39:59.431+0000",
                    "started": "2021-11-30T02:39:59.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "687727",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/688023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r759292226\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -23,8 +23,11 @@\n \n #include \"arrow/array/util.h\"\n #include \"arrow/buffer.h\"\n+#include \"arrow/chunked_array.h\"\n #include \"arrow/compute/kernels/codegen_internal.h\"\n #include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/table.h\"\n\nReview comment:\n       nit: I think we should be able to forward-declare Array/RecordBatch/Table instead of including the headers (or include `arrow/type_fwd.h`), which would cut down on the headers that get (transitively) included.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-30T13:48:32.935+0000",
                    "updated": "2021-11-30T13:48:32.935+0000",
                    "started": "2021-11-30T13:48:32.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "688023",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/688034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r759282058\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.cc\n##########\n@@ -77,6 +77,41 @@ ArrayKernelExec TrivialScalarUnaryAsArraysExec(ArrayKernelExec exec,\n   };\n }\n \n+Result<std::shared_ptr<Array>> CreateEmptyArray(std::shared_ptr<DataType> type,\n+                                                MemoryPool* memory_pool) {\n+  std::unique_ptr<ArrayBuilder> builder;\n+  RETURN_NOT_OK(MakeBuilder(memory_pool, type, &builder));\n+  RETURN_NOT_OK(builder->Resize(0));\n+  return builder->Finish();\n+}\n+\n+Result<std::shared_ptr<ChunkedArray>> CreateEmptyChunkedArray(\n+    std::shared_ptr<DataType> type, MemoryPool* memory_pool) {\n+  std::vector<std::shared_ptr<Array>> new_chunks(1);  // Hard-coded 1 for now\n\nReview comment:\n       This comment is not needed anymore\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -161,6 +164,21 @@ int64_t CopyNonNullValues(const Datum& datum, T* out) {\n   return n;\n }\n \n+//--------------------------------------------------------------------------\n+// An internal function to create an empty array, chucked array, record batch and table.\n+\n\nReview comment:\n       Try to improve documentation of these utilify functions here and use the same code style for documentation and add specific documentation for each function,   See example here https://github.com/apache/arrow/blob/41df46e3106847f81ba032e219c2854df11bbd45/cpp/src/arrow/compute/api_vector.h#L249\r\n   \r\n   Try to add some context, for example functions that would use  these functions, where they would be need to use, and in general why they need to be in the utility functions. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-30T14:01:14.032+0000",
                    "updated": "2021-11-30T14:01:14.032+0000",
                    "started": "2021-11-30T14:01:14.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "688034",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/689202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r761004032\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -161,6 +164,21 @@ int64_t CopyNonNullValues(const Datum& datum, T* out) {\n   return n;\n }\n \n+//--------------------------------------------------------------------------\n+// An internal function to create an empty array, chucked array, record batch and table.\n+\n+Result<std::shared_ptr<Array>> CreateEmptyArray(std::shared_ptr<DataType> type,\n+                                                MemoryPool* memory_pool);\n\nReview comment:\n       1) Is there a reason these functions are in `compute/kernels/util_internal.h` rather than public APIs? These could go in the respective public headers, such as `array/util.h`, `chunked_array.h`, etc.\r\n   \r\n   2) We generally use \"Make\" rather than \"Create\" when naming factory functions (e.g. \"MakeArrayOfNull\"), can you reuse the same convention here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T11:30:15.335+0000",
                    "updated": "2021-12-02T11:30:15.335+0000",
                    "started": "2021-12-02T11:30:15.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689202",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/689416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r761222875\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -161,6 +164,21 @@ int64_t CopyNonNullValues(const Datum& datum, T* out) {\n   return n;\n }\n \n+//--------------------------------------------------------------------------\n+// An internal function to create an empty array, chucked array, record batch and table.\n+\n+Result<std::shared_ptr<Array>> CreateEmptyArray(std::shared_ptr<DataType> type,\n+                                                MemoryPool* memory_pool);\n\nReview comment:\n       1. Not really. We can move these functions to their public APIs.\r\n   2. Yes, I can rename them. They would be MakeEmptyArray, MakeEmptyChukedArray, MakeEmptyRecordBatch and MakeEmptyTable.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T15:45:45.893+0000",
                    "updated": "2021-12-02T15:45:45.893+0000",
                    "started": "2021-12-02T15:45:45.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689416",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/689423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r761231125\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -23,8 +23,11 @@\n \n #include \"arrow/array/util.h\"\n #include \"arrow/buffer.h\"\n+#include \"arrow/chunked_array.h\"\n #include \"arrow/compute/kernels/codegen_internal.h\"\n #include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/table.h\"\n\nReview comment:\n       I've already tried to include \"arrow/type_fwd.h\", but I got a message that says that classes have incomplete types and I can't use their methods.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T15:54:05.076+0000",
                    "updated": "2021-12-02T15:54:05.076+0000",
                    "started": "2021-12-02T15:54:05.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689423",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/689426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r761233262\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -23,8 +23,11 @@\n \n #include \"arrow/array/util.h\"\n #include \"arrow/buffer.h\"\n+#include \"arrow/chunked_array.h\"\n #include \"arrow/compute/kernels/codegen_internal.h\"\n #include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/table.h\"\n\nReview comment:\n       Ah, sorry for the confusion - while, as suggested below, these functions will be moved, what would be done here is: \r\n   1. `#include \"arrow/type_fwd.h\"` inside `util_internal.h`\r\n   2. `#include \"arrow/record_batch.h\"` etc. inside `util_internal.cc`\r\n   \r\n   The motivation is just not to leak the includes to other users of the header, but of course in the implementation we still need the full include.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T15:56:14.561+0000",
                    "updated": "2021-12-02T15:56:14.561+0000",
                    "started": "2021-12-02T15:56:14.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689426",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/689431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#discussion_r761236152\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/util_internal.h\n##########\n@@ -23,8 +23,11 @@\n \n #include \"arrow/array/util.h\"\n #include \"arrow/buffer.h\"\n+#include \"arrow/chunked_array.h\"\n #include \"arrow/compute/kernels/codegen_internal.h\"\n #include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/table.h\"\n\nReview comment:\n       Oh, I got it. I understand it better now, thanks.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T15:58:59.493+0000",
                    "updated": "2021-12-02T15:58:59.493+0000",
                    "started": "2021-12-02T15:58:59.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689431",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/689575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on pull request #11798:\nURL: https://github.com/apache/arrow/pull/11798#issuecomment-984944459\n\n\n   Hi, everyone. Thanks for your feedback. I updated this PR, and I think it's ready for final review/merging. Let me know if anything needs to be taken care of from my end. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T19:41:58.599+0000",
                    "updated": "2021-12-02T19:41:58.599+0000",
                    "started": "2021-12-02T19:41:58.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689575",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/706394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten opened a new pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116\n\n\n   Add memory-optimized logic to create immutable buffers filled with zeros as MakeArrayOfNull, by reusing them at the MemoryPool level rather than only at Array level. Includes an additional optimization for Linux that uses mmap to generate read-only zero buffers that, depending on the implementation in the kernel and the architecture, might not cost physical memory at all and/or do the zeroing operation lazily.\r\n   \r\n   Draft for now; tests still fail, but the general implementation is there.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T19:16:43.348+0000",
                    "updated": "2022-01-10T19:16:43.348+0000",
                    "started": "2022-01-10T19:16:43.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706394",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/706395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#issuecomment-1009261823\n\n\n   https://issues.apache.org/jira/browse/ARROW-7051\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T19:17:16.598+0000",
                    "updated": "2022-01-10T19:17:16.598+0000",
                    "started": "2022-01-10T19:17:16.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706395",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/723668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r802665698\n\n\n\n##########\nFile path: cpp/src/arrow/array/util.h\n##########\n@@ -37,7 +37,20 @@ namespace arrow {\n ARROW_EXPORT\n std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data);\n \n-/// \\brief Create a strongly-typed Array instance with all elements null\n+/// \\brief Create a strongly-typed mutable Array instance with all elements initially set\n+/// to null\n+/// \\param[in] type the array type \\param[in] length the array length\n+/// \\param[in] pool the memory pool to allocate memory from\n+ARROW_EXPORT\n+Result<std::shared_ptr<Array>> MakeMutableArrayOfNull(\n+    const std::shared_ptr<DataType>& type, int64_t length,\n+    MemoryPool* pool = default_memory_pool());\n+\n+/// \\brief Create a strongly-typed immutable Array instance with all elements null\n+///\n+/// This function may reuse a single zero buffer, but may also defer to\n+/// MakeArrayOfNull().\n\nReview comment:\n       was this meant to be MakeMutableArrayOfNull? it sounds a little odd for a function to defer to itself\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,151 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of ImmutableNullArrayFactory\n+class NullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ * scalar_size_bits + 7) / 8, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  static Result<std::shared_ptr<Buffer>> CreateEmptyBuffer() { return AllocateBuffer(0); }\n+\n+ public:\n+  NullArrayFactory(MemoryPool* pool, const std::shared_ptr<DataType>& type,\n+                   int64_t length)\n+      : pool_(pool), type_(type), length_(length) {}\n+\n+  Result<std::shared_ptr<ArrayData>> Create() {\n+    std::vector<std::shared_ptr<ArrayData>> child_data(type_->num_fields());\n+    ARROW_ASSIGN_OR_RAISE(auto validity, CreateZeroBitBuffer(1));\n+    out_ = ArrayData::Make(type_, length_, {validity}, child_data, length_, 0);\n+    RETURN_NOT_OK(VisitTypeInline(*type_, this));\n+    return out_;\n+  }\n+\n+  Status Visit(const NullType&) {\n+    out_->buffers.resize(1, nullptr);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const FixedWidthType& type) {\n+    out_->buffers.resize(2);\n+    // values\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1], CreateZeroBitBuffer(type.bit_width()));\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  enable_if_base_binary<T, Status> Visit(const T&) {\n+    out_->buffers.resize(3);\n+    // offsets\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1],\n+                          CreateZeroOffsetBuffer(sizeof(typename T::offset_type)));\n+    // values\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[2], CreateEmptyBuffer());\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  enable_if_var_size_list<T, Status> Visit(const T& type) {\n+    out_->buffers.resize(2);\n+    // offsets\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1],\n+                          CreateZeroOffsetBuffer(sizeof(typename T::offset_type)));\n+    // values\n+    ARROW_ASSIGN_OR_RAISE(out_->child_data[0], CreateChild(type, 0, /*length=*/0));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const FixedSizeListType& type) {\n+    ARROW_ASSIGN_OR_RAISE(out_->child_data[0],\n+                          CreateChild(type, 0, length_ * type.list_size()));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructType& type) {\n+    for (int i = 0; i < type_->num_fields(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(out_->child_data[i], CreateChild(type, i, length_));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionType& type) {\n+    out_->buffers.resize(2);\n+\n+    // First buffer is always null\n+    out_->buffers[0] = nullptr;\n+\n+    // type ID buffer\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1], AllocateBuffer(length_, pool_));\n+    std::memset(out_->buffers[1]->mutable_data(), type.type_codes()[0], length_);\n+\n+    // For sparse unions, we now create children with the same length as the\n+    // parent\n+    int64_t child_length = length_;\n+    if (type.mode() == UnionMode::DENSE) {\n+      // For dense unions, we set the offsets to all zero and create children\n+      // with length 1\n+      out_->buffers.resize(3);\n+      ARROW_ASSIGN_OR_RAISE(out_->buffers[2], CreateZeroByteBuffer(sizeof(int32_t)));\n+\n+      child_length = 1;\n+    }\n+    for (int i = 0; i < type_->num_fields(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(out_->child_data[i], CreateChild(type, i, child_length));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& type) {\n+    out_->buffers.resize(2);\n+    // dictionary indices\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1], CreateZeroBitBuffer(type.bit_width()));\n+    // dictionary data\n+    ARROW_ASSIGN_OR_RAISE(auto typed_null_dict, MakeArrayOfNull(type.value_type(), 0));\n+    out_->dictionary = typed_null_dict->data();\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ExtensionType& type) {\n+    out_->child_data.resize(type.storage_type()->num_fields());\n+    RETURN_NOT_OK(VisitTypeInline(*type.storage_type(), this));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DataType& type) {\n+    return Status::NotImplemented(\"construction of all-null \", type);\n+  }\n+\n+  Result<std::shared_ptr<ArrayData>> CreateChild(const DataType& type, int i,\n+                                                 int64_t length) {\n+    ImmutableNullArrayFactory child_factory(pool_, type.field(i)->type(), length);\n\nReview comment:\n       Should the child also use NullArrayFactory?\n\n##########\nFile path: cpp/src/arrow/memory_pool.h\n##########\n@@ -63,6 +63,42 @@ class MemoryPoolStats {\n /// take care of the required 64-byte alignment.\n class ARROW_EXPORT MemoryPool {\n  public:\n+  class ARROW_EXPORT ImmutableZeros {\n\nReview comment:\n       I'm probably missing something, but why is the existing Buffer interface not sufficient for this?\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,151 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of ImmutableNullArrayFactory\n+class NullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ * scalar_size_bits + 7) / 8, pool_));\n\nReview comment:\n       Could use BytesForBits here: https://github.com/apache/arrow/blob/d59dbbc36c7950e58332d081d47c2d43ea898215/cpp/src/arrow/util/bit_util.h#L82-L86\n\n##########\nFile path: cpp/src/arrow/array/util.h\n##########\n@@ -46,7 +59,20 @@ Result<std::shared_ptr<Array>> MakeArrayOfNull(const std::shared_ptr<DataType>&\n                                                int64_t length,\n                                                MemoryPool* pool = default_memory_pool());\n \n-/// \\brief Create an Array instance whose slots are the given scalar\n+/// \\brief Create a mutable Array instance whose slots are initialized with the given\n+/// scalar\n+/// \\param[in] scalar the value with which to fill the array\n+/// \\param[in] length the array length\n+/// \\param[in] pool the memory pool to allocate memory from\n+ARROW_EXPORT\n+Result<std::shared_ptr<Array>> MakeMutableArrayFromScalar(\n+    const Scalar& scalar, int64_t length, MemoryPool* pool = default_memory_pool());\n+\n+/// \\brief Create an immutable Array instance whose slots are set to the given scalar\n+///\n+/// This function may reuse buffers if they contain the same (repeated) value to save\n+/// memory, but may also defer to MakeArrayFromScalar().\n\nReview comment:\n       ditto here - was this meant to be MakeMutableArrayFromScalar?\n\n##########\nFile path: cpp/src/arrow/memory_pool.h\n##########\n@@ -109,6 +157,14 @@ class ARROW_EXPORT MemoryPool {\n \n  protected:\n   MemoryPool() = default;\n+\n+  /// Free a memory region allocated by GetImmutableZeros().\n+  ///\n+  /// @param buffer Pointer to the start of the allocated memory region\n+  /// @param size Allocated size located at buffer. An allocator implementation\n\nReview comment:\n       nit, but most docstrings use \\param syntax\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-09T13:50:20.580+0000",
                    "updated": "2022-02-09T13:50:20.580+0000",
                    "started": "2022-02-09T13:50:20.579+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "723668",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/723740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r802807048\n\n\n\n##########\nFile path: cpp/src/arrow/array/util.h\n##########\n@@ -37,7 +37,20 @@ namespace arrow {\n ARROW_EXPORT\n std::shared_ptr<Array> MakeArray(const std::shared_ptr<ArrayData>& data);\n \n-/// \\brief Create a strongly-typed Array instance with all elements null\n+/// \\brief Create a strongly-typed mutable Array instance with all elements initially set\n+/// to null\n+/// \\param[in] type the array type \\param[in] length the array length\n+/// \\param[in] pool the memory pool to allocate memory from\n+ARROW_EXPORT\n+Result<std::shared_ptr<Array>> MakeMutableArrayOfNull(\n+    const std::shared_ptr<DataType>& type, int64_t length,\n+    MemoryPool* pool = default_memory_pool());\n+\n+/// \\brief Create a strongly-typed immutable Array instance with all elements null\n+///\n+/// This function may reuse a single zero buffer, but may also defer to\n+/// MakeArrayOfNull().\n\nReview comment:\n       Yeah, it was. I was on the fence about whether `MakeArrayOfNull()` should be the immutable or mutable variant and refactored it once or twice, eventually choosing the former since most existing users of the function didn't need mutability. I guess that one slipped through the cracks. e878edb\n\n##########\nFile path: cpp/src/arrow/array/util.h\n##########\n@@ -46,7 +59,20 @@ Result<std::shared_ptr<Array>> MakeArrayOfNull(const std::shared_ptr<DataType>&\n                                                int64_t length,\n                                                MemoryPool* pool = default_memory_pool());\n \n-/// \\brief Create an Array instance whose slots are the given scalar\n+/// \\brief Create a mutable Array instance whose slots are initialized with the given\n+/// scalar\n+/// \\param[in] scalar the value with which to fill the array\n+/// \\param[in] length the array length\n+/// \\param[in] pool the memory pool to allocate memory from\n+ARROW_EXPORT\n+Result<std::shared_ptr<Array>> MakeMutableArrayFromScalar(\n+    const Scalar& scalar, int64_t length, MemoryPool* pool = default_memory_pool());\n+\n+/// \\brief Create an immutable Array instance whose slots are set to the given scalar\n+///\n+/// This function may reuse buffers if they contain the same (repeated) value to save\n+/// memory, but may also defer to MakeArrayFromScalar().\n\nReview comment:\n       Also in e878edb\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-09T15:46:32.545+0000",
                    "updated": "2022-02-09T15:46:32.545+0000",
                    "started": "2022-02-09T15:46:32.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "723740",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/723771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r802858907\n\n\n\n##########\nFile path: cpp/src/arrow/memory_pool.h\n##########\n@@ -109,6 +157,14 @@ class ARROW_EXPORT MemoryPool {\n \n  protected:\n   MemoryPool() = default;\n+\n+  /// Free a memory region allocated by GetImmutableZeros().\n+  ///\n+  /// @param buffer Pointer to the start of the allocated memory region\n+  /// @param size Allocated size located at buffer. An allocator implementation\n\nReview comment:\n       Oops, I think my editor is configured to autocomplete using `@param` and I just didn't notice. a551146\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,151 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of ImmutableNullArrayFactory\n+class NullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ * scalar_size_bits + 7) / 8, pool_));\n\nReview comment:\n       Changed in 689a8af\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-09T16:30:52.971+0000",
                    "updated": "2022-02-09T16:30:52.971+0000",
                    "started": "2022-02-09T16:30:52.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "723771",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/723773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r802860477\n\n\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,151 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of ImmutableNullArrayFactory\n+class NullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ * scalar_size_bits + 7) / 8, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  static Result<std::shared_ptr<Buffer>> CreateEmptyBuffer() { return AllocateBuffer(0); }\n+\n+ public:\n+  NullArrayFactory(MemoryPool* pool, const std::shared_ptr<DataType>& type,\n+                   int64_t length)\n+      : pool_(pool), type_(type), length_(length) {}\n+\n+  Result<std::shared_ptr<ArrayData>> Create() {\n+    std::vector<std::shared_ptr<ArrayData>> child_data(type_->num_fields());\n+    ARROW_ASSIGN_OR_RAISE(auto validity, CreateZeroBitBuffer(1));\n+    out_ = ArrayData::Make(type_, length_, {validity}, child_data, length_, 0);\n+    RETURN_NOT_OK(VisitTypeInline(*type_, this));\n+    return out_;\n+  }\n+\n+  Status Visit(const NullType&) {\n+    out_->buffers.resize(1, nullptr);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const FixedWidthType& type) {\n+    out_->buffers.resize(2);\n+    // values\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1], CreateZeroBitBuffer(type.bit_width()));\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  enable_if_base_binary<T, Status> Visit(const T&) {\n+    out_->buffers.resize(3);\n+    // offsets\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1],\n+                          CreateZeroOffsetBuffer(sizeof(typename T::offset_type)));\n+    // values\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[2], CreateEmptyBuffer());\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  enable_if_var_size_list<T, Status> Visit(const T& type) {\n+    out_->buffers.resize(2);\n+    // offsets\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1],\n+                          CreateZeroOffsetBuffer(sizeof(typename T::offset_type)));\n+    // values\n+    ARROW_ASSIGN_OR_RAISE(out_->child_data[0], CreateChild(type, 0, /*length=*/0));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const FixedSizeListType& type) {\n+    ARROW_ASSIGN_OR_RAISE(out_->child_data[0],\n+                          CreateChild(type, 0, length_ * type.list_size()));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructType& type) {\n+    for (int i = 0; i < type_->num_fields(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(out_->child_data[i], CreateChild(type, i, length_));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionType& type) {\n+    out_->buffers.resize(2);\n+\n+    // First buffer is always null\n+    out_->buffers[0] = nullptr;\n+\n+    // type ID buffer\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1], AllocateBuffer(length_, pool_));\n+    std::memset(out_->buffers[1]->mutable_data(), type.type_codes()[0], length_);\n+\n+    // For sparse unions, we now create children with the same length as the\n+    // parent\n+    int64_t child_length = length_;\n+    if (type.mode() == UnionMode::DENSE) {\n+      // For dense unions, we set the offsets to all zero and create children\n+      // with length 1\n+      out_->buffers.resize(3);\n+      ARROW_ASSIGN_OR_RAISE(out_->buffers[2], CreateZeroByteBuffer(sizeof(int32_t)));\n+\n+      child_length = 1;\n+    }\n+    for (int i = 0; i < type_->num_fields(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(out_->child_data[i], CreateChild(type, i, child_length));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& type) {\n+    out_->buffers.resize(2);\n+    // dictionary indices\n+    ARROW_ASSIGN_OR_RAISE(out_->buffers[1], CreateZeroBitBuffer(type.bit_width()));\n+    // dictionary data\n+    ARROW_ASSIGN_OR_RAISE(auto typed_null_dict, MakeArrayOfNull(type.value_type(), 0));\n+    out_->dictionary = typed_null_dict->data();\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ExtensionType& type) {\n+    out_->child_data.resize(type.storage_type()->num_fields());\n+    RETURN_NOT_OK(VisitTypeInline(*type.storage_type(), this));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DataType& type) {\n+    return Status::NotImplemented(\"construction of all-null \", type);\n+  }\n+\n+  Result<std::shared_ptr<ArrayData>> CreateChild(const DataType& type, int i,\n+                                                 int64_t length) {\n+    ImmutableNullArrayFactory child_factory(pool_, type.field(i)->type(), length);\n\nReview comment:\n       Yes it does, good catch. In fact, it looks like I completely forgot to refactor this part of the code for mutable vs immutable as the implied version. Fixed in b30526c and then refactored in 21507bf.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-09T16:31:49.147+0000",
                    "updated": "2022-02-09T16:31:49.147+0000",
                    "started": "2022-02-09T16:31:49.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "723773",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/723777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r802865182\n\n\n\n##########\nFile path: cpp/src/arrow/memory_pool.h\n##########\n@@ -63,6 +63,42 @@ class MemoryPoolStats {\n /// take care of the required 64-byte alignment.\n class ARROW_EXPORT MemoryPool {\n  public:\n+  class ARROW_EXPORT ImmutableZeros {\n\nReview comment:\n       I think you're right, actually. My reasoning for introducing it was that I needed something to model shared ownership of a region of zero-allocated (virtual) memory for a bunch of Buffers (`ImmutableZerosPoolBuffer` specifically, as created using `MakeBufferOfZeros()`), so some RAII object inside a `shared_ptr` would do the trick. I didn't even consider that that RAII object could also just be a Buffer implementation, with its implementation details hidden that way. It felt very wrong to define a public class for something this specific in such a prominent place to begin with, so I'm glad to get rid of it... The current `ImmutableZerosPoolBuffer` class could then be used much more generically for shared-ownership views of some buffer, unless that already exists (?), in which case I can just reuse that.\r\n   \r\n   I don't think I'll get around to refactoring this today, but I'll take a closer look tomorrow (and then rebase after that).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-09T16:35:53.976+0000",
                    "updated": "2022-02-09T16:35:53.976+0000",
                    "started": "2022-02-09T16:35:53.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "723777",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/724509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r803686136\n\n\n\n##########\nFile path: cpp/src/arrow/memory_pool.h\n##########\n@@ -63,6 +63,42 @@ class MemoryPoolStats {\n /// take care of the required 64-byte alignment.\n class ARROW_EXPORT MemoryPool {\n  public:\n+  class ARROW_EXPORT ImmutableZeros {\n\nReview comment:\n       Okay, `ImmutableZeros` now implements `Buffer` and has its implementation hidden.\r\n   \r\n   As I looked at the Buffer interface a bit better I also figured a specialized memory manager was probably in order, since these buffers have different, managed allocate operations. With that, I *think* the interface for using immutable zero CPU buffers is now fully symmetric to the one for regular, mutable CPU buffers.\r\n   \r\n   81aa078\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-10T13:42:37.639+0000",
                    "updated": "2022-02-10T13:42:37.639+0000",
                    "started": "2022-02-10T13:42:37.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "724509",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/726296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r805825245\n\n\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,152 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of NullArrayFactory, i.e. one that doesn't reuse a single buffer\n+class MutableNullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto buffer,\n+        AllocateBuffer(bit_util::BytesForBits(length_ * scalar_size_bits), pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  static Result<std::shared_ptr<Buffer>> CreateEmptyBuffer() { return AllocateBuffer(0); }\n\nReview comment:\n       nit: AllocateBuffer(0, pool_)?\n\n##########\nFile path: cpp/src/arrow/device.h\n##########\n@@ -223,4 +236,53 @@ class ARROW_EXPORT CPUMemoryManager : public MemoryManager {\n ARROW_EXPORT\n std::shared_ptr<MemoryManager> default_cpu_memory_manager();\n \n+/// A memory manager that uses the immutable zeros interface of the given memory pool,\n+/// rather than the normal mutable buffer interface.\n+class ARROW_EXPORT CPUImmutableZerosMemoryManager : public MemoryManager {\n\nReview comment:\n       Additionally, I don't see `is_mutable` overridden. But if it's not overridden, is it useful to have?\n\n##########\nFile path: cpp/src/arrow/device.h\n##########\n@@ -223,4 +236,53 @@ class ARROW_EXPORT CPUMemoryManager : public MemoryManager {\n ARROW_EXPORT\n std::shared_ptr<MemoryManager> default_cpu_memory_manager();\n \n+/// A memory manager that uses the immutable zeros interface of the given memory pool,\n+/// rather than the normal mutable buffer interface.\n+class ARROW_EXPORT CPUImmutableZerosMemoryManager : public MemoryManager {\n\nReview comment:\n       Couldn't this be placed inside device.cc instead?\n\n##########\nFile path: cpp/src/arrow/device.h\n##########\n@@ -223,4 +236,53 @@ class ARROW_EXPORT CPUMemoryManager : public MemoryManager {\n ARROW_EXPORT\n std::shared_ptr<MemoryManager> default_cpu_memory_manager();\n \n+/// A memory manager that uses the immutable zeros interface of the given memory pool,\n+/// rather than the normal mutable buffer interface.\n+class ARROW_EXPORT CPUImmutableZerosMemoryManager : public MemoryManager {\n\nReview comment:\n       We could also check `Buffer::is_mutable` in `CopyBufferTo` instead above.\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,152 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of NullArrayFactory, i.e. one that doesn't reuse a single buffer\n+class MutableNullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto buffer,\n+        AllocateBuffer(bit_util::BytesForBits(length_ * scalar_size_bits), pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  static Result<std::shared_ptr<Buffer>> CreateEmptyBuffer() { return AllocateBuffer(0); }\n+\n+ public:\n+  MutableNullArrayFactory(MemoryPool* pool, const std::shared_ptr<DataType>& type,\n+                          int64_t length)\n+      : pool_(pool), type_(type), length_(length) {}\n+\n+  Result<std::shared_ptr<ArrayData>> Create() {\n+    std::vector<std::shared_ptr<ArrayData>> child_data(type_->num_fields());\n+    ARROW_ASSIGN_OR_RAISE(auto validity, CreateZeroBitBuffer(1));\n+    out_ = ArrayData::Make(type_, length_, {validity}, child_data, length_, 0);\n+    RETURN_NOT_OK(VisitTypeInline(*type_, this));\n+    return out_;\n+  }\n+\n+  Status Visit(const NullType&) {\n+    out_->buffers.resize(1, nullptr);\n\nReview comment:\n       Hmm, should this be `out_->buffers.resize(0)` since a NullArray has no buffers?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-14T13:24:37.093+0000",
                    "updated": "2022-02-14T13:24:37.093+0000",
                    "started": "2022-02-14T13:24:37.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726296",
                    "issueId": "13265911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/worklog/726316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on a change in pull request #12116:\nURL: https://github.com/apache/arrow/pull/12116#discussion_r805892998\n\n\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -534,6 +533,152 @@ class NullArrayFactory {\n   std::shared_ptr<Buffer> buffer_;\n };\n \n+// mutable version of NullArrayFactory, i.e. one that doesn't reuse a single buffer\n+class MutableNullArrayFactory {\n+ private:\n+  Result<std::shared_ptr<Buffer>> CreateZeroByteBuffer(size_t scalar_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer(length_ * scalar_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroOffsetBuffer(size_t index_size_bytes) const {\n+    ARROW_ASSIGN_OR_RAISE(auto buffer,\n+                          AllocateBuffer((length_ + 1) * index_size_bytes, pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  Result<std::shared_ptr<Buffer>> CreateZeroBitBuffer(size_t scalar_size_bits) const {\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto buffer,\n+        AllocateBuffer(bit_util::BytesForBits(length_ * scalar_size_bits), pool_));\n+    std::memset(buffer->mutable_data(), 0, buffer->size());\n+    return std::shared_ptr<Buffer>(std::move(buffer));\n+  }\n+\n+  static Result<std::shared_ptr<Buffer>> CreateEmptyBuffer() { return AllocateBuffer(0); }\n\nReview comment:\n       a4c3413\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-14T14:24:52.042+0000",
                    "updated": "2022-02-14T14:24:52.042+0000",
                    "started": "2022-02-14T14:24:52.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726316",
                    "issueId": "13265911"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 37200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@636d1695[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43414ea8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10a06c36[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@59dd5484[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ef3f07e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@15495243[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69b5d00[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@35514023[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34a036f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6ba4b16a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@378b9243[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@8649cc9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 37200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:24 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7051/watchers",
            "watchCount": 6,
            "isWatching": true
        },
        "created": "2019-11-02T18:05:06.000+0000",
        "updated": "2022-07-18T09:26:17.000+0000",
        "timeoriginalestimate": null,
        "description": "MakeArrayOfNull reuses a single buffer of {{0}} for all buffers in the array it creates. It could be extended to reuse that same buffer for all buffers in multiple arrays. This optimization will make RecordBatchProjector and ConcatenateTablesWithPromotion more memory efficient",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 37200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve MakeArrayOfNull to support creation of multiple arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17394141",
                    "id": "17394141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Another approach would be to define a separate function that caches power-of-two-sized buffers of zeros:\r\n{code:c++}\r\n/// Make read-only buffer of zeros\r\nResult<std::shared_ptr<Buffer>> MakeBufferOfZeros(int64_t length);\r\n{code}\r\n\r\nThe two approaches might be combined for maximum efficiency...",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-05T15:53:32.285+0000",
                    "updated": "2021-08-05T15:53:32.285+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17397450",
                    "id": "17397450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
                        "name": "aocsa",
                        "key": "aocsa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
                        },
                        "displayName": "Alexander Ocsa",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "More context:\r\n\r\n[https://github.com/apache/arrow/pull/10802#discussion_r684345342]\u00a0\r\n\r\n\u00a0\r\n\r\n>\u00a0\r\nThis seems like a very useful utility function. I wonder if we want to put it somewhere more visible. There could be a CreateEmptyRecordBatch and CreateEmptyTable too. Can be done in a follow-up PR.\r\n!https://github.githubassets.com/images/icons/emoji/unicode/1f440.png|width=20,height=20! \u00a01\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
                        "name": "aocsa",
                        "key": "aocsa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
                        },
                        "displayName": "Alexander Ocsa",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-11T16:10:16.524+0000",
                    "updated": "2021-08-11T16:10:16.524+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17448170",
                    "id": "17448170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~aocsa] Do you still want to do this? Otherwise please unassign to let others know that they can take it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-11-23T18:07:46.409+0000",
                    "updated": "2021-11-23T18:07:46.409+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17448232",
                    "id": "17448232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
                        "name": "aocsa",
                        "key": "aocsa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
                        },
                        "displayName": "Alexander Ocsa",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Sure,\u00a0 this is a\u00a0[good-first-issue|https://issues.apache.org/jira/issues/?jql=labels+%3D+good-first-issue] and I will recommend to do this to one of the new interns\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
                        "name": "aocsa",
                        "key": "aocsa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
                        },
                        "displayName": "Alexander Ocsa",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-11-23T19:17:51.128+0000",
                    "updated": "2021-11-23T19:17:51.128+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17470504",
                    "id": "17470504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I'll look at this for one of my first issues.\r\n\r\nIdea: can we use mmap for this? On my machine anyway, mmap'ing a read-only, anonymous, and private region will give fully zeroed virtual memory where (I guess) all pages are mapped to the same physical page, or maybe some x86 MMU tricks are done to avoid even that. In any case, the following code results in no physical memory being allocated at all (not even a single 4kiB page, apparently):\r\n{code:java|title=zero.c|borderStyle=solid}\r\n#include <sys/mman.h>\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    char *addr;\r\n    const size_t length = 1024ull*1024*1024*64; // 64 GiB, more memory than my machine has\r\n    addr = (char*)mmap(0, length, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_NORESERVE, -1, 0);\r\n    if (!addr) {\r\n        perror(\"mmap\");\r\n        return 1;\r\n    }\r\n\r\n    // Just to force the kernel to populate the page table by having the CPU read from every page in the mapping:\r\n    size_t pos = 0;\r\n    char total = 0;\r\n    while (pos < length) {\r\n        total += addr[pos];\r\n        pos += 4096; // page size\r\n    }\r\n    printf(\"total: %d (should be 0)\\n\", (int)total);\r\n\r\n    // Wait for input so resource usage can be inspected.\r\n    getchar();\r\n\r\n    munmap(addr, length);\r\n}\r\n{code}\r\n\r\nAlso:\r\n\r\n - CPU cache layers using physical addressing will not be filled with useless zeros.\r\n - If anything tries to write to the zeroed region, the application will immediately crash, rather than continuing with broken invariants.\r\n\r\nThe only problem I see is that I don't know how portable this is, if at all. But of course a fallback to some form of malloc + memset can always be done at compile time.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-01-07T10:23:39.105+0000",
                    "updated": "2022-01-07T10:23:39.105+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17470513",
                    "id": "17470513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Well... we could do system-specific optimizations, but I'm not sure it's useful to go to that level of optimization.\r\n\r\nAlso, as a counter-argument, note that {{mmap}} and {{munmap}} are system calls, so they have a non-trivial overhead: calling them on each buffer allocation would be counter-productive. {{calloc}} may give better results (or not).\r\n\r\nIf we do implement your idea, then it should be hidden behind an abstraction, for example on {{MemoryPool}}.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-01-07T10:33:39.727+0000",
                    "updated": "2022-01-07T10:33:39.727+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17470543",
                    "id": "17470543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I wouldn't call this for every buffer; I would do it in conjunction with the power-of-two size buffer size caching that you suggested in the first comment. But whether it's worth doing (and worth the additional maintenance), I don't know.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-01-07T11:14:21.715+0000",
                    "updated": "2022-01-07T11:14:21.715+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17472251",
                    "id": "17472251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "[~apitrou]: I made a draft implementation based on what I have in mind, see associated (draft) PR. Could you maybe have a look? I'm wondering what you think of/whether you'd agree to this approach, or if it's just too overkill for what it's doing.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-01-10T19:26:20.529+0000",
                    "updated": "2022-01-10T19:26:20.529+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17477904",
                    "id": "17477904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "As it turns out, at least some of the functions using {{MakeArrayOfNull()}} are mutating the resulting array (it should go without saying that this is a good way to create garbage when different kinds of buffers share the same bit of memory), as evidenced by the tests failing now that the new implementation just so happens to actually return {{Buffers}} that are marked as immutable. There was no documentation in the header about the result of {{MakeArrayOfNull()}} being immutable, so this is not really surprising. The same is probably true for {{MakeArrayFromScalar()}}, which calls {{MakeArrayOfNull()}} in some special cases.\r\n\r\nI've now made separate versions of {{MakeArrayOfNull()}} and {{MakeArrayFromScalar()}} for mutable and immutable use cases, and am slowly trying to figure out which of the invocations need the array to be mutable and which don't. I'm also replacing {{MakeArrayOfNull(type, /\\*length=\\*/0)}} invocations with {{MakeEmptyArray(type)}}, which seems more suitable in those cases. I'm getting rather worried about poking around changing semantics all over Arrow without fully understanding Arrow first, though...",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-01-18T14:18:33.688+0000",
                    "updated": "2022-01-19T14:39:56.887+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17478055",
                    "id": "17478055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Hmm, which functions mutate the result array?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-01-18T17:12:27.398+0000",
                    "updated": "2022-01-18T17:12:27.398+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17478736",
                    "id": "17478736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Okay, this took far longer than it should have. I thought I had more test failures, but I guess those must have been unrelated, or I'm misremembering. In the end, the only problem seems to be that {{TrivialScalarUnaryAsArraysExec()}} [allocates an output buffer with {{MakeArrayFromScalar()}}|https://github.com/apache/arrow/blob/fd580db7573f56ef57bfa8ba97caa67e69a79ef6/cpp/src/arrow/compute/kernels/util_internal.cc#L73], and {{MakeArrayFromScalar()}} [uses {{MakeArrayOfNull()}} for a special case|https://github.com/apache/arrow/blob/fd580db7573f56ef57bfa8ba97caa67e69a79ef6/cpp/src/arrow/array/util.cc#L790]. At least, the test suite now passes for me locally.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-01-19T14:52:45.321+0000",
                    "updated": "2022-01-19T14:52:45.321+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911/comment/17565591",
                    "id": "17565591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:24.641+0000",
                    "updated": "2022-07-12T14:04:24.641+0000"
                }
            ],
            "maxResults": 12,
            "total": 12,
            "startAt": 0
        },
        "customfield_12311820": "0|z08788:",
        "customfield_12314139": null
    }
}