{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13472076",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076",
    "key": "ARROW-17106",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-first-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12645114",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12645114",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13475396",
                    "key": "ARROW-17320",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475396",
                    "fields": {
                        "summary": "[Python] Refine pyarrow.parquet API exposure",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
            "name": "milesgranger",
            "key": "JIRAUSER293894",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
            },
            "displayName": "Miles Granger",
            "active": true,
            "timeZone": "Europe/Oslo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=raulcd",
            "name": "raulcd",
            "key": "JIRAUSER287560",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Ra\u00fal Cumplido",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=raulcd",
            "name": "raulcd",
            "key": "JIRAUSER287560",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Ra\u00fal Cumplido",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17106/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger opened a new pull request, #13802:\nURL: https://github.com/apache/arrow/pull/13802\n\n   Will close [ARROW-17106](https://issues.apache.org/jira/browse/ARROW-17106)\r\n   \r\n   Moves all current code in `pyarrow/parquet/__init__.py` to `pyarrow/parquet/core.py` and re-exports the public API from core.py inside of the init file.\n\n\n",
                    "created": "2022-08-05T07:55:18.088+0000",
                    "updated": "2022-08-05T07:55:18.088+0000",
                    "started": "2022-08-05T07:55:18.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798308",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1206157390\n\n   https://issues.apache.org/jira/browse/ARROW-17106\n\n\n",
                    "created": "2022-08-05T07:55:38.267+0000",
                    "updated": "2022-08-05T07:55:38.267+0000",
                    "started": "2022-08-05T07:55:38.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798310",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1206393981\n\n   Opened [ARROW-17320](https://issues.apache.org/jira/browse/ARROW-17320) to refine which symbols should be designated as private/public from `pyarrow.parquet`. For now, to keep same functionality, re-export all from `core.py`\n\n\n",
                    "created": "2022-08-05T12:32:48.093+0000",
                    "updated": "2022-08-05T12:32:48.093+0000",
                    "started": "2022-08-05T12:32:48.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798411",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1207961838\n\n   @github-actions crossbow submit -g python\n\n\n",
                    "created": "2022-08-08T10:46:07.454+0000",
                    "updated": "2022-08-08T10:46:07.454+0000",
                    "started": "2022-08-08T10:46:07.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798859",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1207982360\n\n   Revision: 5c81e45e87049f77c031bef53f3c7099f8de5cec\n   \n   Submitted crossbow builds: [ursacomputing/crossbow @ actions-474d060045](https://github.com/ursacomputing/crossbow/branches/all?query=actions-474d060045)\n   \n   |Task|Status|\n   |----|------|\n   |test-conda-python-3.10|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.10)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.10)|\n   |test-conda-python-3.7|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7)|\n   |test-conda-python-3.7-hdfs-2.9.2|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-hdfs-2.9.2)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-hdfs-2.9.2)|\n   |test-conda-python-3.7-hdfs-3.2.1|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-hdfs-3.2.1)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-hdfs-3.2.1)|\n   |test-conda-python-3.7-kartothek-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-kartothek-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-kartothek-latest)|\n   |test-conda-python-3.7-kartothek-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-kartothek-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-kartothek-master)|\n   |test-conda-python-3.7-pandas-0.24|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-pandas-0.24)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-pandas-0.24)|\n   |test-conda-python-3.7-pandas-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-pandas-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-pandas-latest)|\n   |test-conda-python-3.7-spark-v3.1.2|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.7-spark-v3.1.2)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.7-spark-v3.1.2)|\n   |test-conda-python-3.8|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.8)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.8)|\n   |test-conda-python-3.8-hypothesis|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.8-hypothesis)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.8-hypothesis)|\n   |test-conda-python-3.8-pandas-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.8-pandas-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.8-pandas-latest)|\n   |test-conda-python-3.8-pandas-nightly|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.8-pandas-nightly)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.8-pandas-nightly)|\n   |test-conda-python-3.8-spark-v3.2.0|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.8-spark-v3.2.0)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.8-spark-v3.2.0)|\n   |test-conda-python-3.9|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.9)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.9)|\n   |test-conda-python-3.9-dask-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.9-dask-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.9-dask-latest)|\n   |test-conda-python-3.9-dask-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.9-dask-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.9-dask-master)|\n   |test-conda-python-3.9-pandas-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.9-pandas-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.9-pandas-master)|\n   |test-conda-python-3.9-spark-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-474d060045-github-test-conda-python-3.9-spark-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-474d060045-github-test-conda-python-3.9-spark-master)|\n   |test-debian-11-python-3|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-474d060045-azure-test-debian-11-python-3)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-474d060045-azure-test-debian-11-python-3)|\n   |test-fedora-35-python-3|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-474d060045-azure-test-fedora-35-python-3)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-474d060045-azure-test-fedora-35-python-3)|\n   |test-ubuntu-20.04-python-3|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-474d060045-azure-test-ubuntu-20.04-python-3)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-474d060045-azure-test-ubuntu-20.04-python-3)|\n\n\n",
                    "created": "2022-08-08T11:07:06.280+0000",
                    "updated": "2022-08-08T11:07:06.280+0000",
                    "started": "2022-08-08T11:07:06.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798865",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1208042231\n\n   @github-actions crossbow submit -g python\n\n\n",
                    "created": "2022-08-08T12:07:41.626+0000",
                    "updated": "2022-08-08T12:07:41.626+0000",
                    "started": "2022-08-08T12:07:41.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798896",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1208054684\n\n   Revision: 8578c01d157abe251e76761eeb626d4cd957ae93\n   \n   Submitted crossbow builds: [ursacomputing/crossbow @ actions-db593693db](https://github.com/ursacomputing/crossbow/branches/all?query=actions-db593693db)\n   \n   |Task|Status|\n   |----|------|\n   |test-conda-python-3.10|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.10)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.10)|\n   |test-conda-python-3.7|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7)|\n   |test-conda-python-3.7-hdfs-2.9.2|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-hdfs-2.9.2)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-hdfs-2.9.2)|\n   |test-conda-python-3.7-hdfs-3.2.1|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-hdfs-3.2.1)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-hdfs-3.2.1)|\n   |test-conda-python-3.7-kartothek-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-kartothek-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-kartothek-latest)|\n   |test-conda-python-3.7-kartothek-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-kartothek-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-kartothek-master)|\n   |test-conda-python-3.7-pandas-0.24|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-pandas-0.24)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-pandas-0.24)|\n   |test-conda-python-3.7-pandas-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-pandas-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-pandas-latest)|\n   |test-conda-python-3.7-spark-v3.1.2|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.7-spark-v3.1.2)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.7-spark-v3.1.2)|\n   |test-conda-python-3.8|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.8)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.8)|\n   |test-conda-python-3.8-hypothesis|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.8-hypothesis)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.8-hypothesis)|\n   |test-conda-python-3.8-pandas-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.8-pandas-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.8-pandas-latest)|\n   |test-conda-python-3.8-pandas-nightly|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.8-pandas-nightly)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.8-pandas-nightly)|\n   |test-conda-python-3.8-spark-v3.2.0|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.8-spark-v3.2.0)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.8-spark-v3.2.0)|\n   |test-conda-python-3.9|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.9)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.9)|\n   |test-conda-python-3.9-dask-latest|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.9-dask-latest)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.9-dask-latest)|\n   |test-conda-python-3.9-dask-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.9-dask-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.9-dask-master)|\n   |test-conda-python-3.9-pandas-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.9-pandas-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.9-pandas-master)|\n   |test-conda-python-3.9-spark-master|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-db593693db-github-test-conda-python-3.9-spark-master)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-db593693db-github-test-conda-python-3.9-spark-master)|\n   |test-debian-11-python-3|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-db593693db-azure-test-debian-11-python-3)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-db593693db-azure-test-debian-11-python-3)|\n   |test-fedora-35-python-3|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-db593693db-azure-test-fedora-35-python-3)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-db593693db-azure-test-fedora-35-python-3)|\n   |test-ubuntu-20.04-python-3|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-db593693db-azure-test-ubuntu-20.04-python-3)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-db593693db-azure-test-ubuntu-20.04-python-3)|\n\n\n",
                    "created": "2022-08-08T12:19:43.472+0000",
                    "updated": "2022-08-08T12:19:43.472+0000",
                    "started": "2022-08-08T12:19:43.471+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798907",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/798940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#discussion_r940235464\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -0,0 +1,3467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+from collections import defaultdict\n+from concurrent import futures\n+from functools import partial, reduce\n+\n+import sys\n+import inspect\n+import json\n+from collections.abc import Collection\n+import numpy as np\n+import os\n+import re\n+import operator\n+import urllib.parse\n+import warnings\n+\n+import pyarrow as pa\n+import pyarrow.lib as lib\n+import pyarrow._parquet as _parquet\n+\n+from pyarrow._parquet import (ParquetReader, Statistics,  # noqa\n+                              FileMetaData, RowGroupMetaData,\n+                              ColumnChunkMetaData,\n+                              ParquetSchema, ColumnSchema,\n+                              ParquetLogicalType,\n+                              FileEncryptionProperties,\n+                              FileDecryptionProperties)\n+from pyarrow.fs import (LocalFileSystem, FileSystem,\n+                        _resolve_filesystem_and_path, _ensure_filesystem)\n+from pyarrow import filesystem as legacyfs\n+from pyarrow.util import guid, _is_path_like, _stringify_path\n+\n+_URI_STRIP_SCHEMES = ('hdfs',)\n+\n+\n+def _parse_uri(path):\n+    path = _stringify_path(path)\n+    parsed_uri = urllib.parse.urlparse(path)\n+    if parsed_uri.scheme in _URI_STRIP_SCHEMES:\n+        return parsed_uri.path\n+    else:\n+        # ARROW-4073: On Windows returning the path with the scheme\n+        # stripped removes the drive letter, if any\n+        return path\n+\n+\n+def _get_filesystem_and_path(passed_filesystem, path):\n+    if passed_filesystem is None:\n+        return legacyfs.resolve_filesystem_and_path(path, passed_filesystem)\n+    else:\n+        passed_filesystem = legacyfs._ensure_filesystem(passed_filesystem)\n+        parsed_path = _parse_uri(path)\n+        return passed_filesystem, parsed_path\n+\n+\n+def _check_contains_null(val):\n+    if isinstance(val, bytes):\n+        for byte in val:\n+            if isinstance(byte, bytes):\n+                compare_to = chr(0)\n+            else:\n+                compare_to = 0\n+            if byte == compare_to:\n+                return True\n+    elif isinstance(val, str):\n+        return '\\x00' in val\n+    return False\n+\n+\n+def _check_filters(filters, check_null_strings=True):\n+    \"\"\"\n+    Check if filters are well-formed.\n+    \"\"\"\n+    if filters is not None:\n+        if len(filters) == 0 or any(len(f) == 0 for f in filters):\n+            raise ValueError(\"Malformed filters\")\n+        if isinstance(filters[0][0], str):\n+            # We have encountered the situation where we have one nesting level\n+            # too few:\n+            #   We have [(,,), ..] instead of [[(,,), ..]]\n+            filters = [filters]\n+        if check_null_strings:\n+            for conjunction in filters:\n+                for col, op, val in conjunction:\n+                    if (\n+                        isinstance(val, list) and\n+                        all(_check_contains_null(v) for v in val) or\n+                        _check_contains_null(val)\n+                    ):\n+                        raise NotImplementedError(\n+                            \"Null-terminated binary strings are not supported \"\n+                            \"as filter values.\"\n+                        )\n+    return filters\n+\n+\n+_DNF_filter_doc = \"\"\"Predicates are expressed in disjunctive normal form (DNF),\n+    like ``[[('x', '=', 0), ...], ...]``. DNF allows arbitrary boolean logical\n+    combinations of single column predicates. The innermost tuples each\n+    describe a single column predicate. The list of inner predicates is\n+    interpreted as a conjunction (AND), forming a more selective and multiple\n+    column predicate. Finally, the most outer list combines these filters as a\n+    disjunction (OR).\n+\n+    Predicates may also be passed as List[Tuple]. This form is interpreted\n+    as a single conjunction. To express OR in predicates, one must\n+    use the (preferred) List[List[Tuple]] notation.\n+\n+    Each tuple has format: (``key``, ``op``, ``value``) and compares the\n+    ``key`` with the ``value``.\n+    The supported ``op`` are:  ``=`` or ``==``, ``!=``, ``<``, ``>``, ``<=``,\n+    ``>=``, ``in`` and ``not in``. If the ``op`` is ``in`` or ``not in``, the\n+    ``value`` must be a collection such as a ``list``, a ``set`` or a\n+    ``tuple``.\n+\n+    Examples:\n+\n+    .. code-block:: python\n+\n+        ('x', '=', 0)\n+        ('y', 'in', ['a', 'b', 'c'])\n+        ('z', 'not in', {'a','b'})\n+\n+    \"\"\"\n+\n+\n+def _filters_to_expression(filters):\n+    \"\"\"\n+    Check if filters are well-formed.\n+\n+    See _DNF_filter_doc above for more details.\n+    \"\"\"\n+    import pyarrow.dataset as ds\n+\n+    if isinstance(filters, ds.Expression):\n+        return filters\n+\n+    filters = _check_filters(filters, check_null_strings=False)\n+\n+    def convert_single_predicate(col, op, val):\n+        field = ds.field(col)\n+\n+        if op == \"=\" or op == \"==\":\n+            return field == val\n+        elif op == \"!=\":\n+            return field != val\n+        elif op == '<':\n+            return field < val\n+        elif op == '>':\n+            return field > val\n+        elif op == '<=':\n+            return field <= val\n+        elif op == '>=':\n+            return field >= val\n+        elif op == 'in':\n+            return field.isin(val)\n+        elif op == 'not in':\n+            return ~field.isin(val)\n+        else:\n+            raise ValueError(\n+                '\"{0}\" is not a valid operator in predicates.'.format(\n+                    (col, op, val)))\n+\n+    disjunction_members = []\n+\n+    for conjunction in filters:\n+        conjunction_members = [\n+            convert_single_predicate(col, op, val)\n+            for col, op, val in conjunction\n+        ]\n+\n+        disjunction_members.append(reduce(operator.and_, conjunction_members))\n+\n+    return reduce(operator.or_, disjunction_members)\n+\n+\n+# ----------------------------------------------------------------------\n+# Reading a single Parquet file\n+\n+\n+class ParquetFile:\n+    \"\"\"\n+    Reader interface for a single Parquet file.\n+\n+    Parameters\n+    ----------\n+    source : str, pathlib.Path, pyarrow.NativeFile, or file-like object\n+        Readable source. For passing bytes or buffer-like file containing a\n+        Parquet file, use pyarrow.BufferReader.\n+    metadata : FileMetaData, default None\n+        Use existing metadata object, rather than reading from file.\n+    common_metadata : FileMetaData, default None\n+        Will be used in reads for pandas schema metadata if not found in the\n+        main file's metadata, no other uses at the moment.\n+    memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n+    buffer_size : int, default 0\n+        If positive, perform read buffering when deserializing individual\n+        column chunks. Otherwise IO calls are unbuffered.\n+    pre_buffer : bool, default False\n+        Coalesce and issue file reads in parallel to improve performance on\n+        high-latency filesystems (e.g. S3). If True, Arrow will use a\n+        background I/O thread pool.\n+    read_dictionary : list\n+        List of column names to read directly as DictionaryArray.\n+    coerce_int96_timestamp_unit : str, default None.\n+        Cast timestamps that are stored in INT96 format to a particular\n+        resolution (e.g. 'ms'). Setting to None is equivalent to 'ns'\n+        and therefore INT96 timestamps will be inferred as timestamps\n+        in nanoseconds.\n+    decryption_properties : FileDecryptionProperties, default None\n+        File decryption properties for Parquet Modular Encryption.\n+    thrift_string_size_limit : int, default None\n+        If not None, override the maximum total string size allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+    thrift_container_size_limit : int, default None\n+        If not None, override the maximum total size of containers allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+\n+    Examples\n+    --------\n+\n+    Generate an example PyArrow Table and write it to Parquet file:\n+\n+    >>> import pyarrow as pa\n+    >>> table = pa.table({'n_legs': [2, 2, 4, 4, 5, 100],\n+    ...                   'animal': [\"Flamingo\", \"Parrot\", \"Dog\", \"Horse\",\n+    ...                              \"Brittle stars\", \"Centipede\"]})\n+\n+    >>> import pyarrow.parquet as pq\n+    >>> pq.write_table(table, 'example.parquet')\n+\n+    Create a ``ParquetFile`` object from the Parquet file:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet')\n+\n+    Read the data:\n+\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: string\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [[\"Flamingo\",\"Parrot\",\"Dog\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Create a ParquetFile object with \"animal\" column as DictionaryArray:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet',\n+    ...                               read_dictionary=[\"animal\"])\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [  ",
                    "created": "2022-08-08T13:26:17.850+0000",
                    "updated": "2022-08-08T13:26:17.850+0000",
                    "started": "2022-08-08T13:26:17.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798940",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/799074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#discussion_r940557718\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -0,0 +1,3467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+from collections import defaultdict\n+from concurrent import futures\n+from functools import partial, reduce\n+\n+import sys\n+import inspect\n+import json\n+from collections.abc import Collection\n+import numpy as np\n+import os\n+import re\n+import operator\n+import urllib.parse\n+import warnings\n+\n+import pyarrow as pa\n+import pyarrow.lib as lib\n+import pyarrow._parquet as _parquet\n+\n+from pyarrow._parquet import (ParquetReader, Statistics,  # noqa\n+                              FileMetaData, RowGroupMetaData,\n+                              ColumnChunkMetaData,\n+                              ParquetSchema, ColumnSchema,\n+                              ParquetLogicalType,\n+                              FileEncryptionProperties,\n+                              FileDecryptionProperties)\n+from pyarrow.fs import (LocalFileSystem, FileSystem,\n+                        _resolve_filesystem_and_path, _ensure_filesystem)\n+from pyarrow import filesystem as legacyfs\n+from pyarrow.util import guid, _is_path_like, _stringify_path\n+\n+_URI_STRIP_SCHEMES = ('hdfs',)\n+\n+\n+def _parse_uri(path):\n+    path = _stringify_path(path)\n+    parsed_uri = urllib.parse.urlparse(path)\n+    if parsed_uri.scheme in _URI_STRIP_SCHEMES:\n+        return parsed_uri.path\n+    else:\n+        # ARROW-4073: On Windows returning the path with the scheme\n+        # stripped removes the drive letter, if any\n+        return path\n+\n+\n+def _get_filesystem_and_path(passed_filesystem, path):\n+    if passed_filesystem is None:\n+        return legacyfs.resolve_filesystem_and_path(path, passed_filesystem)\n+    else:\n+        passed_filesystem = legacyfs._ensure_filesystem(passed_filesystem)\n+        parsed_path = _parse_uri(path)\n+        return passed_filesystem, parsed_path\n+\n+\n+def _check_contains_null(val):\n+    if isinstance(val, bytes):\n+        for byte in val:\n+            if isinstance(byte, bytes):\n+                compare_to = chr(0)\n+            else:\n+                compare_to = 0\n+            if byte == compare_to:\n+                return True\n+    elif isinstance(val, str):\n+        return '\\x00' in val\n+    return False\n+\n+\n+def _check_filters(filters, check_null_strings=True):\n+    \"\"\"\n+    Check if filters are well-formed.\n+    \"\"\"\n+    if filters is not None:\n+        if len(filters) == 0 or any(len(f) == 0 for f in filters):\n+            raise ValueError(\"Malformed filters\")\n+        if isinstance(filters[0][0], str):\n+            # We have encountered the situation where we have one nesting level\n+            # too few:\n+            #   We have [(,,), ..] instead of [[(,,), ..]]\n+            filters = [filters]\n+        if check_null_strings:\n+            for conjunction in filters:\n+                for col, op, val in conjunction:\n+                    if (\n+                        isinstance(val, list) and\n+                        all(_check_contains_null(v) for v in val) or\n+                        _check_contains_null(val)\n+                    ):\n+                        raise NotImplementedError(\n+                            \"Null-terminated binary strings are not supported \"\n+                            \"as filter values.\"\n+                        )\n+    return filters\n+\n+\n+_DNF_filter_doc = \"\"\"Predicates are expressed in disjunctive normal form (DNF),\n+    like ``[[('x', '=', 0), ...], ...]``. DNF allows arbitrary boolean logical\n+    combinations of single column predicates. The innermost tuples each\n+    describe a single column predicate. The list of inner predicates is\n+    interpreted as a conjunction (AND), forming a more selective and multiple\n+    column predicate. Finally, the most outer list combines these filters as a\n+    disjunction (OR).\n+\n+    Predicates may also be passed as List[Tuple]. This form is interpreted\n+    as a single conjunction. To express OR in predicates, one must\n+    use the (preferred) List[List[Tuple]] notation.\n+\n+    Each tuple has format: (``key``, ``op``, ``value``) and compares the\n+    ``key`` with the ``value``.\n+    The supported ``op`` are:  ``=`` or ``==``, ``!=``, ``<``, ``>``, ``<=``,\n+    ``>=``, ``in`` and ``not in``. If the ``op`` is ``in`` or ``not in``, the\n+    ``value`` must be a collection such as a ``list``, a ``set`` or a\n+    ``tuple``.\n+\n+    Examples:\n+\n+    .. code-block:: python\n+\n+        ('x', '=', 0)\n+        ('y', 'in', ['a', 'b', 'c'])\n+        ('z', 'not in', {'a','b'})\n+\n+    \"\"\"\n+\n+\n+def _filters_to_expression(filters):\n+    \"\"\"\n+    Check if filters are well-formed.\n+\n+    See _DNF_filter_doc above for more details.\n+    \"\"\"\n+    import pyarrow.dataset as ds\n+\n+    if isinstance(filters, ds.Expression):\n+        return filters\n+\n+    filters = _check_filters(filters, check_null_strings=False)\n+\n+    def convert_single_predicate(col, op, val):\n+        field = ds.field(col)\n+\n+        if op == \"=\" or op == \"==\":\n+            return field == val\n+        elif op == \"!=\":\n+            return field != val\n+        elif op == '<':\n+            return field < val\n+        elif op == '>':\n+            return field > val\n+        elif op == '<=':\n+            return field <= val\n+        elif op == '>=':\n+            return field >= val\n+        elif op == 'in':\n+            return field.isin(val)\n+        elif op == 'not in':\n+            return ~field.isin(val)\n+        else:\n+            raise ValueError(\n+                '\"{0}\" is not a valid operator in predicates.'.format(\n+                    (col, op, val)))\n+\n+    disjunction_members = []\n+\n+    for conjunction in filters:\n+        conjunction_members = [\n+            convert_single_predicate(col, op, val)\n+            for col, op, val in conjunction\n+        ]\n+\n+        disjunction_members.append(reduce(operator.and_, conjunction_members))\n+\n+    return reduce(operator.or_, disjunction_members)\n+\n+\n+# ----------------------------------------------------------------------\n+# Reading a single Parquet file\n+\n+\n+class ParquetFile:\n+    \"\"\"\n+    Reader interface for a single Parquet file.\n+\n+    Parameters\n+    ----------\n+    source : str, pathlib.Path, pyarrow.NativeFile, or file-like object\n+        Readable source. For passing bytes or buffer-like file containing a\n+        Parquet file, use pyarrow.BufferReader.\n+    metadata : FileMetaData, default None\n+        Use existing metadata object, rather than reading from file.\n+    common_metadata : FileMetaData, default None\n+        Will be used in reads for pandas schema metadata if not found in the\n+        main file's metadata, no other uses at the moment.\n+    memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n+    buffer_size : int, default 0\n+        If positive, perform read buffering when deserializing individual\n+        column chunks. Otherwise IO calls are unbuffered.\n+    pre_buffer : bool, default False\n+        Coalesce and issue file reads in parallel to improve performance on\n+        high-latency filesystems (e.g. S3). If True, Arrow will use a\n+        background I/O thread pool.\n+    read_dictionary : list\n+        List of column names to read directly as DictionaryArray.\n+    coerce_int96_timestamp_unit : str, default None.\n+        Cast timestamps that are stored in INT96 format to a particular\n+        resolution (e.g. 'ms'). Setting to None is equivalent to 'ns'\n+        and therefore INT96 timestamps will be inferred as timestamps\n+        in nanoseconds.\n+    decryption_properties : FileDecryptionProperties, default None\n+        File decryption properties for Parquet Modular Encryption.\n+    thrift_string_size_limit : int, default None\n+        If not None, override the maximum total string size allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+    thrift_container_size_limit : int, default None\n+        If not None, override the maximum total size of containers allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+\n+    Examples\n+    --------\n+\n+    Generate an example PyArrow Table and write it to Parquet file:\n+\n+    >>> import pyarrow as pa\n+    >>> table = pa.table({'n_legs': [2, 2, 4, 4, 5, 100],\n+    ...                   'animal': [\"Flamingo\", \"Parrot\", \"Dog\", \"Horse\",\n+    ...                              \"Brittle stars\", \"Centipede\"]})\n+\n+    >>> import pyarrow.parquet as pq\n+    >>> pq.write_table(table, 'example.parquet')\n+\n+    Create a ``ParquetFile`` object from the Parquet file:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet')\n+\n+    Read the data:\n+\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: string\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [[\"Flamingo\",\"Parrot\",\"Dog\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Create a ParquetFile object with \"animal\" column as DictionaryArray:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet',\n+    ...                               read_dictionary=[\"animal\"])\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [  ",
                    "created": "2022-08-08T18:50:15.250+0000",
                    "updated": "2022-08-08T18:50:15.250+0000",
                    "started": "2022-08-08T18:50:15.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799074",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/799079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#discussion_r940565593\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -0,0 +1,3467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+from collections import defaultdict\n+from concurrent import futures\n+from functools import partial, reduce\n+\n+import sys\n+import inspect\n+import json\n+from collections.abc import Collection\n+import numpy as np\n+import os\n+import re\n+import operator\n+import urllib.parse\n+import warnings\n+\n+import pyarrow as pa\n+import pyarrow.lib as lib\n+import pyarrow._parquet as _parquet\n+\n+from pyarrow._parquet import (ParquetReader, Statistics,  # noqa\n+                              FileMetaData, RowGroupMetaData,\n+                              ColumnChunkMetaData,\n+                              ParquetSchema, ColumnSchema,\n+                              ParquetLogicalType,\n+                              FileEncryptionProperties,\n+                              FileDecryptionProperties)\n+from pyarrow.fs import (LocalFileSystem, FileSystem,\n+                        _resolve_filesystem_and_path, _ensure_filesystem)\n+from pyarrow import filesystem as legacyfs\n+from pyarrow.util import guid, _is_path_like, _stringify_path\n+\n+_URI_STRIP_SCHEMES = ('hdfs',)\n+\n+\n+def _parse_uri(path):\n+    path = _stringify_path(path)\n+    parsed_uri = urllib.parse.urlparse(path)\n+    if parsed_uri.scheme in _URI_STRIP_SCHEMES:\n+        return parsed_uri.path\n+    else:\n+        # ARROW-4073: On Windows returning the path with the scheme\n+        # stripped removes the drive letter, if any\n+        return path\n+\n+\n+def _get_filesystem_and_path(passed_filesystem, path):\n+    if passed_filesystem is None:\n+        return legacyfs.resolve_filesystem_and_path(path, passed_filesystem)\n+    else:\n+        passed_filesystem = legacyfs._ensure_filesystem(passed_filesystem)\n+        parsed_path = _parse_uri(path)\n+        return passed_filesystem, parsed_path\n+\n+\n+def _check_contains_null(val):\n+    if isinstance(val, bytes):\n+        for byte in val:\n+            if isinstance(byte, bytes):\n+                compare_to = chr(0)\n+            else:\n+                compare_to = 0\n+            if byte == compare_to:\n+                return True\n+    elif isinstance(val, str):\n+        return '\\x00' in val\n+    return False\n+\n+\n+def _check_filters(filters, check_null_strings=True):\n+    \"\"\"\n+    Check if filters are well-formed.\n+    \"\"\"\n+    if filters is not None:\n+        if len(filters) == 0 or any(len(f) == 0 for f in filters):\n+            raise ValueError(\"Malformed filters\")\n+        if isinstance(filters[0][0], str):\n+            # We have encountered the situation where we have one nesting level\n+            # too few:\n+            #   We have [(,,), ..] instead of [[(,,), ..]]\n+            filters = [filters]\n+        if check_null_strings:\n+            for conjunction in filters:\n+                for col, op, val in conjunction:\n+                    if (\n+                        isinstance(val, list) and\n+                        all(_check_contains_null(v) for v in val) or\n+                        _check_contains_null(val)\n+                    ):\n+                        raise NotImplementedError(\n+                            \"Null-terminated binary strings are not supported \"\n+                            \"as filter values.\"\n+                        )\n+    return filters\n+\n+\n+_DNF_filter_doc = \"\"\"Predicates are expressed in disjunctive normal form (DNF),\n+    like ``[[('x', '=', 0), ...], ...]``. DNF allows arbitrary boolean logical\n+    combinations of single column predicates. The innermost tuples each\n+    describe a single column predicate. The list of inner predicates is\n+    interpreted as a conjunction (AND), forming a more selective and multiple\n+    column predicate. Finally, the most outer list combines these filters as a\n+    disjunction (OR).\n+\n+    Predicates may also be passed as List[Tuple]. This form is interpreted\n+    as a single conjunction. To express OR in predicates, one must\n+    use the (preferred) List[List[Tuple]] notation.\n+\n+    Each tuple has format: (``key``, ``op``, ``value``) and compares the\n+    ``key`` with the ``value``.\n+    The supported ``op`` are:  ``=`` or ``==``, ``!=``, ``<``, ``>``, ``<=``,\n+    ``>=``, ``in`` and ``not in``. If the ``op`` is ``in`` or ``not in``, the\n+    ``value`` must be a collection such as a ``list``, a ``set`` or a\n+    ``tuple``.\n+\n+    Examples:\n+\n+    .. code-block:: python\n+\n+        ('x', '=', 0)\n+        ('y', 'in', ['a', 'b', 'c'])\n+        ('z', 'not in', {'a','b'})\n+\n+    \"\"\"\n+\n+\n+def _filters_to_expression(filters):\n+    \"\"\"\n+    Check if filters are well-formed.\n+\n+    See _DNF_filter_doc above for more details.\n+    \"\"\"\n+    import pyarrow.dataset as ds\n+\n+    if isinstance(filters, ds.Expression):\n+        return filters\n+\n+    filters = _check_filters(filters, check_null_strings=False)\n+\n+    def convert_single_predicate(col, op, val):\n+        field = ds.field(col)\n+\n+        if op == \"=\" or op == \"==\":\n+            return field == val\n+        elif op == \"!=\":\n+            return field != val\n+        elif op == '<':\n+            return field < val\n+        elif op == '>':\n+            return field > val\n+        elif op == '<=':\n+            return field <= val\n+        elif op == '>=':\n+            return field >= val\n+        elif op == 'in':\n+            return field.isin(val)\n+        elif op == 'not in':\n+            return ~field.isin(val)\n+        else:\n+            raise ValueError(\n+                '\"{0}\" is not a valid operator in predicates.'.format(\n+                    (col, op, val)))\n+\n+    disjunction_members = []\n+\n+    for conjunction in filters:\n+        conjunction_members = [\n+            convert_single_predicate(col, op, val)\n+            for col, op, val in conjunction\n+        ]\n+\n+        disjunction_members.append(reduce(operator.and_, conjunction_members))\n+\n+    return reduce(operator.or_, disjunction_members)\n+\n+\n+# ----------------------------------------------------------------------\n+# Reading a single Parquet file\n+\n+\n+class ParquetFile:\n+    \"\"\"\n+    Reader interface for a single Parquet file.\n+\n+    Parameters\n+    ----------\n+    source : str, pathlib.Path, pyarrow.NativeFile, or file-like object\n+        Readable source. For passing bytes or buffer-like file containing a\n+        Parquet file, use pyarrow.BufferReader.\n+    metadata : FileMetaData, default None\n+        Use existing metadata object, rather than reading from file.\n+    common_metadata : FileMetaData, default None\n+        Will be used in reads for pandas schema metadata if not found in the\n+        main file's metadata, no other uses at the moment.\n+    memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n+    buffer_size : int, default 0\n+        If positive, perform read buffering when deserializing individual\n+        column chunks. Otherwise IO calls are unbuffered.\n+    pre_buffer : bool, default False\n+        Coalesce and issue file reads in parallel to improve performance on\n+        high-latency filesystems (e.g. S3). If True, Arrow will use a\n+        background I/O thread pool.\n+    read_dictionary : list\n+        List of column names to read directly as DictionaryArray.\n+    coerce_int96_timestamp_unit : str, default None.\n+        Cast timestamps that are stored in INT96 format to a particular\n+        resolution (e.g. 'ms'). Setting to None is equivalent to 'ns'\n+        and therefore INT96 timestamps will be inferred as timestamps\n+        in nanoseconds.\n+    decryption_properties : FileDecryptionProperties, default None\n+        File decryption properties for Parquet Modular Encryption.\n+    thrift_string_size_limit : int, default None\n+        If not None, override the maximum total string size allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+    thrift_container_size_limit : int, default None\n+        If not None, override the maximum total size of containers allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+\n+    Examples\n+    --------\n+\n+    Generate an example PyArrow Table and write it to Parquet file:\n+\n+    >>> import pyarrow as pa\n+    >>> table = pa.table({'n_legs': [2, 2, 4, 4, 5, 100],\n+    ...                   'animal': [\"Flamingo\", \"Parrot\", \"Dog\", \"Horse\",\n+    ...                              \"Brittle stars\", \"Centipede\"]})\n+\n+    >>> import pyarrow.parquet as pq\n+    >>> pq.write_table(table, 'example.parquet')\n+\n+    Create a ``ParquetFile`` object from the Parquet file:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet')\n+\n+    Read the data:\n+\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: string\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [[\"Flamingo\",\"Parrot\",\"Dog\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Create a ParquetFile object with \"animal\" column as DictionaryArray:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet',\n+    ...                               read_dictionary=[\"animal\"])\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [  ",
                    "created": "2022-08-08T19:00:11.474+0000",
                    "updated": "2022-08-08T19:00:11.474+0000",
                    "started": "2022-08-08T19:00:11.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799079",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/799081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#discussion_r940571629\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -0,0 +1,3467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+from collections import defaultdict\n+from concurrent import futures\n+from functools import partial, reduce\n+\n+import sys\n+import inspect\n+import json\n+from collections.abc import Collection\n+import numpy as np\n+import os\n+import re\n+import operator\n+import urllib.parse\n+import warnings\n+\n+import pyarrow as pa\n+import pyarrow.lib as lib\n+import pyarrow._parquet as _parquet\n+\n+from pyarrow._parquet import (ParquetReader, Statistics,  # noqa\n+                              FileMetaData, RowGroupMetaData,\n+                              ColumnChunkMetaData,\n+                              ParquetSchema, ColumnSchema,\n+                              ParquetLogicalType,\n+                              FileEncryptionProperties,\n+                              FileDecryptionProperties)\n+from pyarrow.fs import (LocalFileSystem, FileSystem,\n+                        _resolve_filesystem_and_path, _ensure_filesystem)\n+from pyarrow import filesystem as legacyfs\n+from pyarrow.util import guid, _is_path_like, _stringify_path\n+\n+_URI_STRIP_SCHEMES = ('hdfs',)\n+\n+\n+def _parse_uri(path):\n+    path = _stringify_path(path)\n+    parsed_uri = urllib.parse.urlparse(path)\n+    if parsed_uri.scheme in _URI_STRIP_SCHEMES:\n+        return parsed_uri.path\n+    else:\n+        # ARROW-4073: On Windows returning the path with the scheme\n+        # stripped removes the drive letter, if any\n+        return path\n+\n+\n+def _get_filesystem_and_path(passed_filesystem, path):\n+    if passed_filesystem is None:\n+        return legacyfs.resolve_filesystem_and_path(path, passed_filesystem)\n+    else:\n+        passed_filesystem = legacyfs._ensure_filesystem(passed_filesystem)\n+        parsed_path = _parse_uri(path)\n+        return passed_filesystem, parsed_path\n+\n+\n+def _check_contains_null(val):\n+    if isinstance(val, bytes):\n+        for byte in val:\n+            if isinstance(byte, bytes):\n+                compare_to = chr(0)\n+            else:\n+                compare_to = 0\n+            if byte == compare_to:\n+                return True\n+    elif isinstance(val, str):\n+        return '\\x00' in val\n+    return False\n+\n+\n+def _check_filters(filters, check_null_strings=True):\n+    \"\"\"\n+    Check if filters are well-formed.\n+    \"\"\"\n+    if filters is not None:\n+        if len(filters) == 0 or any(len(f) == 0 for f in filters):\n+            raise ValueError(\"Malformed filters\")\n+        if isinstance(filters[0][0], str):\n+            # We have encountered the situation where we have one nesting level\n+            # too few:\n+            #   We have [(,,), ..] instead of [[(,,), ..]]\n+            filters = [filters]\n+        if check_null_strings:\n+            for conjunction in filters:\n+                for col, op, val in conjunction:\n+                    if (\n+                        isinstance(val, list) and\n+                        all(_check_contains_null(v) for v in val) or\n+                        _check_contains_null(val)\n+                    ):\n+                        raise NotImplementedError(\n+                            \"Null-terminated binary strings are not supported \"\n+                            \"as filter values.\"\n+                        )\n+    return filters\n+\n+\n+_DNF_filter_doc = \"\"\"Predicates are expressed in disjunctive normal form (DNF),\n+    like ``[[('x', '=', 0), ...], ...]``. DNF allows arbitrary boolean logical\n+    combinations of single column predicates. The innermost tuples each\n+    describe a single column predicate. The list of inner predicates is\n+    interpreted as a conjunction (AND), forming a more selective and multiple\n+    column predicate. Finally, the most outer list combines these filters as a\n+    disjunction (OR).\n+\n+    Predicates may also be passed as List[Tuple]. This form is interpreted\n+    as a single conjunction. To express OR in predicates, one must\n+    use the (preferred) List[List[Tuple]] notation.\n+\n+    Each tuple has format: (``key``, ``op``, ``value``) and compares the\n+    ``key`` with the ``value``.\n+    The supported ``op`` are:  ``=`` or ``==``, ``!=``, ``<``, ``>``, ``<=``,\n+    ``>=``, ``in`` and ``not in``. If the ``op`` is ``in`` or ``not in``, the\n+    ``value`` must be a collection such as a ``list``, a ``set`` or a\n+    ``tuple``.\n+\n+    Examples:\n+\n+    .. code-block:: python\n+\n+        ('x', '=', 0)\n+        ('y', 'in', ['a', 'b', 'c'])\n+        ('z', 'not in', {'a','b'})\n+\n+    \"\"\"\n+\n+\n+def _filters_to_expression(filters):\n+    \"\"\"\n+    Check if filters are well-formed.\n+\n+    See _DNF_filter_doc above for more details.\n+    \"\"\"\n+    import pyarrow.dataset as ds\n+\n+    if isinstance(filters, ds.Expression):\n+        return filters\n+\n+    filters = _check_filters(filters, check_null_strings=False)\n+\n+    def convert_single_predicate(col, op, val):\n+        field = ds.field(col)\n+\n+        if op == \"=\" or op == \"==\":\n+            return field == val\n+        elif op == \"!=\":\n+            return field != val\n+        elif op == '<':\n+            return field < val\n+        elif op == '>':\n+            return field > val\n+        elif op == '<=':\n+            return field <= val\n+        elif op == '>=':\n+            return field >= val\n+        elif op == 'in':\n+            return field.isin(val)\n+        elif op == 'not in':\n+            return ~field.isin(val)\n+        else:\n+            raise ValueError(\n+                '\"{0}\" is not a valid operator in predicates.'.format(\n+                    (col, op, val)))\n+\n+    disjunction_members = []\n+\n+    for conjunction in filters:\n+        conjunction_members = [\n+            convert_single_predicate(col, op, val)\n+            for col, op, val in conjunction\n+        ]\n+\n+        disjunction_members.append(reduce(operator.and_, conjunction_members))\n+\n+    return reduce(operator.or_, disjunction_members)\n+\n+\n+# ----------------------------------------------------------------------\n+# Reading a single Parquet file\n+\n+\n+class ParquetFile:\n+    \"\"\"\n+    Reader interface for a single Parquet file.\n+\n+    Parameters\n+    ----------\n+    source : str, pathlib.Path, pyarrow.NativeFile, or file-like object\n+        Readable source. For passing bytes or buffer-like file containing a\n+        Parquet file, use pyarrow.BufferReader.\n+    metadata : FileMetaData, default None\n+        Use existing metadata object, rather than reading from file.\n+    common_metadata : FileMetaData, default None\n+        Will be used in reads for pandas schema metadata if not found in the\n+        main file's metadata, no other uses at the moment.\n+    memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n+    buffer_size : int, default 0\n+        If positive, perform read buffering when deserializing individual\n+        column chunks. Otherwise IO calls are unbuffered.\n+    pre_buffer : bool, default False\n+        Coalesce and issue file reads in parallel to improve performance on\n+        high-latency filesystems (e.g. S3). If True, Arrow will use a\n+        background I/O thread pool.\n+    read_dictionary : list\n+        List of column names to read directly as DictionaryArray.\n+    coerce_int96_timestamp_unit : str, default None.\n+        Cast timestamps that are stored in INT96 format to a particular\n+        resolution (e.g. 'ms'). Setting to None is equivalent to 'ns'\n+        and therefore INT96 timestamps will be inferred as timestamps\n+        in nanoseconds.\n+    decryption_properties : FileDecryptionProperties, default None\n+        File decryption properties for Parquet Modular Encryption.\n+    thrift_string_size_limit : int, default None\n+        If not None, override the maximum total string size allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+    thrift_container_size_limit : int, default None\n+        If not None, override the maximum total size of containers allocated\n+        when decoding Thrift structures. The default limit should be\n+        sufficient for most Parquet files.\n+\n+    Examples\n+    --------\n+\n+    Generate an example PyArrow Table and write it to Parquet file:\n+\n+    >>> import pyarrow as pa\n+    >>> table = pa.table({'n_legs': [2, 2, 4, 4, 5, 100],\n+    ...                   'animal': [\"Flamingo\", \"Parrot\", \"Dog\", \"Horse\",\n+    ...                              \"Brittle stars\", \"Centipede\"]})\n+\n+    >>> import pyarrow.parquet as pq\n+    >>> pq.write_table(table, 'example.parquet')\n+\n+    Create a ``ParquetFile`` object from the Parquet file:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet')\n+\n+    Read the data:\n+\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: string\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [[\"Flamingo\",\"Parrot\",\"Dog\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Create a ParquetFile object with \"animal\" column as DictionaryArray:\n+\n+    >>> parquet_file = pq.ParquetFile('example.parquet',\n+    ...                               read_dictionary=[\"animal\"])\n+    >>> parquet_file.read()\n+    pyarrow.Table\n+    n_legs: int64\n+    animal: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    n_legs: [[2,2,4,4,5,100]]\n+    animal: [  ",
                    "created": "2022-08-08T19:08:17.240+0000",
                    "updated": "2022-08-08T19:08:17.240+0000",
                    "started": "2022-08-08T19:08:17.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799081",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/799084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1208516004\n\n   Hmm, the crash on the Sphinx & Numpydoc CI job is unfortunate but certainly not related I think.\n\n\n",
                    "created": "2022-08-08T19:21:26.151+0000",
                    "updated": "2022-08-08T19:21:26.151+0000",
                    "started": "2022-08-08T19:21:26.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799084",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/799089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou merged PR #13802:\nURL: https://github.com/apache/arrow/pull/13802\n\n\n",
                    "created": "2022-08-08T19:44:50.785+0000",
                    "updated": "2022-08-08T19:44:50.785+0000",
                    "started": "2022-08-08T19:44:50.784+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799089",
                    "issueId": "13472076"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/worklog/799147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13802:\nURL: https://github.com/apache/arrow/pull/13802#issuecomment-1208875217\n\n   Benchmark runs are scheduled for baseline = 210cf061390e96c032008a41dd01c683b4b8e6e3 and contender = a2f3666d792e66e53d435334b22258904e9143ac. a2f3666d792e66e53d435334b22258904e9143ac is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/5f13954ab5b04f519bff6ee4664f2180...56ce60e6570e4bf182f71ea16f47f229/)\n   [Failed :arrow_down:0.03% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/d1d0e604f2b447f080c8442d097c056f...a3dc55bfc5634ea485f186e34c639d06/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/b3e681e122ed4f22b2ed5e3418650373...aa95aa8f110046329f1475478d882582/)\n   [Finished :arrow_down:0.6% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/aed8ef1327d249329abb68015ca1aa56...802b6fd4e4054bb2a154c5651ab22fab/)\n   Buildkite builds:\n   [Finished] [`a2f3666d` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1275)\n   [Finished] [`a2f3666d` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1287)\n   [Finished] [`a2f3666d` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1270)\n   [Finished] [`a2f3666d` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1289)\n   [Finished] [`210cf061` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1274)\n   [Failed] [`210cf061` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1286)\n   [Finished] [`210cf061` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1269)\n   [Finished] [`210cf061` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1288)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-08-09T03:42:44.360+0000",
                    "updated": "2022-08-09T03:42:44.360+0000",
                    "started": "2022-08-09T03:42:44.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799147",
                    "issueId": "13472076"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@14d61a1a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f087c8c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33877f56[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f8799b6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15dbcdb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2fcf4040[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@273af720[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@44138058[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fee236f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5a76bf92[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a85d00b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@72cc9443[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 08 19:44:51 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-08T19:44:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17106/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-07-18T12:47:17.000+0000",
        "updated": "2022-08-09T03:42:44.000+0000",
        "timeoriginalestimate": null,
        "description": "As discussed on [https://github.com/apache/arrow/pull/12837#issuecomment-1186654950]\r\n\r\nit would be better to move all code to {{pyarrow/parquet/core.py}} and just import the APIs from the {{_init_{_}.py{_} instead of having all the parquet pyarrow code on the {_}init{_}_.py file.}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Move parquet code from __init__.py and expose only API",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472076/comment/17576969",
                    "id": "17576969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 13802\n[https://github.com/apache/arrow/pull/13802]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-08T19:44:51.694+0000",
                    "updated": "2022-08-08T19:44:51.694+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z16y4g:",
        "customfield_12314139": null
    }
}