{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13430478",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478",
    "key": "ARROW-15779",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 108000,
            "total": 108000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 108000,
            "total": 108000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15779/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 180,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/744623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672\n\n\n   This PR is work in progress. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-19T13:34:47.952+0000",
                    "updated": "2022-03-19T13:34:47.952+0000",
                    "started": "2022-03-19T13:34:47.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744623",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/744624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#issuecomment-1073011316\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-19T13:35:00.615+0000",
                    "updated": "2022-03-19T13:35:00.615+0000",
                    "started": "2022-03-19T13:35:00.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744624",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/744727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#issuecomment-1073287970\n\n\n   Hmm, did you mean to delete the `testing` submodule?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-20T16:42:08.415+0000",
                    "updated": "2022-03-20T16:42:08.415+0000",
                    "started": "2022-03-20T16:42:08.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744727",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/744734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#issuecomment-1073295410\n\n\n   @lidavidm no I wrongly checked in files of testing submodule. I just wanted to remove that. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-20T17:20:20.582+0000",
                    "updated": "2022-03-20T17:20:20.582+0000",
                    "started": "2022-03-20T17:20:20.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744734",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834250238\n\n\n\n##########\nFile path: python/pyarrow/_engine.pyx\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+import sys\n+\n+from cython.operator cimport dereference as deref\n+\n+from pyarrow.lib cimport *\n+from pyarrow.includes.libarrow cimport *\n+import pyarrow.lib as lib\n+\n+import numpy as np\n+\n+\n+def run_query(plan, output_schema):\n\nReview comment:\n       Add a docstring?\n\n##########\nFile path: python/pyarrow/_engine.pyx\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+import sys\n+\n+from cython.operator cimport dereference as deref\n+\n+from pyarrow.lib cimport *\n+from pyarrow.includes.libarrow cimport *\n+import pyarrow.lib as lib\n+\n+import numpy as np\n+\n+\n+def run_query(plan, output_schema):\n+\n+    cdef:\n+        CResult[shared_ptr[CRecordBatchReader]] c_res_reader\n+        shared_ptr[CRecordBatchReader] c_reader\n+        shared_ptr[CSchema] c_schema\n+        c_string c_plan\n+        RecordBatchReader reader\n+\n+    c_plan = plan.encode()\n\nReview comment:\n       I think we generally use `tobytes`. Though: if `plan` is supposed to be a serialized Protobuf, shouldn't it be `bytes` in the first place?\n\n##########\nFile path: python/examples/substrait/query_execution_example.py\n##########\n@@ -0,0 +1,81 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n\nReview comment:\n       IIRC nothing runs the Python examples (unlike C++). Maybe make this a cookbook example instead?\r\n   \r\n   Also, add a unit test.\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n\nReview comment:\n       nit, but try not to use the `api.h` headers, they're expensive to include\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n\nReview comment:\n       We should `#include` the optional header\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/engine/api.h>\n+#include <arrow/engine/substrait/util.h>\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <vector>\n+\n+namespace eng = arrow::engine;\n+namespace cp = arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+std::string GetSubstraitPlanFromServer(const std::string& filename) {\n+  // Emulate server interaction by parsing hard coded JSON\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"i64\": {}},\n+                         {\"bool\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"i\",\n+                       \"b\"\n+                     ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), filename);\n+  return substrait_json;\n+}\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please specify a parquet file to scan\" << std::endl;\n+    // Fake pass for CI\n+    return EXIT_SUCCESS;\n+  }\n+  auto substrait_json = GetSubstraitPlanFromServer(argv[1]);\n+\n+  auto schema = arrow::schema(\n+      {arrow::field(\"i\", arrow::int64()), arrow::field(\"b\", arrow::boolean())});\n+\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n+\n+  arrow::AsyncGenerator<arrow::util::optional<cp::ExecBatch>> sink_gen;\n+\n+  auto maybe_plan = cp::ExecPlan::Make();\n+  if (!maybe_plan.status().ok()) {\n+    return EXIT_FAILURE;\n+  }\n\nReview comment:\n       Create something like `Status Main();` instead so we can use the usual Arrow macros, and then just `ABORT_NOT_OK(Main())` inside `main`\n\n##########\nFile path: cpp/src/arrow/engine/substrait/serde_test.cc\n##########\n@@ -724,5 +728,103 @@ TEST(Substrait, ExtensionSetFromPlan) {\n   EXPECT_EQ(decoded_add_func.name, \"add\");\n }\n \n+TEST(Substrait, GetRecordBatchIterator) {\n\nReview comment:\n       nit, but `GetRecordBatchReader`?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n+    consumers.emplace_back(new SubstraitSinkConsumer{generator_});\n+    return consumers.back();\n+  };\n+\n+  // Deserialize each relation tree in the substrait plan to an Arrow compute Declaration\n+  ARROW_ASSIGN_OR_RAISE(declerations_,\n+                        engine::DeserializePlan(*serialized_plan, consumer_factory));\n+\n+  // It's safe to drop the serialized plan; we don't leave references to its memory\n+  serialized_plan.reset();\n+\n+  // Construct an empty plan (note: configure Function registry and ThreadPool here)\n+  return Status::OK();\n+}\n+\n+Result<std::shared_ptr<RecordBatchReader>> SubstraitExecutor::Execute() {\n+  for (const cp::Declaration& decl : declerations_) {\n+    RETURN_NOT_OK(decl.AddToPlan(plan_.get()).status());\n+  }\n+\n+  ARROW_RETURN_NOT_OK(plan_->Validate());\n+\n+  ARROW_RETURN_NOT_OK(plan_->StartProducing());\n+\n+  std::shared_ptr<RecordBatchReader> sink_reader = cp::MakeGeneratorReader(\n+      schema_, std::move(*generator_), exec_context_.memory_pool());\n+  return sink_reader;\n+}\n+\n+Status SubstraitExecutor::Finalize() {\n+  ARROW_RETURN_NOT_OK(plan_->finished().status());\n+  return Status::OK();\n+}\n+\n+Result<std::shared_ptr<RecordBatchReader>> SubstraitExecutor::GetRecordBatchReader(\n+    std::string& substrait_json, std::shared_ptr<arrow::Schema> schema) {\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n+\n+  arrow::AsyncGenerator<arrow::util::optional<cp::ExecBatch>> sink_gen;\n+\n+  ARROW_ASSIGN_OR_RAISE(auto plan, cp::ExecPlan::Make());\n+\n+  arrow::engine::SubstraitExecutor executor(substrait_json, &sink_gen, plan, schema,\n+                                            exec_context);\n+  RETURN_NOT_OK(executor.MakePlan());\n+\n+  ARROW_ASSIGN_OR_RAISE(auto sink_reader, executor.Execute());\n+\n+  RETURN_NOT_OK(executor.Finalize());\n\nReview comment:\n       I would frankly expect that the `RecordBatchReader`'s `Close` gets wired up to the executor's `Close` so that you don't have to manage their lifetimes independently, also, that would let you truly stream data right?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/serde_test.cc\n##########\n@@ -724,5 +728,103 @@ TEST(Substrait, ExtensionSetFromPlan) {\n   EXPECT_EQ(decoded_add_func.name, \"add\");\n }\n \n+TEST(Substrait, GetRecordBatchIterator) {\n+  const auto parquet_root = std::getenv(\"PARQUET_TEST_DATA\");\n+  std::string dir_string(parquet_root);\n+  std::stringstream ss;\n+  ss << dir_string << \"/binary.parquet\";\n+  auto file_path = ss.str();\n+\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"binary\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"foo\"\n+                      ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), file_path);\n+  auto in_schema = schema({field(\"foo\", binary())});\n+  AsyncGenerator<util::optional<cp::ExecBatch>> sink_gen;\n+  cp::ExecContext exec_context(default_memory_pool(),\n+                               arrow::internal::GetCpuThreadPool());\n+  ASSERT_OK_AND_ASSIGN(auto plan, cp::ExecPlan::Make());\n+  engine::SubstraitExecutor executor(substrait_json, &sink_gen, plan, in_schema,\n+                                     exec_context);\n+  auto status = executor.MakePlan();\n+  ASSERT_OK(status);\n+  ASSERT_OK_AND_ASSIGN(auto reader, executor.Execute());\n+  auto finish = executor.Finalize();\n+  ASSERT_OK(finish);\n+  ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n+  EXPECT_GT(table->num_rows(), 0);\n+}\n+\n+TEST(Substrait, GetRecordBatchIteratorUtil) {\n+  const auto parquet_root = std::getenv(\"PARQUET_TEST_DATA\");\n+  std::string dir_string(parquet_root);\n+  std::stringstream ss;\n+  ss << dir_string << \"/binary.parquet\";\n+  auto file_path = ss.str();\n+\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"binary\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"foo\"\n+                      ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), file_path);\n+  auto in_schema = schema({field(\"foo\", binary())});\n+\n+  ASSERT_OK_AND_ASSIGN(auto reader, engine::SubstraitExecutor::GetRecordBatchReader(\n+                                        substrait_json, in_schema));\n+  ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n+  EXPECT_GT(table->num_rows(), 0);\n\nReview comment:\n       Shouldn't we know the number of expected rows?\n\n##########\nFile path: python/pyarrow/engine.py\n##########\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from pyarrow._engine import (  # noqa\n+    run_query\n\nReview comment:\n       just a nit, if we're going to indent like this\n\n##########\nFile path: python/CMakeLists.txt\n##########\n@@ -534,6 +539,20 @@ if(PYARROW_BUILD_FLIGHT)\n   set(CYTHON_EXTENSIONS ${CYTHON_EXTENSIONS} _flight)\n endif()\n \n+# Engine\n+\n+if(PYARROW_BUILD_ENGINE)\n+find_package(ArrowEngine REQUIRED)\n\nReview comment:\n       looks like the CMake files need formatting\n\n##########\nFile path: python/pyarrow/_engine.pyx\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+import sys\n+\n+from cython.operator cimport dereference as deref\n\nReview comment:\n       Unused imports?\n\n##########\nFile path: python/pyarrow/_engine.pyx\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+import sys\n+\n+from cython.operator cimport dereference as deref\n+\n+from pyarrow.lib cimport *\n+from pyarrow.includes.libarrow cimport *\n+import pyarrow.lib as lib\n+\n+import numpy as np\n\nReview comment:\n       Unused imports?\n\n##########\nFile path: python/pyarrow/engine.py\n##########\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from pyarrow._engine import (  # noqa\n+    run_query\n\nReview comment:\n       ```suggestion\r\n       run_query,\r\n   ```\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n+      : substrait_json_(substrait_json),\n+        generator_(generator),\n+        plan_(std::move(plan)),\n+        schema_(schema),\n+        exec_context_(exec_context) {}\n+\n+  Status MakePlan();\n+\n+  Result<std::shared_ptr<RecordBatchReader>> Execute();\n+\n+  Status Finalize();\n+\n+  static Result<std::shared_ptr<RecordBatchReader>> GetRecordBatchReader(\n+      std::string& substrait_json, std::shared_ptr<arrow::Schema> schema);\n+\n+ private:\n+  std::string substrait_json_;\n+  AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator_;\n+  std::vector<cp::Declaration> declerations_;\n+  std::shared_ptr<cp::ExecPlan> plan_;\n+  std::shared_ptr<Schema> schema_;\n\nReview comment:\n       We should `#include` vector, memory, and string\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n\nReview comment:\n       nit: docstrings?\n\n##########\nFile path: python/CMakeLists.txt\n##########\n@@ -534,6 +539,20 @@ if(PYARROW_BUILD_FLIGHT)\n   set(CYTHON_EXTENSIONS ${CYTHON_EXTENSIONS} _flight)\n endif()\n \n+# Engine\n+\n+if(PYARROW_BUILD_ENGINE)\n+find_package(ArrowEngine REQUIRED)\n+  if(PYARROW_BUNDLE_ARROW_CPP)\n+    message(\"ARROW_ENGINE_SHARED_LIB\")\n+    message(\"\"${ARROW_ENGINE_SHARED_LIB})\n\nReview comment:\n       Are these log lines necessary?\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/engine/api.h>\n+#include <arrow/engine/substrait/util.h>\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n\nReview comment:\n       inconsistent include styles here\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       Should this be made a cookbook example?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n\nReview comment:\n       Does it make sense to take anything besides the JSON and the ExecContext as arguments? I would expect this class manages the details of executing substrait internally\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n+      : substrait_json_(substrait_json),\n+        generator_(generator),\n+        plan_(std::move(plan)),\n+        schema_(schema),\n+        exec_context_(exec_context) {}\n+\n+  Status MakePlan();\n+\n+  Result<std::shared_ptr<RecordBatchReader>> Execute();\n+\n+  Status Finalize();\n\nReview comment:\n       We usually call this `Close()`\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n\nReview comment:\n       What does this mean? It certainly doesn't seem we're ignoring the data.\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n+      : substrait_json_(substrait_json),\n+        generator_(generator),\n+        plan_(std::move(plan)),\n+        schema_(schema),\n+        exec_context_(exec_context) {}\n+\n+  Status MakePlan();\n\nReview comment:\n       Maybe this should be private?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n\nReview comment:\n       Does this have any effect? And why not just `RETURN_NOT_OK(engine::internal::SubstraitToJSON());`?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n+      : substrait_json_(substrait_json),\n+        generator_(generator),\n+        plan_(std::move(plan)),\n+        schema_(schema),\n+        exec_context_(exec_context) {}\n+\n+  Status MakePlan();\n+\n+  Result<std::shared_ptr<RecordBatchReader>> Execute();\n+\n+  Status Finalize();\n+\n+  static Result<std::shared_ptr<RecordBatchReader>> GetRecordBatchReader(\n+      std::string& substrait_json, std::shared_ptr<arrow::Schema> schema);\n\nReview comment:\n       IMO it's quite weird that you have to know the schema ahead of time, is there not a way to extract the schema from the substrait plan?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n\nReview comment:\n       nit, but is it not possible to place this in the `.cc` file too?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n+    consumers.emplace_back(new SubstraitSinkConsumer{generator_});\n+    return consumers.back();\n+  };\n+\n+  // Deserialize each relation tree in the substrait plan to an Arrow compute Declaration\n+  ARROW_ASSIGN_OR_RAISE(declerations_,\n+                        engine::DeserializePlan(*serialized_plan, consumer_factory));\n+\n+  // It's safe to drop the serialized plan; we don't leave references to its memory\n+  serialized_plan.reset();\n\nReview comment:\n       Won't this go out of scope automatically anyways?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/serde_test.cc\n##########\n@@ -724,5 +728,103 @@ TEST(Substrait, ExtensionSetFromPlan) {\n   EXPECT_EQ(decoded_add_func.name, \"add\");\n }\n \n+TEST(Substrait, GetRecordBatchIterator) {\n+  const auto parquet_root = std::getenv(\"PARQUET_TEST_DATA\");\n+  std::string dir_string(parquet_root);\n+  std::stringstream ss;\n+  ss << dir_string << \"/binary.parquet\";\n+  auto file_path = ss.str();\n+\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"binary\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"foo\"\n+                      ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), file_path);\n+  auto in_schema = schema({field(\"foo\", binary())});\n+  AsyncGenerator<util::optional<cp::ExecBatch>> sink_gen;\n+  cp::ExecContext exec_context(default_memory_pool(),\n+                               arrow::internal::GetCpuThreadPool());\n+  ASSERT_OK_AND_ASSIGN(auto plan, cp::ExecPlan::Make());\n+  engine::SubstraitExecutor executor(substrait_json, &sink_gen, plan, in_schema,\n+                                     exec_context);\n+  auto status = executor.MakePlan();\n+  ASSERT_OK(status);\n+  ASSERT_OK_AND_ASSIGN(auto reader, executor.Execute());\n+  auto finish = executor.Finalize();\n+  ASSERT_OK(finish);\n\nReview comment:\n       Why not just `ASSERT_OK(executor.Finalize())`? In general, why all the temporary variables?\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/engine/api.h>\n+#include <arrow/engine/substrait/util.h>\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <vector>\n+\n+namespace eng = arrow::engine;\n+namespace cp = arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+std::string GetSubstraitPlanFromServer(const std::string& filename) {\n+  // Emulate server interaction by parsing hard coded JSON\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"i64\": {}},\n+                         {\"bool\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"i\",\n+                       \"b\"\n+                     ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), filename);\n+  return substrait_json;\n+}\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please specify a parquet file to scan\" << std::endl;\n+    // Fake pass for CI\n+    return EXIT_SUCCESS;\n+  }\n+  auto substrait_json = GetSubstraitPlanFromServer(argv[1]);\n+\n+  auto schema = arrow::schema(\n+      {arrow::field(\"i\", arrow::int64()), arrow::field(\"b\", arrow::boolean())});\n+\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n\nReview comment:\n       hmm, should we be using `internal` namespace in an example? is there not a default constructor?\n\n##########\nFile path: python/pyarrow/_engine.pyx\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+import sys\n+\n+from cython.operator cimport dereference as deref\n+\n+from pyarrow.lib cimport *\n+from pyarrow.includes.libarrow cimport *\n+import pyarrow.lib as lib\n+\n+import numpy as np\n+\n+\n+def run_query(plan, output_schema):\n+\n+    cdef:\n+        CResult[shared_ptr[CRecordBatchReader]] c_res_reader\n+        shared_ptr[CRecordBatchReader] c_reader\n+        shared_ptr[CSchema] c_schema\n+        c_string c_plan\n+        RecordBatchReader reader\n+\n+    c_plan = plan.encode()\n\nReview comment:\n       Ah, it's the Protobuf JSON.\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n\nReview comment:\n       Isn't there already a sink that outputs to a reader? Why do we need a custom implementation here?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n+    consumers.emplace_back(new SubstraitSinkConsumer{generator_});\n+    return consumers.back();\n+  };\n+\n+  // Deserialize each relation tree in the substrait plan to an Arrow compute Declaration\n+  ARROW_ASSIGN_OR_RAISE(declerations_,\n+                        engine::DeserializePlan(*serialized_plan, consumer_factory));\n+\n+  // It's safe to drop the serialized plan; we don't leave references to its memory\n+  serialized_plan.reset();\n+\n+  // Construct an empty plan (note: configure Function registry and ThreadPool here)\n\nReview comment:\n       Is this comment still relevant?\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n+    consumers.emplace_back(new SubstraitSinkConsumer{generator_});\n+    return consumers.back();\n+  };\n+\n+  // Deserialize each relation tree in the substrait plan to an Arrow compute Declaration\n+  ARROW_ASSIGN_OR_RAISE(declerations_,\n\nReview comment:\n       typo: `declarations`\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n\nReview comment:\n       If we can use `type_fwd.h` headers or manually forward-declare just the things we need that would be best\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n\nReview comment:\n       Ah, I guess `GetRecordBatchReader` is a factory function of sorts. The C++ API would make a little more sense IMO if `SubstraitExecutor::GetRecordBatchReader` were renamed `Make` and returned `SubstraitExecutor`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:42:40.609+0000",
                    "updated": "2022-03-24T12:42:40.609+0000",
                    "started": "2022-03-24T12:42:40.609+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747191",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834269567\n\n\n\n##########\nFile path: python/CMakeLists.txt\n##########\n@@ -534,6 +539,20 @@ if(PYARROW_BUILD_FLIGHT)\n   set(CYTHON_EXTENSIONS ${CYTHON_EXTENSIONS} _flight)\n endif()\n \n+# Engine\n+\n+if(PYARROW_BUILD_ENGINE)\n+find_package(ArrowEngine REQUIRED)\n+  if(PYARROW_BUNDLE_ARROW_CPP)\n+    message(\"ARROW_ENGINE_SHARED_LIB\")\n+    message(\"\"${ARROW_ENGINE_SHARED_LIB})\n\nReview comment:\n       Oh this was a typo. I was checking the cmake build. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:48:18.873+0000",
                    "updated": "2022-03-24T12:48:18.873+0000",
                    "started": "2022-03-24T12:48:18.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747194",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834270121\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n\nReview comment:\n       Yes, indeed. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:48:55.451+0000",
                    "updated": "2022-03-24T12:48:55.451+0000",
                    "started": "2022-03-24T12:48:55.450+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747196",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834271979\n\n\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       We definitely can. I was planning on creating a more comprehensive one for the cookbook. \r\n   With a few filters and functions. Waiting for https://github.com/apache/arrow/pull/12664 this to be finalised. \r\n   What do you think? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:51:02.017+0000",
                    "updated": "2022-03-24T12:51:02.017+0000",
                    "started": "2022-03-24T12:51:02.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747201",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834275132\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n\nReview comment:\n       Yes, We can keep the generator inside. I am still thinking how to extract the output-schema from the plan. \r\n   That's a component I haven't addressed in the PR yet. \r\n   \r\n   How can we infer the schema from the plan? It is not 100% clear to me yet. \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:54:32.677+0000",
                    "updated": "2022-03-24T12:54:32.677+0000",
                    "started": "2022-03-24T12:54:32.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747205",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834277072\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.h\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/engine/api.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/iterator.h\"\n+\n+namespace arrow {\n+\n+namespace cp = arrow::compute;\n+\n+namespace engine {\n+\n+class ARROW_ENGINE_EXPORT SubstraitSinkConsumer : public cp::SinkNodeConsumer {\n+ public:\n+  explicit SubstraitSinkConsumer(\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      arrow::util::BackpressureOptions backpressure = {})\n+      : producer_(MakeProducer(generator, std::move(backpressure))) {}\n+\n+  Status Consume(cp::ExecBatch batch) override;\n+\n+  static arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer\n+  MakeProducer(AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* out_gen,\n+               arrow::util::BackpressureOptions backpressure) {\n+    arrow::PushGenerator<arrow::util::optional<cp::ExecBatch>> push_gen(\n+        std::move(backpressure));\n+    auto out = push_gen.producer();\n+    *out_gen = std::move(push_gen);\n+    return out;\n+  }\n+\n+  Future<> Finish() override;\n+\n+ private:\n+  PushGenerator<arrow::util::optional<cp::ExecBatch>>::Producer producer_;\n+};\n+\n+class ARROW_ENGINE_EXPORT SubstraitExecutor {\n+ public:\n+  explicit SubstraitExecutor(\n+      std::string substrait_json,\n+      AsyncGenerator<arrow::util::optional<cp::ExecBatch>>* generator,\n+      std::shared_ptr<cp::ExecPlan> plan, std::shared_ptr<Schema> schema,\n+      cp::ExecContext exec_context)\n+      : substrait_json_(substrait_json),\n+        generator_(generator),\n+        plan_(std::move(plan)),\n+        schema_(schema),\n+        exec_context_(exec_context) {}\n+\n+  Status MakePlan();\n+\n+  Result<std::shared_ptr<RecordBatchReader>> Execute();\n+\n+  Status Finalize();\n+\n+  static Result<std::shared_ptr<RecordBatchReader>> GetRecordBatchReader(\n+      std::string& substrait_json, std::shared_ptr<arrow::Schema> schema);\n\nReview comment:\n       I agree with you. I am still trying to work that out. It is not 100% clear to me how to infer the output schema from the plan. I am working on those details. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:56:42.056+0000",
                    "updated": "2022-03-24T12:56:42.056+0000",
                    "started": "2022-03-24T12:56:42.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747208",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834278074\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n\nReview comment:\n       Oh this is not relevant. Typo. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:57:40.760+0000",
                    "updated": "2022-03-24T12:57:40.760+0000",
                    "started": "2022-03-24T12:57:40.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747211",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834280102\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n+    consumers.emplace_back(new SubstraitSinkConsumer{generator_});\n+    return consumers.back();\n+  };\n+\n+  // Deserialize each relation tree in the substrait plan to an Arrow compute Declaration\n+  ARROW_ASSIGN_OR_RAISE(declerations_,\n+                        engine::DeserializePlan(*serialized_plan, consumer_factory));\n+\n+  // It's safe to drop the serialized plan; we don't leave references to its memory\n+  serialized_plan.reset();\n+\n+  // Construct an empty plan (note: configure Function registry and ThreadPool here)\n\nReview comment:\n       Sorry, this PR needs another round of cleaning on comments and formatting. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:59:58.885+0000",
                    "updated": "2022-03-24T12:59:58.885+0000",
                    "started": "2022-03-24T12:59:58.884+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747214",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834484186\n\n\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       I guess the issue is the Cookbook works against the released version of Arrow (IIRC), so it wouldn't work quite yet, but once we have 8.0.0 we should port the example so it's more visible\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T16:11:10.880+0000",
                    "updated": "2022-03-24T16:11:10.880+0000",
                    "started": "2022-03-24T16:11:10.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747305",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r834490322\n\n\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       yes, let's do that. I created an issue here:\r\n   \r\n   https://github.com/apache/arrow-cookbook/issues/168\r\n   https://github.com/apache/arrow-cookbook/issues/169\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T16:17:25.334+0000",
                    "updated": "2022-03-24T16:17:25.334+0000",
                    "started": "2022-03-24T16:17:25.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747308",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r835029109\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n\nReview comment:\n       For sure I know that there is a sink that output's a `std::shared_ptr<arrow::Table>`. Could you please point me to this implementation, I might have missed this one.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T07:54:44.225+0000",
                    "updated": "2022-03-25T07:54:44.225+0000",
                    "started": "2022-03-25T07:54:44.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747650",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r835037176\n\n\n\n##########\nFile path: cpp/examples/arrow/engine_substrait_example.cc\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       I can write a detailed example than what we have presented here in the cookbook. Or remove it from this PR and add it to cookbook later on. What do you think? \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T08:08:14.745+0000",
                    "updated": "2022-03-25T08:08:14.745+0000",
                    "started": "2022-03-25T08:08:14.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747655",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r835098733\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n+  producer_.Push(IterationEnd<arrow::util::optional<cp::ExecBatch>>());\n+  if (producer_.Close()) {\n+    return Future<>::MakeFinished();\n+  }\n+  return Future<>::MakeFinished(\n+      Status::ExecutionError(\"Error occurred in closing the batch producer\"));\n+}\n+\n+Status SubstraitExecutor::MakePlan() {\n+  ARROW_ASSIGN_OR_RAISE(auto serialized_plan,\n+                        engine::internal::SubstraitFromJSON(\"Plan\", substrait_json_));\n+\n+  auto maybe_plan_json = engine::internal::SubstraitToJSON(\"Plan\", *serialized_plan);\n+  RETURN_NOT_OK(maybe_plan_json.status());\n+\n+  std::vector<std::shared_ptr<cp::SinkNodeConsumer>> consumers;\n+  std::function<std::shared_ptr<cp::SinkNodeConsumer>()> consumer_factory = [&] {\n+    // All batches produced by the plan will be fed into IgnoringConsumers:\n+    consumers.emplace_back(new SubstraitSinkConsumer{generator_});\n+    return consumers.back();\n+  };\n+\n+  // Deserialize each relation tree in the substrait plan to an Arrow compute Declaration\n+  ARROW_ASSIGN_OR_RAISE(declerations_,\n+                        engine::DeserializePlan(*serialized_plan, consumer_factory));\n+\n+  // It's safe to drop the serialized plan; we don't leave references to its memory\n+  serialized_plan.reset();\n+\n+  // Construct an empty plan (note: configure Function registry and ThreadPool here)\n+  return Status::OK();\n+}\n+\n+Result<std::shared_ptr<RecordBatchReader>> SubstraitExecutor::Execute() {\n+  for (const cp::Declaration& decl : declerations_) {\n+    RETURN_NOT_OK(decl.AddToPlan(plan_.get()).status());\n+  }\n+\n+  ARROW_RETURN_NOT_OK(plan_->Validate());\n+\n+  ARROW_RETURN_NOT_OK(plan_->StartProducing());\n+\n+  std::shared_ptr<RecordBatchReader> sink_reader = cp::MakeGeneratorReader(\n+      schema_, std::move(*generator_), exec_context_.memory_pool());\n+  return sink_reader;\n+}\n+\n+Status SubstraitExecutor::Finalize() {\n+  ARROW_RETURN_NOT_OK(plan_->finished().status());\n+  return Status::OK();\n+}\n+\n+Result<std::shared_ptr<RecordBatchReader>> SubstraitExecutor::GetRecordBatchReader(\n+    std::string& substrait_json, std::shared_ptr<arrow::Schema> schema) {\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n+\n+  arrow::AsyncGenerator<arrow::util::optional<cp::ExecBatch>> sink_gen;\n+\n+  ARROW_ASSIGN_OR_RAISE(auto plan, cp::ExecPlan::Make());\n+\n+  arrow::engine::SubstraitExecutor executor(substrait_json, &sink_gen, plan, schema,\n+                                            exec_context);\n+  RETURN_NOT_OK(executor.MakePlan());\n+\n+  ARROW_ASSIGN_OR_RAISE(auto sink_reader, executor.Execute());\n+\n+  RETURN_NOT_OK(executor.Finalize());\n\nReview comment:\n       What do you mean by the  `RecordBatchReader`'s Close? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T09:33:08.400+0000",
                    "updated": "2022-03-25T09:33:08.400+0000",
                    "started": "2022-03-25T09:33:08.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747688",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/747690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r835104064\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/serde_test.cc\n##########\n@@ -724,5 +728,103 @@ TEST(Substrait, ExtensionSetFromPlan) {\n   EXPECT_EQ(decoded_add_func.name, \"add\");\n }\n \n+TEST(Substrait, GetRecordBatchIterator) {\n+  const auto parquet_root = std::getenv(\"PARQUET_TEST_DATA\");\n+  std::string dir_string(parquet_root);\n+  std::stringstream ss;\n+  ss << dir_string << \"/binary.parquet\";\n+  auto file_path = ss.str();\n+\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"binary\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"foo\"\n+                      ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), file_path);\n+  auto in_schema = schema({field(\"foo\", binary())});\n+  AsyncGenerator<util::optional<cp::ExecBatch>> sink_gen;\n+  cp::ExecContext exec_context(default_memory_pool(),\n+                               arrow::internal::GetCpuThreadPool());\n+  ASSERT_OK_AND_ASSIGN(auto plan, cp::ExecPlan::Make());\n+  engine::SubstraitExecutor executor(substrait_json, &sink_gen, plan, in_schema,\n+                                     exec_context);\n+  auto status = executor.MakePlan();\n+  ASSERT_OK(status);\n+  ASSERT_OK_AND_ASSIGN(auto reader, executor.Execute());\n+  auto finish = executor.Finalize();\n+  ASSERT_OK(finish);\n+  ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n+  EXPECT_GT(table->num_rows(), 0);\n+}\n+\n+TEST(Substrait, GetRecordBatchIteratorUtil) {\n+  const auto parquet_root = std::getenv(\"PARQUET_TEST_DATA\");\n+  std::string dir_string(parquet_root);\n+  std::stringstream ss;\n+  ss << dir_string << \"/binary.parquet\";\n+  auto file_path = ss.str();\n+\n+  std::string substrait_json = R\"({\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ \n+                         {\"binary\": {}}\n+                       ]\n+            },\n+            \"names\": [\n+                      \"foo\"\n+                      ]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://FILENAME_PLACEHOLDER\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ]\n+  })\";\n+\n+  std::string filename_placeholder = \"FILENAME_PLACEHOLDER\";\n+  substrait_json.replace(substrait_json.find(filename_placeholder),\n+                         filename_placeholder.size(), file_path);\n+  auto in_schema = schema({field(\"foo\", binary())});\n+\n+  ASSERT_OK_AND_ASSIGN(auto reader, engine::SubstraitExecutor::GetRecordBatchReader(\n+                                        substrait_json, in_schema));\n+  ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n+  EXPECT_GT(table->num_rows(), 0);\n\nReview comment:\n       Alternative is we can read the file directly using Parquet API and check the values. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T09:39:56.182+0000",
                    "updated": "2022-03-25T09:39:56.182+0000",
                    "started": "2022-03-25T09:39:56.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747690",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/748028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r835620641\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n\nReview comment:\n       My guess is that you are thinking of `SinkNode` which is very similar to this class.\r\n   \r\n   Right now the Substrait consumer always uses a `ConsumingSinkNode` and thus it needs a \"consumer factory\".\r\n   \r\n   Another potential implementation would be for the Substrait to take in a \"sink node factory\" instead.  That might be more flexible in the long term.  In that case we could reuse `SinkNode` here.\r\n   \r\n   So we have `SinkNode` which is a \"node that shoves batches into a push generator\" and we have `SubstraitSinkConsumer` which is a \"consumer that shoves batches into a push generator\".\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T21:29:34.789+0000",
                    "updated": "2022-03-25T21:29:34.789+0000",
                    "started": "2022-03-25T21:29:34.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748028",
                    "issueId": "13430478"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/worklog/748029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12672:\nURL: https://github.com/apache/arrow/pull/12672#discussion_r835620641\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/util.cc\n##########\n@@ -0,0 +1,106 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/substrait/util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+Status SubstraitSinkConsumer::Consume(cp::ExecBatch batch) {\n+  // Consume a batch of data\n+  bool did_push = producer_.Push(batch);\n+  if (!did_push) return Status::ExecutionError(\"Producer closed already\");\n+  return Status::OK();\n+}\n+\n+Future<> SubstraitSinkConsumer::Finish() {\n\nReview comment:\n       My guess is that you are thinking of `SinkNode` which is very similar to this class.\r\n   \r\n   Right now the Substrait consumer always uses a `ConsumingSinkNode` and thus it needs a \"consumer factory\".\r\n   \r\n   Another potential implementation would be for the Substrait to take in a \"sink node factory\" instead (or we could have both implementations).  That might be more flexible in the long term.  In that case we could reuse `SinkNode` here.\r\n   \r\n   So we have `SinkNode` which is a \"node that shoves batches into a push generator\" and we have `SubstraitSinkConsumer` which is a \"consumer that shoves batches into a push generator\".\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T21:29:57.345+0000",
                    "updated": "2022-03-25T21:29:57.345+0000",
                    "started": "2022-03-25T21:29:57.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748029",
                    "issueId": "13430478"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 108000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2865f926[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2dc11c9a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41c74ab7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@64c7bbd9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51ed8fb1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@769ada86[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@df3b410[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5433cf04[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@691e5234[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@49f0eb7b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59b38561[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@13322abc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 108000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 20 23:50:26 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-05-20T23:50:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15779/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-02-24T16:29:28.000+0000",
        "updated": "2022-05-21T02:20:57.000+0000",
        "timeoriginalestimate": null,
        "description": "We will want to figure out how to expose the Substrait consumer to python.  This could be a single method that accepts a buffer of bytes and returns an iterator of record batches but we might also want a helper method that returns a table.  I'm thinking this would go in the compute namespace.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "30h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 108000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Create python bindings for Substrait consumer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/comment/17501471",
                    "id": "17501471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~jorisvandenbossche][~amol-] Any preference on where we stick this method?  I think it will just be something like...\r\n\r\n{noformat}\r\nrun_query(plan: bytes): RecordBatchReader\r\n{noformat}\r\n\r\nSo do we want {{pyarrow.compute.run_query}}, {{pyarrow.dataset.run_query}}, or {{pyarrow.engine.run_query}}?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-03-04T18:33:01.262+0000",
                    "updated": "2022-03-04T18:34:15.148+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/comment/17503029",
                    "id": "17503029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "If we follow more closely the namespace division in C++, then it would be a {{pyarrow.engine}} submodule? Of course, if that would contain (for now) only a single function, that might not be worth it. On the other hand, it might also grow more functionality in the future?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-03-08T16:00:50.400+0000",
                    "updated": "2022-03-08T16:00:50.400+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/comment/17503067",
                    "id": "17503067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "The distinction in C++ is mostly around modularity.  There are some very essential compute capabilities (casting, parsing, statistics) that make the compute module something of a required module (e.g. you can't even build parquet without compute).  We didn't want to force all of this query engine code (which may, in the future, add additional 3rd party dependencies, etc.) on users.\r\n\r\nThat's not quite as important a concern in python.  Most people are working with pypi/conda builds which are fairly complete to begin with and also it's possible to disable things at a class/function level.\r\n\r\nAs for future capabilities, my current brain dump is that we might structure this as a QueryEngine class.  We will want to make it possible to configure things like spillover (where on disk should we spillover?  How much can we fill before we abandon the query?) and scheduling (how much memory can we use for active tasks?) and reporting (progress on running queries, statistics on completed queries, etc.)  UDF registration is probably another thing that is more \"query engine\" and less \"compute\".\r\n\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-03-08T17:10:58.831+0000",
                    "updated": "2022-03-08T17:10:58.831+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430478/comment/17540328",
                    "id": "17540328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 12672\n[https://github.com/apache/arrow/pull/12672]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-05-20T23:50:26.089+0000",
                    "updated": "2022-05-20T23:50:26.089+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0zx0w:",
        "customfield_12314139": null
    }
}