{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13303426",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426",
    "key": "ARROW-8732",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12611228",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611228",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13351136",
                    "key": "ARROW-11191",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351136",
                    "fields": {
                        "summary": "[C++] Use FnOnce for TaskGroup's tasks instead of std::function",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12609824",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12609824",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13361948",
                    "key": "ARROW-11841",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948",
                    "fields": {
                        "summary": "[R][C++] Allow cancelling long-running commands",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 44400,
            "total": 44400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 44400,
            "total": 44400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8732/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 74,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/433216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T16:47:23.542+0000",
                    "updated": "2020-05-14T16:47:23.542+0000",
                    "started": "2020-05-14T16:47:23.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433216",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/433217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#issuecomment-628756628\n\n\n   @fsaintjacques @bkietz Comments welcome on this draft.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T16:47:37.554+0000",
                    "updated": "2020-05-14T16:47:37.554+0000",
                    "started": "2020-05-14T16:47:37.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433217",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/433219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r425284648\n\n\n\n##########\nFile path: cpp/src/arrow/status.h\n##########\n@@ -83,6 +83,7 @@ enum class StatusCode : char {\n   IOError = 5,\n   CapacityError = 6,\n   IndexError = 7,\n+  Cancelled = 8,\n\nReview comment:\n       I'm not sure this is useful. Cancellations have an underlying cause, so perhaps force the source of cancellation to pass the actual cause?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T16:49:03.937+0000",
                    "updated": "2020-05-14T16:49:03.937+0000",
                    "started": "2020-05-14T16:49:03.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433219",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/433223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#issuecomment-628764727\n\n\n   https://issues.apache.org/jira/browse/ARROW-8732\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T17:02:18.474+0000",
                    "updated": "2020-05-14T17:02:18.474+0000",
                    "started": "2020-05-14T17:02:18.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433223",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/434938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r427297417\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel.cc\n##########\n@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <mutex>\n+#include <utility>\n+\n+#include \"arrow/util/cancel.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+StopCallback::StopCallback(StopToken* token, Callable cb)\n+    : token_(token), cb_(std::move(cb)) {\n+  if (token_ != nullptr) {\n+    DCHECK(cb_);\n+    // May call *this\n+    token_->SetCallback(this);\n+  }\n+}\n+\n+StopCallback::~StopCallback() {\n+  if (token_ != nullptr) {\n+    token_->RemoveCallback(this);\n+  }\n+}\n+\n+StopCallback::StopCallback(StopCallback&& other) { *this = std::move(other); }\n+\n+StopCallback& StopCallback::operator=(StopCallback&& other) {\n+  token_ = other.token_;\n+  if (token_ != nullptr) {\n+    other.token_ = nullptr;\n+    token_->RemoveCallback(&other);\n+  }\n+  cb_ = std::move(other.cb_);\n+  if (token_ != nullptr) {\n+    // May call *this\n+    token_->SetCallback(this);\n+  }\n+  return *this;\n+}\n+\n+void StopCallback::Call(const Status& st) {\n+  if (cb_) {\n+    // Forget callable after calling it\n+    Callable local_cb;\n+    cb_.swap(local_cb);\n+    local_cb(st);\n+  }\n+}\n+\n+struct StopToken::Impl {\n+  std::mutex mutex_;\n+  StopCallback* cb_ = nullptr;\n+  bool requested_ = false;\n+  Status cancel_error_;\n+};\n+\n+StopToken::StopToken() : impl_(new Impl()) {}\n+\n+StopToken::~StopToken() {}\n+\n+Status StopToken::Poll() {\n+  std::lock_guard<std::mutex> lock(impl_->mutex_);\n\nReview comment:\n       We may be able to avoid the mutex lock here by using an atomic bool for `requested_`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T13:22:49.868+0000",
                    "updated": "2020-05-19T13:22:49.868+0000",
                    "started": "2020-05-19T13:22:49.867+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434938",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/435493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r428087408\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel.cc\n##########\n@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <mutex>\n+#include <utility>\n+\n+#include \"arrow/util/cancel.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+StopCallback::StopCallback(StopToken* token, Callable cb)\n+    : token_(token), cb_(std::move(cb)) {\n+  if (token_ != nullptr) {\n+    DCHECK(cb_);\n+    // May call *this\n+    token_->SetCallback(this);\n+  }\n+}\n+\n+StopCallback::~StopCallback() {\n+  if (token_ != nullptr) {\n+    token_->RemoveCallback(this);\n+  }\n+}\n+\n+StopCallback::StopCallback(StopCallback&& other) { *this = std::move(other); }\n+\n+StopCallback& StopCallback::operator=(StopCallback&& other) {\n+  token_ = other.token_;\n+  if (token_ != nullptr) {\n+    other.token_ = nullptr;\n+    token_->RemoveCallback(&other);\n+  }\n+  cb_ = std::move(other.cb_);\n+  if (token_ != nullptr) {\n+    // May call *this\n+    token_->SetCallback(this);\n+  }\n+  return *this;\n+}\n+\n+void StopCallback::Call(const Status& st) {\n+  if (cb_) {\n+    // Forget callable after calling it\n+    Callable local_cb;\n+    cb_.swap(local_cb);\n+    local_cb(st);\n+  }\n+}\n+\n+struct StopToken::Impl {\n+  std::mutex mutex_;\n+  StopCallback* cb_ = nullptr;\n+  bool requested_ = false;\n+  Status cancel_error_;\n+};\n+\n+StopToken::StopToken() : impl_(new Impl()) {}\n+\n+StopToken::~StopToken() {}\n+\n+Status StopToken::Poll() {\n+  std::lock_guard<std::mutex> lock(impl_->mutex_);\n\nReview comment:\n       Done. Though I will need to write threaded tests and check using TSAN.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-20T15:05:22.819+0000",
                    "updated": "2020-05-20T15:05:22.819+0000",
                    "started": "2020-05-20T15:05:22.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435493",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/435518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r428135154\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel.cc\n##########\n@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <mutex>\n+#include <utility>\n+\n+#include \"arrow/util/cancel.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+StopCallback::StopCallback(StopToken* token, Callable cb)\n+    : token_(token), cb_(std::move(cb)) {\n+  if (token_ != nullptr) {\n+    DCHECK(cb_);\n+    // May call *this\n+    token_->SetCallback(this);\n+  }\n+}\n+\n+StopCallback::~StopCallback() {\n+  if (token_ != nullptr) {\n+    token_->RemoveCallback(this);\n+  }\n+}\n+\n+StopCallback::StopCallback(StopCallback&& other) { *this = std::move(other); }\n+\n+StopCallback& StopCallback::operator=(StopCallback&& other) {\n+  token_ = other.token_;\n+  if (token_ != nullptr) {\n+    other.token_ = nullptr;\n+    token_->RemoveCallback(&other);\n+  }\n+  cb_ = std::move(other.cb_);\n+  if (token_ != nullptr) {\n+    // May call *this\n+    token_->SetCallback(this);\n+  }\n+  return *this;\n+}\n+\n+void StopCallback::Call(const Status& st) {\n+  if (cb_) {\n+    // Forget callable after calling it\n+    Callable local_cb;\n+    cb_.swap(local_cb);\n+    local_cb(st);\n+  }\n+}\n+\n+struct StopToken::Impl {\n+  std::mutex mutex_;\n+  StopCallback* cb_ = nullptr;\n+  bool requested_ = false;\n+  Status cancel_error_;\n+};\n+\n+StopToken::StopToken() : impl_(new Impl()) {}\n+\n+StopToken::~StopToken() {}\n+\n+Status StopToken::Poll() {\n+  std::lock_guard<std::mutex> lock(impl_->mutex_);\n\nReview comment:\n       Threaded tests added.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-20T16:10:49.724+0000",
                    "updated": "2020-05-20T16:10:49.724+0000",
                    "started": "2020-05-20T16:10:49.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435518",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/435954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r428612802\n\n\n\n##########\nFile path: cpp/src/arrow/status.h\n##########\n@@ -83,6 +83,7 @@ enum class StatusCode : char {\n   IOError = 5,\n   CapacityError = 6,\n   IndexError = 7,\n+  Cancelled = 8,\n\nReview comment:\n       I think it's fine, think about one thread error-ing and the other receiving the cancel broadcast. It will be useful to distinguish which are real errors versus cancel-induced.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T12:09:23.977+0000",
                    "updated": "2020-05-21T12:09:23.977+0000",
                    "started": "2020-05-21T12:09:23.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435954",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/435977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r428615006\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <functional>\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class StopToken;\n+\n+// A RAII wrapper that automatically registers and unregisters\n+// a callback to a StopToken.\n+class ARROW_MUST_USE_TYPE ARROW_EXPORT StopCallback {\n+ public:\n+  using Callable = std::function<void(const Status&)>;\n+  StopCallback(StopToken* token, Callable cb);\n+  ~StopCallback();\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopCallback);\n+  StopCallback(StopCallback&&);\n+  StopCallback& operator=(StopCallback&&);\n+\n+  void Call(const Status&);\n+\n+ protected:\n+  StopToken* token_;\n+  Callable cb_;\n+};\n+\n+class ARROW_EXPORT StopToken {\n+ public:\n+  StopToken();\n+  ~StopToken();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopToken);\n+\n+  Status Poll();\n+  bool IsStopRequested();\n+\n+  void RequestStop();\n+  void RequestStop(std::string message);\n+  void RequestStop(Status error);\n+\n+  // Register a callback that will be called whenever cancellation happens.\n+  // Note the callback may be called immediately, if cancellation was already\n+  // requested.  The callback will be unregistered when the returned object\n+  // is destroyed.\n+  StopCallback SetCallback(StopCallback::Callable cb);\n\nReview comment:\n       Is there a reason why this is not part of the constructor, do you foresee cases where we need to change the callback dynamically?\n\n##########\nFile path: cpp/src/arrow/util/cancel.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <functional>\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class StopToken;\n+\n+// A RAII wrapper that automatically registers and unregisters\n+// a callback to a StopToken.\n+class ARROW_MUST_USE_TYPE ARROW_EXPORT StopCallback {\n+ public:\n+  using Callable = std::function<void(const Status&)>;\n+  StopCallback(StopToken* token, Callable cb);\n+  ~StopCallback();\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopCallback);\n+  StopCallback(StopCallback&&);\n+  StopCallback& operator=(StopCallback&&);\n+\n+  void Call(const Status&);\n+\n+ protected:\n+  StopToken* token_;\n+  Callable cb_;\n+};\n+\n+class ARROW_EXPORT StopToken {\n+ public:\n+  StopToken();\n+  ~StopToken();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopToken);\n+\n+  Status Poll();\n\nReview comment:\n       At the very least, document which methods are blocking. Do you think we should always make this explicit in the naming, e.g. `RequestStopBlocking()`\n\n##########\nFile path: cpp/src/arrow/util/cancel_test.cc\n##########\n@@ -0,0 +1,202 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <functional>\n+#include <random>\n+#include <string>\n+#include <thread>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/cancel.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+static constexpr double kLongWait = 5;  // seconds\n+\n+class CancelTest : public ::testing::Test {};\n+\n+TEST_F(CancelTest, TokenBasics) {\n+  {\n+    StopToken token;\n+    ASSERT_FALSE(token.IsStopRequested());\n+    ASSERT_OK(token.Poll());\n+\n+    token.RequestStop();\n+    ASSERT_TRUE(token.IsStopRequested());\n+    ASSERT_RAISES(Cancelled, token.Poll());\n+  }\n+  {\n+    StopToken token;\n+    token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+    ASSERT_TRUE(token.IsStopRequested());\n+    ASSERT_RAISES(IOError, token.Poll());\n+  }\n+}\n+\n+TEST_F(CancelTest, RequestStopTwice) {\n+  StopToken token;\n+  token.RequestStop();\n+  // Second RequestStop() call is ignored\n+  token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+  ASSERT_TRUE(token.IsStopRequested());\n+  ASSERT_RAISES(Cancelled, token.Poll());\n+}\n+\n+TEST_F(CancelTest, SetCallback) {\n+  std::vector<int> results;\n+  StopToken token;\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(1); });\n+    ASSERT_EQ(results.size(), 0);\n+  }\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(1); });\n+    ASSERT_EQ(results.size(), 0);\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>{1});\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>{1});\n+  }\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(2); });\n+    ASSERT_EQ(results, std::vector<int>({1, 2}));\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>({1, 2}));\n+  }\n+}\n\nReview comment:\n       Add a case where the callback is not set in the token. Then request the cancellation and set a callback after as this is documented.\n\n##########\nFile path: cpp/src/arrow/util/cancel_test.cc\n##########\n@@ -0,0 +1,202 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <functional>\n+#include <random>\n+#include <string>\n+#include <thread>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/cancel.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+static constexpr double kLongWait = 5;  // seconds\n+\n+class CancelTest : public ::testing::Test {};\n+\n+TEST_F(CancelTest, TokenBasics) {\n+  {\n+    StopToken token;\n+    ASSERT_FALSE(token.IsStopRequested());\n+    ASSERT_OK(token.Poll());\n+\n+    token.RequestStop();\n+    ASSERT_TRUE(token.IsStopRequested());\n+    ASSERT_RAISES(Cancelled, token.Poll());\n+  }\n+  {\n+    StopToken token;\n+    token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+    ASSERT_TRUE(token.IsStopRequested());\n+    ASSERT_RAISES(IOError, token.Poll());\n+  }\n+}\n+\n+TEST_F(CancelTest, RequestStopTwice) {\n+  StopToken token;\n+  token.RequestStop();\n+  // Second RequestStop() call is ignored\n+  token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+  ASSERT_TRUE(token.IsStopRequested());\n+  ASSERT_RAISES(Cancelled, token.Poll());\n+}\n+\n+TEST_F(CancelTest, SetCallback) {\n+  std::vector<int> results;\n+  StopToken token;\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(1); });\n+    ASSERT_EQ(results.size(), 0);\n+  }\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(1); });\n+    ASSERT_EQ(results.size(), 0);\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>{1});\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>{1});\n+  }\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(2); });\n+    ASSERT_EQ(results, std::vector<int>({1, 2}));\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>({1, 2}));\n+  }\n+}\n+\n+TEST_F(CancelTest, StopCallbackMove) {\n+  std::vector<int> results;\n+  StopToken token;\n+\n+  StopCallback cb1(&token, [&](const Status& st) { results.push_back(1); });\n+  const auto cb2 = std::move(cb1);\n+\n+  ASSERT_EQ(results.size(), 0);\n+  token.RequestStop();\n+  ASSERT_EQ(results, std::vector<int>{1});\n+}\n+\n+TEST_F(CancelTest, ThreadedPollSuccess) {\n+  constexpr int kNumThreads = 3;\n+  constexpr int kMaxLoops = 30000;\n+\n+  std::vector<Status> results(kNumThreads);\n+  std::vector<std::thread> threads;\n+\n+  StopToken token;\n+  auto barrier = Future<void>::Make();\n+\n+  const auto worker_func = [&](int thread_num) {\n+    ARROW_CHECK(barrier.Wait(kLongWait));\n+    for (int i = 0; token.Poll().ok() && i < kMaxLoops; ++i) {\n+    }\n+    results[thread_num] = token.Poll();\n+  };\n+  for (int i = 0; i < kNumThreads; ++i) {\n+    threads.emplace_back(std::bind(worker_func, i));\n+  }\n+\n+  // Let the threads start\n+  SleepFor(1e-3);\n+  // Unblock all threads\n+  barrier.MarkFinished();\n+  for (auto& thread : threads) {\n+    thread.join();\n+  }\n+\n+  for (const auto& st : results) {\n+    ASSERT_OK(st);\n+  }\n+}\n+\n+TEST_F(CancelTest, ThreadedPollCancel) {\n+  constexpr int kNumThreads = 3;\n+  constexpr int kMaxLoops = 1000000;\n+\n+  std::vector<Status> results(kNumThreads);\n+  std::vector<std::thread> threads;\n+\n+  StopToken token;\n+  auto barrier = Future<void>::Make();\n+\n+  const auto worker_func = [&](int thread_num) {\n+    ARROW_CHECK(barrier.Wait(kLongWait));\n+    for (int i = 0; token.Poll().ok() && i < kMaxLoops; ++i) {\n+    }\n+    results[thread_num] = token.Poll();\n+  };\n+\n+  for (int i = 0; i < kNumThreads; ++i) {\n+    threads.emplace_back(std::bind(worker_func, i));\n+  }\n+  // Let the threads start\n+  SleepFor(1e-3);\n+  // Unblock all threads\n+  barrier.MarkFinished();\n+  token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+  for (auto& thread : threads) {\n+    thread.join();\n+  }\n+\n+  for (const auto& st : results) {\n+    ASSERT_RAISES(IOError, st);\n+  }\n+}\n+\n+TEST_F(CancelTest, ThreadedSetCallbackCancel) {\n+  constexpr int kIterations = 100;\n+  constexpr double kMaxWait = 1e-3;\n+\n+  std::default_random_engine gen(42);\n+  std::uniform_real_distribution<double> wait_dist(0.0, kMaxWait);\n+\n+  for (int i = 0; i < kIterations; ++i) {\n+    Status result;\n+\n+    StopToken token;\n+    auto barrier = Future<void>::Make();\n+\n+    const auto worker_func = [&]() {\n+      ARROW_CHECK(barrier.Wait(kLongWait));\n+      token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+    };\n+    std::thread thread(worker_func);\n+\n+    // Unblock thread\n+    barrier.MarkFinished();\n+    // Use a variable wait time to maximize potential synchronization issues\n+    const auto wait_time = wait_dist(gen);\n+    if (wait_time > kMaxWait * 0.5) {\n+      SleepFor(wait_time);\n\nReview comment:\n       Instead of sleeping, just use a second barrier that is MarkFinished by the cancelling thread after the RequestStop call.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T13:10:22.172+0000",
                    "updated": "2020-05-21T13:10:22.172+0000",
                    "started": "2020-05-21T13:10:22.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435977",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/522370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r539522546\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel_test.cc\n##########\n@@ -0,0 +1,202 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <functional>\n+#include <random>\n+#include <string>\n+#include <thread>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/cancel.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+static constexpr double kLongWait = 5;  // seconds\n+\n+class CancelTest : public ::testing::Test {};\n+\n+TEST_F(CancelTest, TokenBasics) {\n+  {\n+    StopToken token;\n+    ASSERT_FALSE(token.IsStopRequested());\n+    ASSERT_OK(token.Poll());\n+\n+    token.RequestStop();\n+    ASSERT_TRUE(token.IsStopRequested());\n+    ASSERT_RAISES(Cancelled, token.Poll());\n+  }\n+  {\n+    StopToken token;\n+    token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+    ASSERT_TRUE(token.IsStopRequested());\n+    ASSERT_RAISES(IOError, token.Poll());\n+  }\n+}\n+\n+TEST_F(CancelTest, RequestStopTwice) {\n+  StopToken token;\n+  token.RequestStop();\n+  // Second RequestStop() call is ignored\n+  token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+  ASSERT_TRUE(token.IsStopRequested());\n+  ASSERT_RAISES(Cancelled, token.Poll());\n+}\n+\n+TEST_F(CancelTest, SetCallback) {\n+  std::vector<int> results;\n+  StopToken token;\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(1); });\n+    ASSERT_EQ(results.size(), 0);\n+  }\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(1); });\n+    ASSERT_EQ(results.size(), 0);\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>{1});\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>{1});\n+  }\n+  {\n+    const auto cb = token.SetCallback([&](const Status& st) { results.push_back(2); });\n+    ASSERT_EQ(results, std::vector<int>({1, 2}));\n+    token.RequestStop();\n+    ASSERT_EQ(results, std::vector<int>({1, 2}));\n+  }\n+}\n+\n+TEST_F(CancelTest, StopCallbackMove) {\n+  std::vector<int> results;\n+  StopToken token;\n+\n+  StopCallback cb1(&token, [&](const Status& st) { results.push_back(1); });\n+  const auto cb2 = std::move(cb1);\n+\n+  ASSERT_EQ(results.size(), 0);\n+  token.RequestStop();\n+  ASSERT_EQ(results, std::vector<int>{1});\n+}\n+\n+TEST_F(CancelTest, ThreadedPollSuccess) {\n+  constexpr int kNumThreads = 3;\n+  constexpr int kMaxLoops = 30000;\n+\n+  std::vector<Status> results(kNumThreads);\n+  std::vector<std::thread> threads;\n+\n+  StopToken token;\n+  auto barrier = Future<void>::Make();\n+\n+  const auto worker_func = [&](int thread_num) {\n+    ARROW_CHECK(barrier.Wait(kLongWait));\n+    for (int i = 0; token.Poll().ok() && i < kMaxLoops; ++i) {\n+    }\n+    results[thread_num] = token.Poll();\n+  };\n+  for (int i = 0; i < kNumThreads; ++i) {\n+    threads.emplace_back(std::bind(worker_func, i));\n+  }\n+\n+  // Let the threads start\n+  SleepFor(1e-3);\n+  // Unblock all threads\n+  barrier.MarkFinished();\n+  for (auto& thread : threads) {\n+    thread.join();\n+  }\n+\n+  for (const auto& st : results) {\n+    ASSERT_OK(st);\n+  }\n+}\n+\n+TEST_F(CancelTest, ThreadedPollCancel) {\n+  constexpr int kNumThreads = 3;\n+  constexpr int kMaxLoops = 1000000;\n+\n+  std::vector<Status> results(kNumThreads);\n+  std::vector<std::thread> threads;\n+\n+  StopToken token;\n+  auto barrier = Future<void>::Make();\n+\n+  const auto worker_func = [&](int thread_num) {\n+    ARROW_CHECK(barrier.Wait(kLongWait));\n+    for (int i = 0; token.Poll().ok() && i < kMaxLoops; ++i) {\n+    }\n+    results[thread_num] = token.Poll();\n+  };\n+\n+  for (int i = 0; i < kNumThreads; ++i) {\n+    threads.emplace_back(std::bind(worker_func, i));\n+  }\n+  // Let the threads start\n+  SleepFor(1e-3);\n+  // Unblock all threads\n+  barrier.MarkFinished();\n+  token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+  for (auto& thread : threads) {\n+    thread.join();\n+  }\n+\n+  for (const auto& st : results) {\n+    ASSERT_RAISES(IOError, st);\n+  }\n+}\n+\n+TEST_F(CancelTest, ThreadedSetCallbackCancel) {\n+  constexpr int kIterations = 100;\n+  constexpr double kMaxWait = 1e-3;\n+\n+  std::default_random_engine gen(42);\n+  std::uniform_real_distribution<double> wait_dist(0.0, kMaxWait);\n+\n+  for (int i = 0; i < kIterations; ++i) {\n+    Status result;\n+\n+    StopToken token;\n+    auto barrier = Future<void>::Make();\n+\n+    const auto worker_func = [&]() {\n+      ARROW_CHECK(barrier.Wait(kLongWait));\n+      token.RequestStop(Status::IOError(\"Operation cancelled\"));\n+    };\n+    std::thread thread(worker_func);\n+\n+    // Unblock thread\n+    barrier.MarkFinished();\n+    // Use a variable wait time to maximize potential synchronization issues\n+    const auto wait_time = wait_dist(gen);\n+    if (wait_time > kMaxWait * 0.5) {\n+      SleepFor(wait_time);\n\nReview comment:\n       Hmm, no, the purpose is to instantiate the `StopCallback` at any possible time, including while the other thread is running `token.RequestStop(...)`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-09T17:54:59.417+0000",
                    "updated": "2020-12-09T17:54:59.417+0000",
                    "started": "2020-12-09T17:54:59.416+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522370",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/522371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r539523917\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <functional>\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class StopToken;\n+\n+// A RAII wrapper that automatically registers and unregisters\n+// a callback to a StopToken.\n+class ARROW_MUST_USE_TYPE ARROW_EXPORT StopCallback {\n+ public:\n+  using Callable = std::function<void(const Status&)>;\n+  StopCallback(StopToken* token, Callable cb);\n+  ~StopCallback();\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopCallback);\n+  StopCallback(StopCallback&&);\n+  StopCallback& operator=(StopCallback&&);\n+\n+  void Call(const Status&);\n+\n+ protected:\n+  StopToken* token_;\n+  Callable cb_;\n+};\n+\n+class ARROW_EXPORT StopToken {\n+ public:\n+  StopToken();\n+  ~StopToken();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopToken);\n+\n+  Status Poll();\n+  bool IsStopRequested();\n+\n+  void RequestStop();\n+  void RequestStop(std::string message);\n+  void RequestStop(Status error);\n+\n+  // Register a callback that will be called whenever cancellation happens.\n+  // Note the callback may be called immediately, if cancellation was already\n+  // requested.  The callback will be unregistered when the returned object\n+  // is destroyed.\n+  StopCallback SetCallback(StopCallback::Callable cb);\n\nReview comment:\n       If the producer is sequencing several different operations with their own stop callbacks, this should make it easier than having to write a single overall callback that will dispatch to the right sub-callback.\r\n   \r\n   Or at least that's the thinking. We may want to revisit this later, once we start using this concretely :-)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-09T17:56:53.976+0000",
                    "updated": "2020-12-09T17:56:53.976+0000",
                    "started": "2020-12-09T17:56:53.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522371",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/522372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r539524089\n\n\n\n##########\nFile path: cpp/src/arrow/util/cancel.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <functional>\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class StopToken;\n+\n+// A RAII wrapper that automatically registers and unregisters\n+// a callback to a StopToken.\n+class ARROW_MUST_USE_TYPE ARROW_EXPORT StopCallback {\n+ public:\n+  using Callable = std::function<void(const Status&)>;\n+  StopCallback(StopToken* token, Callable cb);\n+  ~StopCallback();\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopCallback);\n+  StopCallback(StopCallback&&);\n+  StopCallback& operator=(StopCallback&&);\n+\n+  void Call(const Status&);\n+\n+ protected:\n+  StopToken* token_;\n+  Callable cb_;\n+};\n+\n+class ARROW_EXPORT StopToken {\n+ public:\n+  StopToken();\n+  ~StopToken();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(StopToken);\n+\n+  Status Poll();\n\nReview comment:\n       I should add docstrings in any case.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-09T17:57:08.154+0000",
                    "updated": "2020-12-09T17:57:08.154+0000",
                    "started": "2020-12-09T17:57:08.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522372",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/522406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#issuecomment-742000105\n\n\n   @bkietz @westonpace I updated this draft PR and added integration with futures. I'm not sure about the overall API and control flow, feel free to discuss.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-09T19:34:32.499+0000",
                    "updated": "2020-12-09T19:34:32.499+0000",
                    "started": "2020-12-09T19:34:32.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522406",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/523913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r542448867\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -218,7 +220,8 @@ class ARROW_EXPORT ThreadPool : public Executor {\n \n   ThreadPool();\n \n-  Status SpawnReal(TaskHints hints, std::function<void()> task) override;\n+  Status SpawnReal(TaskHints hints, std::function<void()> task,\n+                   StopToken* = NULLPTR) override;\n\nReview comment:\n       @lidavidm This PR, if accepted, will change the `Executor` interface slightly. You may want to take a look.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T14:57:54.308+0000",
                    "updated": "2020-12-14T14:57:54.308+0000",
                    "started": "2020-12-14T14:57:54.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523913",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/523928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r542465782\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -218,7 +220,8 @@ class ARROW_EXPORT ThreadPool : public Executor {\n \n   ThreadPool();\n \n-  Status SpawnReal(TaskHints hints, std::function<void()> task) override;\n+  Status SpawnReal(TaskHints hints, std::function<void()> task,\n+                   StopToken* = NULLPTR) override;\n\nReview comment:\n       Thanks for the heads up. This looks good, we don't yet use the Executor interface but will move to it once we start looking at upstreaming/open-sourcing our project.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T15:19:01.538+0000",
                    "updated": "2020-12-14T15:19:01.538+0000",
                    "started": "2020-12-14T15:19:01.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523928",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/524219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r543006149\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -218,7 +220,8 @@ class ARROW_EXPORT ThreadPool : public Executor {\n \n   ThreadPool();\n \n-  Status SpawnReal(TaskHints hints, std::function<void()> task) override;\n+  Status SpawnReal(TaskHints hints, std::function<void()> task,\n+                   StopToken* = NULLPTR) override;\n\nReview comment:\n       Why expose the stop token to the executor at all?  If I'm writing a custom executor what do I do with the stop token?  I see that the thread pool uses this to skip the task if it has been cancelled prior to scheduling but conceivably this could be achieved by wrapping the task as well in the same way that the TaskGroup::AppendReal does.  Do you envision certain classes of custom executor will want to do something different with the stop token?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T02:53:39.721+0000",
                    "updated": "2020-12-15T02:53:39.721+0000",
                    "started": "2020-12-15T02:53:39.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524219",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/524222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r543011950\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -238,6 +242,22 @@ class Future {\n     return impl_->Wait(seconds);\n   }\n \n+  template <typename... CancelArgs>\n+  bool Cancel(CancelArgs&&... args) {\n+    auto& stop_token = impl_->stop_token_;\n\nReview comment:\n       What if the future has already been marked completed?  This could happen with a timing issue (user requests cancel at the same time the operation is finishing) or when we mix this in with continuations it could happen where a chain of futures is cancelled from the end, the cancellation will propagate backwards through the chain, and the first few futures may have already completed.\r\n   \r\n   This second case we could address when merging that change in too.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T03:10:27.650+0000",
                    "updated": "2020-12-15T03:10:27.650+0000",
                    "started": "2020-12-15T03:10:27.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524222",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/524224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r543015642\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -218,7 +220,8 @@ class ARROW_EXPORT ThreadPool : public Executor {\n \n   ThreadPool();\n \n-  Status SpawnReal(TaskHints hints, std::function<void()> task) override;\n+  Status SpawnReal(TaskHints hints, std::function<void()> task,\n+                   StopToken* = NULLPTR) override;\n\nReview comment:\n       Maybe I answered my own question.  The executor might get some benefit from freeing the resources sooner rather than later (e.g. to keep queues down and more efficient) and the executor can choose to completely ignore the stop token without any consequence so it isn't like it is putting much burden on the implementor of the executor interface.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T03:21:30.007+0000",
                    "updated": "2020-12-15T03:21:30.007+0000",
                    "started": "2020-12-15T03:21:30.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524224",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/524230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#issuecomment-745031743\n\n\n   So for discussion & comparison's sake, I will point out that this approach is a little different than C#'s \"unified\" approach [1] and is more in line with Java's approach (minus Java's added complexity around \"interrupts\").\r\n   \r\n   In the C# model the stop token is provided by the consumer which is a little counter-intuitive but it does have some advantages.  An intermediate layer's only responsibility is to receive the cancellation token and pass it down to all lower layer calls.  For example, consider some kind of intermediate parsing-aggregation layer.  It makes multiple concurrent calls to load and parse a column of data.  With the current approach it would have to keep track of several stop tokens, provide its own stop token (which it returns to the caller), listen to its stop token, and propagate any cancellation to all of the child stop tokens.\r\n   \r\n   This model also means that arrow-10182 will have to propagate cancellation up the callback chain.  In other words, when a child future is cancelled, it should cancel the parent future that caused the child future to be created.  This is the opposite direction that errors propagate.  I'm certain it's something that can be done, but it adds more complexity.  In the unified model all futures in the chain would be cancelled at once (since they share the same cancellation source) and there is no need to propagate.\r\n   \r\n   On the other hand, to play devil's advocate, the unified cancellation model can be confusing to the consumer.  As I mentioned earlier, it is counter-intuitive for the consumer to provide the cancellation token.  People are used to the idea of getting some kind of handle back from a long running operation that they cancel.\r\n   \r\n   [1] https://docs.microsoft.com/en-us/dotnet/standard/threading/cancellation-in-managed-threads\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T03:39:54.076+0000",
                    "updated": "2020-12-15T03:39:54.076+0000",
                    "started": "2020-12-15T03:39:54.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524230",
                    "issueId": "13303426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/worklog/524402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7179:\nURL: https://github.com/apache/arrow/pull/7179#discussion_r543328875\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -218,7 +220,8 @@ class ARROW_EXPORT ThreadPool : public Executor {\n \n   ThreadPool();\n \n-  Status SpawnReal(TaskHints hints, std::function<void()> task) override;\n+  Status SpawnReal(TaskHints hints, std::function<void()> task,\n+                   StopToken* = NULLPTR) override;\n\nReview comment:\n       Yes, the idea is that it gives more freedom to the executor like this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T13:12:13.900+0000",
                    "updated": "2020-12-15T13:12:13.900+0000",
                    "started": "2020-12-15T13:12:13.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524402",
                    "issueId": "13303426"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 44400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6ff50b4c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47913f65[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fc3eaf1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5167947b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@88ad337[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@98e6a48[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@91a9dea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@643314fe[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a7e7024[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@40d89109[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1df0b135[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6118c291[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 44400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 09 16:07:48 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-09T16:07:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8732/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2020-05-07T14:56:01.000+0000",
        "updated": "2021-03-22T16:24:25.000+0000",
        "timeoriginalestimate": null,
        "description": "There should be a way for consumers of Futures to notify that they are not interested in the task at hand anymore. For some kinds of tasks this may allow cancelling the task in-flight (e.g. an IO task, or a task consisting of multiple steps).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "12h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 44400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Let Futures support cancellation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17101745",
                    "id": "17101745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~fsaintjacques] for opinions.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-05-07T14:56:15.083+0000",
                    "updated": "2020-05-07T14:56:15.083+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17101759",
                    "id": "17101759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Potentially interesting read:\r\nhttps://link.springer.com/chapter/10.1007/978-1-4842-4398-5_15\r\nThis paper looks interesting as well, but it's not in free access:\r\nhttps://www.researchgate.net/publication/290103663_Composable_parallelism_foundations_in_the_IntelR_threading_building_blocks_task_scheduler",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-05-07T15:07:59.246+0000",
                    "updated": "2020-05-07T15:07:59.246+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17105718",
                    "id": "17105718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "C++20 stop_token:\r\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r9.pdf",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-05-12T20:30:59.032+0000",
                    "updated": "2020-05-12T20:30:59.032+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17105721",
                    "id": "17105721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Probably the in-process thread will have to be abandoned. At least then subsequent tasks in the queue are unblocked from executing (even if it leads to oversubscription temporarily)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-12T20:35:55.032+0000",
                    "updated": "2020-05-12T20:35:55.032+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17107398",
                    "id": "17107398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Microsoft PPL cancellation_token:\r\nhttps://docs.microsoft.com/en-us/cpp/parallel/concrt/cancellation-in-the-ppl?view=vs-2019\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-05-14T15:22:18.805+0000",
                    "updated": "2020-05-14T15:22:18.805+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17226979",
                    "id": "17226979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm not sure I see how a {{StopToken}} is distinct from a {{Future<void>}} which the main thread can optionally MarkFinished and which workers can poll for completion (completion of the future indicates workers have been cancelled).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-05T20:39:26.557+0000",
                    "updated": "2020-11-05T20:39:26.557+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17226980",
                    "id": "17226980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Well, it's a distinct concept at the very least. And futures are more complex internally because you can wait on several of them at once.\r\n(also our futures currently don't have callbacks)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-11-05T20:45:20.561+0000",
                    "updated": "2020-11-05T20:45:20.561+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17268725",
                    "id": "17268725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "In C# they have cancellation tokens separate from futures (tasks in C#).\u00a0 The logic is that cancellation tokens could be used in a wide variety of situations.\u00a0 Perhaps coroutines, perhaps synchronous blocking code, perhaps async/await where the Tasks are somewhat hidden.\u00a0 By creating a separate cancellation token they can maintain a consistent capability regardless of what threading utilities are in use.\r\n\r\nFrom an Arrow perspective, even if we are only using futures, we might not want to expose the futures API to the customer.\u00a0 I think we probably will want to (it's would be beneficial to customers also writing asynchronous code) but cancellation tokens would allow us to choose not to.\r\n\r\nAlso, a lesser concern, but the user can create one cancellation token and use it across several arrow calls.\u00a0 So if some end-user action triggers a number of Arrow operations, some in parallel and some in series, the application doesn't have to keep track of all those futures.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-01-20T17:35:53.263+0000",
                    "updated": "2021-01-20T17:35:53.263+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426/comment/17298147",
                    "id": "17298147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9528\n[https://github.com/apache/arrow/pull/9528]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-09T16:07:48.946+0000",
                    "updated": "2021-03-09T16:07:48.946+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0eha8:",
        "customfield_12314139": null
    }
}