{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13170457",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457",
    "key": "ARROW-2799",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12542249",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12542249",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13127267",
                    "key": "ARROW-1949",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267",
                    "fields": {
                        "summary": "[Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12542258",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12542258",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13182511",
                    "key": "ARROW-3158",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182511",
                    "fields": {
                        "summary": "[C++] Handle float truncation during casting",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhirschfeld",
            "name": "dhirschfeld",
            "key": "dhirschfeld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dhirschfeld&avatarId=33438",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dhirschfeld&avatarId=33438",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dhirschfeld&avatarId=33438",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dhirschfeld&avatarId=33438"
            },
            "displayName": "Dave Hirschfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhirschfeld",
            "name": "dhirschfeld",
            "key": "dhirschfeld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dhirschfeld&avatarId=33438",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dhirschfeld&avatarId=33438",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dhirschfeld&avatarId=33438",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dhirschfeld&avatarId=33438"
            },
            "displayName": "Dave Hirschfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2799/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/140369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504\n \n \n   Depends on both #2497 and #2503 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-02T01:02:50.967+0000",
                    "updated": "2018-09-02T01:02:50.967+0000",
                    "started": "2018-09-02T01:02:50.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140369",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/140435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-417949103\n \n \n   There is a spurious but pertinacious conda error:\r\n   \r\n   ```\r\n   CondaHTTPError: HTTP 500 INTERNAL SERVER ERROR for url <https://conda.anaconda.org/conda-forge/linux-64/repodata.json>\r\n   Elapsed: 00:00.413982\r\n   CF-RAY: 4541d1fc0b3e54f8-ORD\r\n   A remote server error occurred when trying to retrieve this URL.\r\n   A 500-type error (e.g. 500, 501, 502, 503, etc.) indicates the server failed to\r\n   fulfill a valid request.  The problem may be spurious, and will resolve itself if you\r\n   try your request again.  If the problem persists, consider notifying the maintainer\r\n   of the remote server.\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-02T18:17:33.787+0000",
                    "updated": "2018-09-02T18:17:33.787+0000",
                    "started": "2018-09-02T18:17:33.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140435",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/140437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-417950652\n \n \n   This happens quite often. Is there a way to configure conda to retry some number of times, or wait and retry?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-02T18:37:35.514+0000",
                    "updated": "2018-09-02T18:37:35.514+0000",
                    "started": "2018-09-02T18:37:35.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140437",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/140786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-418271730\n \n \n   The 500 errors were a general outage of conda which was resolved. `conda` in the newest version should do some retries.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-04T07:41:09.391+0000",
                    "updated": "2018-09-04T07:41:09.391+0000",
                    "started": "2018-09-04T07:41:09.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140786",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/140788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-418272487\n \n \n   @kszucs The dependencies were merged. Can you rebase?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-04T07:44:11.981+0000",
                    "updated": "2018-09-04T07:44:11.981+0000",
                    "started": "2018-09-04T07:44:11.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140788",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/141753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-419090824\n \n \n   @xhochy rebased, CI fails because mesonbuild\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-06T13:21:32.946+0000",
                    "updated": "2018-09-06T13:21:32.946+0000",
                    "started": "2018-09-06T13:21:32.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141753",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/142461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/kernels/cast.h b/cpp/src/arrow/compute/kernels/cast.h\nindex 8392c188df..49b12b9d56 100644\n--- a/cpp/src/arrow/compute/kernels/cast.h\n+++ b/cpp/src/arrow/compute/kernels/cast.h\n@@ -38,7 +38,7 @@ struct ARROW_EXPORT CastOptions {\n   CastOptions()\n       : allow_int_overflow(false),\n         allow_time_truncate(false),\n-        allow_float_truncate(true) {}\n+        allow_float_truncate(false) {}\n \n   explicit CastOptions(bool safe)\n       : allow_int_overflow(!safe),\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex f9a16a334c..362ebc6ff9 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -53,10 +53,7 @@ cdef _ndarray_to_array(object values, object mask, DataType type,\n     cdef:\n         shared_ptr[CChunkedArray] chunked_out\n         shared_ptr[CDataType] c_type\n-        CCastOptions cast_options\n-\n-    cast_options.allow_int_overflow = not safe\n-    cast_options.allow_time_truncate = not safe\n+        CCastOptions cast_options = CCastOptions(safe)\n \n     dtype = values.dtype\n \n@@ -406,14 +403,9 @@ cdef class Array:\n         casted : Array\n         \"\"\"\n         cdef:\n-            CCastOptions options\n+            CCastOptions options = CCastOptions(safe)\n+            DataType type = _ensure_type(target_type)\n             shared_ptr[CArray] result\n-            DataType type\n-\n-        type = _ensure_type(target_type)\n-\n-        options.allow_int_overflow = not safe\n-        options.allow_time_truncate = not safe\n \n         with nogil:\n             check_status(Cast(_context(), self.ap[0], type.sp_type,\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 8bbbfcfd66..8a91bf52c9 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -903,8 +903,13 @@ cdef extern from \"arrow/compute/api.h\" namespace \"arrow::compute\" nogil:\n         CFunctionContext(CMemoryPool* pool)\n \n     cdef cppclass CCastOptions\" arrow::compute::CastOptions\":\n+        CCastOptions()\n+        CCastOptions(c_bool safe)\n+        CCastOptions Safe()\n+        CCastOptions Unsafe()\n         c_bool allow_int_overflow\n         c_bool allow_time_truncate\n+        c_bool allow_float_truncate\n \n     enum DatumType\" arrow::compute::Datum::type\":\n         DatumType_NONE\" arrow::compute::Datum::NONE\"\ndiff --git a/python/pyarrow/pandas_compat.py b/python/pyarrow/pandas_compat.py\nindex 5ba17020cd..6a43fe2fd5 100644\n--- a/python/pyarrow/pandas_compat.py\n+++ b/python/pyarrow/pandas_compat.py\n@@ -316,7 +316,8 @@ def _index_level_name(index, i, column_names):\n         return '__index_level_{:d}__'.format(i)\n \n \n-def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None):\n+def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None,\n+                        safe=True):\n     if columns is None:\n         columns = df.columns\n     column_names = []\n@@ -366,7 +367,7 @@ def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None):\n \n     def convert_column(col, ty):\n         try:\n-            return pa.array(col, from_pandas=True, type=ty)\n+            return pa.array(col, type=ty, from_pandas=True, safe=safe)\n         except (pa.ArrowInvalid,\n                 pa.ArrowNotImplementedError,\n                 pa.ArrowTypeError) as e:\ndiff --git a/python/pyarrow/parquet.py b/python/pyarrow/parquet.py\nindex d56a67fd68..3b2e27df59 100644\n--- a/python/pyarrow/parquet.py\n+++ b/python/pyarrow/parquet.py\n@@ -24,12 +24,14 @@\n import numpy as np\n \n import pyarrow as pa\n-import pyarrow._parquet as _parquet\n import pyarrow.lib as lib\n+import pyarrow._parquet as _parquet\n+\n from pyarrow._parquet import (ParquetReader, RowGroupStatistics,  # noqa\n                               FileMetaData, RowGroupMetaData,\n                               ColumnChunkMetaData,\n                               ParquetSchema, ColumnSchema)\n+from pyarrow.compat import guid\n from pyarrow.filesystem import (LocalFileSystem, _ensure_filesystem,\n                                 _get_fs_from_path)\n from pyarrow.util import _is_path_like, _stringify_path\n@@ -54,6 +56,7 @@ class ParquetFile(object):\n         Will be used in reads for pandas schema metadata if not found in the\n         main file's metadata, no other uses at the moment\n     \"\"\"\n+\n     def __init__(self, source, metadata=None, common_metadata=None):\n         self.reader = ParquetReader()\n         self.reader.open(source, metadata=metadata)\n@@ -1124,11 +1127,6 @@ def write_to_dataset(table, root_path, partition_cols=None,\n         Parameter for instantiating Table; preserve pandas index or not.\n     **kwargs : dict, kwargs for write_table function.\n     \"\"\"\n-    from pyarrow import (\n-        Table,\n-        compat\n-    )\n-\n     if filesystem is None:\n         fs = _get_fs_from_path(root_path)\n     else:\n@@ -1142,7 +1140,7 @@ def write_to_dataset(table, root_path, partition_cols=None,\n         data_df = df.drop(partition_cols, axis='columns')\n         data_cols = df.columns.drop(partition_cols)\n         if len(data_cols) == 0:\n-            raise ValueError(\"No data left to save outside partition columns\")\n+            raise ValueError('No data left to save outside partition columns')\n         subschema = table.schema\n         # ARROW-2891: Ensure the output_schema is preserved when writing a\n         # partitioned dataset\n@@ -1152,21 +1150,22 @@ def write_to_dataset(table, root_path, partition_cols=None,\n         for keys, subgroup in data_df.groupby(partition_keys):\n             if not isinstance(keys, tuple):\n                 keys = (keys,)\n-            subdir = \"/\".join(\n-                [\"{colname}={value}\".format(colname=name, value=val)\n+            subdir = '/'.join(\n+                ['{colname}={value}'.format(colname=name, value=val)\n                  for name, val in zip(partition_cols, keys)])\n-            subtable = Table.from_pandas(subgroup,\n-                                         preserve_index=preserve_index,\n-                                         schema=subschema)\n-            prefix = \"/\".join([root_path, subdir])\n+            subtable = pa.Table.from_pandas(subgroup,\n+                                            preserve_index=preserve_index,\n+                                            schema=subschema,\n+                                            safe=False)\n+            prefix = '/'.join([root_path, subdir])\n             _mkdir_if_not_exists(fs, prefix)\n-            outfile = compat.guid() + \".parquet\"\n-            full_path = \"/\".join([prefix, outfile])\n+            outfile = guid() + '.parquet'\n+            full_path = '/'.join([prefix, outfile])\n             with fs.open(full_path, 'wb') as f:\n                 write_table(subtable, f, **kwargs)\n     else:\n-        outfile = compat.guid() + \".parquet\"\n-        full_path = \"/\".join([root_path, outfile])\n+        outfile = guid() + '.parquet'\n+        full_path = '/'.join([root_path, outfile])\n         with fs.open(full_path, 'wb') as f:\n             write_table(table, f, **kwargs)\n \ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex 513da28bb4..4780eff6c5 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -139,10 +139,8 @@ cdef class ChunkedArray:\n \n         return result\n \n-    def to_pandas(self,\n-                  c_bool strings_to_categorical=False,\n-                  c_bool zero_copy_only=False,\n-                  c_bool integer_object_nulls=False):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  bint zero_copy_only=False, bint integer_object_nulls=False):\n         \"\"\"\n         Convert the arrow::ChunkedArray to an array object suitable for use\n         in pandas\n@@ -411,7 +409,7 @@ cdef class Column:\n     def from_array(*args):\n         return column(*args)\n \n-    def cast(self, object target_type, safe=True):\n+    def cast(self, object target_type, bint safe=True):\n         \"\"\"\n         Cast column values to another data type\n \n@@ -427,16 +425,11 @@ cdef class Column:\n         casted : Column\n         \"\"\"\n         cdef:\n-            CCastOptions options\n+            CCastOptions options = CCastOptions(safe)\n+            DataType type = _ensure_type(target_type)\n             shared_ptr[CArray] result\n-            DataType type\n             CDatum out\n \n-        type = _ensure_type(target_type)\n-\n-        options.allow_int_overflow = not safe\n-        options.allow_time_truncate = not safe\n-\n         with nogil:\n             check_status(Cast(_context(), CDatum(self.column.data()),\n                               type.sp_type, options, &out))\n@@ -489,10 +482,8 @@ cdef class Column:\n \n         return [pyarrow_wrap_column(col) for col in flattened]\n \n-    def to_pandas(self,\n-                  c_bool strings_to_categorical=False,\n-                  c_bool zero_copy_only=False,\n-                  c_bool integer_object_nulls=False):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  bint zero_copy_only=False, bint integer_object_nulls=False):\n         \"\"\"\n         Convert the arrow::Column to a pandas.Series\n \n@@ -863,7 +854,7 @@ cdef class RecordBatch:\n             entries.append((name, column))\n         return OrderedDict(entries)\n \n-    def to_pandas(self, use_threads=True):\n+    def to_pandas(self, bint use_threads=True):\n         \"\"\"\n         Convert the arrow::RecordBatch to a pandas DataFrame\n \n@@ -1089,7 +1080,7 @@ cdef class Table:\n \n     @classmethod\n     def from_pandas(cls, df, Schema schema=None, bint preserve_index=True,\n-                    nthreads=None, columns=None):\n+                    nthreads=None, columns=None, bint safe=True):\n         \"\"\"\n         Convert pandas.DataFrame to an Arrow Table.\n \n@@ -1120,7 +1111,8 @@ cdef class Table:\n             indicated number of threads\n         columns : list, optional\n            List of column to be converted. If None, use all columns.\n-\n+        safe : boolean, default True\n+           Check for overflows or other unsafe conversions\n \n         Returns\n         -------\n@@ -1143,7 +1135,8 @@ cdef class Table:\n             schema=schema,\n             preserve_index=preserve_index,\n             nthreads=nthreads,\n-            columns=columns\n+            columns=columns,\n+            safe=safe\n         )\n         return cls.from_arrays(arrays, names=names, metadata=metadata)\n \n@@ -1291,9 +1284,9 @@ cdef class Table:\n \n         return result\n \n-    def to_pandas(self, strings_to_categorical=False,\n-                  memory_pool=None, zero_copy_only=False, categories=None,\n-                  integer_object_nulls=False, use_threads=True):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  memory_pool=None, bint zero_copy_only=False, categories=None,\n+                  bint integer_object_nulls=False, bint use_threads=True):\n         \"\"\"\n         Convert the arrow::Table to a pandas DataFrame\n \ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 4f65547757..3fa7cf4c34 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -530,7 +530,7 @@ def test_float_nulls_to_ints(self):\n         # ARROW-2135\n         df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n         schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n-        table = pa.Table.from_pandas(df, schema=schema)\n+        table = pa.Table.from_pandas(df, schema=schema, safe=False)\n         assert table[0].to_pylist() == [1, 2, None]\n         tm.assert_frame_equal(df, table.to_pandas())\n \n@@ -2056,6 +2056,24 @@ def test_mixed_integer_columns(self):\n         expected_df = pd.DataFrame(data=[row], columns=['foo', '123'])\n         _check_pandas_roundtrip(df, expected=expected_df, preserve_index=True)\n \n+    def test_safe_unsafe_casts(self):\n+        # ARROW-2799\n+        df = pd.DataFrame({\n+            'A': list('abc'),\n+            'B': np.linspace(0, 1, 3)\n+        })\n+\n+        schema = pa.schema([\n+            pa.field('A', pa.string()),\n+            pa.field('B', pa.int32())\n+        ])\n+\n+        with pytest.raises(ValueError):\n+            pa.Table.from_pandas(df, schema=schema)\n+\n+        table = pa.Table.from_pandas(df, schema=schema, safe=False)\n+        assert table.column('B').type == pa.int32()\n+\n \n def _fully_loaded_dataframe_example():\n     from distutils.version import LooseVersion\ndiff --git a/python/pyarrow/tests/test_parquet.py b/python/pyarrow/tests/test_parquet.py\nindex b40294a355..b5a4442046 100644\n--- a/python/pyarrow/tests/test_parquet.py\n+++ b/python/pyarrow/tests/test_parquet.py\n@@ -643,7 +643,7 @@ def test_parquet_column_statistics_api(data, type, physical_type, min_value,\n                                        distinct_count):\n     df = pd.DataFrame({'data': data})\n     schema = pa.schema([pa.field('data', type)])\n-    table = pa.Table.from_pandas(df, schema=schema)\n+    table = pa.Table.from_pandas(df, schema=schema, safe=False)\n     fileh = make_sample_file(table)\n \n     meta = fileh.metadata\n@@ -1812,7 +1812,7 @@ def _test_write_to_dataset_with_partitions(base_path,\n                                                 dtype='datetime64[D]')})\n     cols = output_df.columns.tolist()\n     partition_by = ['group1', 'group2']\n-    output_table = pa.Table.from_pandas(output_df, schema=schema)\n+    output_table = pa.Table.from_pandas(output_df, schema=schema, safe=False)\n     pq.write_to_dataset(output_table, base_path, partition_by,\n                         filesystem=filesystem)\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-08T16:08:10.574+0000",
                    "updated": "2018-09-08T16:08:10.574+0000",
                    "started": "2018-09-08T16:08:10.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142461",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/142464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-419656922\n \n \n   The parquet-cpp merge has caused our merge script to do something pretty wacky. I'm going to try to figure it out\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-08T16:48:22.671+0000",
                    "updated": "2018-09-08T16:48:22.671+0000",
                    "started": "2018-09-08T16:48:22.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142464",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/142465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504\n \n \n   Depends on both #2497 and #2503 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-08T16:48:25.813+0000",
                    "updated": "2018-09-08T16:48:25.813+0000",
                    "started": "2018-09-08T16:48:25.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142465",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/142468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504#issuecomment-419658140\n \n \n   Rebased\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-08T17:06:51.354+0000",
                    "updated": "2018-09-08T17:06:51.354+0000",
                    "started": "2018-09-08T17:06:51.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142468",
                    "issueId": "13170457"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/worklog/142474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2504: ARROW-2799: [Python] Add safe option to Table.from_pandas to avoid unsafe casts\nURL: https://github.com/apache/arrow/pull/2504\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/kernels/cast.h b/cpp/src/arrow/compute/kernels/cast.h\nindex 8392c188df..49b12b9d56 100644\n--- a/cpp/src/arrow/compute/kernels/cast.h\n+++ b/cpp/src/arrow/compute/kernels/cast.h\n@@ -38,7 +38,7 @@ struct ARROW_EXPORT CastOptions {\n   CastOptions()\n       : allow_int_overflow(false),\n         allow_time_truncate(false),\n-        allow_float_truncate(true) {}\n+        allow_float_truncate(false) {}\n \n   explicit CastOptions(bool safe)\n       : allow_int_overflow(!safe),\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex f9a16a334c..362ebc6ff9 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -53,10 +53,7 @@ cdef _ndarray_to_array(object values, object mask, DataType type,\n     cdef:\n         shared_ptr[CChunkedArray] chunked_out\n         shared_ptr[CDataType] c_type\n-        CCastOptions cast_options\n-\n-    cast_options.allow_int_overflow = not safe\n-    cast_options.allow_time_truncate = not safe\n+        CCastOptions cast_options = CCastOptions(safe)\n \n     dtype = values.dtype\n \n@@ -406,14 +403,9 @@ cdef class Array:\n         casted : Array\n         \"\"\"\n         cdef:\n-            CCastOptions options\n+            CCastOptions options = CCastOptions(safe)\n+            DataType type = _ensure_type(target_type)\n             shared_ptr[CArray] result\n-            DataType type\n-\n-        type = _ensure_type(target_type)\n-\n-        options.allow_int_overflow = not safe\n-        options.allow_time_truncate = not safe\n \n         with nogil:\n             check_status(Cast(_context(), self.ap[0], type.sp_type,\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 8bbbfcfd66..8a91bf52c9 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -903,8 +903,13 @@ cdef extern from \"arrow/compute/api.h\" namespace \"arrow::compute\" nogil:\n         CFunctionContext(CMemoryPool* pool)\n \n     cdef cppclass CCastOptions\" arrow::compute::CastOptions\":\n+        CCastOptions()\n+        CCastOptions(c_bool safe)\n+        CCastOptions Safe()\n+        CCastOptions Unsafe()\n         c_bool allow_int_overflow\n         c_bool allow_time_truncate\n+        c_bool allow_float_truncate\n \n     enum DatumType\" arrow::compute::Datum::type\":\n         DatumType_NONE\" arrow::compute::Datum::NONE\"\ndiff --git a/python/pyarrow/pandas_compat.py b/python/pyarrow/pandas_compat.py\nindex 5ba17020cd..6a43fe2fd5 100644\n--- a/python/pyarrow/pandas_compat.py\n+++ b/python/pyarrow/pandas_compat.py\n@@ -316,7 +316,8 @@ def _index_level_name(index, i, column_names):\n         return '__index_level_{:d}__'.format(i)\n \n \n-def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None):\n+def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None,\n+                        safe=True):\n     if columns is None:\n         columns = df.columns\n     column_names = []\n@@ -366,7 +367,7 @@ def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None):\n \n     def convert_column(col, ty):\n         try:\n-            return pa.array(col, from_pandas=True, type=ty)\n+            return pa.array(col, type=ty, from_pandas=True, safe=safe)\n         except (pa.ArrowInvalid,\n                 pa.ArrowNotImplementedError,\n                 pa.ArrowTypeError) as e:\ndiff --git a/python/pyarrow/parquet.py b/python/pyarrow/parquet.py\nindex 6c2539ccce..9fa97b4e6e 100644\n--- a/python/pyarrow/parquet.py\n+++ b/python/pyarrow/parquet.py\n@@ -24,12 +24,14 @@\n import numpy as np\n \n import pyarrow as pa\n-import pyarrow._parquet as _parquet\n import pyarrow.lib as lib\n+import pyarrow._parquet as _parquet\n+\n from pyarrow._parquet import (ParquetReader, RowGroupStatistics,  # noqa\n                               FileMetaData, RowGroupMetaData,\n                               ColumnChunkMetaData,\n                               ParquetSchema, ColumnSchema)\n+from pyarrow.compat import guid\n from pyarrow.filesystem import (LocalFileSystem, _ensure_filesystem,\n                                 _get_fs_from_path)\n from pyarrow.util import _is_path_like, _stringify_path, _deprecate_nthreads\n@@ -53,6 +55,7 @@ class ParquetFile(object):\n         Will be used in reads for pandas schema metadata if not found in the\n         main file's metadata, no other uses at the moment\n     \"\"\"\n+\n     def __init__(self, source, metadata=None, common_metadata=None):\n         self.reader = ParquetReader()\n         self.reader.open(source, metadata=metadata)\n@@ -1124,11 +1127,6 @@ def write_to_dataset(table, root_path, partition_cols=None,\n         Parameter for instantiating Table; preserve pandas index or not.\n     **kwargs : dict, kwargs for write_table function.\n     \"\"\"\n-    from pyarrow import (\n-        Table,\n-        compat\n-    )\n-\n     if filesystem is None:\n         fs = _get_fs_from_path(root_path)\n     else:\n@@ -1142,7 +1140,7 @@ def write_to_dataset(table, root_path, partition_cols=None,\n         data_df = df.drop(partition_cols, axis='columns')\n         data_cols = df.columns.drop(partition_cols)\n         if len(data_cols) == 0:\n-            raise ValueError(\"No data left to save outside partition columns\")\n+            raise ValueError('No data left to save outside partition columns')\n         subschema = table.schema\n         # ARROW-2891: Ensure the output_schema is preserved when writing a\n         # partitioned dataset\n@@ -1152,21 +1150,22 @@ def write_to_dataset(table, root_path, partition_cols=None,\n         for keys, subgroup in data_df.groupby(partition_keys):\n             if not isinstance(keys, tuple):\n                 keys = (keys,)\n-            subdir = \"/\".join(\n-                [\"{colname}={value}\".format(colname=name, value=val)\n+            subdir = '/'.join(\n+                ['{colname}={value}'.format(colname=name, value=val)\n                  for name, val in zip(partition_cols, keys)])\n-            subtable = Table.from_pandas(subgroup,\n-                                         preserve_index=preserve_index,\n-                                         schema=subschema)\n-            prefix = \"/\".join([root_path, subdir])\n+            subtable = pa.Table.from_pandas(subgroup,\n+                                            preserve_index=preserve_index,\n+                                            schema=subschema,\n+                                            safe=False)\n+            prefix = '/'.join([root_path, subdir])\n             _mkdir_if_not_exists(fs, prefix)\n-            outfile = compat.guid() + \".parquet\"\n-            full_path = \"/\".join([prefix, outfile])\n+            outfile = guid() + '.parquet'\n+            full_path = '/'.join([prefix, outfile])\n             with fs.open(full_path, 'wb') as f:\n                 write_table(subtable, f, **kwargs)\n     else:\n-        outfile = compat.guid() + \".parquet\"\n-        full_path = \"/\".join([root_path, outfile])\n+        outfile = guid() + '.parquet'\n+        full_path = '/'.join([root_path, outfile])\n         with fs.open(full_path, 'wb') as f:\n             write_table(table, f, **kwargs)\n \ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex 513da28bb4..4780eff6c5 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -139,10 +139,8 @@ cdef class ChunkedArray:\n \n         return result\n \n-    def to_pandas(self,\n-                  c_bool strings_to_categorical=False,\n-                  c_bool zero_copy_only=False,\n-                  c_bool integer_object_nulls=False):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  bint zero_copy_only=False, bint integer_object_nulls=False):\n         \"\"\"\n         Convert the arrow::ChunkedArray to an array object suitable for use\n         in pandas\n@@ -411,7 +409,7 @@ cdef class Column:\n     def from_array(*args):\n         return column(*args)\n \n-    def cast(self, object target_type, safe=True):\n+    def cast(self, object target_type, bint safe=True):\n         \"\"\"\n         Cast column values to another data type\n \n@@ -427,16 +425,11 @@ cdef class Column:\n         casted : Column\n         \"\"\"\n         cdef:\n-            CCastOptions options\n+            CCastOptions options = CCastOptions(safe)\n+            DataType type = _ensure_type(target_type)\n             shared_ptr[CArray] result\n-            DataType type\n             CDatum out\n \n-        type = _ensure_type(target_type)\n-\n-        options.allow_int_overflow = not safe\n-        options.allow_time_truncate = not safe\n-\n         with nogil:\n             check_status(Cast(_context(), CDatum(self.column.data()),\n                               type.sp_type, options, &out))\n@@ -489,10 +482,8 @@ cdef class Column:\n \n         return [pyarrow_wrap_column(col) for col in flattened]\n \n-    def to_pandas(self,\n-                  c_bool strings_to_categorical=False,\n-                  c_bool zero_copy_only=False,\n-                  c_bool integer_object_nulls=False):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  bint zero_copy_only=False, bint integer_object_nulls=False):\n         \"\"\"\n         Convert the arrow::Column to a pandas.Series\n \n@@ -863,7 +854,7 @@ cdef class RecordBatch:\n             entries.append((name, column))\n         return OrderedDict(entries)\n \n-    def to_pandas(self, use_threads=True):\n+    def to_pandas(self, bint use_threads=True):\n         \"\"\"\n         Convert the arrow::RecordBatch to a pandas DataFrame\n \n@@ -1089,7 +1080,7 @@ cdef class Table:\n \n     @classmethod\n     def from_pandas(cls, df, Schema schema=None, bint preserve_index=True,\n-                    nthreads=None, columns=None):\n+                    nthreads=None, columns=None, bint safe=True):\n         \"\"\"\n         Convert pandas.DataFrame to an Arrow Table.\n \n@@ -1120,7 +1111,8 @@ cdef class Table:\n             indicated number of threads\n         columns : list, optional\n            List of column to be converted. If None, use all columns.\n-\n+        safe : boolean, default True\n+           Check for overflows or other unsafe conversions\n \n         Returns\n         -------\n@@ -1143,7 +1135,8 @@ cdef class Table:\n             schema=schema,\n             preserve_index=preserve_index,\n             nthreads=nthreads,\n-            columns=columns\n+            columns=columns,\n+            safe=safe\n         )\n         return cls.from_arrays(arrays, names=names, metadata=metadata)\n \n@@ -1291,9 +1284,9 @@ cdef class Table:\n \n         return result\n \n-    def to_pandas(self, strings_to_categorical=False,\n-                  memory_pool=None, zero_copy_only=False, categories=None,\n-                  integer_object_nulls=False, use_threads=True):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  memory_pool=None, bint zero_copy_only=False, categories=None,\n+                  bint integer_object_nulls=False, bint use_threads=True):\n         \"\"\"\n         Convert the arrow::Table to a pandas DataFrame\n \ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 4f65547757..3fa7cf4c34 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -530,7 +530,7 @@ def test_float_nulls_to_ints(self):\n         # ARROW-2135\n         df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n         schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n-        table = pa.Table.from_pandas(df, schema=schema)\n+        table = pa.Table.from_pandas(df, schema=schema, safe=False)\n         assert table[0].to_pylist() == [1, 2, None]\n         tm.assert_frame_equal(df, table.to_pandas())\n \n@@ -2056,6 +2056,24 @@ def test_mixed_integer_columns(self):\n         expected_df = pd.DataFrame(data=[row], columns=['foo', '123'])\n         _check_pandas_roundtrip(df, expected=expected_df, preserve_index=True)\n \n+    def test_safe_unsafe_casts(self):\n+        # ARROW-2799\n+        df = pd.DataFrame({\n+            'A': list('abc'),\n+            'B': np.linspace(0, 1, 3)\n+        })\n+\n+        schema = pa.schema([\n+            pa.field('A', pa.string()),\n+            pa.field('B', pa.int32())\n+        ])\n+\n+        with pytest.raises(ValueError):\n+            pa.Table.from_pandas(df, schema=schema)\n+\n+        table = pa.Table.from_pandas(df, schema=schema, safe=False)\n+        assert table.column('B').type == pa.int32()\n+\n \n def _fully_loaded_dataframe_example():\n     from distutils.version import LooseVersion\ndiff --git a/python/pyarrow/tests/test_parquet.py b/python/pyarrow/tests/test_parquet.py\nindex 556b1558a5..64fd82d603 100644\n--- a/python/pyarrow/tests/test_parquet.py\n+++ b/python/pyarrow/tests/test_parquet.py\n@@ -643,7 +643,7 @@ def test_parquet_column_statistics_api(data, type, physical_type, min_value,\n                                        distinct_count):\n     df = pd.DataFrame({'data': data})\n     schema = pa.schema([pa.field('data', type)])\n-    table = pa.Table.from_pandas(df, schema=schema)\n+    table = pa.Table.from_pandas(df, schema=schema, safe=False)\n     fileh = make_sample_file(table)\n \n     meta = fileh.metadata\n@@ -1812,7 +1812,7 @@ def _test_write_to_dataset_with_partitions(base_path,\n                                                 dtype='datetime64[D]')})\n     cols = output_df.columns.tolist()\n     partition_by = ['group1', 'group2']\n-    output_table = pa.Table.from_pandas(output_df, schema=schema)\n+    output_table = pa.Table.from_pandas(output_df, schema=schema, safe=False)\n     pq.write_to_dataset(output_table, base_path, partition_by,\n                         filesystem=filesystem)\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-08T18:19:24.213+0000",
                    "updated": "2018-09-08T18:19:24.213+0000",
                    "started": "2018-09-08T18:19:24.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142474",
                    "issueId": "13170457"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@374777b0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@166b22c0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37bd41fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@788f08ef[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@550ebd2d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@34fa5923[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69156cd7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@695dc96a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@491af6b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f4f9df8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d7e2f12[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6aefbd4e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Sep 08 16:08:09 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-08T16:08:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2799/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-07-06T10:16:52.000+0000",
        "updated": "2018-09-08T18:19:24.000+0000",
        "timeoriginalestimate": null,
        "description": "Ported over from [https://github.com/apache/arrow/issues/2217]\r\n\r\n\r\n```python\r\nIn [8]: import pandas as pd\r\n   ...: import pyarrow as arw\r\n\r\nIn [9]: df = pd.DataFrame({'A': list('abc'), 'B': np.arange(3)})\r\n   ...: df\r\nOut[9]:\r\n   A  B\r\n0  a  0\r\n1  b  1\r\n2  c  2\r\n\r\nIn [10]: schema = arw.schema([\r\n    ...:     arw.field('A', arw.string()),\r\n    ...:     arw.field('B', arw.int32()),\r\n    ...: ])\r\n\r\nIn [11]: tbl = arw.Table.from_pandas(df, preserve_index=False, schema=schema)\r\n    ...: tbl\r\nOut[11]:\r\npyarrow.Table\r\nA: string\r\nB: int32\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [], \"column_indexes\": [], \"columns\": [{\"name\":'\r\n            b' \"A\", \"field_name\": \"A\", \"pandas_type\": \"unicode\", \"numpy_type\":'\r\n            b' \"object\", \"metadata\": null}, {\"name\": \"B\", \"field_name\": \"B\", \"'\r\n            b'pandas_type\": \"int32\", \"numpy_type\": \"int32\", \"metadata\": null}]'\r\n            b', \"pandas_version\": \"0.23.1\"}'}\r\n\r\nIn [12]: tbl.to_pandas().equals(df)\r\nOut[12]: True\r\n```\r\n...so if the `schema` matches the pandas datatypes all is well - we can roundtrip the DataFrame.\r\n\r\nNow, say we have some bad data such that column 'B' is now of type float64. The datatypes of the DataFrame don't match the explicitly supplied `schema` object but rather than raising a `TypeError` the data is silently truncated and the roundtrip DataFrame doesn't match our input DataFame without even a warning raised!\r\n```python\r\nIn [13]: df['B'].iloc[0] = 1.23\r\n    ...: df\r\nOut[13]:\r\n   A     B\r\n0  a  1.23\r\n1  b  1.00\r\n2  c  2.00\r\n\r\nIn [14]: # I would expect/want this to raise a TypeError since the schema doesn't match the pandas datatypes\r\n    ...: tbl = arw.Table.from_pandas(df, preserve_index=False, schema=schema)\r\n    ...: tbl\r\nOut[14]:\r\npyarrow.Table\r\nA: string\r\nB: int32\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [], \"column_indexes\": [], \"columns\": [{\"name\":'\r\n            b' \"A\", \"field_name\": \"A\", \"pandas_type\": \"unicode\", \"numpy_type\":'\r\n            b' \"object\", \"metadata\": null}, {\"name\": \"B\", \"field_name\": \"B\", \"'\r\n            b'pandas_type\": \"int32\", \"numpy_type\": \"float64\", \"metadata\": null'\r\n            b'}], \"pandas_version\": \"0.23.1\"}'}\r\n\r\nIn [15]: tbl.to_pandas()  # <-- SILENT TRUNCATION!!!\r\nOut[15]:\r\n   A  B\r\n0  a  1\r\n1  b  1\r\n2  c  2\r\n\r\n```\r\n\r\nTo be clear, I would really like `Table.from_pandas` to raise a `TypeError` if the DataFrame types don't match an explicitly supplied schema and would hope this current behaviour would be considered a bug.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add safe option to Table.from_pandas to avoid unsafe casts",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/comment/16534659",
                    "id": "16534659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhirschfeld",
                        "name": "dhirschfeld",
                        "key": "dhirschfeld",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dhirschfeld&avatarId=33438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dhirschfeld&avatarId=33438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dhirschfeld&avatarId=33438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dhirschfeld&avatarId=33438"
                        },
                        "displayName": "Dave Hirschfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The recommendation by wesm was to add a `safe/unsafe` option to `Table.from_pandas`",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhirschfeld",
                        "name": "dhirschfeld",
                        "key": "dhirschfeld",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dhirschfeld&avatarId=33438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dhirschfeld&avatarId=33438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dhirschfeld&avatarId=33438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dhirschfeld&avatarId=33438"
                        },
                        "displayName": "Dave Hirschfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-07-06T10:21:32.883+0000",
                    "updated": "2018-07-06T10:21:32.883+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/comment/16534930",
                    "id": "16534930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I renamed the issue slightly",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-06T14:47:57.433+0000",
                    "updated": "2018-07-06T14:47:57.433+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/comment/16599658",
                    "id": "16599658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "NOTE: We need a castoption for the float case.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-09-01T15:44:40.272+0000",
                    "updated": "2018-09-01T15:44:40.272+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/comment/16599716",
                    "id": "16599716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Maybe sooner than later we should expose more granular cast options in all of these functions",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-01T19:31:37.843+0000",
                    "updated": "2018-09-01T19:31:37.843+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457/comment/16608101",
                    "id": "16608101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2504\n[https://github.com/apache/arrow/pull/2504]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-08T16:08:09.010+0000",
                    "updated": "2018-09-08T16:08:09.010+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3vlx3:",
        "customfield_12314139": null
    }
}