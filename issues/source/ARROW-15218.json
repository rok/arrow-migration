{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13419932",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932",
    "key": "ARROW-15218",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "good-first-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12629476",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629476",
                "type": {
                    "id": "12310040",
                    "name": "Required",
                    "inward": "is required by",
                    "outward": "requires",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310040"
                },
                "outwardIssue": {
                    "id": "13383216",
                    "key": "ARROW-13035",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383216",
                    "fields": {
                        "summary": "[C++] Create a compute function returning indices of non-zero values",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=c-jamie",
            "name": "c-jamie",
            "key": "c-jamie",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jamie Clery",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15218/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/715728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "c-jamie opened a new pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270\n\n\n   Adds decimal support to the `indices_nonzero` compute function. This vector function returns the indices of an array that contains values `!=0` or `!=false`. \r\n   \r\n   This can be used in conjunction with existing functions that return a mask to get back the indices where the mask matches.\r\n   \r\n   Have also added a small enhancement to the `indices_nonzero` tests to use a `TYPED_TEST_SUITE` for numeric primitives.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T14:53:48.819+0000",
                    "updated": "2022-01-26T14:53:48.819+0000",
                    "started": "2022-01-26T14:53:48.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715728",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/715731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#issuecomment-1022273857\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T14:54:16.432+0000",
                    "updated": "2022-01-26T14:54:16.432+0000",
                    "started": "2022-01-26T14:54:16.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715731",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/715751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#discussion_r792731592\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2392,6 +2392,29 @@ struct NonZeroVisitor {\n \n     return Status::OK();\n   }\n+\n+  template <typename Type>\n+  enable_if_t<is_decimal128_type<Type>::value || is_decimal256_type<Type>::value, Status>\n+  Visit(const Type&) {\n\nReview comment:\n       This is morally the same code as the previous override above, can we merge them in a single method declaration?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2426,25 +2449,33 @@ std::shared_ptr<VectorFunction> MakeIndicesNonZeroFunction(std::string name,\n                                                            const FunctionDoc* doc) {\n   auto func = std::make_shared<VectorFunction>(name, Arity::Unary(), doc);\n \n-  for (const auto& ty : NumericTypes()) {\n-    VectorKernel kernel;\n-    kernel.exec = IndicesNonZeroExec;\n-    kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-    kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-    kernel.output_chunked = false;\n-    kernel.can_execute_chunkwise = false;\n-    kernel.signature = KernelSignature::Make({InputType(ty->id())}, uint64());\n-    DCHECK_OK(func->AddKernel(kernel));\n-  }\n-\n-  VectorKernel boolkernel;\n-  boolkernel.exec = IndicesNonZeroExec;\n-  boolkernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-  boolkernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-  boolkernel.output_chunked = false;\n-  boolkernel.can_execute_chunkwise = false;\n-  boolkernel.signature = KernelSignature::Make({boolean()}, uint64());\n-  DCHECK_OK(func->AddKernel(boolkernel));\n+  VectorKernel kernel;\n+  kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n+  kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n+  kernel.output_chunked = false;\n+  kernel.can_execute_chunkwise = false;\n+\n+  auto AddKernels = [&](const std::vector<std::shared_ptr<DataType>>& types) {\n+    for (const std::shared_ptr<DataType>& ty : types) {\n+      kernel.signature = KernelSignature::Make({InputType::Array(ty)}, uint64());\n+      kernel.exec = IndicesNonZeroExec;\n\nReview comment:\n       This line can probably be moved out of this lambda?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n+TYPED_TEST(TestIndicesNonZero, IndicesNonZero) {\n   Datum actual;\n   std::shared_ptr<Array> result;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n \n-  ASSERT_OK_AND_ASSIGN(\n-      actual,\n-      CallFunction(\"indices_nonzero\", {ArrayFromJSON(uint32(), \"[null, 50, 0, 10]\")}));\n+  ASSERT_OK_AND_ASSIGN(actual, CallFunction(\"indices_nonzero\",\n+                                            {ArrayFromJSON(type, \"[null, 50, 0, 10]\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[1, 3]\"), *result);\n+\n+  // empty\n+  ASSERT_OK_AND_ASSIGN(actual,\n+                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(type, \"[]\")}));\n+  result = actual.make_array();\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[]\"), *result);\n+\n+  // chunked\n+  ChunkedArray chunked_arr(\n+      {ArrayFromJSON(type, \"[1, 0, 3]\"), ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr)}));\n\nReview comment:\n       I think `{chunked_arr}` would simply work and it would convert to a Datum implicitly.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2426,25 +2449,33 @@ std::shared_ptr<VectorFunction> MakeIndicesNonZeroFunction(std::string name,\n                                                            const FunctionDoc* doc) {\n   auto func = std::make_shared<VectorFunction>(name, Arity::Unary(), doc);\n \n-  for (const auto& ty : NumericTypes()) {\n-    VectorKernel kernel;\n-    kernel.exec = IndicesNonZeroExec;\n-    kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-    kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-    kernel.output_chunked = false;\n-    kernel.can_execute_chunkwise = false;\n-    kernel.signature = KernelSignature::Make({InputType(ty->id())}, uint64());\n-    DCHECK_OK(func->AddKernel(kernel));\n-  }\n-\n-  VectorKernel boolkernel;\n-  boolkernel.exec = IndicesNonZeroExec;\n-  boolkernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-  boolkernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-  boolkernel.output_chunked = false;\n-  boolkernel.can_execute_chunkwise = false;\n-  boolkernel.signature = KernelSignature::Make({boolean()}, uint64());\n-  DCHECK_OK(func->AddKernel(boolkernel));\n+  VectorKernel kernel;\n+  kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n+  kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n+  kernel.output_chunked = false;\n+  kernel.can_execute_chunkwise = false;\n+\n+  auto AddKernels = [&](const std::vector<std::shared_ptr<DataType>>& types) {\n+    for (const std::shared_ptr<DataType>& ty : types) {\n+      kernel.signature = KernelSignature::Make({InputType::Array(ty)}, uint64());\n+      kernel.exec = IndicesNonZeroExec;\n+      DCHECK_OK(func->AddKernel(kernel));\n+    }\n+  };\n+\n+  AddKernels(NumericTypes());\n+  AddKernels({boolean()});\n+\n+  VectorKernel deckernel;\n\nReview comment:\n       Why not simply reuse the `kernel` variable already defined?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n+TYPED_TEST(TestIndicesNonZero, IndicesNonZero) {\n   Datum actual;\n   std::shared_ptr<Array> result;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n \n-  ASSERT_OK_AND_ASSIGN(\n-      actual,\n-      CallFunction(\"indices_nonzero\", {ArrayFromJSON(uint32(), \"[null, 50, 0, 10]\")}));\n+  ASSERT_OK_AND_ASSIGN(actual, CallFunction(\"indices_nonzero\",\n+                                            {ArrayFromJSON(type, \"[null, 50, 0, 10]\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[1, 3]\"), *result);\n+\n+  // empty\n+  ASSERT_OK_AND_ASSIGN(actual,\n+                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(type, \"[]\")}));\n+  result = actual.make_array();\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[]\"), *result);\n+\n+  // chunked\n+  ChunkedArray chunked_arr(\n+      {ArrayFromJSON(type, \"[1, 0, 3]\"), ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+\n+  // empty chunked\n+  ChunkedArray chunked_arr_empty({ArrayFromJSON(type, \"[1, 0, 3]\"),\n+                                  ArrayFromJSON(type, \"[]\"),\n+                                  ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr_empty)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+}\n \n+TEST(TestIndicesNonZero, IndicesNonZeroBoolean) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  // boool\n   ASSERT_OK_AND_ASSIGN(\n       actual, CallFunction(\"indices_nonzero\",\n                            {ArrayFromJSON(boolean(), \"[null, true, false, true]\")}));\n   result = actual.make_array();\n   AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+}\n \n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\",\n-                                    {ArrayFromJSON(float64(), \"[null, 1.3, 0.0, 5.0]\")}));\n+TEST(TestIndicesNonZero, IndicesNonZeroDecimal) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\n+                  \"indices_nonzero\",\n+                  {DecimalArrayFromJSON(decimal128(2, -2), R\"([\"12E2\",null,\"0\",\"0\"])\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0]\"), *result, true);\n\nReview comment:\n       Please make sure that arguments are intelligible:\r\n   \r\n   ```suggestion\r\n     AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0]\"), *result, /*verbose=*/true);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2392,6 +2392,29 @@ struct NonZeroVisitor {\n \n     return Status::OK();\n   }\n+\n+  template <typename Type>\n+  enable_if_t<is_decimal128_type<Type>::value || is_decimal256_type<Type>::value, Status>\n\nReview comment:\n       Can use `is_decimal_type` for more future-proof code.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n+TYPED_TEST(TestIndicesNonZero, IndicesNonZero) {\n   Datum actual;\n   std::shared_ptr<Array> result;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n \n-  ASSERT_OK_AND_ASSIGN(\n-      actual,\n-      CallFunction(\"indices_nonzero\", {ArrayFromJSON(uint32(), \"[null, 50, 0, 10]\")}));\n+  ASSERT_OK_AND_ASSIGN(actual, CallFunction(\"indices_nonzero\",\n+                                            {ArrayFromJSON(type, \"[null, 50, 0, 10]\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[1, 3]\"), *result);\n+\n+  // empty\n+  ASSERT_OK_AND_ASSIGN(actual,\n+                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(type, \"[]\")}));\n+  result = actual.make_array();\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[]\"), *result);\n+\n+  // chunked\n+  ChunkedArray chunked_arr(\n+      {ArrayFromJSON(type, \"[1, 0, 3]\"), ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+\n+  // empty chunked\n+  ChunkedArray chunked_arr_empty({ArrayFromJSON(type, \"[1, 0, 3]\"),\n+                                  ArrayFromJSON(type, \"[]\"),\n+                                  ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr_empty)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+}\n \n+TEST(TestIndicesNonZero, IndicesNonZeroBoolean) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  // boool\n   ASSERT_OK_AND_ASSIGN(\n       actual, CallFunction(\"indices_nonzero\",\n                            {ArrayFromJSON(boolean(), \"[null, true, false, true]\")}));\n   result = actual.make_array();\n   AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+}\n \n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\",\n-                                    {ArrayFromJSON(float64(), \"[null, 1.3, 0.0, 5.0]\")}));\n+TEST(TestIndicesNonZero, IndicesNonZeroDecimal) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\n+                  \"indices_nonzero\",\n+                  {DecimalArrayFromJSON(decimal128(2, -2), R\"([\"12E2\",null,\"0\",\"0\"])\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0]\"), *result, true);\n \n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(float64(), \"[]\")}));\n+  ASSERT_OK_AND_ASSIGN(\n+      actual,\n+      CallFunction(\n+          \"indices_nonzero\",\n+          {DecimalArrayFromJSON(\n+              decimal128(6, 9),\n+              R\"([\"765483.999999999\",\"0.000000000\",null,\"-987645.000000001\"])\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 3]\"), *result, true);\n \n-  ChunkedArray chunkedarr(\n-      {ArrayFromJSON(uint32(), \"[1, 0, 3]\"), ArrayFromJSON(uint32(), \"[4, 0, 6]\")});\n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunkedarr)}));\n-  AssertArraysEqual(*actual.make_array(), *ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"));\n+  ASSERT_OK_AND_ASSIGN(\n\nReview comment:\n       Can we avoid copy-pasting? Example solution (untested):\r\n   ```c++\r\n     for (const auto& decimal_factory : {decimal128, decimal256}) {\r\n   \r\n       ASSERT_OK_AND_ASSIGN(\r\n           actual, CallFunction(\r\n                       \"indices_nonzero\",\r\n                       {DecimalArrayFromJSON(decimal_factory(2, -2), R\"([\"12E2\",null,\"0\",\"0\"])\")}));\r\n       // etc.\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n\nReview comment:\n       This will compile a distinct version of the tests for each tested type, but this doesn't seem necessary.\r\n   How about instead:\r\n   ```c++\r\n   TEST(TestIndicesNonZero, IndicesNonZero) {\r\n     Datum actual;\r\n     std::shared_ptr<Array> result;\r\n     for (const auto& type : NumericTypes()) {\r\n       ARROW_SCOPED_TRACE(\"Input type = \", type->ToString());\r\n       ASSERT_OK_AND_ASSIGN(actual,  // etc.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T15:20:59.086+0000",
                    "updated": "2022-01-26T15:20:59.086+0000",
                    "started": "2022-01-26T15:20:59.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715751",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/715962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "c-jamie commented on a change in pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#discussion_r793013334\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2392,6 +2392,29 @@ struct NonZeroVisitor {\n \n     return Status::OK();\n   }\n+\n+  template <typename Type>\n+  enable_if_t<is_decimal128_type<Type>::value || is_decimal256_type<Type>::value, Status>\n+  Visit(const Type&) {\n\nReview comment:\n       I have updated this, and added a specialisation for bool, `Status Visit(const BooleanType&)`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T20:16:55.850+0000",
                    "updated": "2022-01-26T20:16:55.850+0000",
                    "started": "2022-01-26T20:16:55.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715962",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/715964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "c-jamie commented on a change in pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#discussion_r793013493\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2392,6 +2392,29 @@ struct NonZeroVisitor {\n \n     return Status::OK();\n   }\n+\n+  template <typename Type>\n+  enable_if_t<is_decimal128_type<Type>::value || is_decimal256_type<Type>::value, Status>\n\nReview comment:\n       done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2426,25 +2449,33 @@ std::shared_ptr<VectorFunction> MakeIndicesNonZeroFunction(std::string name,\n                                                            const FunctionDoc* doc) {\n   auto func = std::make_shared<VectorFunction>(name, Arity::Unary(), doc);\n \n-  for (const auto& ty : NumericTypes()) {\n-    VectorKernel kernel;\n-    kernel.exec = IndicesNonZeroExec;\n-    kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-    kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-    kernel.output_chunked = false;\n-    kernel.can_execute_chunkwise = false;\n-    kernel.signature = KernelSignature::Make({InputType(ty->id())}, uint64());\n-    DCHECK_OK(func->AddKernel(kernel));\n-  }\n-\n-  VectorKernel boolkernel;\n-  boolkernel.exec = IndicesNonZeroExec;\n-  boolkernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-  boolkernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-  boolkernel.output_chunked = false;\n-  boolkernel.can_execute_chunkwise = false;\n-  boolkernel.signature = KernelSignature::Make({boolean()}, uint64());\n-  DCHECK_OK(func->AddKernel(boolkernel));\n+  VectorKernel kernel;\n+  kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n+  kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n+  kernel.output_chunked = false;\n+  kernel.can_execute_chunkwise = false;\n+\n+  auto AddKernels = [&](const std::vector<std::shared_ptr<DataType>>& types) {\n+    for (const std::shared_ptr<DataType>& ty : types) {\n+      kernel.signature = KernelSignature::Make({InputType::Array(ty)}, uint64());\n+      kernel.exec = IndicesNonZeroExec;\n\nReview comment:\n       done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2426,25 +2449,33 @@ std::shared_ptr<VectorFunction> MakeIndicesNonZeroFunction(std::string name,\n                                                            const FunctionDoc* doc) {\n   auto func = std::make_shared<VectorFunction>(name, Arity::Unary(), doc);\n \n-  for (const auto& ty : NumericTypes()) {\n-    VectorKernel kernel;\n-    kernel.exec = IndicesNonZeroExec;\n-    kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-    kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-    kernel.output_chunked = false;\n-    kernel.can_execute_chunkwise = false;\n-    kernel.signature = KernelSignature::Make({InputType(ty->id())}, uint64());\n-    DCHECK_OK(func->AddKernel(kernel));\n-  }\n-\n-  VectorKernel boolkernel;\n-  boolkernel.exec = IndicesNonZeroExec;\n-  boolkernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n-  boolkernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n-  boolkernel.output_chunked = false;\n-  boolkernel.can_execute_chunkwise = false;\n-  boolkernel.signature = KernelSignature::Make({boolean()}, uint64());\n-  DCHECK_OK(func->AddKernel(boolkernel));\n+  VectorKernel kernel;\n+  kernel.null_handling = NullHandling::OUTPUT_NOT_NULL;\n+  kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n+  kernel.output_chunked = false;\n+  kernel.can_execute_chunkwise = false;\n+\n+  auto AddKernels = [&](const std::vector<std::shared_ptr<DataType>>& types) {\n+    for (const std::shared_ptr<DataType>& ty : types) {\n+      kernel.signature = KernelSignature::Make({InputType::Array(ty)}, uint64());\n+      kernel.exec = IndicesNonZeroExec;\n+      DCHECK_OK(func->AddKernel(kernel));\n+    }\n+  };\n+\n+  AddKernels(NumericTypes());\n+  AddKernels({boolean()});\n+\n+  VectorKernel deckernel;\n\nReview comment:\n       done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T20:17:20.759+0000",
                    "updated": "2022-01-26T20:17:20.759+0000",
                    "started": "2022-01-26T20:17:20.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715964",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/715965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "c-jamie commented on a change in pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#discussion_r793014118\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n+TYPED_TEST(TestIndicesNonZero, IndicesNonZero) {\n   Datum actual;\n   std::shared_ptr<Array> result;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n \n-  ASSERT_OK_AND_ASSIGN(\n-      actual,\n-      CallFunction(\"indices_nonzero\", {ArrayFromJSON(uint32(), \"[null, 50, 0, 10]\")}));\n+  ASSERT_OK_AND_ASSIGN(actual, CallFunction(\"indices_nonzero\",\n+                                            {ArrayFromJSON(type, \"[null, 50, 0, 10]\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[1, 3]\"), *result);\n+\n+  // empty\n+  ASSERT_OK_AND_ASSIGN(actual,\n+                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(type, \"[]\")}));\n+  result = actual.make_array();\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[]\"), *result);\n+\n+  // chunked\n+  ChunkedArray chunked_arr(\n+      {ArrayFromJSON(type, \"[1, 0, 3]\"), ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr)}));\n\nReview comment:\n       For me, I get a compiler error: `error: no matching function for call to 'CallFunction' actual, CallFunction(\"indices_nonzero\", {chunked_arr}));`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n+TYPED_TEST(TestIndicesNonZero, IndicesNonZero) {\n   Datum actual;\n   std::shared_ptr<Array> result;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n \n-  ASSERT_OK_AND_ASSIGN(\n-      actual,\n-      CallFunction(\"indices_nonzero\", {ArrayFromJSON(uint32(), \"[null, 50, 0, 10]\")}));\n+  ASSERT_OK_AND_ASSIGN(actual, CallFunction(\"indices_nonzero\",\n+                                            {ArrayFromJSON(type, \"[null, 50, 0, 10]\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[1, 3]\"), *result);\n+\n+  // empty\n+  ASSERT_OK_AND_ASSIGN(actual,\n+                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(type, \"[]\")}));\n+  result = actual.make_array();\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[]\"), *result);\n+\n+  // chunked\n+  ChunkedArray chunked_arr(\n+      {ArrayFromJSON(type, \"[1, 0, 3]\"), ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+\n+  // empty chunked\n+  ChunkedArray chunked_arr_empty({ArrayFromJSON(type, \"[1, 0, 3]\"),\n+                                  ArrayFromJSON(type, \"[]\"),\n+                                  ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr_empty)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+}\n \n+TEST(TestIndicesNonZero, IndicesNonZeroBoolean) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  // boool\n   ASSERT_OK_AND_ASSIGN(\n       actual, CallFunction(\"indices_nonzero\",\n                            {ArrayFromJSON(boolean(), \"[null, true, false, true]\")}));\n   result = actual.make_array();\n   AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+}\n \n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\",\n-                                    {ArrayFromJSON(float64(), \"[null, 1.3, 0.0, 5.0]\")}));\n+TEST(TestIndicesNonZero, IndicesNonZeroDecimal) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\n+                  \"indices_nonzero\",\n+                  {DecimalArrayFromJSON(decimal128(2, -2), R\"([\"12E2\",null,\"0\",\"0\"])\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0]\"), *result, true);\n\nReview comment:\n       done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n+TYPED_TEST(TestIndicesNonZero, IndicesNonZero) {\n   Datum actual;\n   std::shared_ptr<Array> result;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n \n-  ASSERT_OK_AND_ASSIGN(\n-      actual,\n-      CallFunction(\"indices_nonzero\", {ArrayFromJSON(uint32(), \"[null, 50, 0, 10]\")}));\n+  ASSERT_OK_AND_ASSIGN(actual, CallFunction(\"indices_nonzero\",\n+                                            {ArrayFromJSON(type, \"[null, 50, 0, 10]\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[1, 3]\"), *result);\n+\n+  // empty\n+  ASSERT_OK_AND_ASSIGN(actual,\n+                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(type, \"[]\")}));\n+  result = actual.make_array();\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[]\"), *result);\n+\n+  // chunked\n+  ChunkedArray chunked_arr(\n+      {ArrayFromJSON(type, \"[1, 0, 3]\"), ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+\n+  // empty chunked\n+  ChunkedArray chunked_arr_empty({ArrayFromJSON(type, \"[1, 0, 3]\"),\n+                                  ArrayFromJSON(type, \"[]\"),\n+                                  ArrayFromJSON(type, \"[4, 0, 6]\")});\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunked_arr_empty)}));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"), *actual.make_array());\n+}\n \n+TEST(TestIndicesNonZero, IndicesNonZeroBoolean) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  // boool\n   ASSERT_OK_AND_ASSIGN(\n       actual, CallFunction(\"indices_nonzero\",\n                            {ArrayFromJSON(boolean(), \"[null, true, false, true]\")}));\n   result = actual.make_array();\n   AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+}\n \n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\",\n-                                    {ArrayFromJSON(float64(), \"[null, 1.3, 0.0, 5.0]\")}));\n+TEST(TestIndicesNonZero, IndicesNonZeroDecimal) {\n+  Datum actual;\n+  std::shared_ptr<Array> result;\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      actual, CallFunction(\n+                  \"indices_nonzero\",\n+                  {DecimalArrayFromJSON(decimal128(2, -2), R\"([\"12E2\",null,\"0\",\"0\"])\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[1, 3]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0]\"), *result, true);\n \n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\", {ArrayFromJSON(float64(), \"[]\")}));\n+  ASSERT_OK_AND_ASSIGN(\n+      actual,\n+      CallFunction(\n+          \"indices_nonzero\",\n+          {DecimalArrayFromJSON(\n+              decimal128(6, 9),\n+              R\"([\"765483.999999999\",\"0.000000000\",null,\"-987645.000000001\"])\")}));\n   result = actual.make_array();\n-  AssertArraysEqual(*result, *ArrayFromJSON(uint64(), \"[]\"));\n+  AssertArraysEqual(*ArrayFromJSON(uint64(), \"[0, 3]\"), *result, true);\n \n-  ChunkedArray chunkedarr(\n-      {ArrayFromJSON(uint32(), \"[1, 0, 3]\"), ArrayFromJSON(uint32(), \"[4, 0, 6]\")});\n-  ASSERT_OK_AND_ASSIGN(actual,\n-                       CallFunction(\"indices_nonzero\", {static_cast<Datum>(chunkedarr)}));\n-  AssertArraysEqual(*actual.make_array(), *ArrayFromJSON(uint64(), \"[0, 2, 3, 5]\"));\n+  ASSERT_OK_AND_ASSIGN(\n\nReview comment:\n       done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -2365,38 +2365,91 @@ TEST_F(TestDropNullKernelWithTable, DropNullTableWithSlices) {\n   });\n }\n \n-TEST(TestIndicesNonZero, IndicesNonZero) {\n+template <typename Type>\n+class TestIndicesNonZero : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIndicesNonZero, NumericArrowTypes);\n\nReview comment:\n       done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T20:18:23.639+0000",
                    "updated": "2022-01-26T20:18:23.639+0000",
                    "started": "2022-01-26T20:18:23.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715965",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/716309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#discussion_r793431660\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -2392,6 +2392,29 @@ struct NonZeroVisitor {\n \n     return Status::OK();\n   }\n+\n+  template <typename Type>\n+  enable_if_t<is_decimal128_type<Type>::value || is_decimal256_type<Type>::value, Status>\n+  Visit(const Type&) {\n\nReview comment:\n       I simplified this more and removed the bool specialization which wasn't actually necessary.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T09:49:34.452+0000",
                    "updated": "2022-01-27T09:49:34.452+0000",
                    "started": "2022-01-27T09:49:34.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716309",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/716374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "c-jamie commented on pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#issuecomment-1023131136\n\n\n   Amazing - thanks a mill @pitrou for helping me with this.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T11:54:53.279+0000",
                    "updated": "2022-01-27T11:54:53.279+0000",
                    "started": "2022-01-27T11:54:53.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716374",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/716417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T13:48:28.651+0000",
                    "updated": "2022-01-27T13:48:28.651+0000",
                    "started": "2022-01-27T13:48:28.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716417",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/716418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#issuecomment-1023231506\n\n\n   Benchmark runs are scheduled for baseline = 09e4a5e04c9e39169b5264e0aa98a5cf0945ecba and contender = ce0964ed1eeb1881ddae3e84a8860316538ef0b7. ce0964ed1eeb1881ddae3e84a8860316538ef0b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/1eabed0d67254c53a30d617df4220734...ea266f44ea1949a78736e8d5936c98c8/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/9f34e4f336a445bb8bc3b528585ce2eb...50a0e2a064eb494cac02ec05d0a9c56c/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/26364854526e4014b4384adf5d917c9b...b5b944eb605a4f6fa24d9c549a240b8d/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T13:51:42.527+0000",
                    "updated": "2022-01-27T13:51:42.527+0000",
                    "started": "2022-01-27T13:51:42.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716418",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/716424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#issuecomment-1023231506\n\n\n   Benchmark runs are scheduled for baseline = 09e4a5e04c9e39169b5264e0aa98a5cf0945ecba and contender = ce0964ed1eeb1881ddae3e84a8860316538ef0b7. ce0964ed1eeb1881ddae3e84a8860316538ef0b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/1eabed0d67254c53a30d617df4220734...ea266f44ea1949a78736e8d5936c98c8/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/9f34e4f336a445bb8bc3b528585ce2eb...50a0e2a064eb494cac02ec05d0a9c56c/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/26364854526e4014b4384adf5d917c9b...b5b944eb605a4f6fa24d9c549a240b8d/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T14:01:32.829+0000",
                    "updated": "2022-01-27T14:01:32.829+0000",
                    "started": "2022-01-27T14:01:32.829+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716424",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/716631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#issuecomment-1023231506\n\n\n   Benchmark runs are scheduled for baseline = 09e4a5e04c9e39169b5264e0aa98a5cf0945ecba and contender = ce0964ed1eeb1881ddae3e84a8860316538ef0b7. ce0964ed1eeb1881ddae3e84a8860316538ef0b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/1eabed0d67254c53a30d617df4220734...ea266f44ea1949a78736e8d5936c98c8/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/9f34e4f336a445bb8bc3b528585ce2eb...50a0e2a064eb494cac02ec05d0a9c56c/)\n   [Finished :arrow_down:0.35% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/26364854526e4014b4384adf5d917c9b...b5b944eb605a4f6fa24d9c549a240b8d/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T19:32:10.322+0000",
                    "updated": "2022-01-27T19:32:10.322+0000",
                    "started": "2022-01-27T19:32:10.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716631",
                    "issueId": "13419932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/worklog/717225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12270:\nURL: https://github.com/apache/arrow/pull/12270#issuecomment-1023231506\n\n\n   Benchmark runs are scheduled for baseline = 09e4a5e04c9e39169b5264e0aa98a5cf0945ecba and contender = ce0964ed1eeb1881ddae3e84a8860316538ef0b7. ce0964ed1eeb1881ddae3e84a8860316538ef0b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/1eabed0d67254c53a30d617df4220734...ea266f44ea1949a78736e8d5936c98c8/)\n   [Finished :arrow_down:0.36% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/9f34e4f336a445bb8bc3b528585ce2eb...50a0e2a064eb494cac02ec05d0a9c56c/)\n   [Finished :arrow_down:0.35% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/26364854526e4014b4384adf5d917c9b...b5b944eb605a4f6fa24d9c549a240b8d/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-28T19:21:52.899+0000",
                    "updated": "2022-01-28T19:21:52.899+0000",
                    "started": "2022-01-28T19:21:52.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717225",
                    "issueId": "13419932"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@75083f95[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17bae877[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3237382c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@720e874d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11f70d0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2de3fc8b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@261e4743[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@202c8822[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@91a7e54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3bafdc58[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fdfb031[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b765870[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jan 27 13:48:17 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-27T13:48:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15218/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-12-29T21:02:28.000+0000",
        "updated": "2022-01-28T23:08:09.000+0000",
        "timeoriginalestimate": null,
        "description": "Follow-up JIRA for supporting {{DecimalType}} in {{indices_nonzero()}} compute function from ARROW-13035.\r\nThis would be similar to Numpy's nonzero function but for {{DecimalTypes}}.\r\nhttps://numpy.org/doc/stable/reference/generated/numpy.nonzero.html",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add Decimal support to indices_nonzero compute function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/comment/17466595",
                    "id": "17466595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We could also argue that any of the temporal types also fit the non-zero property. Is this something that would be of interest? cc [~apitrou] [~amol-]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-29T21:07:07.538+0000",
                    "updated": "2021-12-31T00:50:48.036+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/comment/17467177",
                    "id": "17467177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It would only make sense for Duration and Interval IMHO. There is no \"zero\" for timestamps, dates and times.\r\n[~lidavidm]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-31T10:10:18.314+0000",
                    "updated": "2021-12-31T10:10:18.314+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/comment/17467242",
                    "id": "17467242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "You could maybe argue the epoch is a zero of sorts but I think we probably would only want to add Duration and Interval, yes.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-31T12:58:08.809+0000",
                    "updated": "2021-12-31T12:58:08.809+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419932/comment/17483135",
                    "id": "17483135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12270\n[https://github.com/apache/arrow/pull/12270]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-01-27T13:48:17.149+0000",
                    "updated": "2022-01-27T13:48:17.149+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0y494:",
        "customfield_12314139": null
    }
}