{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13187824",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824",
    "key": "ARROW-3341",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3341/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652\n \n \n   As opposed to the other arrays, this needs special handling of buffers because R stores logical vectors as `int`. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T07:35:25.734+0000",
                    "updated": "2018-09-28T07:35:25.734+0000",
                    "started": "2018-09-28T07:35:25.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149054",
                    "issueId": "13187824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652#discussion_r221171724\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -80,7 +80,69 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<arrow::NumericArray<Type>>(data);\n+  return std::make_shared<ArrayType>(data);\n \n Review comment:\n   note that `ArrayType` is available through `typename arrow::TypeTraits<T>::ArrayType`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T08:26:10.291+0000",
                    "updated": "2018-09-28T08:26:10.291+0000",
                    "started": "2018-09-28T08:26:10.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149063",
                    "issueId": "13187824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652#discussion_r221172686\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -80,7 +80,69 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<arrow::NumericArray<Type>>(data);\n+  return std::make_shared<ArrayType>(data);\n+}\n+\n+std::shared_ptr<arrow::Array> MakeBooleanArray(\n+    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+  R_xlen_t n = vec.size();\n+\n+  // allocate a buffer for the data\n+  std::shared_ptr<arrow::Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  auto data_bitmap_data = data_bitmap->mutable_data();\n+  arrow::internal::FirstTimeBitmapWriter bitmap_writer(data_bitmap_data, 0, n);\n+  R_xlen_t null_count = 0;\n+\n+  // loop until the first no null\n+  R_xlen_t i = 0;\n+  for (; i < n; i++, bitmap_writer.Next()) {\n+    if (vec[i] == 0) {\n+      bitmap_writer.Clear();\n+    } else if (vec[i] == NA_LOGICAL) {\n+      break;\n+    } else {\n+      bitmap_writer.Set();\n+    }\n+  }\n+\n+  std::shared_ptr<arrow::Buffer> null_bitmap(nullptr);\n+  if (i < n) {\n+    // there has been a null before the end, so we need\n+    // to collect that information in a null bitmap\n+    R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &null_bitmap));\n+    auto null_bitmap_data = null_bitmap->mutable_data();\n+    arrow::internal::FirstTimeBitmapWriter null_bitmap_writer(null_bitmap_data, 0, n);\n+\n+    // catch up on the initial `i` bits\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // finish both bitmaps\n+    for (; i < n; i++, bitmap_writer.Next(), null_bitmap_writer.Next()) {\n+      if (vec[i] == 0) {\n+        bitmap_writer.Clear();\n+        null_bitmap_writer.Set();\n+      } else if (vec[i] == NA_LOGICAL) {\n+        null_bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        bitmap_writer.Set();\n+        null_bitmap_writer.Set();\n+      }\n+    }\n+    null_bitmap_writer.Finish();\n+  }\n+  bitmap_writer.Finish();\n+\n+  auto data = ArrayData::Make(std::make_shared<BooleanType>(), n,\n+                              {std::move(null_bitmap), std::move(data_bitmap)},\n+                              null_count, 0 /*offset*/\n+  );\n+\n+  // return the right Array class\n+  return std::make_shared<BooleanArray>(data);\n \n Review comment:\n   You can use `arrow::MakeArray(data)` here, too, either way is fine\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T08:26:10.423+0000",
                    "updated": "2018-09-28T08:26:10.423+0000",
                    "started": "2018-09-28T08:26:10.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149064",
                    "issueId": "13187824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652#discussion_r221173178\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -36,7 +36,7 @@ class SimpleRBuffer : public arrow::Buffer {\n   Vec vec_;\n };\n \n-template <int RTYPE, typename Type>\n+template <int RTYPE, typename Type, typename ArrayType>\n std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n \n Review comment:\n   since you are in a nested scope now, you can remove most of the `arrow::` references?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T08:26:10.441+0000",
                    "updated": "2018-09-28T08:26:10.441+0000",
                    "started": "2018-09-28T08:26:10.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149065",
                    "issueId": "13187824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652#discussion_r221172530\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -80,7 +80,69 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<arrow::NumericArray<Type>>(data);\n+  return std::make_shared<ArrayType>(data);\n+}\n+\n+std::shared_ptr<arrow::Array> MakeBooleanArray(\n+    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+  R_xlen_t n = vec.size();\n+\n+  // allocate a buffer for the data\n+  std::shared_ptr<arrow::Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  auto data_bitmap_data = data_bitmap->mutable_data();\n+  arrow::internal::FirstTimeBitmapWriter bitmap_writer(data_bitmap_data, 0, n);\n+  R_xlen_t null_count = 0;\n+\n+  // loop until the first no null\n+  R_xlen_t i = 0;\n+  for (; i < n; i++, bitmap_writer.Next()) {\n+    if (vec[i] == 0) {\n+      bitmap_writer.Clear();\n+    } else if (vec[i] == NA_LOGICAL) {\n+      break;\n+    } else {\n+      bitmap_writer.Set();\n+    }\n+  }\n+\n+  std::shared_ptr<arrow::Buffer> null_bitmap(nullptr);\n+  if (i < n) {\n+    // there has been a null before the end, so we need\n+    // to collect that information in a null bitmap\n+    R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &null_bitmap));\n+    auto null_bitmap_data = null_bitmap->mutable_data();\n+    arrow::internal::FirstTimeBitmapWriter null_bitmap_writer(null_bitmap_data, 0, n);\n+\n+    // catch up on the initial `i` bits\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // finish both bitmaps\n+    for (; i < n; i++, bitmap_writer.Next(), null_bitmap_writer.Next()) {\n+      if (vec[i] == 0) {\n+        bitmap_writer.Clear();\n+        null_bitmap_writer.Set();\n+      } else if (vec[i] == NA_LOGICAL) {\n+        null_bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        bitmap_writer.Set();\n+        null_bitmap_writer.Set();\n+      }\n+    }\n+    null_bitmap_writer.Finish();\n+  }\n+  bitmap_writer.Finish();\n+\n+  auto data = ArrayData::Make(std::make_shared<BooleanType>(), n,\n \n Review comment:\n   use `::arrow::boolean()` here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T08:26:10.549+0000",
                    "updated": "2018-09-28T08:26:10.549+0000",
                    "started": "2018-09-28T08:26:10.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149066",
                    "issueId": "13187824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex 10191de881..79c6add885 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -261,10 +261,10 @@ matrix:\n         fi\n     - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n-    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib\n-    - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib/pkgconfig\n     - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n+    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib\n+    - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib/pkgconfig\n     - pushd ${TRAVIS_BUILD_DIR}/r\n \n \ndiff --git a/r/.Rbuildignore b/r/.Rbuildignore\nindex 89f34ae601..b0c42b579a 100644\n--- a/r/.Rbuildignore\n+++ b/r/.Rbuildignore\n@@ -4,3 +4,5 @@\n src/.clang-format\n LICENSE.md\n ^data-raw$\n+lint.sh\n+\ndiff --git a/r/src/array.cpp b/r/src/array.cpp\nindex 02c52aad35..0de2d80c36 100644\n--- a/r/src/array.cpp\n+++ b/r/src/array.cpp\n@@ -36,7 +36,7 @@ class SimpleRBuffer : public arrow::Buffer {\n   Vec vec_;\n };\n \n-template <int RTYPE, typename Type>\n+template <int RTYPE, typename Type, typename ArrayType>\n std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   Rcpp::Vector<RTYPE> vec(x);\n   std::vector<std::shared_ptr<arrow::Buffer>> buffers{\n@@ -80,7 +80,69 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<arrow::NumericArray<Type>>(data);\n+  return std::make_shared<ArrayType>(data);\n+}\n+\n+std::shared_ptr<arrow::Array> MakeBooleanArray(\n+    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+  R_xlen_t n = vec.size();\n+\n+  // allocate a buffer for the data\n+  std::shared_ptr<arrow::Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  auto data_bitmap_data = data_bitmap->mutable_data();\n+  arrow::internal::FirstTimeBitmapWriter bitmap_writer(data_bitmap_data, 0, n);\n+  R_xlen_t null_count = 0;\n+\n+  // loop until the first no null\n+  R_xlen_t i = 0;\n+  for (; i < n; i++, bitmap_writer.Next()) {\n+    if (vec[i] == 0) {\n+      bitmap_writer.Clear();\n+    } else if (vec[i] == NA_LOGICAL) {\n+      break;\n+    } else {\n+      bitmap_writer.Set();\n+    }\n+  }\n+\n+  std::shared_ptr<arrow::Buffer> null_bitmap(nullptr);\n+  if (i < n) {\n+    // there has been a null before the end, so we need\n+    // to collect that information in a null bitmap\n+    R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &null_bitmap));\n+    auto null_bitmap_data = null_bitmap->mutable_data();\n+    arrow::internal::FirstTimeBitmapWriter null_bitmap_writer(null_bitmap_data, 0, n);\n+\n+    // catch up on the initial `i` bits\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // finish both bitmaps\n+    for (; i < n; i++, bitmap_writer.Next(), null_bitmap_writer.Next()) {\n+      if (vec[i] == 0) {\n+        bitmap_writer.Clear();\n+        null_bitmap_writer.Set();\n+      } else if (vec[i] == NA_LOGICAL) {\n+        null_bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        bitmap_writer.Set();\n+        null_bitmap_writer.Set();\n+      }\n+    }\n+    null_bitmap_writer.Finish();\n+  }\n+  bitmap_writer.Finish();\n+\n+  auto data = ArrayData::Make(std::make_shared<BooleanType>(), n,\n+                              {std::move(null_bitmap), std::move(data_bitmap)},\n+                              null_count, 0 /*offset*/\n+  );\n+\n+  // return the right Array class\n+  return std::make_shared<BooleanArray>(data);\n }\n \n }  // namespace r\n@@ -89,16 +151,21 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n // [[Rcpp::export]]\n std::shared_ptr<arrow::Array> Array__from_vector(SEXP x) {\n   switch (TYPEOF(x)) {\n+    case LGLSXP:\n+      return arrow::r::MakeBooleanArray(x);\n     case INTSXP:\n       if (Rf_isFactor(x)) {\n         break;\n       }\n-      return arrow::r::SimpleArray<INTSXP, arrow::Int32Type>(x);\n+      return arrow::r::SimpleArray<INTSXP, arrow::Int32Type,\n+                                   arrow::NumericArray<arrow::Int32Type>>(x);\n     case REALSXP:\n       // TODO: Dates, ...\n-      return arrow::r::SimpleArray<REALSXP, arrow::DoubleType>(x);\n+      return arrow::r::SimpleArray<REALSXP, arrow::DoubleType,\n+                                   arrow::NumericArray<arrow::DoubleType>>(x);\n     case RAWSXP:\n-      return arrow::r::SimpleArray<RAWSXP, arrow::Int8Type>(x);\n+      return arrow::r::SimpleArray<RAWSXP, arrow::Int8Type,\n+                                   arrow::NumericArray<arrow::Int8Type>>(x);\n     default:\n       break;\n   }\n@@ -131,9 +198,36 @@ inline SEXP simple_Array_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n   return vec;\n }\n \n+inline SEXP BooleanArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n+  size_t n = array->length();\n+  LogicalVector vec(n);\n+\n+  // process the data\n+  arrow::internal::BitmapReader data_reader(array->data()->buffers[1]->data(),\n+                                            array->offset(), n);\n+  for (size_t i = 0; i < n; i++, data_reader.Next()) {\n+    vec[i] = data_reader.IsSet();\n+  }\n+\n+  // then the null bitmap if needed\n+  if (array->null_count()) {\n+    arrow::internal::BitmapReader null_reader(array->null_bitmap()->data(),\n+                                              array->offset(), n);\n+    for (size_t i = 0; i < n; i++, null_reader.Next()) {\n+      if (null_reader.IsNotSet()) {\n+        vec[i] = LogicalVector::get_na();\n+      }\n+    }\n+  }\n+\n+  return vec;\n+}\n+\n // [[Rcpp::export]]\n SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\n   switch (array->type_id()) {\n+    case Type::BOOL:\n+      return BooleanArray_to_Vector(array);\n     case Type::INT8:\n       return simple_Array_to_Vector<RAWSXP>(array);\n     case Type::INT32:\ndiff --git a/r/tests/testthat/test-Array.R b/r/tests/testthat/test-Array.R\nindex f747cae054..78b641ad08 100644\n--- a/r/tests/testthat/test-Array.R\n+++ b/r/tests/testthat/test-Array.R\n@@ -64,3 +64,16 @@ test_that(\"Array supports NA\", {\n   expect_equal(Array__Mask(x_int), c(rep(TRUE, 10), FALSE))\n   expect_equal(Array__Mask(x_dbl), c(rep(TRUE, 10), FALSE))\n })\n+\n+test_that(\"Array supports logical vectors (ARROW-3341)\", {\n+  # with NA\n+  x <- sample(c(TRUE, FALSE, NA), 1000, replace = TRUE)\n+  arr_lgl <- array(x)\n+  expect_identical(x, arr_lgl$as_vector())\n+\n+  # without NA\n+  x <- sample(c(TRUE, FALSE), 1000, replace = TRUE)\n+  arr_lgl <- array(x)\n+  expect_identical(x, arr_lgl$as_vector())\n+})\n+\ndiff --git a/r/tests/testthat/test-RecordBatch.R b/r/tests/testthat/test-RecordBatch.R\nindex 71d645c530..67c010cbf7 100644\n--- a/r/tests/testthat/test-RecordBatch.R\n+++ b/r/tests/testthat/test-RecordBatch.R\n@@ -18,19 +18,22 @@\n context(\"arrow::RecordBatch\")\n \n test_that(\"RecordBatch\", {\n-  tbl <- tibble::tibble(int = 1:10, dbl = as.numeric(1:10))\n+  tbl <- tibble::tibble(\n+    int = 1:10, dbl = as.numeric(1:10),\n+    lgl = sample(c(TRUE, FALSE, NA), 10, replace = TRUE)\n+  )\n   batch <- record_batch(tbl)\n \n   expect_true(batch == batch)\n   expect_equal(\n     batch$schema(),\n-    schema(int = int32(), dbl = float64())\n+    schema(int = int32(), dbl = float64(), lgl = boolean())\n   )\n-  expect_equal(batch$num_columns(), 2L)\n+  expect_equal(batch$num_columns(), 3L)\n   expect_equal(batch$num_rows(), 10L)\n   expect_equal(batch$column_name(0), \"int\")\n   expect_equal(batch$column_name(1), \"dbl\")\n-  expect_equal(names(batch), c(\"int\", \"dbl\"))\n+  expect_equal(names(batch), c(\"int\", \"dbl\", \"lgl\"))\n \n   col_int <- batch$column(0)\n   expect_true(inherits(col_int, 'arrow::Array'))\n@@ -42,10 +45,15 @@ test_that(\"RecordBatch\", {\n   expect_equal(col_dbl$as_vector(), tbl$dbl)\n   expect_equal(col_dbl$type(), float64())\n \n+  col_lgl <- batch$column(2)\n+  expect_true(inherits(col_dbl, 'arrow::Array'))\n+  expect_equal(col_lgl$as_vector(), tbl$lgl)\n+  expect_equal(col_lgl$type(), boolean())\n+\n   batch2 <- batch$RemoveColumn(0)\n   expect_equal(\n     batch2$schema(),\n-    schema(dbl = float64())\n+    schema(dbl = float64(), lgl = boolean())\n   )\n   expect_equal(batch2$column(0), batch$column(1))\n \ndiff --git a/r/tests/testthat/test-chunkedarray.R b/r/tests/testthat/test-chunkedarray.R\nindex 09b062f4f2..0addfb2054 100644\n--- a/r/tests/testthat/test-chunkedarray.R\n+++ b/r/tests/testthat/test-chunkedarray.R\n@@ -75,3 +75,28 @@ test_that(\"ChunkedArray handles NA\", {\n   expect_equal(Array__Mask(chunks[[2]]), !is.na(data[[2]]))\n   expect_equal(Array__Mask(chunks[[3]]), !is.na(data[[3]]))\n })\n+\n+test_that(\"ChunkedArray supports logical vectors (ARROW-3341)\", {\n+  # with NA\n+  data <- purrr::rerun(3, sample(c(TRUE, FALSE, NA), 100, replace = TRUE))\n+  arr_lgl <- chunked_array(!!!data)\n+  expect_equal(arr_lgl$length(), 300L)\n+  expect_equal(arr_lgl$null_count(), sum(unlist(map(data, is.na))))\n+\n+  chunks <- arr_lgl$chunks()\n+  expect_identical(data[[1]], chunks[[1]]$as_vector())\n+  expect_identical(data[[2]], chunks[[2]]$as_vector())\n+  expect_identical(data[[3]], chunks[[3]]$as_vector())\n+\n+  # without NA\n+  data <- purrr::rerun(3, sample(c(TRUE, FALSE), 100, replace = TRUE))\n+  arr_lgl <- chunked_array(!!!data)\n+  expect_equal(arr_lgl$length(), 300L)\n+  expect_equal(arr_lgl$null_count(), sum(unlist(map(data, is.na))))\n+\n+  chunks <- arr_lgl$chunks()\n+  expect_identical(data[[1]], chunks[[1]]$as_vector())\n+  expect_identical(data[[2]], chunks[[2]]$as_vector())\n+  expect_identical(data[[3]], chunks[[3]]$as_vector())\n+})\n+\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T08:27:38.534+0000",
                    "updated": "2018-09-28T08:27:38.534+0000",
                    "started": "2018-09-28T08:27:38.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149070",
                    "issueId": "13187824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/worklog/149073",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2652: ARROW-3341: [R] Support for logical vector\nURL: https://github.com/apache/arrow/pull/2652#issuecomment-425362573\n \n \n   Thanks. I'll deal with the comments on the next PR. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T08:29:12.183+0000",
                    "updated": "2018-09-28T08:29:12.183+0000",
                    "started": "2018-09-28T08:29:12.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149073",
                    "issueId": "13187824"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5986459d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1eeba4ad[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d2b1410[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3ea619d4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@114729db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5764a7f7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72caa29f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7cac6dab[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@540d8a14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@26a4c47d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1dd546c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1e83a0c9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 28 08:27:58 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-28T08:27:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3341/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-27T07:41:18.000+0000",
        "updated": "2018-10-01T00:17:24.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Support for logical vector",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187824/comment/16631522",
                    "id": "16631522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2652\n[https://github.com/apache/arrow/pull/2652]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-28T08:27:58.457+0000",
                    "updated": "2018-09-28T08:27:58.457+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yk2n:",
        "customfield_12314139": null
    }
}