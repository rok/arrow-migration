{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13240594",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594",
    "key": "ARROW-5661",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pprudhvi",
            "name": "pprudhvi",
            "key": "pprudhvi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Prudhvi Porandla",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pprudhvi",
            "name": "pprudhvi",
            "key": "pprudhvi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Prudhvi Porandla",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pprudhvi",
            "name": "pprudhvi",
            "key": "pprudhvi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Prudhvi Porandla",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5661/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/264552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r296198539\n \n \n\n ##########\n File path: cpp/src/gandiva/tests/decimal_test.cc\n ##########\n @@ -480,4 +480,107 @@ TEST_F(TestDecimal, TestCastFunctions) {\n   EXPECT_ARROW_ARRAY_EQUALS(array_float64, outputs[4]);\n }\n \n+TEST_F(TestDecimal, TestHashFunctions) {\n \n Review comment:\n   lets add a function that wraps hash functions too\r\n   \r\n   like hash(col, hash(col2))\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-21T11:28:42.614+0000",
                    "updated": "2019-06-21T11:28:42.614+0000",
                    "started": "2019-06-21T11:28:42.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "264552",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/264553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r296198075\n \n \n\n ##########\n File path: cpp/src/gandiva/precompiled/decimal_wrapper.cc\n ##########\n @@ -231,4 +231,131 @@ void castDECIMAL_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_p\n   *out_low = out.low_bits();\n }\n \n+FORCE_INLINE\n+int32_t hash32_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_validity) {\n+  return x_validity\n+             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                 int32_t x_scale, boolean x_validity) {\n+  return hash32_decimal128_internal(x_high, x_low, x_precision, x_scale, x_validity);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_validity) {\n+  return x_validity\n+             ? hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash32WithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_validity, int32_t seed,\n+                                           boolean seed_validity) {\n+  return x_validity && seed_validity\n+             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16,\n+                          seed)\n+             : 0;\n \n Review comment:\n   i am not sure this logic is right\r\n   if input is not valid, we should return seed as the hash\r\n   if seed is not valid, we should hash value with 0 as seed instead of 0 hash i guess..\r\n   Lets discuss with Ravindra on Monday.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-21T11:28:43.866+0000",
                    "updated": "2019-06-21T11:28:43.866+0000",
                    "started": "2019-06-21T11:28:43.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "264553",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/265543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r296575232\n \n \n\n ##########\n File path: cpp/src/gandiva/precompiled/decimal_wrapper.cc\n ##########\n @@ -233,115 +233,127 @@ void castDECIMAL_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_p\n \n FORCE_INLINE\n int32_t hash32_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n-                                   int32_t x_scale, boolean x_validity) {\n-  return x_validity\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid\n              ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n              : 0;\n }\n \n FORCE_INLINE\n int32_t hash_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n-                                 int32_t x_scale, boolean x_validity) {\n-  return hash32_decimal128_internal(x_high, x_low, x_precision, x_scale, x_validity);\n+                                 int32_t x_scale, boolean x_isvalid) {\n+  return hash32_decimal128_internal(x_high, x_low, x_precision, x_scale, x_isvalid);\n }\n \n FORCE_INLINE\n int64_t hash64_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n-                                   int32_t x_scale, boolean x_validity) {\n-  return x_validity\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid\n              ? hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n              : 0;\n }\n \n FORCE_INLINE\n int32_t hash32WithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n                                            int32_t x_precision, int32_t x_scale,\n-                                           boolean x_validity, int32_t seed,\n-                                           boolean seed_validity) {\n-  return x_validity && seed_validity\n-             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16,\n-                          seed)\n-             : 0;\n+                                           boolean x_isvalid, int32_t seed,\n+                                           boolean seed_isvalid) {\n+  if (!seed_isvalid) {\n+    seed = 0;\n+  }\n+  if (!x_isvalid) {\n \n Review comment:\n   move this higher..might be the more common case..\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T07:00:05.444+0000",
                    "updated": "2019-06-24T07:00:05.444+0000",
                    "started": "2019-06-24T07:00:05.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265543",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/265605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pprudhvi commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r296614552\n \n \n\n ##########\n File path: cpp/src/gandiva/tests/decimal_test.cc\n ##########\n @@ -480,4 +480,107 @@ TEST_F(TestDecimal, TestCastFunctions) {\n   EXPECT_ARROW_ARRAY_EQUALS(array_float64, outputs[4]);\n }\n \n+TEST_F(TestDecimal, TestHashFunctions) {\n \n Review comment:\n   done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T08:48:20.930+0000",
                    "updated": "2019-06-24T08:48:20.930+0000",
                    "started": "2019-06-24T08:48:20.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265605",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/266389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r297040210\n \n \n\n ##########\n File path: cpp/src/gandiva/precompiled/decimal_wrapper.cc\n ##########\n @@ -231,4 +231,131 @@ void castDECIMAL_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_p\n   *out_low = out.low_bits();\n }\n \n+FORCE_INLINE\n+int32_t hash32_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                 int32_t x_scale, boolean x_isvalid) {\n+  return hash32_decimal128_internal(x_high, x_low, x_precision, x_scale, x_isvalid);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash32WithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid, int32_t seed,\n+                                           boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64WithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid, int64_t seed,\n+                                           boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+int32_t hash32AsDouble_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int64_t hash64AsDouble_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash32AsDoubleWithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                                   int32_t x_precision, int32_t x_scale,\n+                                                   boolean x_isvalid, int32_t seed,\n+                                                   boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64AsDoubleWithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                                   int32_t x_precision, int32_t x_scale,\n+                                                   boolean x_isvalid, int64_t seed,\n+                                                   boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+boolean isnull_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return !x_isvalid;\n+}\n+\n+FORCE_INLINE\n+boolean isnotnull_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                      int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid;\n+}\n+\n+FORCE_INLINE\n+boolean isnumeric_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                      int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid;\n+}\n+\n+FORCE_INLINE\n+boolean is_not_distinct_from_decimal128_decimal128_internal(\n+    int64_t x_high, uint64_t x_low, int32_t x_precision, int32_t x_scale,\n+    boolean x_isvalid, int64_t y_high, uint64_t y_low, int32_t y_precision,\n+    int32_t y_scale, boolean y_isvalid) {\n+  if (x_isvalid != y_isvalid) {\n+    return false;\n+  }\n+  if (!x_isvalid) {\n+    return true;\n \n Review comment:\n   sorry did not notice before \r\n   should we not return false here? one null is never equal to another null..\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T07:21:39.277+0000",
                    "updated": "2019-06-25T07:21:39.277+0000",
                    "started": "2019-06-25T07:21:39.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266389",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/266390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r297043477\n \n \n\n ##########\n File path: cpp/src/gandiva/precompiled/decimal_wrapper.cc\n ##########\n @@ -231,4 +231,131 @@ void castDECIMAL_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_p\n   *out_low = out.low_bits();\n }\n \n+FORCE_INLINE\n+int32_t hash32_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                 int32_t x_scale, boolean x_isvalid) {\n+  return hash32_decimal128_internal(x_high, x_low, x_precision, x_scale, x_isvalid);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash32WithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid, int32_t seed,\n+                                           boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64WithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid, int64_t seed,\n+                                           boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+int32_t hash32AsDouble_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int64_t hash64AsDouble_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                           int32_t x_precision, int32_t x_scale,\n+                                           boolean x_isvalid) {\n+  return x_isvalid\n+             ? hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, 0)\n+             : 0;\n+}\n+\n+FORCE_INLINE\n+int32_t hash32AsDoubleWithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                                   int32_t x_precision, int32_t x_scale,\n+                                                   boolean x_isvalid, int32_t seed,\n+                                                   boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash32_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+int64_t hash64AsDoubleWithSeed_decimal128_internal(int64_t x_high, uint64_t x_low,\n+                                                   int32_t x_precision, int32_t x_scale,\n+                                                   boolean x_isvalid, int64_t seed,\n+                                                   boolean seed_isvalid) {\n+  if (!x_isvalid) {\n+    return seed;\n+  }\n+  return hash64_buf(gandiva::BasicDecimal128(x_high, x_low).ToBytes().data(), 16, seed);\n+}\n+\n+FORCE_INLINE\n+boolean isnull_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                   int32_t x_scale, boolean x_isvalid) {\n+  return !x_isvalid;\n+}\n+\n+FORCE_INLINE\n+boolean isnotnull_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                      int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid;\n+}\n+\n+FORCE_INLINE\n+boolean isnumeric_decimal128_internal(int64_t x_high, uint64_t x_low, int32_t x_precision,\n+                                      int32_t x_scale, boolean x_isvalid) {\n+  return x_isvalid;\n+}\n+\n+FORCE_INLINE\n+boolean is_not_distinct_from_decimal128_decimal128_internal(\n+    int64_t x_high, uint64_t x_low, int32_t x_precision, int32_t x_scale,\n+    boolean x_isvalid, int64_t y_high, uint64_t y_low, int32_t y_precision,\n+    int32_t y_scale, boolean y_isvalid) {\n+  if (x_isvalid != y_isvalid) {\n+    return false;\n+  }\n+  if (!x_isvalid) {\n+    return true;\n \n Review comment:\n   please ignore looks like this is what sql standard recommends.\r\n   \r\n   https://en.wikipedia.org/wiki/Null_(SQL)#When_two_nulls_are_equal:_grouping,_sorting,_and_some_set_operations\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T07:31:01.187+0000",
                    "updated": "2019-06-25T07:31:01.187+0000",
                    "started": "2019-06-25T07:31:01.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266390",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/266477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r297091662\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_common.h\n ##########\n @@ -190,7 +190,7 @@ typedef std::unordered_map<const FunctionSignature*, const NativeFunction*, KeyH\n #define NUMERIC_TYPES(INNER, NAME)                                                       \\\n   INNER(NAME, int8), INNER(NAME, int16), INNER(NAME, int32), INNER(NAME, int64),         \\\n       INNER(NAME, uint8), INNER(NAME, uint16), INNER(NAME, uint32), INNER(NAME, uint64), \\\n-      INNER(NAME, float32), INNER(NAME, float64)\n+      INNER(NAME, float32), INNER(NAME, float64), INNER(NAME, decimal128)\n \n Review comment:\n   this is a bit risky - can you please check if all of fns with this macro are defined for decimals ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T09:28:21.733+0000",
                    "updated": "2019-06-25T09:28:21.733+0000",
                    "started": "2019-06-25T09:28:21.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266477",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/266478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r297092692\n \n \n\n ##########\n File path: cpp/src/gandiva/tests/decimal_test.cc\n ##########\n @@ -480,4 +480,313 @@ TEST_F(TestDecimal, TestCastFunctions) {\n   EXPECT_ARROW_ARRAY_EQUALS(array_float64, outputs[4]);\n }\n \n+// isnull, isnumeric\n+TEST_F(TestDecimal, TestIsNullNumericFunctions) {\n+  // schema for input fields\n+  constexpr int32_t precision = 38;\n+  constexpr int32_t scale = 2;\n+  auto decimal_type = std::make_shared<arrow::Decimal128Type>(precision, scale);\n+  auto field_dec = field(\"dec\", decimal_type);\n+  auto schema = arrow::schema({field_dec});\n+\n+  // build expressions\n+  auto exprs = std::vector<ExpressionPtr>{\n+      TreeExprBuilder::MakeExpression(\"isnull\", {field_dec},\n+                                      field(\"isnull\", arrow::boolean())),\n+\n+      TreeExprBuilder::MakeExpression(\"isnotnull\", {field_dec},\n+                                      field(\"isnotnull\", arrow::boolean())),\n+      TreeExprBuilder::MakeExpression(\"isnumeric\", {field_dec},\n+                                      field(\"isnumeric\", arrow::boolean()))};\n+\n+  // Build a projector for the expression.\n+  std::shared_ptr<Projector> projector;\n+  auto status = Projector::Make(schema, exprs, TestConfiguration(), &projector);\n+  DCHECK_OK(status);\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 5;\n+  auto validity = {false, true, true, true, false};\n+\n+  auto array_dec = MakeArrowArrayDecimal(\n+      decimal_type, MakeDecimalVector({\"1.51\", \"1.23\", \"1.23\", \"-1.23\", \"-1.24\"}, scale),\n+      validity);\n+\n+  // prepare input record batch\n+  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array_dec});\n+\n+  // Evaluate expression\n+  arrow::ArrayVector outputs;\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n+  DCHECK_OK(status);\n+\n+  // Validate results\n+  auto is_null = std::dynamic_pointer_cast<arrow::BooleanArray>(outputs.at(0));\n+  auto is_not_null = std::dynamic_pointer_cast<arrow::BooleanArray>(outputs.at(1));\n+  auto is_numeric = std::dynamic_pointer_cast<arrow::BooleanArray>(outputs.at(2));\n+  for (int i = 0; i < num_records; ++i) {\n+    EXPECT_EQ(is_not_null->Value(i), validity.begin()[i]);\n+    EXPECT_EQ(is_null->Value(i), !is_not_null->Value(i));\n+    EXPECT_EQ(is_numeric->Value(i), is_not_null->Value(i));\n+  }\n+}\n+\n+TEST_F(TestDecimal, TestIsDistinct) {\n+  // schema for input fields\n+  constexpr int32_t precision = 38;\n+  constexpr int32_t scale_1 = 2;\n+  auto decimal_type_1 = std::make_shared<arrow::Decimal128Type>(precision, scale_1);\n+  auto field_dec_1 = field(\"dec_1\", decimal_type_1);\n+  constexpr int32_t scale_2 = 1;\n+  auto decimal_type_2 = std::make_shared<arrow::Decimal128Type>(precision, scale_2);\n+  auto field_dec_2 = field(\"dec_2\", decimal_type_2);\n+\n+  auto schema = arrow::schema({field_dec_1, field_dec_2});\n+\n+  // build expressions\n+  auto exprs = std::vector<ExpressionPtr>{\n+      TreeExprBuilder::MakeExpression(\"is_distinct_from\", {field_dec_1, field_dec_2},\n+                                      field(\"isdistinct\", arrow::boolean())),\n+\n+      TreeExprBuilder::MakeExpression(\"is_not_distinct_from\", {field_dec_1, field_dec_2},\n+                                      field(\"isnotdistinct\", arrow::boolean()))};\n+\n+  // Build a projector for the expression.\n+  std::shared_ptr<Projector> projector;\n+  auto status = Projector::Make(schema, exprs, TestConfiguration(), &projector);\n+  DCHECK_OK(status);\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+\n+  auto validity_1 = {true, false, true, true};\n+  auto array_dec_1 = MakeArrowArrayDecimal(\n+      decimal_type_1, MakeDecimalVector({\"1.51\", \"1.23\", \"1.20\", \"-1.20\"}, scale_1),\n+      validity_1);\n+\n+  auto validity_2 = {true, false, false, true};\n+  auto array_dec_2 = MakeArrowArrayDecimal(\n+      decimal_type_2, MakeDecimalVector({\"1.5\", \"1.2\", \"1.2\", \"-1.2\"}, scale_2),\n+      validity_2);\n+\n+  // prepare input record batch\n+  auto in_batch =\n+      arrow::RecordBatch::Make(schema, num_records, {array_dec_1, array_dec_2});\n+\n+  // Evaluate expression\n+  arrow::ArrayVector outputs;\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n+  DCHECK_OK(status);\n+\n+  // Validate results\n+  auto is_distinct = std::dynamic_pointer_cast<arrow::BooleanArray>(outputs.at(0));\n+  auto is_not_distinct = std::dynamic_pointer_cast<arrow::BooleanArray>(outputs.at(1));\n+\n+  // both not null; unequal\n+  EXPECT_EQ(is_distinct->Value(0), true);\n \n Review comment:\n   for all the tests, can you please EXPECT_ARROW_ARRAY_EQUALS ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T09:28:21.811+0000",
                    "updated": "2019-06-25T09:28:21.811+0000",
                    "started": "2019-06-25T09:28:21.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266478",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/266509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pprudhvi commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618#discussion_r297110030\n \n \n\n ##########\n File path: cpp/src/gandiva/function_registry_common.h\n ##########\n @@ -190,7 +190,7 @@ typedef std::unordered_map<const FunctionSignature*, const NativeFunction*, KeyH\n #define NUMERIC_TYPES(INNER, NAME)                                                       \\\n   INNER(NAME, int8), INNER(NAME, int16), INNER(NAME, int32), INNER(NAME, int64),         \\\n       INNER(NAME, uint8), INNER(NAME, uint16), INNER(NAME, uint32), INNER(NAME, uint64), \\\n-      INNER(NAME, float32), INNER(NAME, float64)\n+      INNER(NAME, float32), INNER(NAME, float64), INNER(NAME, decimal128)\n \n Review comment:\n   I implemented additional decimal functions(isnull, isnotnull, is_distinct, is_not_distinct, isnumeric) which will be added to the registry when we include decimal128 in numeric types. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T10:09:16.792+0000",
                    "updated": "2019-06-25T10:09:16.792+0000",
                    "started": "2019-06-25T10:09:16.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266509",
                    "issueId": "13240594"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/worklog/267202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4618: ARROW-5661: [Gandiva] [C++] support hash functions for decimals in gandiva\nURL: https://github.com/apache/arrow/pull/4618\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-26T01:33:37.505+0000",
                    "updated": "2019-06-26T01:33:37.505+0000",
                    "started": "2019-06-26T01:33:37.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "267202",
                    "issueId": "13240594"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f361fed[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e32b1f1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72b4d445[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@69924edb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e966d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@380e9853[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c4c65eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@17530a2f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a4121e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1641f6fa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19adaae4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1620c98c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 26 01:33:33 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-26T01:33:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5661/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-06-20T07:14:53.000+0000",
        "updated": "2019-06-26T01:33:37.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Support hash functions for decimal in Gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240594/comment/16872853",
                    "id": "16872853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 4618\n[https://github.com/apache/arrow/pull/4618]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2019-06-26T01:33:33.788+0000",
                    "updated": "2019-06-26T01:33:33.788+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z03xjc:",
        "customfield_12314139": null
    }
}