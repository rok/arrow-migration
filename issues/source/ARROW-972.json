{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13069846",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846",
    "key": "ARROW-972",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12339649",
                "id": "12339649",
                "name": "0.3.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-05-05"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-972/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7974fa36[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c4dc240[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2deca31b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3f213b24[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f84ba8f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@164acc10[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ef641b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@68b8a958[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12122602[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5278421c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e6f3a63[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@13b0b69f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 09 16:32:10 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-09T16:31:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-972/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-05-08T00:58:21.000+0000",
        "updated": "2017-11-09T16:32:10.000+0000",
        "timeoriginalestimate": null,
        "description": "While this is implemented in C++, there isn't any API exposure yet in Python",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add test cases and basic APIs for UnionArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16211953",
                    "id": "16211953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "GitHub user pcmoritz opened a pull request:\n\n    https://github.com/apache/arrow/pull/1216\n\n    [WIP] ARROW-972: UnionArray in pyarrow\n\n    This is taking a stab at exposing UnionArray to pyarrow. Tasks to be done:\r\n    \r\n    - [ ] Support UnionType::SPARSE\r\n    - [ ] Add doc strings\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/pcmoritz/arrow pyarrow-union-array\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/arrow/pull/1216.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1216\n    \n----\ncommit 7f78e4f525c9e19538e7bf76c35d25763e695ccf\nAuthor: Philipp Moritz <pcmoritz@gmail.com>\nDate:   2017-10-19T22:51:19Z\n\n    Implement UnionArray in pyarrow\n\n----\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-20T00:03:47.127+0000",
                    "updated": "2017-10-20T00:03:47.127+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16215934",
                    "id": "16215934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1216: [WIP] ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-338809843\n \n \n   Can you rebase? What more work needs to be done here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T22:01:32.866+0000",
                    "updated": "2017-10-23T22:01:32.866+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16238653",
                    "id": "16238653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1216: [WIP] ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-341859683\n \n \n   @pcmoritz anything I can do to help on this? Would be great to get this into 0.8.0\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T00:52:11.795+0000",
                    "updated": "2017-11-04T00:52:11.795+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16239179",
                    "id": "16239179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1216: [WIP] ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-341922900\n \n \n   @wesm: Agreed it should be part of 0.8.0. I'll take a stab at the remaining items now and let you know how things go.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T19:18:44.017+0000",
                    "updated": "2017-11-04T19:18:44.017+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16239691",
                    "id": "16239691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-341996921\n \n \n   This is now ready to review\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-05T19:09:26.954+0000",
                    "updated": "2017-11-05T19:09:26.954+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242939",
                    "id": "16242939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149511274\n \n \n\n ##########\n File path: python/pyarrow/scalar.pxi\n ##########\n @@ -315,6 +315,26 @@ cdef class ListValue(ArrayValue):\n         return result\n \n \n+cdef class UnionValue(ArrayValue):\n+\n+    cdef void _set_array(self, const shared_ptr[CArray]& sp_array):\n+        self.sp_array = sp_array\n+        self.ap = <CUnionArray*> sp_array.get()\n+        self.value_types = [pyarrow_wrap_data_type(self.ap.value_type(i))\n+                            for i in range(self.ap.num_fields())]\n \n Review comment:\n   This is quite expensive on a per-value basis. Could these wrapped types be accessed from the parent pyarrow UnionArray?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.461+0000",
                    "updated": "2017-11-07T21:39:29.461+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242940",
                    "id": "16242940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149506945\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -393,6 +393,71 @@ UnionArray::UnionArray(const std::shared_ptr<DataType>& type, int64_t length,\n   SetData(internal_data);\n }\n \n+std::shared_ptr<DataType> MakeUnionArrayType(\n+    UnionMode mode, const std::vector<std::shared_ptr<Array>>& children) {\n+  auto types = std::vector<std::shared_ptr<Field>>();\n+  std::vector<uint8_t> type_codes;\n+  uint8_t counter = 0;\n+  for (const auto& child : children) {\n+    types.push_back(field(std::to_string(counter), child->type()));\n+    type_codes.push_back(counter);\n+    counter++;\n+  }\n+  return union_(types, type_codes, mode);\n+}\n+\n+Status UnionArray::FromDense(const Array& type_ids, const Array& value_offsets,\n+                             const std::vector<std::shared_ptr<Array>>& children,\n+                             std::shared_ptr<Array>* out) {\n+  if (value_offsets.length() == 0) {\n+    return Status::Invalid(\"UnionArray offsets must have non-zero length\");\n+  }\n+\n+  if (value_offsets.type_id() != Type::INT32) {\n+    return Status::Invalid(\"UnionArray offsets must be signed int32\");\n+  }\n+\n+  if (type_ids.type_id() != Type::INT8) {\n+    return Status::Invalid(\"UnionArray type_ids must be signed int8\");\n+  }\n+\n+  BufferVector buffers = {type_ids.null_bitmap(),\n+                          static_cast<const UInt8Array&>(type_ids).values(),\n+                          static_cast<const Int32Array&>(value_offsets).values()};\n \n Review comment:\n   May also want to assert that `value_offsets` has 0 null count\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.511+0000",
                    "updated": "2017-11-07T21:39:29.511+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242941",
                    "id": "16242941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149506402\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -393,6 +393,71 @@ UnionArray::UnionArray(const std::shared_ptr<DataType>& type, int64_t length,\n   SetData(internal_data);\n }\n \n+std::shared_ptr<DataType> MakeUnionArrayType(\n+    UnionMode mode, const std::vector<std::shared_ptr<Array>>& children) {\n+  auto types = std::vector<std::shared_ptr<Field>>();\n \n Review comment:\n   This might be better with the type on the LHS (`std::vector<std::shared_ptr<Field>> types;`)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.521+0000",
                    "updated": "2017-11-07T21:39:29.521+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242942",
                    "id": "16242942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149511086\n \n \n\n ##########\n File path: python/pyarrow/scalar.pxi\n ##########\n @@ -315,6 +315,26 @@ cdef class ListValue(ArrayValue):\n         return result\n \n \n+cdef class UnionValue(ArrayValue):\n+\n+    cdef void _set_array(self, const shared_ptr[CArray]& sp_array):\n \n Review comment:\n   Is it true that using an underscore saves you from declaring this method in the pxd file? If so I've been wasting my time a bunch in the past :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.578+0000",
                    "updated": "2017-11-07T21:39:29.578+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242943",
                    "id": "16242943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149506569\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -393,6 +393,71 @@ UnionArray::UnionArray(const std::shared_ptr<DataType>& type, int64_t length,\n   SetData(internal_data);\n }\n \n+std::shared_ptr<DataType> MakeUnionArrayType(\n \n Review comment:\n   Would this be useful as an alternate version of `arrow::union_`? Maybe with the same API (the mode as the last argument) but omitting the type codes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.584+0000",
                    "updated": "2017-11-07T21:39:29.584+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242944",
                    "id": "16242944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149509888\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -612,12 +612,43 @@ class ARROW_EXPORT UnionArray : public Array {\n              const std::shared_ptr<Buffer>& null_bitmap = NULLPTR, int64_t null_count = 0,\n              int64_t offset = 0);\n \n+  /// \\brief Construct Dense UnionArray from types_ids, value_offsets and children\n+  ///\n+  /// This function does the bare minimum of validation of the offsets and\n+  /// input types. The value_offsets are assumed to be well-formed.\n+  ///\n+  /// \\param[in] type_ids An array of 8-bit signed integers, enumerated from\n+  /// 0 corresponding to each type.\n+  /// \\param[in] value_offsets An array of signed int32 values indicating the\n+  /// relative offset into the respective child array for the type in a given slot.\n+  /// The respective offsets for each child value array must be in order / increasing.\n+  /// \\param[in] children Vector of children Arrays containing the data for each type.\n+  /// \\param[out] out Will have length equal to value_offsets.length()\n+  static Status FromDense(const Array& type_ids, const Array& value_offsets,\n \n Review comment:\n   Hm, this is naming similar to `ListArray::FromArrays`, but because there are two versions, I wonder if calling this `UnionArray::MakeDense` (or `FromArraysDense`, more verbose) would be clearer\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.598+0000",
                    "updated": "2017-11-07T21:39:29.598+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16242945",
                    "id": "16242945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149510499\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -628,6 +659,8 @@ class ARROW_EXPORT UnionArray : public Array {\n   /// Only use this while the UnionArray is in scope\n   const Array* UnsafeChild(int pos) const;\n \n+  std::shared_ptr<DataType> value_type(int pos) const;\n \n Review comment:\n   It wasn't initially clear that this is the child type, maybe call this `child_type` instead (and add doxygen comment)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:39:29.600+0000",
                    "updated": "2017-11-07T21:39:29.600+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16244673",
                    "id": "16244673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149786978\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -393,6 +393,71 @@ UnionArray::UnionArray(const std::shared_ptr<DataType>& type, int64_t length,\n   SetData(internal_data);\n }\n \n+std::shared_ptr<DataType> MakeUnionArrayType(\n+    UnionMode mode, const std::vector<std::shared_ptr<Array>>& children) {\n+  auto types = std::vector<std::shared_ptr<Field>>();\n+  std::vector<uint8_t> type_codes;\n+  uint8_t counter = 0;\n+  for (const auto& child : children) {\n+    types.push_back(field(std::to_string(counter), child->type()));\n+    type_codes.push_back(counter);\n+    counter++;\n+  }\n+  return union_(types, type_codes, mode);\n+}\n+\n+Status UnionArray::FromDense(const Array& type_ids, const Array& value_offsets,\n+                             const std::vector<std::shared_ptr<Array>>& children,\n+                             std::shared_ptr<Array>* out) {\n+  if (value_offsets.length() == 0) {\n+    return Status::Invalid(\"UnionArray offsets must have non-zero length\");\n+  }\n+\n+  if (value_offsets.type_id() != Type::INT32) {\n+    return Status::Invalid(\"UnionArray offsets must be signed int32\");\n+  }\n+\n+  if (type_ids.type_id() != Type::INT8) {\n+    return Status::Invalid(\"UnionArray type_ids must be signed int8\");\n+  }\n+\n+  BufferVector buffers = {type_ids.null_bitmap(),\n+                          static_cast<const UInt8Array&>(type_ids).values(),\n+                          static_cast<const Int32Array&>(value_offsets).values()};\n \n Review comment:\n   done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T20:25:37.810+0000",
                    "updated": "2017-11-08T20:25:37.810+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16244675",
                    "id": "16244675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149787265\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -612,12 +612,43 @@ class ARROW_EXPORT UnionArray : public Array {\n              const std::shared_ptr<Buffer>& null_bitmap = NULLPTR, int64_t null_count = 0,\n              int64_t offset = 0);\n \n+  /// \\brief Construct Dense UnionArray from types_ids, value_offsets and children\n+  ///\n+  /// This function does the bare minimum of validation of the offsets and\n+  /// input types. The value_offsets are assumed to be well-formed.\n+  ///\n+  /// \\param[in] type_ids An array of 8-bit signed integers, enumerated from\n+  /// 0 corresponding to each type.\n+  /// \\param[in] value_offsets An array of signed int32 values indicating the\n+  /// relative offset into the respective child array for the type in a given slot.\n+  /// The respective offsets for each child value array must be in order / increasing.\n+  /// \\param[in] children Vector of children Arrays containing the data for each type.\n+  /// \\param[out] out Will have length equal to value_offsets.length()\n+  static Status FromDense(const Array& type_ids, const Array& value_offsets,\n \n Review comment:\n   done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T20:27:00.683+0000",
                    "updated": "2017-11-08T20:27:00.683+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16244679",
                    "id": "16244679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149788130\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -628,6 +659,8 @@ class ARROW_EXPORT UnionArray : public Array {\n   /// Only use this while the UnionArray is in scope\n   const Array* UnsafeChild(int pos) const;\n \n+  std::shared_ptr<DataType> value_type(int pos) const;\n \n Review comment:\n   This is now gone and using the Array's type to get this information. It's more consistent with how things are done for ListArray and StructArray.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T20:30:46.573+0000",
                    "updated": "2017-11-08T20:30:46.573+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16244681",
                    "id": "16244681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149788510\n \n \n\n ##########\n File path: python/pyarrow/scalar.pxi\n ##########\n @@ -315,6 +315,26 @@ cdef class ListValue(ArrayValue):\n         return result\n \n \n+cdef class UnionValue(ArrayValue):\n+\n+    cdef void _set_array(self, const shared_ptr[CArray]& sp_array):\n+        self.sp_array = sp_array\n+        self.ap = <CUnionArray*> sp_array.get()\n+        self.value_types = [pyarrow_wrap_data_type(self.ap.value_type(i))\n+                            for i in range(self.ap.num_fields())]\n \n Review comment:\n   Oops, good point! I'm constructing the Python objects for children types once per array in the UnionType.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T20:32:16.074+0000",
                    "updated": "2017-11-08T20:32:16.074+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16244881",
                    "id": "16244881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#discussion_r149819821\n \n \n\n ##########\n File path: python/pyarrow/types.pxi\n ##########\n @@ -1066,6 +1079,30 @@ def struct(fields):\n     return pyarrow_wrap_data_type(struct_type)\n \n \n+def union(children_types, mode):\n+    \"\"\"\n+    Create UnionType from children types\n+    \"\"\"\n+    cdef:\n+        Field f\n+        DataType child_type\n+        vector[shared_ptr[CField]] c_fields\n+        vector[uint8_t] type_codes\n+        shared_ptr[CDataType] union_type\n+        int i\n+\n+    for i, child_type in enumerate(children_types):\n+        type_codes.push_back(i)\n+        f = field(str(i), child_type)\n+        c_fields.push_back(f.sp_field)\n+\n+    if mode == UnionMode_SPARSE:\n \n Review comment:\n   If we don't do this and plug mode in directly below, clang complains:\r\n   ```\r\n   [ 33%] Building CXX object CMakeFiles/lib.dir/lib.cxx.o\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100873:100: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) (((((enum  arrow::UnionMode)digits[1]) << PyLong_SHIFT) | (enum  arrow::UnionMode)digits[0]));\r\n                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100882:102: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) (((((((enum  arrow::UnionMode)digits[2]) << PyLong_SHIFT) | (enum  arrow::UnionMode)digits[1]) << PyLong_SHIFT) ...\r\n                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100891:104: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) (((((((((enum  arrow::UnionMode)digits[3]) << PyLong_SHIFT) | (enum  arrow::UnionMode)digits[2]) << PyLong_SHIFT...\r\n                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100929:130: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) (((enum  arrow::UnionMode)-1)*(((((enum  arrow::UnionMode)digits[1]) << PyLong_SHIFT) | (enum  arrow::UnionMode)d...\r\n                                                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100938:101: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) ((((((enum  arrow::UnionMode)digits[1]) << PyLong_SHIFT) | (enum  arrow::UnionMode)digits[0])));\r\n                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100947:132: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) (((enum  arrow::UnionMode)-1)*(((((((enum  arrow::UnionMode)digits[2]) << PyLong_SHIFT) | (enum  arrow::UnionMode...\r\n                                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100956:103: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) ((((((((enum  arrow::UnionMode)digits[2]) << PyLong_SHIFT) | (enum  arrow::UnionMode)digits[1]) << PyLong_SHIFT) ...\r\n                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100965:134: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) (((enum  arrow::UnionMode)-1)*(((((((((enum  arrow::UnionMode)digits[3]) << PyLong_SHIFT) | (enum  arrow::UnionMo...\r\n                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   /Users/pcmoritz/arrow/python/build/temp.macosx-10.7-x86_64-3.5/lib.cxx:100974:105: error: invalid operands to binary expression ('enum arrow::UnionMode' and 'int')\r\n                               return (enum  arrow::UnionMode) ((((((((((enum  arrow::UnionMode)digits[3]) << PyLong_SHIFT) | (enum  arrow::UnionMode)digits[2]) << PyLong_SHIFT...\r\n                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~\r\n   9 errors generated.\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T22:45:00.828+0000",
                    "updated": "2017-11-08T22:45:00.828+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245167",
                    "id": "16245167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-343039782\n \n \n   @wesm This is ready except for the Windows compile error, do you think you could take a quick look at that? I'm not sure what is going on.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T03:51:17.677+0000",
                    "updated": "2017-11-09T03:51:17.677+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245208",
                    "id": "16245208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-343048055\n \n \n   `enum class` is a huge pain in Cython. I'll go ahead and change `UnionMode` to be a scoped enumeration here quickly\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T05:02:19.131+0000",
                    "updated": "2017-11-09T05:02:19.131+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245213",
                    "id": "16245213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-343049959\n \n \n   Done. Will merge this once the build is green\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T05:17:47.044+0000",
                    "updated": "2017-11-09T05:17:47.044+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245225",
                    "id": "16245225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-343051437\n \n \n   Great, thanks :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T05:29:30.421+0000",
                    "updated": "2017-11-09T05:29:30.421+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245970",
                    "id": "16245970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex b523876bf..9c91d619c 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -393,6 +393,62 @@ UnionArray::UnionArray(const std::shared_ptr<DataType>& type, int64_t length,\n   SetData(internal_data);\n }\n \n+Status UnionArray::MakeDense(const Array& type_ids, const Array& value_offsets,\n+                             const std::vector<std::shared_ptr<Array>>& children,\n+                             std::shared_ptr<Array>* out) {\n+  if (value_offsets.length() == 0) {\n+    return Status::Invalid(\"UnionArray offsets must have non-zero length\");\n+  }\n+\n+  if (value_offsets.type_id() != Type::INT32) {\n+    return Status::Invalid(\"UnionArray offsets must be signed int32\");\n+  }\n+\n+  if (type_ids.type_id() != Type::INT8) {\n+    return Status::Invalid(\"UnionArray type_ids must be signed int8\");\n+  }\n+\n+  if (value_offsets.null_count() != 0) {\n+    return Status::Invalid(\"MakeDense does not allow NAs in value_offsets\");\n+  }\n+\n+  BufferVector buffers = {type_ids.null_bitmap(),\n+                          static_cast<const UInt8Array&>(type_ids).values(),\n+                          static_cast<const Int32Array&>(value_offsets).values()};\n+  auto union_type = union_(children, UnionMode::DENSE);\n+  auto internal_data =\n+      std::make_shared<ArrayData>(union_type, type_ids.length(), std::move(buffers),\n+                                  type_ids.null_count(), type_ids.offset());\n+  for (const auto& child : children) {\n+    internal_data->child_data.push_back(child->data());\n+  }\n+  *out = std::make_shared<UnionArray>(internal_data);\n+  return Status::OK();\n+}\n+\n+Status UnionArray::MakeSparse(const Array& type_ids,\n+                              const std::vector<std::shared_ptr<Array>>& children,\n+                              std::shared_ptr<Array>* out) {\n+  if (type_ids.type_id() != Type::INT8) {\n+    return Status::Invalid(\"UnionArray type_ids must be signed int8\");\n+  }\n+  BufferVector buffers = {type_ids.null_bitmap(),\n+                          static_cast<const UInt8Array&>(type_ids).values(), nullptr};\n+  auto union_type = union_(children, UnionMode::SPARSE);\n+  auto internal_data =\n+      std::make_shared<ArrayData>(union_type, type_ids.length(), std::move(buffers),\n+                                  type_ids.null_count(), type_ids.offset());\n+  for (const auto& child : children) {\n+    internal_data->child_data.push_back(child->data());\n+    if (child->length() != type_ids.length()) {\n+      return Status::Invalid(\n+          \"Sparse UnionArray must have len(child) == len(type_ids) for all children\");\n+    }\n+  }\n+  *out = std::make_shared<UnionArray>(internal_data);\n+  return Status::OK();\n+}\n+\n std::shared_ptr<Array> UnionArray::child(int i) const {\n   if (!boxed_fields_[i]) {\n     boxed_fields_[i] = MakeArray(data_->child_data[i]);\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex afbd780dd..f7762ce10 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -612,16 +612,47 @@ class ARROW_EXPORT UnionArray : public Array {\n              const std::shared_ptr<Buffer>& null_bitmap = NULLPTR, int64_t null_count = 0,\n              int64_t offset = 0);\n \n+  /// \\brief Construct Dense UnionArray from types_ids, value_offsets and children\n+  ///\n+  /// This function does the bare minimum of validation of the offsets and\n+  /// input types. The value_offsets are assumed to be well-formed.\n+  ///\n+  /// \\param[in] type_ids An array of 8-bit signed integers, enumerated from\n+  /// 0 corresponding to each type.\n+  /// \\param[in] value_offsets An array of signed int32 values indicating the\n+  /// relative offset into the respective child array for the type in a given slot.\n+  /// The respective offsets for each child value array must be in order / increasing.\n+  /// \\param[in] children Vector of children Arrays containing the data for each type.\n+  /// \\param[out] out Will have length equal to value_offsets.length()\n+  static Status MakeDense(const Array& type_ids, const Array& value_offsets,\n+                          const std::vector<std::shared_ptr<Array>>& children,\n+                          std::shared_ptr<Array>* out);\n+\n+  /// \\brief Construct Sparse UnionArray from type_ids and children\n+  ///\n+  /// This function does the bare minimum of validation of the offsets and\n+  /// input types.\n+  ///\n+  /// \\param[in] type_ids An array of 8-bit signed integers, enumerated from\n+  /// 0 corresponding to each type.\n+  /// \\param[in] children Vector of children Arrays containing the data for each type.\n+  /// \\param[out] out Will have length equal to type_ids.length()\n+  static Status MakeSparse(const Array& type_ids,\n+                           const std::vector<std::shared_ptr<Array>>& children,\n+                           std::shared_ptr<Array>* out);\n+\n   /// Note that this buffer does not account for any slice offset\n   std::shared_ptr<Buffer> type_ids() const { return data_->buffers[1]; }\n \n   /// Note that this buffer does not account for any slice offset\n   std::shared_ptr<Buffer> value_offsets() const { return data_->buffers[2]; }\n \n+  int32_t value_offset(int64_t i) const { return raw_value_offsets_[i + data_->offset]; }\n+\n   const type_id_t* raw_type_ids() const { return raw_type_ids_ + data_->offset; }\n   const int32_t* raw_value_offsets() const { return raw_value_offsets_ + data_->offset; }\n \n-  UnionMode mode() const { return static_cast<const UnionType&>(*type()).mode(); }\n+  UnionMode::type mode() const { return static_cast<const UnionType&>(*type()).mode(); }\n \n   std::shared_ptr<Array> child(int pos) const;\n \ndiff --git a/cpp/src/arrow/compare.cc b/cpp/src/arrow/compare.cc\nindex 2ec86c369..a2d4de7b7 100644\n--- a/cpp/src/arrow/compare.cc\n+++ b/cpp/src/arrow/compare.cc\n@@ -152,7 +152,7 @@ class RangeEqualsVisitor {\n   bool CompareUnions(const UnionArray& left) const {\n     const auto& right = static_cast<const UnionArray&>(right_);\n \n-    const UnionMode union_mode = left.mode();\n+    const UnionMode::type union_mode = left.mode();\n     if (union_mode != right.mode()) {\n       return false;\n     }\ndiff --git a/cpp/src/arrow/ipc/json-internal.cc b/cpp/src/arrow/ipc/json-internal.cc\nindex c1c0661d6..1b9baee7d 100644\n--- a/cpp/src/arrow/ipc/json-internal.cc\n+++ b/cpp/src/arrow/ipc/json-internal.cc\n@@ -774,7 +774,7 @@ static Status GetUnion(const RjObject& json_type,\n   RETURN_NOT_STRING(\"mode\", it_mode, json_type);\n \n   std::string mode_str = it_mode->value.GetString();\n-  UnionMode mode;\n+  UnionMode::type mode;\n \n   if (mode_str == \"SPARSE\") {\n     mode = UnionMode::SPARSE;\ndiff --git a/cpp/src/arrow/ipc/metadata-internal.cc b/cpp/src/arrow/ipc/metadata-internal.cc\nindex f0f0f6758..63ef8a549 100644\n--- a/cpp/src/arrow/ipc/metadata-internal.cc\n+++ b/cpp/src/arrow/ipc/metadata-internal.cc\n@@ -163,8 +163,9 @@ static Status StructToFlatbuffer(FBB& fbb, const DataType& type,\n static Status UnionFromFlatbuffer(const flatbuf::Union* union_data,\n                                   const std::vector<std::shared_ptr<Field>>& children,\n                                   std::shared_ptr<DataType>* out) {\n-  UnionMode mode = union_data->mode() == flatbuf::UnionMode_Sparse ? UnionMode::SPARSE\n-                                                                   : UnionMode::DENSE;\n+  UnionMode::type mode =\n+      (union_data->mode() == flatbuf::UnionMode_Sparse ? UnionMode::SPARSE\n+                                                       : UnionMode::DENSE);\n \n   std::vector<uint8_t> type_codes;\n \ndiff --git a/cpp/src/arrow/type.cc b/cpp/src/arrow/type.cc\nindex a9bf59191..0d1985fb2 100644\n--- a/cpp/src/arrow/type.cc\n+++ b/cpp/src/arrow/type.cc\n@@ -190,7 +190,7 @@ std::string TimestampType::ToString() const {\n // Union type\n \n UnionType::UnionType(const std::vector<std::shared_ptr<Field>>& fields,\n-                     const std::vector<uint8_t>& type_codes, UnionMode mode)\n+                     const std::vector<uint8_t>& type_codes, UnionMode::type mode)\n     : NestedType(Type::UNION), mode_(mode), type_codes_(type_codes) {\n   children_ = fields;\n }\n@@ -440,10 +440,24 @@ std::shared_ptr<DataType> struct_(const std::vector<std::shared_ptr<Field>>& fie\n }\n \n std::shared_ptr<DataType> union_(const std::vector<std::shared_ptr<Field>>& child_fields,\n-                                 const std::vector<uint8_t>& type_codes, UnionMode mode) {\n+                                 const std::vector<uint8_t>& type_codes,\n+                                 UnionMode::type mode) {\n   return std::make_shared<UnionType>(child_fields, type_codes, mode);\n }\n \n+std::shared_ptr<DataType> union_(const std::vector<std::shared_ptr<Array>>& children,\n+                                 UnionMode::type mode) {\n+  std::vector<std::shared_ptr<Field>> types;\n+  std::vector<uint8_t> type_codes;\n+  uint8_t counter = 0;\n+  for (const auto& child : children) {\n+    types.push_back(field(std::to_string(counter), child->type()));\n+    type_codes.push_back(counter);\n+    counter++;\n+  }\n+  return union_(types, type_codes, mode);\n+}\n+\n std::shared_ptr<DataType> dictionary(const std::shared_ptr<DataType>& index_type,\n                                      const std::shared_ptr<Array>& dict_values,\n                                      bool ordered) {\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex 446f4d3a0..9e11a0344 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -517,14 +517,17 @@ class ARROW_EXPORT DecimalType : public FixedSizeBinaryType {\n   int32_t scale_;\n };\n \n-enum class UnionMode : char { SPARSE, DENSE };\n+struct UnionMode {\n+  enum type { SPARSE, DENSE };\n+};\n \n class ARROW_EXPORT UnionType : public NestedType {\n  public:\n   static constexpr Type::type type_id = Type::UNION;\n \n   UnionType(const std::vector<std::shared_ptr<Field>>& fields,\n-            const std::vector<uint8_t>& type_codes, UnionMode mode = UnionMode::SPARSE);\n+            const std::vector<uint8_t>& type_codes,\n+            UnionMode::type mode = UnionMode::SPARSE);\n \n   std::string ToString() const override;\n   std::string name() const override { return \"union\"; }\n@@ -534,10 +537,10 @@ class ARROW_EXPORT UnionType : public NestedType {\n \n   const std::vector<uint8_t>& type_codes() const { return type_codes_; }\n \n-  UnionMode mode() const { return mode_; }\n+  UnionMode::type mode() const { return mode_; }\n \n  private:\n-  UnionMode mode_;\n+  UnionMode::type mode_;\n \n   // The type id used in the data to indicate each data type in the union. For\n   // example, the first type in the union might be denoted by the id 5 (instead\n@@ -842,7 +845,12 @@ struct_(const std::vector<std::shared_ptr<Field>>& fields);\n /// \\brief Create an instance of Union type\n std::shared_ptr<DataType> ARROW_EXPORT\n union_(const std::vector<std::shared_ptr<Field>>& child_fields,\n-       const std::vector<uint8_t>& type_codes, UnionMode mode = UnionMode::SPARSE);\n+       const std::vector<uint8_t>& type_codes, UnionMode::type mode = UnionMode::SPARSE);\n+\n+/// \\brief Create and instance of Union type\n+std::shared_ptr<DataType> ARROW_EXPORT\n+union_(const std::vector<std::shared_ptr<Array>>& children,\n+       UnionMode::type mode = UnionMode::SPARSE);\n \n /// \\brief Create an instance of Dictionary type\n std::shared_ptr<DataType> ARROW_EXPORT\ndiff --git a/python/pyarrow/__init__.py b/python/pyarrow/__init__.py\nindex 1215c822d..2d7d7288b 100644\n--- a/python/pyarrow/__init__.py\n+++ b/python/pyarrow/__init__.py\n@@ -36,7 +36,7 @@\n                          time32, time64, timestamp, date32, date64,\n                          float16, float32, float64,\n                          binary, string, decimal,\n-                         list_, struct, dictionary, field,\n+                         list_, struct, union, dictionary, field,\n                          type_for_alias,\n                          DataType, NAType,\n                          Field,\n@@ -52,7 +52,7 @@\n                          Int16Array, UInt16Array,\n                          Int32Array, UInt32Array,\n                          Int64Array, UInt64Array,\n-                         ListArray,\n+                         ListArray, UnionArray,\n                          BinaryArray, StringArray,\n                          FixedSizeBinaryArray,\n                          DictionaryArray,\ndiff --git a/python/pyarrow/_parquet.pxd b/python/pyarrow/_parquet.pxd\nindex 04a5b1368..7e5e57509 100644\n--- a/python/pyarrow/_parquet.pxd\n+++ b/python/pyarrow/_parquet.pxd\n@@ -192,7 +192,7 @@ cdef extern from \"parquet/api/reader.h\" namespace \"parquet\" nogil:\n         int64_t num_values() const\n         shared_ptr[ColumnPath] path_in_schema() const\n         bint is_stats_set() const\n-        shared_ptr[CRowGroupStatistics] statistics() const;\n+        shared_ptr[CRowGroupStatistics] statistics() const\n         ParquetCompression compression() const\n         const vector[ParquetEncoding]& encodings() const\n \ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex 7752d062a..9991411e5 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -631,6 +631,58 @@ cdef class ListArray(Array):\n         return pyarrow_wrap_array(out)\n \n \n+cdef class UnionArray(Array):\n+\n+    @staticmethod\n+    def from_dense(Array types, Array value_offsets, list children):\n+        \"\"\"\n+        Construct dense UnionArray from arrays of int8 types, int32 offsets and\n+        children arrays\n+\n+        Parameters\n+        ----------\n+        types : Array (int8 type)\n+        value_offsets : Array (int32 type)\n+        children : list\n+\n+        Returns\n+        -------\n+        union_array : UnionArray\n+        \"\"\"\n+        cdef shared_ptr[CArray] out\n+        cdef vector[shared_ptr[CArray]] c\n+        cdef Array child\n+        for child in children:\n+            c.push_back(child.sp_array)\n+        with nogil:\n+            check_status(CUnionArray.MakeDense(\n+                deref(types.ap), deref(value_offsets.ap), c, &out))\n+        return pyarrow_wrap_array(out)\n+\n+    @staticmethod\n+    def from_sparse(Array types, list children):\n+        \"\"\"\n+        Construct sparse UnionArray from arrays of int8 types and children\n+        arrays\n+\n+        Parameters\n+        ----------\n+        types : Array (int8 type)\n+        children : list\n+\n+        Returns\n+        -------\n+        union_array : UnionArray\n+        \"\"\"\n+        cdef shared_ptr[CArray] out\n+        cdef vector[shared_ptr[CArray]] c\n+        cdef Array child\n+        for child in children:\n+            c.push_back(child.sp_array)\n+        with nogil:\n+            check_status(CUnionArray.MakeSparse(deref(types.ap), c, &out))\n+        return pyarrow_wrap_array(out)\n+\n cdef class StringArray(Array):\n     pass\n \n@@ -789,6 +841,7 @@ cdef dict _array_classes = {\n     _Type_FLOAT: FloatArray,\n     _Type_DOUBLE: DoubleArray,\n     _Type_LIST: ListArray,\n+    _Type_UNION: UnionArray,\n     _Type_BINARY: BinaryArray,\n     _Type_STRING: StringArray,\n     _Type_DICTIONARY: DictionaryArray,\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 731ef9497..dfafd371b 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -67,6 +67,10 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n         _Type_DICTIONARY\" arrow::Type::DICTIONARY\"\n         _Type_MAP\" arrow::Type::MAP\"\n \n+    enum UnionMode\" arrow::UnionMode::type\":\n+        _UnionMode_SPARSE\" arrow::UnionMode::SPARSE\"\n+        _UnionMode_DENSE\" arrow::UnionMode::DENSE\"\n+\n     enum TimeUnit\" arrow::TimeUnit::type\":\n         TimeUnit_SECOND\" arrow::TimeUnit::SECOND\"\n         TimeUnit_MILLI\" arrow::TimeUnit::MILLI\"\n@@ -222,6 +226,11 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n     cdef cppclass CStructType\" arrow::StructType\"(CDataType):\n         CStructType(const vector[shared_ptr[CField]]& fields)\n \n+    cdef cppclass CUnionType\" arrow::UnionType\"(CDataType):\n+        CUnionType(const vector[shared_ptr[CField]]& fields,\n+                   const vector[uint8_t]& type_codes, UnionMode mode)\n+        UnionMode mode()\n+\n     cdef cppclass CSchema\" arrow::Schema\":\n         CSchema(const vector[shared_ptr[CField]]& fields)\n         CSchema(const vector[shared_ptr[CField]]& fields,\n@@ -317,6 +326,22 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n         shared_ptr[CArray] values()\n         shared_ptr[CDataType] value_type()\n \n+    cdef cppclass CUnionArray\" arrow::UnionArray\"(CArray):\n+        @staticmethod\n+        CStatus MakeSparse(const CArray& type_ids,\n+                           const vector[shared_ptr[CArray]]& children,\n+                           shared_ptr[CArray]* out)\n+\n+        @staticmethod\n+        CStatus MakeDense(const CArray& type_ids, const CArray& value_offsets,\n+                          const vector[shared_ptr[CArray]]& children,\n+                          shared_ptr[CArray]* out)\n+        uint8_t* raw_type_ids()\n+        int32_t value_offset(int i)\n+        shared_ptr[CArray] child(int pos)\n+        const CArray* UnsafeChild(int pos)\n+        UnionMode mode()\n+\n     cdef cppclass CBinaryArray\" arrow::BinaryArray\"(CListArray):\n         const uint8_t* GetValue(int i, int32_t* length)\n \ndiff --git a/python/pyarrow/lib.pxd b/python/pyarrow/lib.pxd\nindex 8fdcf553c..531489490 100644\n--- a/python/pyarrow/lib.pxd\n+++ b/python/pyarrow/lib.pxd\n@@ -56,6 +56,11 @@ cdef class DictionaryType(DataType):\n         const CDictionaryType* dict_type\n \n \n+cdef class UnionType(DataType):\n+    cdef:\n+        list child_types\n+\n+\n cdef class TimestampType(DataType):\n     cdef:\n         const CTimestampType* ts_type\n@@ -139,6 +144,13 @@ cdef class ListValue(ArrayValue):\n     cdef getitem(self, int64_t i)\n \n \n+cdef class UnionValue(ArrayValue):\n+    cdef:\n+        CUnionArray* ap\n+        list value_types\n+\n+    cdef getitem(self, int64_t i)\n+\n cdef class StringValue(ArrayValue):\n     pass\n \n@@ -242,6 +254,10 @@ cdef class ListArray(Array):\n     pass\n \n \n+cdef class UnionArray(Array):\n+    pass\n+\n+\n cdef class StringArray(Array):\n     pass\n \ndiff --git a/python/pyarrow/lib.pyx b/python/pyarrow/lib.pyx\nindex 6f4451e3f..b4ca49caf 100644\n--- a/python/pyarrow/lib.pyx\n+++ b/python/pyarrow/lib.pyx\n@@ -92,6 +92,8 @@ Type_UNION = _Type_UNION\n Type_DICTIONARY = _Type_DICTIONARY\n Type_MAP = _Type_MAP\n \n+UnionMode_SPARSE = _UnionMode_SPARSE\n+UnionMode_DENSE = _UnionMode_DENSE\n \n # Exception types\n include \"error.pxi\"\ndiff --git a/python/pyarrow/public-api.pxi b/python/pyarrow/public-api.pxi\nindex 9f1051228..90aff9e93 100644\n--- a/python/pyarrow/public-api.pxi\n+++ b/python/pyarrow/public-api.pxi\n@@ -72,7 +72,7 @@ cdef public api object pyarrow_wrap_data_type(\n     elif type.get().id() == _Type_STRUCT:\n         out = StructType()\n     elif type.get().id() == _Type_UNION:\n-        out = StructType()\n+        out = UnionType()\n     elif type.get().id() == _Type_TIMESTAMP:\n         out = TimestampType()\n     elif type.get().id() == _Type_FIXED_SIZE_BINARY:\ndiff --git a/python/pyarrow/scalar.pxi b/python/pyarrow/scalar.pxi\nindex c37ed3b20..a396fa763 100644\n--- a/python/pyarrow/scalar.pxi\n+++ b/python/pyarrow/scalar.pxi\n@@ -315,6 +315,24 @@ cdef class ListValue(ArrayValue):\n         return result\n \n \n+cdef class UnionValue(ArrayValue):\n+\n+    cdef void _set_array(self, const shared_ptr[CArray]& sp_array):\n+        self.sp_array = sp_array\n+        self.ap = <CUnionArray*> sp_array.get()\n+\n+    cdef getitem(self, int64_t i):\n+        cdef int8_t type_id = self.ap.raw_type_ids()[i]\n+        cdef shared_ptr[CArray] child = self.ap.child(type_id)\n+        if self.ap.mode() == _UnionMode_SPARSE:\n+            return box_scalar(self.type[type_id], child, i)\n+        else:\n+            return box_scalar(self.type[type_id], child,\n+                              self.ap.value_offset(i))\n+\n+    def as_py(self):\n+        return self.getitem(self.index).as_py()\n+\n cdef class FixedSizeBinaryValue(ArrayValue):\n \n     def as_py(self):\n@@ -364,6 +382,7 @@ cdef dict _scalar_classes = {\n     _Type_FLOAT: FloatValue,\n     _Type_DOUBLE: DoubleValue,\n     _Type_LIST: ListValue,\n+    _Type_UNION: UnionValue,\n     _Type_BINARY: BinaryValue,\n     _Type_STRING: StringValue,\n     _Type_FIXED_SIZE_BINARY: FixedSizeBinaryValue,\ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex e3a4c9756..7dc93c28e 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -235,6 +235,28 @@ def test_list_from_arrays():\n     assert result.equals(expected)\n \n \n+def test_union_from_dense():\n+    binary = pa.array([b'a', b'b', b'c', b'd'], type='binary')\n+    int64 = pa.array([1, 2, 3], type='int64')\n+    types = pa.array([0, 1, 0, 0, 1, 1, 0], type='int8')\n+    value_offsets = pa.array([0, 0, 2, 1, 1, 2, 3], type='int32')\n+\n+    result = pa.UnionArray.from_dense(types, value_offsets, [binary, int64])\n+\n+    assert result.to_pylist() == [b'a', 1, b'c', b'b', 2, 3, b'd']\n+\n+\n+def test_union_from_sparse():\n+    binary = pa.array([b'a', b' ', b'b', b'c', b' ', b' ', b'd'],\n+                      type='binary')\n+    int64 = pa.array([0, 1, 0, 0, 2, 3, 0], type='int64')\n+    types = pa.array([0, 1, 0, 0, 1, 1, 0], type='int8')\n+\n+    result = pa.UnionArray.from_sparse(types, [binary, int64])\n+\n+    assert result.to_pylist() == [b'a', 1, b'b', b'c', 2, 3, b'd']\n+\n+\n def _check_cast_case(case, safe=True):\n     in_data, in_type, out_data, out_type = case\n \ndiff --git a/python/pyarrow/tests/test_schema.py b/python/pyarrow/tests/test_schema.py\nindex d6b2655b7..116f39783 100644\n--- a/python/pyarrow/tests/test_schema.py\n+++ b/python/pyarrow/tests/test_schema.py\n@@ -319,6 +319,14 @@ def test_type_schema_pickling():\n             pa.field('a', 'int8'),\n             pa.field('b', 'string')\n         ]),\n+        pa.union([\n+            pa.field('a', pa.int8()),\n+            pa.field('b', pa.int16())\n+        ], pa.lib.UnionMode_SPARSE),\n+        pa.union([\n+            pa.field('a', pa.int8()),\n+            pa.field('b', pa.int16())\n+        ], pa.lib.UnionMode_DENSE),\n         pa.time32('s'),\n         pa.time64('us'),\n         pa.date32(),\ndiff --git a/python/pyarrow/tests/test_types.py b/python/pyarrow/tests/test_types.py\nindex e6ff5b156..0e3ea1fd4 100644\n--- a/python/pyarrow/tests/test_types.py\n+++ b/python/pyarrow/tests/test_types.py\n@@ -85,16 +85,17 @@ def test_is_nested_or_struct():\n     assert not types.is_nested(pa.int32())\n \n \n-# TODO(wesm): Union types not yet implemented in pyarrow\n+def test_is_union():\n+    assert types.is_union(pa.union([pa.field('a', pa.int32()),\n+                                    pa.field('b', pa.int8()),\n+                                    pa.field('c', pa.string())],\n+                                   pa.lib.UnionMode_SPARSE))\n+    assert not types.is_union(pa.list_(pa.int32()))\n \n-# def test_is_union():\n-#     assert types.is_union(pa.union([pa.field('a', pa.int32()),\n-#                                     pa.field('b', pa.int8()),\n-#                                     pa.field('c', pa.string())]))\n-#     assert not types.is_union(pa.list_(pa.int32()))\n \n # TODO(wesm): is_map, once implemented\n \n+\n def test_is_binary_string():\n     assert types.is_binary(pa.binary())\n     assert not types.is_binary(pa.string())\ndiff --git a/python/pyarrow/types.pxi b/python/pyarrow/types.pxi\nindex c9a490960..d2e68ff79 100644\n--- a/python/pyarrow/types.pxi\n+++ b/python/pyarrow/types.pxi\n@@ -186,7 +186,32 @@ cdef class UnionType(DataType):\n \n     cdef void init(self, const shared_ptr[CDataType]& type):\n         DataType.init(self, type)\n+        self.child_types = [\n+            pyarrow_wrap_data_type(type.get().child(i).get().type())\n+            for i in range(self.num_children)]\n \n+    property num_children:\n+\n+        def __get__(self):\n+            return self.type.num_children()\n+\n+    property mode:\n+\n+        def __get__(self):\n+            cdef CUnionType* type = <CUnionType*> self.sp_type.get()\n+            return type.mode()\n+\n+    def __getitem__(self, i):\n+        return self.child_types[i]\n+\n+    def __getstate__(self):\n+        children = [pyarrow_wrap_field(self.type.child(i))\n+                    for i in range(self.num_children)]\n+        return children, self.mode\n+\n+    def __setstate__(self, state):\n+        cdef DataType reconstituted = union(*state)\n+        self.init(reconstituted.sp_type)\n \n cdef class TimestampType(DataType):\n \n@@ -1056,6 +1081,30 @@ def struct(fields):\n     return pyarrow_wrap_data_type(struct_type)\n \n \n+def union(children_fields, mode):\n+    \"\"\"\n+    Create UnionType from children fields.\n+    \"\"\"\n+    cdef:\n+        Field child_field\n+        vector[shared_ptr[CField]] c_fields\n+        vector[uint8_t] type_codes\n+        shared_ptr[CDataType] union_type\n+        int i\n+\n+    for i, child_field in enumerate(children_fields):\n+        type_codes.push_back(i)\n+        c_fields.push_back(child_field.sp_field)\n+\n+        if mode == UnionMode_SPARSE:\n+            union_type.reset(new CUnionType(c_fields, type_codes,\n+                                            _UnionMode_SPARSE))\n+        else:\n+            union_type.reset(new CUnionType(c_fields, type_codes,\n+                                            _UnionMode_DENSE))\n+\n+    return pyarrow_wrap_data_type(union_type)\n+\n cdef dict _type_aliases = {\n     'null': null,\n     'i1': int8,\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T16:31:49.687+0000",
                    "updated": "2017-11-09T16:31:49.687+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245971",
                    "id": "16245971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1216\n[https://github.com/apache/arrow/pull/1216]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-09T16:31:50.071+0000",
                    "updated": "2017-11-09T16:31:50.071+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13069846/comment/16245973",
                    "id": "16245973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1216: ARROW-972: UnionArray in pyarrow\nURL: https://github.com/apache/arrow/pull/1216#issuecomment-343211285\n \n \n   Thanks @pcmoritz!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T16:32:10.269+0000",
                    "updated": "2017-11-09T16:32:10.269+0000"
                }
            ],
            "maxResults": 24,
            "total": 24,
            "startAt": 0
        },
        "customfield_12311820": "0|i3elyn:",
        "customfield_12314139": null
    }
}