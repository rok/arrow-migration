{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13203430",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430",
    "key": "ARROW-3986",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3986/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T17:34:14.059+0000",
                    "updated": "2018-12-10T17:34:14.059+0000",
                    "started": "2018-12-10T17:34:14.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173702",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#issuecomment-445935863\n \n \n   @wesm @fsaintjacques \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T19:13:35.272+0000",
                    "updated": "2018-12-10T19:13:35.272+0000",
                    "started": "2018-12-10T19:13:35.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173733",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240345487\n \n \n\n ##########\n File path: cpp/src/arrow/status.h\n ##########\n @@ -135,45 +145,54 @@ class ARROW_EXPORT Status {\n   Status& operator&=(const Status& s) noexcept;\n   Status& operator&=(Status&& s) noexcept;\n \n-  // Return a success status.\n+  /// Return a success status\n   static Status OK() { return Status(); }\n \n-  // Return a success status with extra info\n+  /// Return a success status with extra info\n \n Review comment:\n   \"with a caller defined message\"\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T19:54:58.658+0000",
                    "updated": "2018-12-10T19:54:58.658+0000",
                    "started": "2018-12-10T19:54:58.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173741",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240346650\n \n \n\n ##########\n File path: cpp/src/arrow/status.h\n ##########\n @@ -211,34 +229,42 @@ class ARROW_EXPORT Status {\n     return Status(StatusCode::ExecutionError, msg);\n   }\n \n-  // Returns true iff the status indicates success.\n+  /// Return true iff the status indicates success.\n   bool ok() const { return (state_ == NULL); }\n \n+  /// Return true iff the status indicates an out-of-memory error.\n   bool IsOutOfMemory() const { return code() == StatusCode::OutOfMemory; }\n+  /// Return true iff the status indicates a key lookup error.\n   bool IsKeyError() const { return code() == StatusCode::KeyError; }\n+  /// Return true iff the status indicates invalid data.\n   bool IsInvalid() const { return code() == StatusCode::Invalid; }\n+  /// Return true iff the status indicates an IO-related failure.\n   bool IsIOError() const { return code() == StatusCode::IOError; }\n+  /// Return true iff the status indicates a container reaching capacity limits.\n   bool IsCapacityError() const { return code() == StatusCode::CapacityError; }\n+  /// Return true iff the status indicates a type error.\n   bool IsTypeError() const { return code() == StatusCode::TypeError; }\n+  /// Return true iff the status indicates an unknown error.\n   bool IsUnknownError() const { return code() == StatusCode::UnknownError; }\n+  /// Return true iff the status indicates an unimplemented operation.\n   bool IsNotImplemented() const { return code() == StatusCode::NotImplemented; }\n-  // An object could not be serialized or deserialized.\n+  /// Return true iff the status indicates a (de) serialization failure?\n \n Review comment:\n   Are you asking the reader? :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T19:54:58.660+0000",
                    "updated": "2018-12-10T19:54:58.660+0000",
                    "started": "2018-12-10T19:54:58.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173742",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240356863\n \n \n\n ##########\n File path: docs/source/cpp/datatypes.rst\n ##########\n @@ -0,0 +1,63 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+Data Types\n+==========\n+\n+Data types govern how in-memory data is interpreted.  Their :ref:`specification\n+<spec-logical-types>` allows binary interoperability between different Arrow\n+implementations, including from different programming languages and runtimes\n+(for example it is possible to access the same data from both Python and Java\n+using the :py:mod:`pyarrow.jvm` bridge module).\n+\n+Information about a data types in C++ can be represented in three ways:\n+\n+1. Using a :class:`arrow::DataType` instance (e.g. as a function argument)\n+2. Using a :class:`arrow::DataType` concrete subclass (e.g. as a template\n+   parameter)\n+3. Using a :type:`arrow::Type::type` enum value (e.g. as the condition of\n+   a switch statement)\n+\n+The first form (using a :class:`arrow::DataType` instance) is the most idiomatic\n+and flexible.  Non-trivial types can _only_ be represented with a DataType\n+instance as they are parametric.  For example, a :class:`arrow::TimestampType`\n \n Review comment:\n   > as the parameter(s) are often unknown at compile time\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T19:54:58.660+0000",
                    "updated": "2018-12-10T19:54:58.660+0000",
                    "started": "2018-12-10T19:54:58.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173744",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240345718\n \n \n\n ##########\n File path: cpp/src/arrow/status.h\n ##########\n @@ -29,6 +29,7 @@\n \n #ifdef ARROW_EXTRA_ERROR_CONTEXT\n \n+/// @brief Propagate any non-successful Status to the caller\n \n Review comment:\n   Inconsistency between `@brief` or `\\brief`, and no brief (see later functions). \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T19:54:58.660+0000",
                    "updated": "2018-12-10T19:54:58.660+0000",
                    "started": "2018-12-10T19:54:58.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173743",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240349842\n \n \n\n ##########\n File path: docs/source/cpp/overview.rst\n ##########\n @@ -0,0 +1,90 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+High-Level Overview\n+===================\n+\n+The Arrow C++ library is comprised of different parts, each of which serves\n+a specific purpose.\n+\n+The physical layer\n+------------------\n+\n+**Memory management** abstractions provide a uniform API over memory that\n+may be allocated through various means, such as heap allocation, the memory\n+mapping of a file or a static memory area.  In particular, the **buffer**\n+abstraction represents a contiguous area of physical data.\n+\n+The one-dimensional layer\n+-------------------------\n+\n+**Data types** govern the *logical* interpretation of *physical* data.\n+Many operations in Arrow are parametered, at compile-time or at runtime,\n+by a data type.\n+\n+**Arrays** assemble one or several buffers with a data type, allowing to\n+view them as a logical contiguous sequence of values (possibly nested).\n+\n+**Chunked arrays** are a generalization of arrays, comprising several same-type\n+arrays into a longer logical sequence of values.\n+\n+The two-dimensional layer\n+-------------------------\n+\n+**Schemas** describe a logical collection of several pieces of data,\n+each with a distinct name and type, and optional metadata.\n+\n+**Columns** are like chunked arrays, but with optional metadata.\n+\n \n Review comment:\n   Missing record batches.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T19:54:58.666+0000",
                    "updated": "2018-12-10T19:54:58.666+0000",
                    "started": "2018-12-10T19:54:58.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173745",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#issuecomment-445955410\n \n \n   Thanks. I think I've addressed your comments now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T20:10:56.891+0000",
                    "updated": "2018-12-10T20:10:56.891+0000",
                    "started": "2018-12-10T20:10:56.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173755",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240364640\n \n \n\n ##########\n File path: docs/source/cpp/overview.rst\n ##########\n @@ -0,0 +1,93 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+High-Level Overview\n+===================\n+\n+The Arrow C++ library is comprised of different parts, each of which serves\n+a specific purpose.\n+\n+The physical layer\n+------------------\n+\n+**Memory management** abstractions provide a uniform API over memory that\n+may be allocated through various means, such as heap allocation, the memory\n+mapping of a file or a static memory area.  In particular, the **buffer**\n+abstraction represents a contiguous area of physical data.\n+\n+The one-dimensional layer\n+-------------------------\n+\n+**Data types** govern the *logical* interpretation of *physical* data.\n+Many operations in Arrow are parametered, at compile-time or at runtime,\n+by a data type.\n+\n+**Arrays** assemble one or several buffers with a data type, allowing to\n+view them as a logical contiguous sequence of values (possibly nested).\n+\n+**Chunked arrays** are a generalization of arrays, comprising several same-type\n+arrays into a longer logical sequence of values.\n+\n+The two-dimensional layer\n+-------------------------\n+\n+**Schemas** describe a logical collection of several pieces of data,\n+each with a distinct name and type, and optional metadata.\n+\n+**Columns** are like chunked arrays, but with optional metadata.\n+\n+**Tables** are collections of columns in accordance to a schema.  They are\n+the most capable dataset-providing abstraction in Arrow.\n+\n+**Record batches** are collections of contiguous arrays, described\n \n Review comment:\n   Another important fact about record batches, they're the same size. This is critical for the future execution engine.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T20:17:15.019+0000",
                    "updated": "2018-12-10T20:17:15.019+0000",
                    "started": "2018-12-10T20:17:15.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173758",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/173763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#discussion_r240367695\n \n \n\n ##########\n File path: docs/source/cpp/overview.rst\n ##########\n @@ -0,0 +1,93 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+High-Level Overview\n+===================\n+\n+The Arrow C++ library is comprised of different parts, each of which serves\n+a specific purpose.\n+\n+The physical layer\n+------------------\n+\n+**Memory management** abstractions provide a uniform API over memory that\n+may be allocated through various means, such as heap allocation, the memory\n+mapping of a file or a static memory area.  In particular, the **buffer**\n+abstraction represents a contiguous area of physical data.\n+\n+The one-dimensional layer\n+-------------------------\n+\n+**Data types** govern the *logical* interpretation of *physical* data.\n+Many operations in Arrow are parametered, at compile-time or at runtime,\n+by a data type.\n+\n+**Arrays** assemble one or several buffers with a data type, allowing to\n+view them as a logical contiguous sequence of values (possibly nested).\n+\n+**Chunked arrays** are a generalization of arrays, comprising several same-type\n+arrays into a longer logical sequence of values.\n+\n+The two-dimensional layer\n+-------------------------\n+\n+**Schemas** describe a logical collection of several pieces of data,\n+each with a distinct name and type, and optional metadata.\n+\n+**Columns** are like chunked arrays, but with optional metadata.\n+\n+**Tables** are collections of columns in accordance to a schema.  They are\n+the most capable dataset-providing abstraction in Arrow.\n+\n+**Record batches** are collections of contiguous arrays, described\n \n Review comment:\n   Right. That will be stressed in the relevant prose page (once it's written :-)).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T20:27:07.128+0000",
                    "updated": "2018-12-10T20:27:07.128+0000",
                    "started": "2018-12-10T20:27:07.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173763",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#issuecomment-446177567\n \n \n   I've pushed a couple additions here. If no objections, I may merge this soon and continue in other PRs.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T11:58:30.314+0000",
                    "updated": "2018-12-11T11:58:30.314+0000",
                    "started": "2018-12-11T11:58:30.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174043",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #3149: [WIP] ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#issuecomment-446177567\n \n \n   I've pushed a couple additions here. If no objections, I may merge this soon and continue in other PRs.\r\n   \r\n   @xhochy \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T11:58:40.292+0000",
                    "updated": "2018-12-11T11:58:40.292+0000",
                    "started": "2018-12-11T11:58:40.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174044",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #3149: ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.gitignore b/.gitignore\nindex 5817efdcac..61440bb504 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -17,6 +17,7 @@\n \n apache-rat-*.jar\n arrow-src.tar\n+arrow-src.tar.gz\n \n # Compiled source\n *.a\n@@ -36,10 +37,18 @@ MANIFEST\n *.sln\n *.iml\n \n+# Linux perf sample data\n+perf.data\n+perf.data.old\n+\n cpp/.idea/\n cpp/apidoc/xml/\n+docs/example.gz\n+docs/example1.dat\n+docs/example3.dat\n python/.eggs/\n python/doc/\n+\n .vscode\n .idea/\n .pytest_cache/\ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 607fa1745a..180b43a220 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -262,6 +262,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  /// \\brief Append a single null element\n   Status AppendNull() {\n     ARROW_RETURN_NOT_OK(Reserve(1));\n     memset(raw_data_ + length_, 0, sizeof(value_type));\n@@ -343,12 +344,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n-  /// \\brief Append a sequence of elements in one shot, with a specified nullmap\n-  /// \\param[in] values_begin InputIterator to the beginning of the values\n-  /// \\param[in] values_end InputIterator pointing to the end of the values\n-  /// \\param[in] valid_begin uint8_t* indication valid(1) or null(0) values.\n-  ///  nullptr indicates all values are valid.\n-  /// \\return Status\n+  // Same as above, with a pointer type ValidIter\n   template <typename ValuesIter, typename ValidIter>\n   typename std::enable_if<std::is_pointer<ValidIter>::value, Status>::type AppendValues(\n       ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin) {\n@@ -719,12 +715,7 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n-  /// \\brief Append a sequence of elements in one shot, with a specified nullmap\n-  /// \\param[in] values_begin InputIterator to the beginning of the values\n-  /// \\param[in] values_end InputIterator pointing to the end of the values\n-  /// \\param[in] valid_begin uint8_t* indication valid(1) or null(0) values.\n-  ///  nullptr indicates all values are valid.\n-  /// \\return Status\n+  // Same as above, for a pointer type ValidIter\n   template <typename ValuesIter, typename ValidIter>\n   typename std::enable_if<std::is_pointer<ValidIter>::value, Status>::type AppendValues(\n       ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin) {\ndiff --git a/cpp/src/arrow/status.h b/cpp/src/arrow/status.h\nindex 7280133a65..ddf3d7ee0e 100644\n--- a/cpp/src/arrow/status.h\n+++ b/cpp/src/arrow/status.h\n@@ -29,6 +29,7 @@\n \n #ifdef ARROW_EXTRA_ERROR_CONTEXT\n \n+/// \\brief Propagate any non-successful Status to the caller\n #define ARROW_RETURN_NOT_OK(s)                                                      \\\n   do {                                                                              \\\n     ::arrow::Status _s = (s);                                                       \\\n@@ -41,6 +42,7 @@\n \n #else\n \n+/// \\brief Propagate any non-successful Status to the caller\n #define ARROW_RETURN_NOT_OK(s)           \\\n   do {                                   \\\n     ::arrow::Status _s = (s);            \\\n@@ -107,6 +109,14 @@ enum class StatusCode : char {\n class ARROW_MUST_USE_RESULT ARROW_EXPORT Status;\n #endif\n \n+/// \\brief Status outcome object (success or error)\n+///\n+/// The Status object is an object holding the outcome of an operation.\n+/// The outcome is represented as a StatusCode, either success\n+/// (StatusCode::OK) or an error (any other of the StatusCode enumeration values).\n+///\n+/// Additionally, if an error occurred, a specific error message is generally\n+/// attached.\n class ARROW_EXPORT Status {\n  public:\n   // Create a success status.\n@@ -135,45 +145,54 @@ class ARROW_EXPORT Status {\n   Status& operator&=(const Status& s) noexcept;\n   Status& operator&=(Status&& s) noexcept;\n \n-  // Return a success status.\n+  /// Return a success status\n   static Status OK() { return Status(); }\n \n-  // Return a success status with extra info\n+  /// Return a success status with a specific message\n   static Status OK(const std::string& msg) { return Status(StatusCode::OK, msg); }\n \n-  // Return error status of an appropriate type.\n+  /// Return an error status for out-of-memory conditions\n   static Status OutOfMemory(const std::string& msg) {\n     return Status(StatusCode::OutOfMemory, msg);\n   }\n \n+  /// Return an error status for failed key lookups (e.g. column name in a table)\n   static Status KeyError(const std::string& msg) {\n     return Status(StatusCode::KeyError, msg);\n   }\n \n+  /// Return an error status for type errors (such as mismatching data types)\n   static Status TypeError(const std::string& msg) {\n     return Status(StatusCode::TypeError, msg);\n   }\n \n+  /// Return an error status for unknown errors\n   static Status UnknownError(const std::string& msg) {\n     return Status(StatusCode::UnknownError, msg);\n   }\n \n+  /// Return an error status when an operation or a combination of operation and\n+  /// data types is unimplemented\n   static Status NotImplemented(const std::string& msg) {\n     return Status(StatusCode::NotImplemented, msg);\n   }\n \n+  /// Return an error status for invalid data (for example a string that fails parsing)\n   static Status Invalid(const std::string& msg) {\n     return Status(StatusCode::Invalid, msg);\n   }\n \n+  /// Return an error status when a container's capacity would exceed its limits\n   static Status CapacityError(const std::string& msg) {\n     return Status(StatusCode::CapacityError, msg);\n   }\n \n+  /// Return an error status when some IO-related operation failed\n   static Status IOError(const std::string& msg) {\n     return Status(StatusCode::IOError, msg);\n   }\n \n+  /// Return an error status when some (de)serialization operation failed\n   static Status SerializationError(const std::string& msg) {\n     return Status(StatusCode::SerializationError, msg);\n   }\n@@ -198,7 +217,6 @@ class ARROW_EXPORT Status {\n \n   static Status StillExecuting() { return Status(StatusCode::StillExecuting, \"\"); }\n \n-  // Return error status of an appropriate type.\n   static Status CodeGenError(const std::string& msg) {\n     return Status(StatusCode::CodeGenError, msg);\n   }\n@@ -211,34 +229,42 @@ class ARROW_EXPORT Status {\n     return Status(StatusCode::ExecutionError, msg);\n   }\n \n-  // Returns true iff the status indicates success.\n+  /// Return true iff the status indicates success.\n   bool ok() const { return (state_ == NULL); }\n \n+  /// Return true iff the status indicates an out-of-memory error.\n   bool IsOutOfMemory() const { return code() == StatusCode::OutOfMemory; }\n+  /// Return true iff the status indicates a key lookup error.\n   bool IsKeyError() const { return code() == StatusCode::KeyError; }\n+  /// Return true iff the status indicates invalid data.\n   bool IsInvalid() const { return code() == StatusCode::Invalid; }\n+  /// Return true iff the status indicates an IO-related failure.\n   bool IsIOError() const { return code() == StatusCode::IOError; }\n+  /// Return true iff the status indicates a container reaching capacity limits.\n   bool IsCapacityError() const { return code() == StatusCode::CapacityError; }\n+  /// Return true iff the status indicates a type error.\n   bool IsTypeError() const { return code() == StatusCode::TypeError; }\n+  /// Return true iff the status indicates an unknown error.\n   bool IsUnknownError() const { return code() == StatusCode::UnknownError; }\n+  /// Return true iff the status indicates an unimplemented operation.\n   bool IsNotImplemented() const { return code() == StatusCode::NotImplemented; }\n-  // An object could not be serialized or deserialized.\n+  /// Return true iff the status indicates a (de)serialization failure\n   bool IsSerializationError() const { return code() == StatusCode::SerializationError; }\n-  // An error from R\n+  /// Return true iff the status indicates a R-originated error.\n   bool IsRError() const { return code() == StatusCode::RError; }\n-  // An error is propagated from a nested Python function.\n+  /// Return true iff the status indicates a Python-originated error.\n   bool IsPythonError() const { return code() == StatusCode::PythonError; }\n-  // An object with this object ID already exists in the plasma store.\n+  /// Return true iff the status indicates an already existing Plasma object.\n   bool IsPlasmaObjectExists() const { return code() == StatusCode::PlasmaObjectExists; }\n-  // An object was requested that doesn't exist in the plasma store.\n+  /// Return true iff the status indicates a non-existent Plasma object.\n   bool IsPlasmaObjectNonexistent() const {\n     return code() == StatusCode::PlasmaObjectNonexistent;\n   }\n-  // An already sealed object is tried to be sealed again.\n+  /// Return true iff the status indicates an already sealed Plasma object.\n   bool IsPlasmaObjectAlreadySealed() const {\n     return code() == StatusCode::PlasmaObjectAlreadySealed;\n   }\n-  // An object is too large to fit into the plasma store.\n+  /// Return true iff the status indicates the Plasma store reached its capacity limit.\n   bool IsPlasmaStoreFull() const { return code() == StatusCode::PlasmaStoreFull; }\n \n   bool IsStillExecuting() const { return code() == StatusCode::StillExecuting; }\n@@ -251,16 +277,19 @@ class ARROW_EXPORT Status {\n \n   bool IsExecutionError() const { return code() == StatusCode::ExecutionError; }\n \n-  // Return a string representation of this status suitable for printing.\n-  // Returns the string \"OK\" for success.\n+  /// \\brief Return a string representation of this status suitable for printing.\n+  ///\n+  /// The string \"OK\" is returned for success.\n   std::string ToString() const;\n \n-  // Return a string representation of the status code, without the message\n-  // text or posix code information.\n+  /// \\brief Return a string representation of the status code, without the message\n+  /// text or POSIX code information.\n   std::string CodeAsString() const;\n \n+  /// \\brief Return the StatusCode value attached to this status.\n   StatusCode code() const { return ok() ? StatusCode::OK : state_->code; }\n \n+  /// \\brief Return the specific error message attached to this status.\n   std::string message() const { return ok() ? \"\" : state_->msg; }\n \n  private:\ndiff --git a/cpp/src/arrow/table.h b/cpp/src/arrow/table.h\nindex 119e4e4491..9c478485b2 100644\n--- a/cpp/src/arrow/table.h\n+++ b/cpp/src/arrow/table.h\n@@ -39,7 +39,14 @@ class Status;\n /// as one large array\n class ARROW_EXPORT ChunkedArray {\n  public:\n+  /// \\brief Construct a chunked array from a vector of arrays\n+  ///\n+  /// The vector should be non-empty and all its elements should have the same\n+  /// data type.\n   explicit ChunkedArray(const ArrayVector& chunks);\n+  /// \\brief Construct a chunked array from a vector of arrays and a data type\n+  ///\n+  /// As the data type is passed explicitly, the vector may be empty.\n   ChunkedArray(const ArrayVector& chunks, const std::shared_ptr<DataType>& type);\n \n   /// \\return the total length of the chunked array; computed on construction\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex 63f0e2d237..f187817b53 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -40,11 +40,11 @@ namespace arrow {\n class Array;\n class Field;\n \n-/// \\brief Main data type enumeration\n-///\n-/// This enumeration provides a quick way to interrogate the category\n-/// of a DataType instance.\n struct Type {\n+  /// \\brief Main data type enumeration\n+  ///\n+  /// This enumeration provides a quick way to interrogate the category\n+  /// of a DataType instance.\n   enum type {\n     /// A NULL type having no physical storage\n     NA,\n@@ -143,7 +143,7 @@ struct Type {\n /// nested type consisting of other data types, or another data type (e.g. a\n /// timestamp encoded as an int64).\n ///\n-/// Simple datatypes may be entirely described by their Type id, but\n+/// Simple datatypes may be entirely described by their Type::type id, but\n /// complex datatypes are usually parametric.\n class ARROW_EXPORT DataType {\n  public:\n@@ -624,6 +624,7 @@ class ARROW_EXPORT Date64Type : public DateType {\n };\n \n struct TimeUnit {\n+  /// The unit for a time or timestamp DataType\n   enum type { SECOND = 0, MILLI = 1, MICRO = 2, NANO = 3 };\n };\n \n@@ -837,6 +838,9 @@ class ARROW_EXPORT Schema {\n // Parametric factory functions\n // Other factory functions are in type_fwd.h\n \n+/// \\addtogroup type-factories\n+/// @{\n+\n /// \\brief Create a FixedSizeBinaryType instance\n ARROW_EXPORT\n std::shared_ptr<DataType> fixed_size_binary(int32_t byte_width);\n@@ -890,6 +894,8 @@ std::shared_ptr<DataType> ARROW_EXPORT\n dictionary(const std::shared_ptr<DataType>& index_type,\n            const std::shared_ptr<Array>& values, bool ordered = false);\n \n+/// @}\n+\n /// \\brief Create a Field instance\n ///\n /// \\param name the field name\ndiff --git a/cpp/src/arrow/type_fwd.h b/cpp/src/arrow/type_fwd.h\nindex dbbe7092b4..2a83d8a664 100644\n--- a/cpp/src/arrow/type_fwd.h\n+++ b/cpp/src/arrow/type_fwd.h\n@@ -137,6 +137,11 @@ using IntervalArray = NumericArray<IntervalType>;\n // (parameter-free) Factory functions\n // Other factory functions are in type.h\n \n+/// \\defgroup type-factories Factory functions for creating data types\n+///\n+/// Factory functions for creating data types\n+/// @{\n+\n /// \\brief Return a NullType instance\n std::shared_ptr<DataType> ARROW_EXPORT null();\n /// \\brief Return a BooleanType instance\n@@ -172,6 +177,8 @@ std::shared_ptr<DataType> ARROW_EXPORT date32();\n /// \\brief Return a Date64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date64();\n \n+/// @}\n+\n }  // namespace arrow\n \n #endif  // ARROW_TYPE_FWD_H\ndiff --git a/docs/source/cpp/api.rst b/docs/source/cpp/api.rst\nindex 894ed1f907..02aa4d62e3 100644\n--- a/docs/source/cpp/api.rst\n+++ b/docs/source/cpp/api.rst\n@@ -20,8 +20,10 @@ API Reference\n *************\n \n .. toctree::\n-   :maxdepth: 2\n-   :caption: Getting Started\n+   :maxdepth: 3\n \n-   api/array\n+   api/support\n    api/memory\n+   api/datatype\n+   api/array\n+   api/builder\ndiff --git a/docs/source/cpp/api/array.rst b/docs/source/cpp/api/array.rst\nindex aed18763b6..bb981d1a04 100644\n--- a/docs/source/cpp/api/array.rst\n+++ b/docs/source/cpp/api/array.rst\n@@ -15,19 +15,23 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n-Array types\n-=============\n+======\n+Arrays\n+======\n \n .. doxygenclass:: arrow::Array\n    :project: arrow_cpp\n    :members:\n \n+Concrete array subclasses\n+=========================\n+\n .. doxygenclass:: arrow::DictionaryArray\n    :project: arrow_cpp\n    :members:\n \n-non-nested array types\n-----------------------\n+Non-nested\n+----------\n \n .. doxygenclass:: arrow::FlatArray\n    :project: arrow_cpp\n@@ -65,8 +69,8 @@ non-nested array types\n    :project: arrow_cpp\n    :members:\n \n-nested array types\n-------------------\n+Nested\n+------\n \n .. doxygenclass:: arrow::UnionArray\n    :project: arrow_cpp\n@@ -79,3 +83,10 @@ nested array types\n .. doxygenclass:: arrow::StructArray\n    :project: arrow_cpp\n    :members:\n+\n+Chunked Arrays\n+==============\n+\n+.. doxygenclass:: arrow::ChunkedArray\n+   :project: arrow_cpp\n+   :members:\ndiff --git a/docs/source/cpp/api/builder.rst b/docs/source/cpp/api/builder.rst\nnew file mode 100644\nindex 0000000000..0912706ac0\n--- /dev/null\n+++ b/docs/source/cpp/api/builder.rst\n@@ -0,0 +1,59 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+==============\n+Array Builders\n+==============\n+\n+.. doxygenclass:: arrow::ArrayBuilder\n+   :members:\n+\n+Concrete builder subclasses\n+===========================\n+\n+.. doxygenclass:: arrow::NullBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::BooleanBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::PrimitiveBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::NumericBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::BinaryBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::StringBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::FixedSizeBinaryBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::Decimal128Builder\n+   :members:\n+\n+.. doxygenclass:: arrow::ListBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::StructBuilder\n+   :members:\n+\n+.. doxygenclass:: arrow::DictionaryBuilder\n+   :members:\ndiff --git a/docs/source/cpp/api/datatype.rst b/docs/source/cpp/api/datatype.rst\nnew file mode 100644\nindex 0000000000..ee7844277d\n--- /dev/null\n+++ b/docs/source/cpp/api/datatype.rst\n@@ -0,0 +1,135 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+==========\n+Data Types\n+==========\n+\n+.. doxygenenum:: arrow::Type::type\n+\n+.. doxygenclass:: arrow::DataType\n+   :members:\n+\n+.. _api-type-factories:\n+\n+Factory functions\n+=================\n+\n+These functions are recommended for creating data types.  They may return\n+new objects or existing singletons, depending on the type requested.\n+\n+.. doxygengroup:: type-factories\n+   :project: arrow_cpp\n+   :content-only:\n+\n+Concrete type subclasses\n+========================\n+\n+Primitive\n+---------\n+\n+.. doxygenclass:: arrow::NullType\n+   :members:\n+\n+.. doxygenclass:: arrow::BooleanType\n+   :members:\n+\n+.. doxygenclass:: arrow::Int8Type\n+   :members:\n+\n+.. doxygenclass:: arrow::Int16Type\n+   :members:\n+\n+.. doxygenclass:: arrow::Int32Type\n+   :members:\n+\n+.. doxygenclass:: arrow::Int64Type\n+   :members:\n+\n+.. doxygenclass:: arrow::UInt8Type\n+   :members:\n+\n+.. doxygenclass:: arrow::UInt16Type\n+   :members:\n+\n+.. doxygenclass:: arrow::UInt32Type\n+   :members:\n+\n+.. doxygenclass:: arrow::UInt64Type\n+   :members:\n+\n+.. doxygenclass:: arrow::HalfFloatType\n+   :members:\n+\n+.. doxygenclass:: arrow::FloatType\n+   :members:\n+\n+.. doxygenclass:: arrow::DoubleType\n+   :members:\n+\n+Time-related\n+------------\n+\n+.. doxygenenum:: arrow::TimeUnit::type\n+\n+.. doxygenclass:: arrow::Date32Type\n+   :members:\n+\n+.. doxygenclass:: arrow::Date64Type\n+   :members:\n+\n+.. doxygenclass:: arrow::Time32Type\n+   :members:\n+\n+.. doxygenclass:: arrow::Time64Type\n+   :members:\n+\n+.. doxygenclass:: arrow::TimestampType\n+   :members:\n+\n+Binary-like\n+-----------\n+\n+.. doxygenclass:: arrow::BinaryType\n+   :members:\n+\n+.. doxygenclass:: arrow::StringType\n+   :members:\n+\n+.. doxygenclass:: arrow::FixedSizeBinaryType\n+   :members:\n+\n+.. doxygenclass:: arrow::Decimal128Type\n+   :members:\n+\n+Nested\n+------\n+\n+.. doxygenclass:: arrow::ListType\n+   :members:\n+\n+.. doxygenclass:: arrow::StructType\n+   :members:\n+\n+.. doxygenclass:: arrow::UnionType\n+   :members:\n+\n+Dictionary-encoded\n+------------------\n+\n+.. doxygenclass:: arrow::DictionaryType\n+   :members:\ndiff --git a/docs/source/cpp/api/memory.rst b/docs/source/cpp/api/memory.rst\nindex fbb5dc8186..1dc8e706d3 100644\n--- a/docs/source/cpp/api/memory.rst\n+++ b/docs/source/cpp/api/memory.rst\n@@ -18,8 +18,8 @@\n Memory (management)\n ===================\n \n-Basic containers\n-----------------\n+Buffers\n+-------\n \n .. doxygenclass:: arrow::Buffer\n    :project: arrow_cpp\ndiff --git a/docs/source/cpp/api/support.rst b/docs/source/cpp/api/support.rst\nnew file mode 100644\nindex 0000000000..b165a9973b\n--- /dev/null\n+++ b/docs/source/cpp/api/support.rst\n@@ -0,0 +1,29 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Programming Support\n+===================\n+\n+Error return and reporting\n+--------------------------\n+\n+.. doxygenclass:: arrow::Status\n+   :project: arrow_cpp\n+   :members:\n+\n+.. doxygendefine:: ARROW_RETURN_NOT_OK\n+\ndiff --git a/docs/source/cpp/arrays.rst b/docs/source/cpp/arrays.rst\nnew file mode 100644\nindex 0000000000..0c5272d2ae\n--- /dev/null\n+++ b/docs/source/cpp/arrays.rst\n@@ -0,0 +1,211 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+======\n+Arrays\n+======\n+\n+The central type in Arrow is the class :class:`arrow::Array`.   An array\n+represents a known-length sequence of values all having the same type.\n+Internally, those values are represented by one or several buffers, the\n+number and meaning of which depend on the array's data type, as documented\n+in :doc:`the Arrow data layout specification <../format/Layout>`.\n+\n+Those buffers consist of the value data itself and an optional bitmap buffer\n+that indicates which array entries are null values.  The bitmap buffer\n+can be entirely omitted if the array is known to have zero null values.\n+\n+There are concrete subclasses of :class:`arrow::Array` for each data type,\n+that help you access individual values of the array.\n+\n+Building an array\n+=================\n+\n+As Arrow objects are immutable, there are classes provided that help you\n+build these objects incrementally from third-party data.  These classes\n+are organized in a hierarchy around the :class:`arrow::ArrayBuilder` base class,\n+with concrete subclasses tailored for each particular data type.\n+\n+For example, to build an array of ``int64_t`` elements, we can use the\n+:class:`arrow::Int64Builder` class. In the following example, we build an array\n+of the range 1 to 8 where the element that should hold the value 4 is nulled::\n+\n+   arrow::Int64Builder builder;\n+   builder.Append(1);\n+   builder.Append(2);\n+   builder.Append(3);\n+   builder.AppendNull();\n+   builder.Append(5);\n+   builder.Append(6);\n+   builder.Append(7);\n+   builder.Append(8);\n+\n+   std::shared_ptr<arrow::Array> array;\n+   arrow::Status st = builder.Finish(&array);\n+   if (!st.ok()) {\n+      // ... do something on array building failure\n+   }\n+\n+The resulting Array (which can be casted to the concrete :class:`arrow::Int64Array`\n+subclass if you want to access its values) then consists of two\n+:class:`arrow::Buffer`\\s.\n+The first buffer holds the null bitmap, which consists here of a single byte with\n+the bits ``0|0|0|0|1|0|0|0``. As we use  `least-significant bit (LSB) numbering`_.\n+this indicates that the fourth entry in the array is null. The second\n+buffer is simply an ``int64_t`` array containing all the above values.\n+As the fourth entry is null, the value at that position in the buffer is\n+undefined.\n+\n+Here is how you could access the concrete array's contents::\n+\n+   // Cast the Array to its actual type to access its data\n+   auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array);\n+\n+   // Get the pointer to the null bitmap.\n+   const uint8_t* null_bitmap = int64_array->null_bitmap_data();\n+\n+   // Get the pointer to the actual data\n+   const int64_t* data = int64_array->raw_values();\n+\n+   // Alternatively, given an array index, query its null bit and value directly\n+   int64_t index = 2;\n+   if (!int64_array->IsNull(index)) {\n+      int64_t value = int64_array->Value(index);\n+   }\n+\n+.. note::\n+   :class:`arrow::Int64Array` (respectively :class:`arrow::Int64Builder`) is\n+   just a ``typedef``, provided for convenience, of ``arrow::NumericArray<Int64Type>``\n+   (respectively ``arrow::NumericBuilder<Int64Type>``).\n+\n+.. _least-significant bit (LSB) numbering: https://en.wikipedia.org/wiki/Bit_numbering\n+\n+Performance\n+-----------\n+\n+While it is possible to build an array value-by-value as in the example above,\n+to attain highest performance it is recommended to use the bulk appending\n+methods (usually named ``AppendValues``) in the concrete :class:`arrow::ArrayBuilder`\n+subclasses.\n+\n+If you know the number of elements in advance, it is also recommended to\n+presize the working area by calling the :func:`~arrow::ArrayBuilder::Resize`\n+or :func:`~arrow::ArrayBuilder::Reserve` methods.\n+\n+Here is how one could rewrite the above example to take advantage of those\n+APIs::\n+\n+   arrow::Int64Builder builder;\n+   // Make place for 8 values in total\n+   builder.Resize(8);\n+   // Bulk append the given values (with a null in 4th place as indicated by the\n+   // validity vector)\n+   std::vector<bool> validity = {true, true, true, false, true, true, true, true};\n+   std::vector<int64_t> values = {1, 2, 3, 0, 5, 6, 7, 8};\n+   builder.AppendValues(values, validity);\n+\n+   std::shared_ptr<arrow::Array> array;\n+   arrow::Status st = builder.Finish(&array);\n+\n+If you still must append values one by one, some concrete builder subclasses\n+have methods marked \"Unsafe\" that assume the working area has been correctly\n+presized, and offer higher performance in exchange::\n+\n+   arrow::Int64Builder builder;\n+   // Make place for 8 values in total\n+   builder.Resize(8);\n+   builder.UnsafeAppend(1);\n+   builder.UnsafeAppend(2);\n+   builder.UnsafeAppend(3);\n+   builder.UnsafeAppendNull();\n+   builder.UnsafeAppend(5);\n+   builder.UnsafeAppend(6);\n+   builder.UnsafeAppend(7);\n+   builder.UnsafeAppend(8);\n+\n+   std::shared_ptr<arrow::Array> array;\n+   arrow::Status st = builder.Finish(&array);\n+\n+\n+Size Limitations and Recommendations\n+====================================\n+\n+Some array types are structurally limited to 32-bit sizes.  This is the case\n+for list arrays (which can hold up to 2^31 elements), string arrays and binary\n+arrays (which can hold up to 2GB of binary data), at least.  Some other array\n+types can hold up to 2^63 elements in the C++ implementation, but other Arrow\n+implementations can have a 32-bit size limitation for those array types as well.\n+\n+For these reasons, it is recommended that huge data be chunked in subsets of\n+more reasonable size.\n+\n+Chunked Arrays\n+==============\n+\n+A :class:`arrow::ChunkedArray` is, like an array, a logical sequence of values;\n+but unlike a simple array, a chunked array does not require the entire sequence\n+to be physically contiguous in memory.  Also, the constituents of a chunked array\n+need not have the same size, but they must all have the same data type.\n+\n+A chunked array is constructed by agregating any number of arrays.  Here we'll\n+build a chunked array with the same logical values as in the example above,\n+but in two separate chunks::\n+\n+   std::vector<std::shared_ptr<arrow::Array>> chunks;\n+   std::shared_ptr<arrow::Array> array;\n+\n+   // Build first chunk\n+   arrow::Int64Builder builder;\n+   builder.Append(1);\n+   builder.Append(2);\n+   builder.Append(3);\n+   if (!builder.Finish(&array).ok()) {\n+      // ... do something on array building failure\n+   }\n+   chunks.push_back(std::move(array));\n+\n+   // Build second chunk\n+   builder.Reset();\n+   builder.AppendNull();\n+   builder.Append(5);\n+   builder.Append(6);\n+   builder.Append(7);\n+   builder.Append(8);\n+   if (!builder.Finish(&array).ok()) {\n+      // ... do something on array building failure\n+   }\n+   chunks.push_back(std::move(array));\n+\n+   auto chunked_array = std::make_shared<arrow::ChunkedArray>(std::move(chunks));\n+\n+   assert(chunked_array->num_chunks() == 2);\n+   // Logical length in number of values\n+   assert(chunked_array->length() == 8);\n+   assert(chunked_array->null_count() == 1);\n+\n+Slicing\n+=======\n+\n+Like for physical memory buffers, it is possible to make zero-copy slices\n+of arrays and chunked arrays, to obtain an array or chunked array referring\n+to some logical subsequence of the data.  This is done by calling the\n+:func:`arrow::Array::Slice` and :func:`arrow::ChunkedArray::Slice` methods,\n+respectively.\n+\ndiff --git a/docs/source/cpp/conventions.rst b/docs/source/cpp/conventions.rst\nnew file mode 100644\nindex 0000000000..b042435890\n--- /dev/null\n+++ b/docs/source/cpp/conventions.rst\n@@ -0,0 +1,91 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+Conventions\n+===========\n+\n+The Arrow C++ API follows a few simple guidelines.  As with many rules,\n+there may be exceptions.\n+\n+Language version\n+----------------\n+\n+Arrow is C++11-compatible.  A few backports are used for newer functionality,\n+for example the :class:`std::string_view` class.\n+\n+Namespacing\n+-----------\n+\n+All the Arrow API (except macros) is namespaced inside a ``arrow`` namespace,\n+and nested namespaces thereof.\n+\n+Safe pointers\n+-------------\n+\n+Arrow objects are usually passed and stored using safe pointers -- most of\n+the time :class:`std::shared_ptr` but sometimes also :class:`std::unique_ptr`.\n+\n+Immutability\n+------------\n+\n+Many Arrow objects are immutable: once constructed, their logical properties\n+cannot change anymore.  This makes it possible to use them in multi-threaded\n+scenarios without requiring tedious and error-prone synchronization.\n+\n+There are obvious exceptions to this, such as IO objects or mutable data buffers.\n+\n+Error reporting\n+---------------\n+\n+Most APIs indicate a successful or erroneous outcome by returning a\n+:class:`arrow::Status` instance.  Arrow doesn't throw exceptions of its\n+own, but third-party exceptions might propagate through, especially\n+:class:`std::bad_alloc` (but Arrow doesn't use the standard allocators for\n+large data).\n+\n+As a consequence, the result value of a function is generally passed as an\n+out-pointer parameter, rather than as a function return value.\n+\n+(however, functions which always determiniscally succeed may eschew this\n+convention and return their result directly)\n+\n+Here is an example of checking the outcome of an operation::\n+\n+   const int64_t buffer_size = 4096;\n+   std::shared_ptr<arrow::Buffer> buffer;\n+\n+   auto status = arrow::AllocateBuffer(buffer_size, &buffer);\n+   if (!status.ok()) {\n+      // ... handle error\n+   }\n+\n+If the caller function itself returns a :class:`arrow::Status` and wants\n+to propagate any non-successful outcomes, a convenience macro\n+:cpp:func:`ARROW_RETURN_NON_OK` is available::\n+\n+   arrow::Status DoSomething() {\n+      const int64_t buffer_size = 4096;\n+      std::shared_ptr<arrow::Buffer> buffer;\n+      ARROW_RETURN_NON_OK(arrow::AllocateBuffer(buffer_size, &buffer));\n+      // ... allocation successful, do something with buffer below\n+\n+      // return success at the end\n+      return Status::OK();\n+   }\ndiff --git a/docs/source/cpp/datatypes.rst b/docs/source/cpp/datatypes.rst\nnew file mode 100644\nindex 0000000000..117c05b875\n--- /dev/null\n+++ b/docs/source/cpp/datatypes.rst\n@@ -0,0 +1,65 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+Data Types\n+==========\n+\n+Data types govern how physical data is interpreted.  Their :ref:`specification\n+<spec-logical-types>` allows binary interoperability between different Arrow\n+implementations, including from different programming languages and runtimes\n+(for example it is possible to access the same data, without copying, from\n+both Python and Java using the :py:mod:`pyarrow.jvm` bridge module).\n+\n+Information about a data type in C++ can be represented in three ways:\n+\n+1. Using a :class:`arrow::DataType` instance (e.g. as a function argument)\n+2. Using a :class:`arrow::DataType` concrete subclass (e.g. as a template\n+   parameter)\n+3. Using a :type:`arrow::Type::type` enum value (e.g. as the condition of\n+   a switch statement)\n+\n+The first form (using a :class:`arrow::DataType` instance) is the most idiomatic\n+and flexible.  Runtime-parametric types can only be fully represented with\n+a DataType instance.  For example, a :class:`arrow::TimestampType` needs to be\n+constructed at runtime with a :type:`arrow::TimeUnit::type` parameter; a\n+:class:`arrow::Decimal128Type` with *scale* and *precision* parameters;\n+a :class:`arrow::ListType` with a full child type (itself a\n+:class:`arrow::DataType` instance).\n+\n+The two other forms can be used where performance is critical, in order to\n+avoid paying the price of dynamic typing and polymorphism.  However, some\n+amount of runtime switching can still be required for parametric types.\n+It is not possible to reify all possible types at compile time, since Arrow\n+data types allows arbitrary nesting.\n+\n+Creating data types\n+-------------------\n+\n+To instantiate data types, it is recommended to call the provided\n+:ref:`factory functions <api-type-factories>`::\n+\n+   std::shared_ptr<arrow::DataType> type;\n+\n+   // A 16-bit integer type\n+   type = arrow::int16();\n+   // A 64-bit timestamp type (with microsecond granularity)\n+   type = arrow::timestamp(arrow::TimeUnit::MICRO);\n+   // A list type of single-precision floating-point values\n+   type = arrow::list(arrow::float32());\ndiff --git a/docs/source/cpp/getting_started.rst b/docs/source/cpp/getting_started.rst\nnew file mode 100644\nindex 0000000000..8201c2ded0\n--- /dev/null\n+++ b/docs/source/cpp/getting_started.rst\n@@ -0,0 +1,30 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+Getting Started\n+===============\n+\n+.. toctree::\n+\n+   overview\n+   conventions\n+   arrays\n+   datatypes\n+\ndiff --git a/docs/source/cpp/index.rst b/docs/source/cpp/index.rst\nindex 4f874bac4f..8c7ced0c2e 100644\n--- a/docs/source/cpp/index.rst\n+++ b/docs/source/cpp/index.rst\n@@ -20,69 +20,6 @@ C++ Implementation\n \n .. toctree::\n    :maxdepth: 2\n-   :caption: Getting Started\n \n+   getting_started\n    api\n-\n-Getting Started\n----------------\n-\n-The most basic structure in Arrow is an :cpp:class:`arrow::Array`. It holds a sequence\n-of values with known length all having the same type. It consists of the data\n-itself and an additional bitmap that indicates if the corresponding entry of\n-array is a null-value. Note that for array with zero null entries, we can omit\n-this bitmap.\n-\n-As Arrow objects are immutable, there are classes provided that should help you\n-build these objects. To build an array of ``int64_t`` elements, we can use the\n-:cpp:class:`arrow::Int64Builder`. In the following example, we build an array of\n-the range 1 to 8 where the element that should hold the number 4 is nulled.\n-\n-.. code::\n-\n-    Int64Builder builder;\n-    builder.Append(1);\n-    builder.Append(2);\n-    builder.Append(3);\n-    builder.AppendNull();\n-    builder.Append(5);\n-    builder.Append(6);\n-    builder.Append(7);\n-    builder.Append(8);\n-\n-    std::shared_ptr<Array> array;\n-    builder.Finish(&array);\n-\n-The resulting Array (which can be casted to :cpp:class:`arrow::Int64Array` if you want\n-to access its values) then consists of two :cpp:class:`arrow::Buffer`. The first one is\n-the null bitmap holding a single byte with the bits ``0|0|0|0|1|0|0|0``.\n-As we use  `least-significant bit (LSB) numbering`_.\n-this indicates that the fourth entry in the array is null. The second\n-buffer is simply an ``int64_t`` array containing all the above values.\n-As the fourth entry is null, the value at that position in the buffer is\n-undefined.\n-\n-.. code::\n-\n-    // Cast the Array to its actual type to access its data\n-    std::shared_ptr<Int64Array> int64_array = std::static_pointer_cast<Int64Array>(array);\n-\n-    // Get the pointer to the null bitmap.\n-    const uint8_t* null_bitmap = int64_array->null_bitmap_data();\n-\n-    // Get the pointer to the actual data\n-    const int64_t* data = int64_array->raw_values();\n-\n-In the above example, we have yet skipped explaining two things in the code.\n-On constructing the builder, we have passed :cpp:func:`arrow::int64()` to it. This is\n-the type information with which the resulting array will be annotated. In\n-this simple form, it is solely a :cpp:class:`std::shared_ptr<arrow::Int64Type>`\n-instantiation.\n-\n-Furthermore, we have passed :cpp:func:`arrow::default_memory_pool()` to the constructor.\n-This :cpp:class:`arrow::MemoryPool` is used for the allocations of heap memory. Besides\n-tracking the amount of memory allocated, the allocator also ensures that the\n-allocated memory regions are 64-byte aligned (as required by the Arrow\n-specification).\n-\n-.. _least-significant bit (LSB) numbering: https://en.wikipedia.org/wiki/Bit_numbering\ndiff --git a/docs/source/cpp/overview.rst b/docs/source/cpp/overview.rst\nnew file mode 100644\nindex 0000000000..490efc1b7a\n--- /dev/null\n+++ b/docs/source/cpp/overview.rst\n@@ -0,0 +1,93 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+High-Level Overview\n+===================\n+\n+The Arrow C++ library is comprised of different parts, each of which serves\n+a specific purpose.\n+\n+The physical layer\n+------------------\n+\n+**Memory management** abstractions provide a uniform API over memory that\n+may be allocated through various means, such as heap allocation, the memory\n+mapping of a file or a static memory area.  In particular, the **buffer**\n+abstraction represents a contiguous area of physical data.\n+\n+The one-dimensional layer\n+-------------------------\n+\n+**Data types** govern the *logical* interpretation of *physical* data.\n+Many operations in Arrow are parametered, at compile-time or at runtime,\n+by a data type.\n+\n+**Arrays** assemble one or several buffers with a data type, allowing to\n+view them as a logical contiguous sequence of values (possibly nested).\n+\n+**Chunked arrays** are a generalization of arrays, comprising several same-type\n+arrays into a longer logical sequence of values.\n+\n+The two-dimensional layer\n+-------------------------\n+\n+**Schemas** describe a logical collection of several pieces of data,\n+each with a distinct name and type, and optional metadata.\n+\n+**Columns** are like chunked arrays, but with optional metadata.\n+\n+**Tables** are collections of columns in accordance to a schema.  They are\n+the most capable dataset-providing abstraction in Arrow.\n+\n+**Record batches** are collections of contiguous arrays, described\n+by a schema.  They allow incremental construction or serialization of tables.\n+\n+The compute layer\n+-----------------\n+\n+**Datums** are flexible dataset references, able to hold for example an array or table\n+reference.\n+\n+**Kernels** are specialized computation functions running in a loop over a\n+given set of datums representing input and output parameters to the functions.\n+\n+The IO layer\n+------------\n+\n+**Streams** allow untyped sequential or seekable access over external data\n+of various kinds (for example compressed or memory-mapped).\n+\n+The Inter-Process Communication (IPC) layer\n+-------------------------------------------\n+\n+A **messaging format** allows interchange of Arrow data between processes, using\n+as few copies as possible.\n+\n+The file formats layer\n+----------------------\n+\n+Reading and writing Arrow data from/to various file formats is possible, for\n+example **Parquet**, **CSV**, **Orc** or the Arrow-specific **Feather** format.\n+\n+The devices layer\n+-----------------\n+\n+Basic **CUDA** integration is provided, allowing to describe Arrow data backed\n+by GPU-allocated memory.\ndiff --git a/docs/source/format/Metadata.rst b/docs/source/format/Metadata.rst\nindex 4ed82e0078..293d011387 100644\n--- a/docs/source/format/Metadata.rst\n+++ b/docs/source/format/Metadata.rst\n@@ -266,6 +266,8 @@ detail for each type below): ::\n     buffer 10: field 5 offsets <int32_t*>\n     buffer 11: field 5 data <uint8_t*>\n \n+.. _spec-logical-types:\n+\n Logical types\n -------------\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T14:16:23.731+0000",
                    "updated": "2018-12-11T14:16:23.731+0000",
                    "started": "2018-12-11T14:16:23.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174104",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3149: ARROW-3986: [C++] Write prose documentation\nURL: https://github.com/apache/arrow/pull/3149#issuecomment-446240025\n \n \n   I will have a look through today if possible and leave any comments to be addressed in follow up PRs\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T15:20:23.753+0000",
                    "updated": "2018-12-11T15:20:23.753+0000",
                    "started": "2018-12-11T15:20:23.752+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174120",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3159: ARROW-3986: [C++] Document memory management APIs\nURL: https://github.com/apache/arrow/pull/3159\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T16:17:11.955+0000",
                    "updated": "2018-12-11T16:17:11.955+0000",
                    "started": "2018-12-11T16:17:11.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174144",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3159: ARROW-3986: [C++] Document memory management and table APIs\nURL: https://github.com/apache/arrow/pull/3159#issuecomment-446599197\n \n \n   I have uploaded a documentation build at https://pitrou.net/arrowdevdoc/cpp/index.html for easier viewing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T14:06:36.054+0000",
                    "updated": "2018-12-12T14:06:36.054+0000",
                    "started": "2018-12-12T14:06:36.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174524",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3159: ARROW-3986: [C++] Document memory management and table APIs\nURL: https://github.com/apache/arrow/pull/3159#discussion_r241099176\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -0,0 +1,127 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+=================\n+Memory Management\n+=================\n+\n+Buffers\n+=======\n+\n+To avoid passing around raw data pointers with varying and non-obvious\n+lifetime rules, Arrow provides a generic abstraction called :class:`arrow::Buffer`.\n+A Buffer encapsulates a pointer and data size, and generally also ties its\n+lifetime to that of an underlying provider (in other words, a Buffer should\n+*always* point to valid memory till its destruction).  Buffers are untyped:\n+they simply denote a physical memory area regardless of its intended meaning\n+or interpretation.\n+\n+Buffers may be allocated by Arrow itself , or by third-party routines.\n+For example, it is possible to pass the data of a Python bytestring as a Arrow\n+buffer, keeping the Python object alive as necessary.\n+\n+In addition, buffers come in various flavours: mutable or not, resizable or\n+not.  Generally, you will hold a mutable buffer when building up a piece\n+of data, then it will be frozen as an immutable container such as an\n+:doc:`array <arrays>`.\n+\n+.. note::\n+   Some buffers may point to non-CPU memory, such as GPU-backed memory\n+   provided by a CUDA context.  If you're writing a GPU-aware application,\n+   you will need to be careful not to interpret a GPU memory pointer as\n+   a CPU-reachable pointer, or vice-versa.\n+\n+Accessing Buffer Memory\n+-----------------------\n+\n+Buffers provide fast access to the underlying memory using the\n+:func:`~arrow::Buffer::size` and :func:`~arrow::Buffer::data` accessors\n+(or :func:`~arrow::Buffer::mutable_data` for writable access to a mutable\n+buffer).\n+\n+Slicing\n+-------\n+\n+It is possible to make zero-copy slices of buffers, to obtain a buffer\n+referring to some contiguous subset of the underlying data.  This is done\n+by calling the :func:`arrow::SliceBuffer` and :func:`arrow::SliceMutableBuffer`\n+functions.\n+\n+Allocating a Buffer\n+-------------------\n+\n+You can allocate a buffer yourself by calling one of the\n+:func:`arrow::AllocateBuffer` or :func:`arrow::AllocateResizableBuffer`\n+overloads::\n+\n+   std::shared_ptr<arrow::Buffer> buffer;\n+\n+   if (!arrow::AllocateBuffer(4096, &buffer).ok()) {\n+      // ... handle allocation error\n+   }\n+   uint8_t* buffer_data = buffer->mutable_data();\n+   memcpy(buffer_data, \"hello world\", 11);\n+\n+Allocating a buffer this way ensures it is 64-bytes aligned and padded\n+as recommended by the :doc:`Arrow memory specification <../format/Layout>`.\n+\n+Building a Buffer\n+-----------------\n+\n+You can also allocate *and* build a Buffer incrementally, using the\n+:class:`arrow::BufferBuilder` API::\n+\n+   BufferBuilder builder;\n+   builder.Resize(11);\n+   builder.Append(\"hello \", 6);\n+   builder.Append(\"world\", 5);\n \n Review comment:\n   Status unchecked, but I guess that's OK \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:57:53.641+0000",
                    "updated": "2018-12-12T16:57:53.641+0000",
                    "started": "2018-12-12T16:57:53.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174597",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3159: ARROW-3986: [C++] Document memory management and table APIs\nURL: https://github.com/apache/arrow/pull/3159\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/allocator.h b/cpp/src/arrow/allocator.h\nindex 144ba57506..a02b8e64bb 100644\n--- a/cpp/src/arrow/allocator.h\n+++ b/cpp/src/arrow/allocator.h\n@@ -29,6 +29,7 @@\n \n namespace arrow {\n \n+/// \\brief A STL allocator delegating allocations to a Arrow MemoryPool\n template <class T>\n class stl_allocator {\n  public:\n@@ -45,7 +46,9 @@ class stl_allocator {\n     using other = stl_allocator<U>;\n   };\n \n+  /// \\brief Construct an allocator from the default MemoryPool\n   stl_allocator() noexcept : pool_(default_memory_pool()) {}\n+  /// \\brief Construct an allocator from the given MemoryPool\n   explicit stl_allocator(MemoryPool* pool) noexcept : pool_(pool) {}\n \n   template <class U>\n@@ -86,9 +89,14 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+/// \\brief A MemoryPool implementation delegating allocations to a STL allocator\n+///\n+/// Note that STL allocators don't provide a resizing operation, and therefore\n+/// any buffer resizes will do a full reallocation and copy.\n template <typename Allocator = std::allocator<uint8_t>>\n class STLMemoryPool : public MemoryPool {\n  public:\n+  /// \\brief Construct a memory pool from the given allocator\n   explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n \n   Status Allocate(int64_t size, uint8_t** out) override {\ndiff --git a/cpp/src/arrow/buffer.h b/cpp/src/arrow/buffer.h\nindex 66c131413c..6b2ad1bbef 100644\n--- a/cpp/src/arrow/buffer.h\n+++ b/cpp/src/arrow/buffer.h\n@@ -40,13 +40,15 @@ namespace arrow {\n \n /// \\class Buffer\n /// \\brief Object containing a pointer to a piece of contiguous memory with a\n-/// particular size. Base class does not own its memory\n+/// particular size.\n ///\n /// Buffers have two related notions of length: size and capacity. Size is\n /// the number of bytes that might have valid data. Capacity is the number\n-/// of bytes that where allocated for the buffer in total.\n+/// of bytes that were allocated for the buffer in total.\n ///\n-/// The following invariant is always true: Size < Capacity\n+/// The Buffer base class does not own its memory, but subclasses often do.\n+///\n+/// The following invariant is always true: Size <= Capacity\n class ARROW_EXPORT Buffer {\n  public:\n   /// \\brief Construct from buffer and size without copying memory\n@@ -158,9 +160,12 @@ class ARROW_EXPORT Buffer {\n   /// \\note Can throw std::bad_alloc if buffer is large\n   std::string ToString() const;\n \n-  int64_t capacity() const { return capacity_; }\n+  /// \\brief Return a pointer to the buffer's data\n   const uint8_t* data() const { return data_; }\n-\n+  /// \\brief Return a writable pointer to the buffer's data\n+  ///\n+  /// The buffer has to be mutable.  Otherwise, an assertion may be thrown\n+  /// or a null pointer may be returned.\n   uint8_t* mutable_data() {\n #ifndef NDEBUG\n     CheckMutable();\n@@ -168,8 +173,12 @@ class ARROW_EXPORT Buffer {\n     return mutable_data_;\n   }\n \n+  /// \\brief Return the buffer's size in bytes\n   int64_t size() const { return size_; }\n \n+  /// \\brief Return the buffer's capacity (number of allocated bytes)\n+  int64_t capacity() const { return capacity_; }\n+\n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n  protected:\n@@ -188,26 +197,38 @@ class ARROW_EXPORT Buffer {\n   ARROW_DISALLOW_COPY_AND_ASSIGN(Buffer);\n };\n \n-/// Construct a view on passed buffer at the indicated offset and length. This\n-/// function cannot fail and does not error checking (except in debug builds)\n+/// \\defgroup buffer-slicing-functions Functions for slicing buffers\n+///\n+/// @{\n+\n+/// \\brief Construct a view on a buffer at the given offset and length.\n+///\n+/// This function cannot fail and does not check for errors (except in debug builds)\n static inline std::shared_ptr<Buffer> SliceBuffer(const std::shared_ptr<Buffer>& buffer,\n                                                   const int64_t offset,\n                                                   const int64_t length) {\n   return std::make_shared<Buffer>(buffer, offset, length);\n }\n \n+/// \\brief Construct a view on a buffer at the given offset, up to the buffer's end.\n+///\n+/// This function cannot fail and does not check for errors (except in debug builds)\n static inline std::shared_ptr<Buffer> SliceBuffer(const std::shared_ptr<Buffer>& buffer,\n                                                   const int64_t offset) {\n   int64_t length = buffer->size() - offset;\n   return SliceBuffer(buffer, offset, length);\n }\n \n-/// Construct a mutable buffer slice. If the parent buffer is not mutable, this\n-/// will abort in debug builds\n+/// \\brief Like SliceBuffer, but construct a mutable buffer slice.\n+///\n+/// If the parent buffer is not mutable, behavior is undefined (it may abort\n+/// in debug builds).\n ARROW_EXPORT\n std::shared_ptr<Buffer> SliceMutableBuffer(const std::shared_ptr<Buffer>& buffer,\n                                            const int64_t offset, const int64_t length);\n \n+/// @}\n+\n /// \\class MutableBuffer\n /// \\brief A Buffer whose contents can be mutated. May or may not own its data.\n class ARROW_EXPORT MutableBuffer : public Buffer {\n@@ -266,6 +287,10 @@ class ARROW_EXPORT ResizableBuffer : public MutableBuffer {\n   ResizableBuffer(uint8_t* data, int64_t size) : MutableBuffer(data, size) {}\n };\n \n+/// \\defgroup buffer-allocation-functions Functions for allocating buffers\n+///\n+/// @{\n+\n /// \\brief Allocate a fixed size mutable buffer from a memory pool, zero its padding.\n ///\n /// \\param[in] pool a memory pool\n@@ -364,6 +389,8 @@ Status AllocateEmptyBitmap(MemoryPool* pool, int64_t length,\n ARROW_EXPORT\n Status AllocateEmptyBitmap(int64_t length, std::shared_ptr<Buffer>* out);\n \n+/// @}\n+\n // ----------------------------------------------------------------------\n // Buffer builder classes\n \n@@ -374,13 +401,13 @@ class ARROW_EXPORT BufferBuilder {\n   explicit BufferBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n       : pool_(pool), data_(NULLPTR), capacity_(0), size_(0) {}\n \n-  /// \\brief Resizes the buffer to the nearest multiple of 64 bytes\n+  /// \\brief Resize the buffer to the nearest multiple of 64 bytes\n   ///\n   /// \\param elements the new capacity of the of the builder. Will be rounded\n   /// up to a multiple of 64 bytes for padding\n-  /// \\param shrink_to_fit if new capacity smaller than existing size,\n+  /// \\param shrink_to_fit if new capacity is smaller than the existing size,\n   /// reallocate internal buffer. Set to false to avoid reallocations when\n-  /// shrinking the builder\n+  /// shrinking the builder.\n   /// \\return Status\n   Status Resize(const int64_t elements, bool shrink_to_fit = true) {\n     // Resize(0) is a no-op\n@@ -409,6 +436,9 @@ class ARROW_EXPORT BufferBuilder {\n   /// \\return Status\n   Status Reserve(const int64_t size) { return Resize(size_ + size, false); }\n \n+  /// \\brief Append the given data to the buffer\n+  ///\n+  /// The buffer is automatically expanded if necessary.\n   Status Append(const void* data, int64_t length) {\n     if (capacity_ < length + size_) {\n       int64_t new_capacity = BitUtil::NextPower2(length + size_);\n@@ -418,6 +448,9 @@ class ARROW_EXPORT BufferBuilder {\n     return Status::OK();\n   }\n \n+  /// \\brief Append the given data to the buffer\n+  ///\n+  /// The buffer is automatically expanded if necessary.\n   template <size_t NBYTES>\n   Status Append(const std::array<uint8_t, NBYTES>& data) {\n     constexpr auto nbytes = static_cast<int64_t>(NBYTES);\n@@ -448,6 +481,15 @@ class ARROW_EXPORT BufferBuilder {\n     size_ += length;\n   }\n \n+  /// \\brief Return result of builder as a Buffer object.\n+  ///\n+  /// The builder is reset and can be reused afterwards.\n+  ///\n+  /// \\param[out] out the finalized Buffer object\n+  /// \\param shrink_to_fit if the buffer size is smaller than its capacity,\n+  /// reallocate to fit more tightly in memory. Set to false to avoid\n+  /// a reallocation, at the expense of potentially more memory consumption.\n+  /// \\return Status\n   Status Finish(std::shared_ptr<Buffer>* out, bool shrink_to_fit = true) {\n     ARROW_RETURN_NOT_OK(Resize(size_, shrink_to_fit));\n     *out = buffer_;\n@@ -472,6 +514,7 @@ class ARROW_EXPORT BufferBuilder {\n   int64_t size_;\n };\n \n+/// \\brief A BufferBuilder subclass with convenience methods to append typed data\n template <typename T>\n class ARROW_EXPORT TypedBufferBuilder : public BufferBuilder {\n  public:\ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 180b43a220..d001667421 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -118,7 +118,8 @@ class ARROW_EXPORT ArrayBuilder {\n   virtual Status FinishInternal(std::shared_ptr<ArrayData>* out) = 0;\n \n   /// \\brief Return result of builder as an Array object.\n-  ///        Resets the builder except for DictionaryBuilder\n+  ///\n+  /// The builder is reset except for DictionaryBuilder.\n   ///\n   /// \\param[out] out the finalized Array object\n   /// \\return Status\ndiff --git a/cpp/src/arrow/memory_pool.h b/cpp/src/arrow/memory_pool.h\nindex 49cd4c7efc..8499b6f35d 100644\n--- a/cpp/src/arrow/memory_pool.h\n+++ b/cpp/src/arrow/memory_pool.h\n@@ -142,6 +142,7 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n   std::unique_ptr<ProxyMemoryPoolImpl> impl_;\n };\n \n+/// Return the process-wide default memory pool.\n ARROW_EXPORT MemoryPool* default_memory_pool();\n \n #ifdef ARROW_NO_DEFAULT_MEMORY_POOL\ndiff --git a/cpp/src/arrow/table.h b/cpp/src/arrow/table.h\nindex 9c478485b2..6b57332528 100644\n--- a/cpp/src/arrow/table.h\n+++ b/cpp/src/arrow/table.h\n@@ -85,7 +85,12 @@ class ARROW_EXPORT ChunkedArray {\n \n   std::shared_ptr<DataType> type() const { return type_; }\n \n+  /// \\brief Determine if two chunked arrays are equal.\n+  ///\n+  /// Two chunked arrays can be equal only if they have equal datatypes.\n+  /// However, they may be equal even if they have different chunkings.\n   bool Equals(const ChunkedArray& other) const;\n+  /// \\brief Determine if two chunked arrays are equal.\n   bool Equals(const std::shared_ptr<ChunkedArray>& other) const;\n \n  protected:\n@@ -103,13 +108,26 @@ class ARROW_EXPORT ChunkedArray {\n /// metadata) and a chunked data array\n class ARROW_EXPORT Column {\n  public:\n+  /// \\brief Construct a column from a vector of arrays\n+  ///\n+  /// The array chunks' datatype must match the field's datatype.\n   Column(const std::shared_ptr<Field>& field, const ArrayVector& chunks);\n+  /// \\brief Construct a column from a chunked array\n+  ///\n+  /// The chunked array's datatype must match the field's datatype.\n   Column(const std::shared_ptr<Field>& field, const std::shared_ptr<ChunkedArray>& data);\n-\n+  /// \\brief Construct a column from a single array\n+  ///\n+  /// The array's datatype must match the field's datatype.\n   Column(const std::shared_ptr<Field>& field, const std::shared_ptr<Array>& data);\n \n-  // Construct from name and array\n+  /// \\brief Construct a column from a name and an array\n+  ///\n+  /// A field with the given name and the array's datatype is automatically created.\n   Column(const std::string& name, const std::shared_ptr<Array>& data);\n+  /// \\brief Construct a column from a name and a chunked array\n+  ///\n+  /// A field with the given name and the array's datatype is automatically created.\n   Column(const std::string& name, const std::shared_ptr<ChunkedArray>& data);\n \n   int64_t length() const { return data_->length(); }\n@@ -154,7 +172,12 @@ class ARROW_EXPORT Column {\n   /// \\param[out] out The resulting vector of arrays\n   Status Flatten(MemoryPool* pool, std::vector<std::shared_ptr<Column>>* out) const;\n \n+  /// \\brief Determine if two columns are equal.\n+  ///\n+  /// Two columns can be equal only if they have equal datatypes.\n+  /// However, they may be equal even if they have different chunkings.\n   bool Equals(const Column& other) const;\n+  /// \\brief Determine if the two columns are equal.\n   bool Equals(const std::shared_ptr<Column>& other) const;\n \n   /// \\brief Verify that the column's array data is consistent with the passed\n@@ -214,11 +237,10 @@ class ARROW_EXPORT Table {\n       const std::vector<std::shared_ptr<RecordBatch>>& batches,\n       std::shared_ptr<Table>* table);\n \n-  /// \\return the table's schema\n+  /// Return the table schema\n   std::shared_ptr<Schema> schema() const { return schema_; }\n \n-  /// \\param[in] i column index, does not boundscheck\n-  /// \\return the i-th column\n+  /// Return a column by index\n   virtual std::shared_ptr<Column> column(int i) const = 0;\n \n   /// \\brief Remove column from the table, producing a new Table\n@@ -250,13 +272,16 @@ class ARROW_EXPORT Table {\n   /// \\brief Perform any checks to validate the input arguments\n   virtual Status Validate() const = 0;\n \n-  /// \\return the number of columns in the table\n+  /// \\brief Return the number of columns in the table\n   int num_columns() const { return schema_->num_fields(); }\n \n-  /// \\return the number of rows (the corresponding length of each column)\n+  /// \\brief Return the number of rows (equal to each column's logical length)\n   int64_t num_rows() const { return num_rows_; }\n \n-  /// \\brief Determine if semantic contents of tables are exactly equal\n+  /// \\brief Determine if tables are equal\n+  ///\n+  /// Two tables can be equal only if they have equal schemas.\n+  /// However, they may be equal even if they have different chunkings.\n   bool Equals(const Table& other) const;\n \n  protected:\n@@ -269,18 +294,25 @@ class ARROW_EXPORT Table {\n   ARROW_DISALLOW_COPY_AND_ASSIGN(Table);\n };\n \n-/// \\brief Compute a sequence of record batches from a (possibly chunked) Table\n+/// \\brief Compute a stream of record batches from a (possibly chunked) Table\n+///\n+/// The conversion is zero-copy: each record batch is a view over a slice\n+/// of the table's columns.\n class ARROW_EXPORT TableBatchReader : public RecordBatchReader {\n  public:\n   ~TableBatchReader() override;\n \n-  /// \\brief Read batches with the maximum possible size\n+  /// \\brief Construct a TableBatchReader for the given table\n   explicit TableBatchReader(const Table& table);\n \n   std::shared_ptr<Schema> schema() const override;\n \n   Status ReadNext(std::shared_ptr<RecordBatch>* out) override;\n \n+  /// \\brief Set the desired maximum chunk size of record batches\n+  ///\n+  /// The actual chunk size of each record batch may be smaller, depending\n+  /// on actual chunking characteristics of each table column.\n   void set_chunksize(int64_t chunksize);\n \n  private:\n@@ -289,7 +321,10 @@ class ARROW_EXPORT TableBatchReader : public RecordBatchReader {\n };\n \n /// \\brief Construct table from multiple input tables.\n-/// \\return Status, fails if any schemas are different\n+///\n+/// The tables are concatenated vertically.  Therefore, all tables should\n+/// have the same schema.  Each column in the output table is the result\n+/// of concatenating the corresponding columns in all input tables.\n ARROW_EXPORT\n Status ConcatenateTables(const std::vector<std::shared_ptr<Table>>& tables,\n                          std::shared_ptr<Table>* table);\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex f187817b53..9694202b97 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -150,11 +150,12 @@ class ARROW_EXPORT DataType {\n   explicit DataType(Type::type id) : id_(id) {}\n   virtual ~DataType();\n \n-  // Return whether the types are equal\n-  //\n-  // Types that are logically convertible from one to another (e.g. List<UInt8>\n-  // and Binary) are NOT equal.\n+  /// \\brief Return whether the types are equal\n+  ///\n+  /// Types that are logically convertible from one to another (e.g. List<UInt8>\n+  /// and Binary) are NOT equal.\n   virtual bool Equals(const DataType& other) const;\n+  /// \\brief Return whether the types are equal\n   bool Equals(const std::shared_ptr<DataType>& other) const;\n \n   std::shared_ptr<Field> child(int i) const { return children_[i]; }\n@@ -174,6 +175,7 @@ class ARROW_EXPORT DataType {\n   /// \\since 0.7.0\n   virtual std::string name() const = 0;\n \n+  /// \\brief Return the type category\n   Type::type id() const { return id_; }\n \n  protected:\n@@ -248,12 +250,16 @@ class ARROW_EXPORT Field {\n         const std::shared_ptr<const KeyValueMetadata>& metadata = NULLPTR)\n       : name_(name), type_(type), nullable_(nullable), metadata_(metadata) {}\n \n+  /// \\brief Return the field's attached metadata\n   std::shared_ptr<const KeyValueMetadata> metadata() const { return metadata_; }\n \n+  /// \\brief Return whether the field has non-empty metadata\n   bool HasMetadata() const;\n \n+  /// \\brief Return a copy of this field with the given metadata attached to it\n   std::shared_ptr<Field> AddMetadata(\n       const std::shared_ptr<const KeyValueMetadata>& metadata) const;\n+  /// \\brief Return a copy of this field without any metadata attached to it\n   std::shared_ptr<Field> RemoveMetadata() const;\n \n   std::vector<std::shared_ptr<Field>> Flatten() const;\n@@ -261,10 +267,14 @@ class ARROW_EXPORT Field {\n   bool Equals(const Field& other) const;\n   bool Equals(const std::shared_ptr<Field>& other) const;\n \n+  /// \\brief Return a string representation ot the field\n   std::string ToString() const;\n \n+  /// \\brief Return the field name\n   const std::string& name() const { return name_; }\n+  /// \\brief Return the field data type\n   std::shared_ptr<DataType> type() const { return type_; }\n+  /// \\brief Return whether the field is nullable\n   bool nullable() const { return nullable_; }\n \n  private:\n@@ -896,6 +906,11 @@ dictionary(const std::shared_ptr<DataType>& index_type,\n \n /// @}\n \n+/// \\defgroup schema-factories Factory functions for fields and schemas\n+///\n+/// Factory functions for fields and schemas\n+/// @{\n+\n /// \\brief Create a Field instance\n ///\n /// \\param name the field name\n@@ -926,6 +941,8 @@ std::shared_ptr<Schema> schema(\n     std::vector<std::shared_ptr<Field>>&& fields,\n     const std::shared_ptr<const KeyValueMetadata>& metadata = NULLPTR);\n \n+/// @}\n+\n }  // namespace arrow\n \n #endif  // ARROW_TYPE_H\ndiff --git a/docs/source/cpp/api.rst b/docs/source/cpp/api.rst\nindex 02aa4d62e3..f6c0418b5c 100644\n--- a/docs/source/cpp/api.rst\n+++ b/docs/source/cpp/api.rst\n@@ -27,3 +27,4 @@ API Reference\n    api/datatype\n    api/array\n    api/builder\n+   api/table\ndiff --git a/docs/source/cpp/api/datatype.rst b/docs/source/cpp/api/datatype.rst\nindex ee7844277d..adfc6e4171 100644\n--- a/docs/source/cpp/api/datatype.rst\n+++ b/docs/source/cpp/api/datatype.rst\n@@ -133,3 +133,16 @@ Dictionary-encoded\n \n .. doxygenclass:: arrow::DictionaryType\n    :members:\n+\n+Fields and Schemas\n+==================\n+\n+.. doxygengroup:: schema-factories\n+   :project: arrow_cpp\n+   :content-only:\n+\n+.. doxygenclass:: arrow::Field\n+   :members:\n+\n+.. doxygenclass:: arrow::Schema\n+   :members:\ndiff --git a/docs/source/cpp/api/memory.rst b/docs/source/cpp/api/memory.rst\nindex 1dc8e706d3..c921229e6c 100644\n--- a/docs/source/cpp/api/memory.rst\n+++ b/docs/source/cpp/api/memory.rst\n@@ -33,16 +33,11 @@ Buffers\n    :project: arrow_cpp\n    :members:\n \n-.. doxygenclass:: arrow::BufferBuilder\n-   :project: arrow_cpp\n-   :members:\n-\n Memory Pools\n ------------\n \n .. doxygenfunction:: arrow::default_memory_pool\n    :project: arrow_cpp\n-   :outline:\n \n .. doxygenclass:: arrow::MemoryPool\n    :project: arrow_cpp\n@@ -55,3 +50,41 @@ Memory Pools\n .. doxygenclass:: arrow::ProxyMemoryPool\n    :project: arrow_cpp\n    :members:\n+\n+Allocation Functions\n+--------------------\n+\n+These functions allocate a buffer from a particular memory pool.\n+\n+.. doxygengroup:: buffer-allocation-functions\n+   :project: arrow_cpp\n+   :content-only:\n+\n+Slicing\n+-------\n+\n+.. doxygengroup:: buffer-slicing-functions\n+   :project: arrow_cpp\n+   :content-only:\n+\n+Buffer Builders\n+---------------\n+\n+.. doxygenclass:: arrow::BufferBuilder\n+   :project: arrow_cpp\n+   :members:\n+\n+.. doxygenclass:: arrow::TypedBufferBuilder\n+   :project: arrow_cpp\n+   :members:\n+\n+STL Integration\n+---------------\n+\n+.. doxygenclass:: arrow::stl_allocator\n+   :project: arrow_cpp\n+   :members:\n+\n+.. doxygenclass:: arrow::STLMemoryPool\n+   :project: arrow_cpp\n+   :members:\ndiff --git a/docs/source/cpp/api/table.rst b/docs/source/cpp/api/table.rst\nnew file mode 100644\nindex 0000000000..e8b4f8e066\n--- /dev/null\n+++ b/docs/source/cpp/api/table.rst\n@@ -0,0 +1,52 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========================\n+Two-dimensional Datasets\n+========================\n+\n+Columns\n+=======\n+\n+.. doxygenclass:: arrow::Column\n+   :project: arrow_cpp\n+   :members:\n+\n+Tables\n+======\n+\n+.. doxygenclass:: arrow::Table\n+   :project: arrow_cpp\n+   :members:\n+\n+.. doxygenfunction:: arrow::ConcatenateTables\n+   :project: arrow_cpp\n+\n+Record Batches\n+==============\n+\n+.. doxygenclass:: arrow::RecordBatch\n+   :project: arrow_cpp\n+   :members:\n+\n+.. doxygenclass:: arrow::RecordBatchReader\n+   :project: arrow_cpp\n+   :members:\n+\n+.. doxygenclass:: arrow::TableBatchReader\n+   :project: arrow_cpp\n+   :members:\ndiff --git a/docs/source/cpp/getting_started.rst b/docs/source/cpp/getting_started.rst\nindex 8201c2ded0..7c55b76912 100644\n--- a/docs/source/cpp/getting_started.rst\n+++ b/docs/source/cpp/getting_started.rst\n@@ -25,6 +25,7 @@ Getting Started\n \n    overview\n    conventions\n+   memory\n    arrays\n    datatypes\n-\n+   tables\ndiff --git a/docs/source/cpp/index.rst b/docs/source/cpp/index.rst\nindex 8c7ced0c2e..63290be9ec 100644\n--- a/docs/source/cpp/index.rst\n+++ b/docs/source/cpp/index.rst\n@@ -23,3 +23,9 @@ C++ Implementation\n \n    getting_started\n    api\n+\n+.. TODO add \"topics\" chapter\n+.. - nested arrays\n+.. - dictionary encoding\n+\n+.. TODO add \"building\" or \"development\" chapter\ndiff --git a/docs/source/cpp/memory.rst b/docs/source/cpp/memory.rst\nnew file mode 100644\nindex 0000000000..23b4725e4b\n--- /dev/null\n+++ b/docs/source/cpp/memory.rst\n@@ -0,0 +1,127 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+=================\n+Memory Management\n+=================\n+\n+Buffers\n+=======\n+\n+To avoid passing around raw data pointers with varying and non-obvious\n+lifetime rules, Arrow provides a generic abstraction called :class:`arrow::Buffer`.\n+A Buffer encapsulates a pointer and data size, and generally also ties its\n+lifetime to that of an underlying provider (in other words, a Buffer should\n+*always* point to valid memory till its destruction).  Buffers are untyped:\n+they simply denote a physical memory area regardless of its intended meaning\n+or interpretation.\n+\n+Buffers may be allocated by Arrow itself , or by third-party routines.\n+For example, it is possible to pass the data of a Python bytestring as a Arrow\n+buffer, keeping the Python object alive as necessary.\n+\n+In addition, buffers come in various flavours: mutable or not, resizable or\n+not.  Generally, you will hold a mutable buffer when building up a piece\n+of data, then it will be frozen as an immutable container such as an\n+:doc:`array <arrays>`.\n+\n+.. note::\n+   Some buffers may point to non-CPU memory, such as GPU-backed memory\n+   provided by a CUDA context.  If you're writing a GPU-aware application,\n+   you will need to be careful not to interpret a GPU memory pointer as\n+   a CPU-reachable pointer, or vice-versa.\n+\n+Accessing Buffer Memory\n+-----------------------\n+\n+Buffers provide fast access to the underlying memory using the\n+:func:`~arrow::Buffer::size` and :func:`~arrow::Buffer::data` accessors\n+(or :func:`~arrow::Buffer::mutable_data` for writable access to a mutable\n+buffer).\n+\n+Slicing\n+-------\n+\n+It is possible to make zero-copy slices of buffers, to obtain a buffer\n+referring to some contiguous subset of the underlying data.  This is done\n+by calling the :func:`arrow::SliceBuffer` and :func:`arrow::SliceMutableBuffer`\n+functions.\n+\n+Allocating a Buffer\n+-------------------\n+\n+You can allocate a buffer yourself by calling one of the\n+:func:`arrow::AllocateBuffer` or :func:`arrow::AllocateResizableBuffer`\n+overloads::\n+\n+   std::shared_ptr<arrow::Buffer> buffer;\n+\n+   if (!arrow::AllocateBuffer(4096, &buffer).ok()) {\n+      // ... handle allocation error\n+   }\n+   uint8_t* buffer_data = buffer->mutable_data();\n+   memcpy(buffer_data, \"hello world\", 11);\n+\n+Allocating a buffer this way ensures it is 64-bytes aligned and padded\n+as recommended by the :doc:`Arrow memory specification <../format/Layout>`.\n+\n+Building a Buffer\n+-----------------\n+\n+You can also allocate *and* build a Buffer incrementally, using the\n+:class:`arrow::BufferBuilder` API::\n+\n+   BufferBuilder builder;\n+   builder.Resize(11);\n+   builder.Append(\"hello \", 6);\n+   builder.Append(\"world\", 5);\n+\n+   std::shared_ptr<arrow::Buffer> buffer;\n+   if (!builder.Finish(&buffer).ok()) {\n+      // ... handle buffer allocation error\n+   }\n+\n+Memory Pools\n+============\n+\n+When allocating a Buffer using the Arrow C++ API, the buffer's underlying\n+memory is allocated by a :class:`arrow::MemoryPool` instance.  Usually this\n+will be the process-wide *default memory pool*, but many Arrow APIs allow\n+you to pass another MemoryPool instance for their internal allocations.\n+\n+Memory pools are used for large long-lived data such as array buffers.\n+Other data, such as small C++ objects and temporary workspaces, usually\n+goes through the regular C++ allocators.\n+\n+Default Memory Pool\n+-------------------\n+\n+Depending on how Arrow was compiled, the default memory pool may use the\n+standard C ``malloc`` allocator, or a `jemalloc <http://jemalloc.net/>`_ heap.\n+\n+STL Integration\n+---------------\n+\n+If you wish to use a Arrow memory pool to allocate the data of STL containers,\n+you can do so using the :class:`arrow::stl_allocator` wrapper.\n+\n+Conversely, you can also use a STL allocator to allocate Arrow memory,\n+using the :class:`arrow::STLMemoryPool` class.  However, this may be less\n+performant, as STL allocators don't provide a resizing operation.\ndiff --git a/docs/source/cpp/tables.rst b/docs/source/cpp/tables.rst\nnew file mode 100644\nindex 0000000000..d42f0c6c4f\n--- /dev/null\n+++ b/docs/source/cpp/tables.rst\n@@ -0,0 +1,87 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+========================\n+Two-dimensional Datasets\n+========================\n+\n+While arrays and chunked arrays represent a one-dimensional sequence of\n+homogenous values, data often comes in the form of two-dimensional sets of\n+heterogenous data (such as database tables, CSV files...).  Arrow provides\n+several abstractions to handle such data conveniently and efficiently.\n+\n+Fields\n+======\n+\n+Fields are used to denote the particular columns of a table (and also\n+the particular members of a nested data type such as :class:`arrow::StructType`).\n+A field, i.e. an instance of :class:`arrow::Field`, holds together a data\n+type, a field name and some optional metadata.\n+\n+The recommended way to create a field is to call the :func:`arrow::field`\n+factory function.\n+\n+Schemas\n+=======\n+\n+A schema describes the overall structure of a two-dimensional dataset such\n+as a table.  It holds a sequence of fields together with some optional\n+schema-wide metadata (in addition to per-field metadata).  The recommended\n+way to create a schema is to call one the :func:`arrow::schema` factory\n+function overloads::\n+\n+   // Create a schema describing datasets with two columns:\n+   // a int32 column \"A\" and a utf8-encoded string column \"B\"\n+   std::shared_ptr<arrow::Field> field_a, field_b;\n+   std::shared_ptr<arrow::Schema> schema;\n+\n+   field_a = arrow::field(\"A\", arrow::int32());\n+   field_b = arrow::field(\"B\", arrow::utf8());\n+   schema = arrow::schema({field_a, field_b});\n+\n+Columns\n+=======\n+\n+A :class:`arrow::Column` is a chunked array tied together with a field.\n+The field describes the column's name (for lookup in a larger dataset)\n+and its metadata.\n+\n+Tables\n+======\n+\n+A :class:`arrow::Table` is a two-dimensional dataset of a number of columns,\n+together with a schema.  The columns' names and types must match the schema.\n+Also, each column must have the same logical length in number of elements\n+(although each column can be chunked in a different way).\n+\n+Record Batches\n+==============\n+\n+A :class:`arrow::RecordBatch` is a two-dimensional dataset of a number of\n+contiguous arrays, each the same length.  Like a table, a record batch also\n+has a schema which must match its arrays' datatypes.\n+\n+Record batches are a convenient unit of work for various serialization\n+and computation functions, possibly incremental.\n+\n+A table can be streamed as an arbitrary number of record batches using\n+a :class:`arrow::TableBatchReader`.  Conversely, a logical sequence of\n+record batches can be assembled to form a table using one of the\n+:func:`arrow::Table::FromRecordBatches` factory function overloads.\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:58:31.980+0000",
                    "updated": "2018-12-12T16:58:31.980+0000",
                    "started": "2018-12-12T16:58:31.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174598",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3159: ARROW-3986: [C++] Document memory management and table APIs\nURL: https://github.com/apache/arrow/pull/3159#discussion_r241186663\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -0,0 +1,127 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+=================\n+Memory Management\n+=================\n+\n+Buffers\n+=======\n+\n+To avoid passing around raw data pointers with varying and non-obvious\n+lifetime rules, Arrow provides a generic abstraction called :class:`arrow::Buffer`.\n+A Buffer encapsulates a pointer and data size, and generally also ties its\n+lifetime to that of an underlying provider (in other words, a Buffer should\n+*always* point to valid memory till its destruction).  Buffers are untyped:\n+they simply denote a physical memory area regardless of its intended meaning\n+or interpretation.\n+\n+Buffers may be allocated by Arrow itself , or by third-party routines.\n+For example, it is possible to pass the data of a Python bytestring as a Arrow\n+buffer, keeping the Python object alive as necessary.\n+\n+In addition, buffers come in various flavours: mutable or not, resizable or\n+not.  Generally, you will hold a mutable buffer when building up a piece\n+of data, then it will be frozen as an immutable container such as an\n+:doc:`array <arrays>`.\n+\n+.. note::\n+   Some buffers may point to non-CPU memory, such as GPU-backed memory\n+   provided by a CUDA context.  If you're writing a GPU-aware application,\n+   you will need to be careful not to interpret a GPU memory pointer as\n+   a CPU-reachable pointer, or vice-versa.\n+\n+Accessing Buffer Memory\n+-----------------------\n+\n+Buffers provide fast access to the underlying memory using the\n+:func:`~arrow::Buffer::size` and :func:`~arrow::Buffer::data` accessors\n+(or :func:`~arrow::Buffer::mutable_data` for writable access to a mutable\n+buffer).\n+\n+Slicing\n+-------\n+\n+It is possible to make zero-copy slices of buffers, to obtain a buffer\n+referring to some contiguous subset of the underlying data.  This is done\n+by calling the :func:`arrow::SliceBuffer` and :func:`arrow::SliceMutableBuffer`\n+functions.\n+\n+Allocating a Buffer\n+-------------------\n+\n+You can allocate a buffer yourself by calling one of the\n+:func:`arrow::AllocateBuffer` or :func:`arrow::AllocateResizableBuffer`\n+overloads::\n+\n+   std::shared_ptr<arrow::Buffer> buffer;\n+\n+   if (!arrow::AllocateBuffer(4096, &buffer).ok()) {\n+      // ... handle allocation error\n+   }\n+   uint8_t* buffer_data = buffer->mutable_data();\n+   memcpy(buffer_data, \"hello world\", 11);\n+\n+Allocating a buffer this way ensures it is 64-bytes aligned and padded\n+as recommended by the :doc:`Arrow memory specification <../format/Layout>`.\n+\n+Building a Buffer\n+-----------------\n+\n+You can also allocate *and* build a Buffer incrementally, using the\n+:class:`arrow::BufferBuilder` API::\n+\n+   BufferBuilder builder;\n+   builder.Resize(11);\n+   builder.Append(\"hello \", 6);\n+   builder.Append(\"world\", 5);\n \n Review comment:\n   I don't remember where, but I read once that proper error handling hygiene is heavily influenced by documentation.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T21:12:13.749+0000",
                    "updated": "2018-12-12T21:12:13.749+0000",
                    "started": "2018-12-12T21:12:13.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174673",
                    "issueId": "13203430"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/worklog/174682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3159: ARROW-3986: [C++] Document memory management and table APIs\nURL: https://github.com/apache/arrow/pull/3159#discussion_r241197106\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -0,0 +1,127 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+=================\n+Memory Management\n+=================\n+\n+Buffers\n+=======\n+\n+To avoid passing around raw data pointers with varying and non-obvious\n+lifetime rules, Arrow provides a generic abstraction called :class:`arrow::Buffer`.\n+A Buffer encapsulates a pointer and data size, and generally also ties its\n+lifetime to that of an underlying provider (in other words, a Buffer should\n+*always* point to valid memory till its destruction).  Buffers are untyped:\n+they simply denote a physical memory area regardless of its intended meaning\n+or interpretation.\n+\n+Buffers may be allocated by Arrow itself , or by third-party routines.\n+For example, it is possible to pass the data of a Python bytestring as a Arrow\n+buffer, keeping the Python object alive as necessary.\n+\n+In addition, buffers come in various flavours: mutable or not, resizable or\n+not.  Generally, you will hold a mutable buffer when building up a piece\n+of data, then it will be frozen as an immutable container such as an\n+:doc:`array <arrays>`.\n+\n+.. note::\n+   Some buffers may point to non-CPU memory, such as GPU-backed memory\n+   provided by a CUDA context.  If you're writing a GPU-aware application,\n+   you will need to be careful not to interpret a GPU memory pointer as\n+   a CPU-reachable pointer, or vice-versa.\n+\n+Accessing Buffer Memory\n+-----------------------\n+\n+Buffers provide fast access to the underlying memory using the\n+:func:`~arrow::Buffer::size` and :func:`~arrow::Buffer::data` accessors\n+(or :func:`~arrow::Buffer::mutable_data` for writable access to a mutable\n+buffer).\n+\n+Slicing\n+-------\n+\n+It is possible to make zero-copy slices of buffers, to obtain a buffer\n+referring to some contiguous subset of the underlying data.  This is done\n+by calling the :func:`arrow::SliceBuffer` and :func:`arrow::SliceMutableBuffer`\n+functions.\n+\n+Allocating a Buffer\n+-------------------\n+\n+You can allocate a buffer yourself by calling one of the\n+:func:`arrow::AllocateBuffer` or :func:`arrow::AllocateResizableBuffer`\n+overloads::\n+\n+   std::shared_ptr<arrow::Buffer> buffer;\n+\n+   if (!arrow::AllocateBuffer(4096, &buffer).ok()) {\n+      // ... handle allocation error\n+   }\n+   uint8_t* buffer_data = buffer->mutable_data();\n+   memcpy(buffer_data, \"hello world\", 11);\n+\n+Allocating a buffer this way ensures it is 64-bytes aligned and padded\n+as recommended by the :doc:`Arrow memory specification <../format/Layout>`.\n+\n+Building a Buffer\n+-----------------\n+\n+You can also allocate *and* build a Buffer incrementally, using the\n+:class:`arrow::BufferBuilder` API::\n+\n+   BufferBuilder builder;\n+   builder.Resize(11);\n+   builder.Append(\"hello \", 6);\n+   builder.Append(\"world\", 5);\n \n Review comment:\n   It's definitely possible. It would also make this snippet less readable, so I'm a bit torn...\r\n   (not to mention that we don't know how the user wants to propagate errors, e.g. through the same Status codes or using other means...)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T21:46:37.911+0000",
                    "updated": "2018-12-12T21:46:37.911+0000",
                    "started": "2018-12-12T21:46:37.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174682",
                    "issueId": "13203430"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@167213e2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79fa3416[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1df83c81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@358ae1ac[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@128d28c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1713f0d6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bd3ca81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2936c5d6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5206033c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5a9bccea[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fc992fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@104efea0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 12 16:59:35 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-12T16:58:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3986/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-12-10T13:34:39.000+0000",
        "updated": "2018-12-12T21:46:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Now that the C++ docs are in the Sphinx doctree, we should write more comprehensive prose documentation for C++ programmers.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Write prose documentation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/comment/16714930",
                    "id": "16714930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I think it would be good to get at least some of this done by 0.12.0.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-12-10T15:33:07.424+0000",
                    "updated": "2018-12-10T15:33:07.424+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/comment/16714962",
                    "id": "16714962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yes, at least a page worth or so",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-10T15:48:35.601+0000",
                    "updated": "2018-12-10T15:48:35.601+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/comment/16714963",
                    "id": "16714963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "May want to wait for https://github.com/apache/arrow/pull/3078 to be merged",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-10T15:48:56.748+0000",
                    "updated": "2018-12-10T15:48:56.748+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/comment/16719200",
                    "id": "16719200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3159\n[https://github.com/apache/arrow/pull/3159]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T16:58:19.268+0000",
                    "updated": "2018-12-12T16:58:19.268+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203430/comment/16719202",
                    "id": "16719202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We can keep creating new JIRAs for each new documentation patch",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T16:59:35.920+0000",
                    "updated": "2018-12-12T16:59:35.920+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|s01ckg:",
        "customfield_12314139": null
    }
}