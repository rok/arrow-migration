{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13412504",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504",
    "key": "ARROW-14759",
    "fields": {
        "parent": {
            "id": "13405944",
            "key": "ARROW-14278",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13405944",
            "fields": {
                "summary": "[Doc] New Contributors Guide",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
            "name": "dragosmg",
            "key": "dragosmg",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
            },
            "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14759/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783875294\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n\nReview comment:\n       @jonkeane should we add more here about `make test`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T11:34:10.103+0000",
                    "updated": "2022-01-13T11:34:10.103+0000",
                    "started": "2022-01-13T11:34:10.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708239",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783880285\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      ** Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026 .. TODO _fill int the blanks_\n\nReview comment:\n       @jonkeane I'm looking for a sentence here to summarise what the `expect_.._roundtrip()` family of functions does. Do you have any suggestions?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T11:41:32.112+0000",
                    "updated": "2022-01-13T11:41:32.112+0000",
                    "started": "2022-01-13T11:41:32.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708241",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#issuecomment-1012060003\n\n\n   https://issues.apache.org/jira/browse/ARROW-14759\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T11:43:28.244+0000",
                    "updated": "2022-01-13T11:43:28.244+0000",
                    "started": "2022-01-13T11:43:28.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708243",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783895444\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n\nReview comment:\n       ```suggestion\r\n         \r\n         .. code-block:: R\r\n         \r\n            tests\r\n              \u251c\u2500\u2500 testthat      # unit test files live here\r\n              \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\r\n   ```\r\n   \r\n   This works well in the html version of the docs.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:04:12.437+0000",
                    "updated": "2022-01-13T12:04:12.437+0000",
                    "started": "2022-01-13T12:04:12.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708251",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783895769\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      ** Testing helpers**\n\nReview comment:\n       ```suggestion\r\n         **Testing helpers**\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:04:37.455+0000",
                    "updated": "2022-01-13T12:04:37.455+0000",
                    "started": "2022-01-13T12:04:37.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708252",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783898731\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      ** Testing helpers**\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:08:49.059+0000",
                    "updated": "2022-01-13T12:08:49.059+0000",
                    "started": "2022-01-13T12:08:49.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708253",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783898967\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n\nReview comment:\n       Cool. Many thanks. Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:09:01.916+0000",
                    "updated": "2022-01-13T12:09:01.916+0000",
                    "started": "2022-01-13T12:09:01.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708254",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783901311\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n\nReview comment:\n       ```suggestion\r\n         To run all tests in a package locally use this command in the R console:\r\n   \r\n         .. code-block:: R\r\n   \r\n            devtools::test()\r\n   \r\n         Alternatively, you can use this in the shell:\r\n   \r\n         .. code:: console\r\n   \r\n            $ make test\r\n   ```\r\n   \r\n   It is easier to find the necessary info in the html like so, with code being highlighted.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:12:13.154+0000",
                    "updated": "2022-01-13T12:12:13.154+0000",
                    "started": "2022-01-13T12:12:13.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708255",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783902392\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,83 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n\nReview comment:\n       ```suggestion\r\n         .. code-block:: R\r\n   \r\n            tests\r\n              \u251c\u2500\u2500 testthat      # unit test files live here\r\n              \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\r\n   ```\r\n   \r\n   Needs an empty line and an indentation ;)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:13:42.041+0000",
                    "updated": "2022-01-13T12:13:42.041+0000",
                    "started": "2022-01-13T12:13:42.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708256",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783905316\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,83 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      **Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026 .. TODO _fill int the blanks_\n+            .. TODO\n+            - Expect\n\nReview comment:\n       ```suggestion\r\n   \r\n           - for example, ``expect_altrep_roundtrip()`` compares the result\r\n             of a function ``fn`` run on a vector ``x`` with the result of the\r\n             same function run on the altrep version of ``x``. More generally,\r\n             ``expect_\u2026_roundtrip()`` functions do \u2026\r\n   \r\n           .. TODO _fill int the blanks_\r\n           .. TODO\r\n           \r\n           - Expect\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T12:17:58.058+0000",
                    "updated": "2022-01-13T12:17:58.058+0000",
                    "started": "2022-01-13T12:17:58.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708259",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783974449\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,83 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n\nReview comment:\n       Done!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T13:50:43.128+0000",
                    "updated": "2022-01-13T13:50:43.128+0000",
                    "started": "2022-01-13T13:50:43.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708302",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783976168\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T13:52:39.053+0000",
                    "updated": "2022-01-13T13:52:39.053+0000",
                    "started": "2022-01-13T13:52:39.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708304",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r783977113\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,83 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      **Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026 .. TODO _fill int the blanks_\n+            .. TODO\n+            - Expect\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T13:53:49.003+0000",
                    "updated": "2022-01-13T13:53:49.003+0000",
                    "started": "2022-01-13T13:53:49.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708308",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784117244\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally call\n+\n+      .. code-block:: R\n+\n+         devtools::test()\n+\n+      in the R console. Alternatively, you can use\n+\n+      .. code:: console\n+\n+         $ make test\n+\n+      in the shell.\n+\n+      You can run the tests in a single test file you have open with\n+\n+      .. code-block:: R\n+\n+         devtools::test_active_file()\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n\nReview comment:\n       I like the simplicity of these bullet points, so maybe this should be in a footnote or in a paragraph below this, but we should also include something like:\r\n   \r\n   If the new functionality is a user-facing or API change, you will almost certainly need to change tests \u2014 if no tests need to be changed it might mean the tests aren't right! If the new functionality is a refactor and no APIs are changing, there might not need to be test changes.\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n\nReview comment:\n       This also has a bit of configuration about what kind of output the tests will have, should we mention that as well? And possibly a note that this isn't a file that gets touched often too?\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n\nReview comment:\n       ```suggestion\r\n             \u251c\u2500\u2500 testthat      # test files live here\r\n   ```\r\n   \r\n   We mostly have unit tests, but also have integration tests (the pyarrow bridge), end to end tests, functional tests too. Doing ~unit~ means that no one will be confused (and I think \"test files\" is clear enough her on it's own)\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally call\n+\n+      .. code-block:: R\n+\n+         devtools::test()\n+\n+      in the R console. Alternatively, you can use\n+\n+      .. code:: console\n+\n+         $ make test\n+\n+      in the shell.\n+\n+      You can run the tests in a single test file you have open with\n+\n+      .. code-block:: R\n+\n+         devtools::test_active_file()\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n\nReview comment:\n       \ud83d\udcaf\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally call\n+\n+      .. code-block:: R\n+\n+         devtools::test()\n+\n+      in the R console. Alternatively, you can use\n+\n+      .. code:: console\n+\n+         $ make test\n+\n+      in the shell.\n+\n+      You can run the tests in a single test file you have open with\n+\n+      .. code-block:: R\n+\n+         devtools::test_active_file()\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      **Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026\n+\n+            .. TODO _fill in the blanks_\n+            .. TODO\n\nReview comment:\n       I presume these will be done in another commit? OR should we remove them / add Jiras for following up?\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally call\n+\n+      .. code-block:: R\n+\n+         devtools::test()\n+\n+      in the R console. Alternatively, you can use\n+\n+      .. code:: console\n+\n+         $ make test\n+\n+      in the shell.\n+\n+      You can run the tests in a single test file you have open with\n+\n+      .. code-block:: R\n+\n+         devtools::test_active_file()\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      **Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026\n+\n+            .. TODO _fill in the blanks_\n+            .. TODO\n+\n+            - Expect\n+      * ``skip_`` - skips a unit test - think of them as acceptable fails. Situations in which we might want to skip unit tests:\n+\n+        - ``skip_if_r_version()`` - this is a specific ``arrow`` skip. For example, we use this to skip a unit test when the R version is 3.5.0 and below (``skip_if_r_version(\u201c3.5.0\u201d)``). You will likely see it used when the functionality we are testing depends on features introduced after version 3.5.0 of R (such as the alternative representation of vectors, Altrep, introduced in R 3.5.0, but with significant additions in subsequent releases). As part of our CI workflow we test against different versions of R and this is where this feature comes in.\n+        - ``skip_if_not_available()`` - another specific {arrow} skip. Arrow (libarrow) has a series of additional features that can be switched on or off (but this needs to happen at build time). If a unit test depends on such a feature and this feature is not available (i.e. was not selected when libarrow was built) the test is skipped, as opposed to having a failed test.\n+        - ``skip_if_offline()`` - will not run tests that require an internet connection\n+        - ``skip_on_os()`` - for unit tests that are OS specific.\n+\n+      *Important*: Once the conditions for a ``skip_()`` statement is met, no other line of code in the same ``test_that()`` test block will get executed.\n\nReview comment:\n       ```suggestion\r\n         *Important*: Once the conditions for a ``skip_()`` statement is met, no other line of code in the same ``test_that()`` test block will get executed. If the skip is outside of a `test_that()` code block, it will skip the rest of the file.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:24:58.928+0000",
                    "updated": "2022-01-13T16:24:58.928+0000",
                    "started": "2022-01-13T16:24:58.927+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708455",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784121516\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n\nReview comment:\n       A link to https://arrow.apache.org/docs/r/articles/developing.html#common-developer-workflow-tasks (or copying that content) might be nice. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:27:02.206+0000",
                    "updated": "2022-01-13T16:27:02.206+0000",
                    "started": "2022-01-13T16:27:02.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708461",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784122983\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      ** Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026 .. TODO _fill int the blanks_\n\nReview comment:\n       Ah I didn't see these questions in my first run though (thanks Github!)\r\n   \r\n   It's kind of defining what roundtrip means, but I would say something like \"They take an input, convert it to some other format (e.g. arrow) and then convert it back, confirming that the values are the same.\" \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:28:31.061+0000",
                    "updated": "2022-01-13T16:28:31.061+0000",
                    "started": "2022-01-13T16:28:31.061+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708464",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784124285\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:29:59.321+0000",
                    "updated": "2022-01-13T16:29:59.321+0000",
                    "started": "2022-01-13T16:29:59.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708466",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784130282\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,81 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+      .. TODO make sure the format the dir tree below is formatted nicely (maybe as a code block)\n+      tests\n+        \u251c\u2500\u2500 testthat      # unit test files live here\n+        \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with `devtools::check()`)\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally use ``devtools::test()`` in the R console. Alternatively, you can use ``make test`` in the shell.\n+\n+      You can run the tests in a single test file you have open with ``devtools::test_active_file()``.\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      ** Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026 .. TODO _fill int the blanks_\n\nReview comment:\n       Cool. Thanks.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:36:53.043+0000",
                    "updated": "2022-01-13T16:36:53.043+0000",
                    "started": "2022-01-13T16:36:53.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708472",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784132315\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally call\n+\n+      .. code-block:: R\n+\n+         devtools::test()\n+\n+      in the R console. Alternatively, you can use\n+\n+      .. code:: console\n+\n+         $ make test\n+\n+      in the shell.\n+\n+      You can run the tests in a single test file you have open with\n+\n+      .. code-block:: R\n+\n+         devtools::test_active_file()\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      **Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026\n+\n+            .. TODO _fill in the blanks_\n+            .. TODO\n\nReview comment:\n       I will do them in another commit (incorporating your comments & suggestions)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:39:07.065+0000",
                    "updated": "2022-01-13T16:39:07.065+0000",
                    "started": "2022-01-13T16:39:07.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708480",
                    "issueId": "13412504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/worklog/708483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12140:\nURL: https://github.com/apache/arrow/pull/12140#discussion_r784133477\n\n\n\n##########\nFile path: docs/source/developers/guide/step_by_step/testing.rst\n##########\n@@ -62,29 +62,103 @@ In this section we outline steps needed for unit testing in Arrow.\n \n       If the tests start failing, try to recompile\n       PyArrow or C++.\n-      \n+\n       .. note::\n \n          **Recompiling Cython**\n \n          If you only make changes to `.py` files, you do not need to\n          recompile PyArrow. However, you should recompile it if you make\n          changes in `.pyx` or `.pxd` files.\n-        \n+\n          To do that run this command again:\n \n          .. code:: console\n \n             $ python setup.py build_ext --inplace\n \n       .. note::\n-\t\t\n+\n          **Recompiling C++**\n \n          Similarly, you will need to recompile the C++ code if you have\n          made changes to any C++ files. In this case,\n-         re-run the cmake commands again. \n+         re-run the cmake commands again.\n \n    .. tab:: R tests\n \n-      .. TODO\n+      We use `testthat <https://testthat.r-lib.org/index.html>`_ for unit testing in R. More specifically, we use the `3rd edition of testthat <https://testthat.r-lib.org/articles/third-edition.html>`_. On rare occasions we might want the behaviour of the 2nd edition of testthat, which is indicated by ``testthat::local_edition(2)``.\n+\n+      **Structure**\n+\n+      Expect the usual testthat folder structure:\n+\n+      .. code-block:: R\n+\n+         tests\n+          \u251c\u2500\u2500 testthat      # unit test files live here\n+          \u2514\u2500\u2500 testthat.R    # runs tests when R CMD check runs (e.g. with devtools::check())\n+\n+      Usually, most files in the ``R/`` sub-folder have a corresponding test file in ``tests/testthat``.\n+\n+      **Running tests**\n+\n+      To run all tests in a package locally call\n+\n+      .. code-block:: R\n+\n+         devtools::test()\n+\n+      in the R console. Alternatively, you can use\n+\n+      .. code:: console\n+\n+         $ make test\n+\n+      in the shell.\n+\n+      You can run the tests in a single test file you have open with\n+\n+      .. code-block:: R\n+\n+         devtools::test_active_file()\n+\n+      All tests are also run as part of our continuous integration (CI) pipelines.\n+\n+      **Good practice**\n+\n+      In general any change to source code needs to be accompanied by unit tests. All tests are expected to pass before a pull request is merged.\n+\n+      * Add functionality -> add unit tests\n+      * Modify functionality -> update unit tests\n+      * Solve a bug -> add unit test before solving it, which helps prove the bug and its fix\n+      * Performance improvements should be reflected in benchmarks (which are also tests)\n+      * An exception could be refactoring functionality that is fully covered by unit tests\n+\n+      **Testing helpers**\n+\n+      To complement the ``testthat`` functionality, the ``arrow`` R package has defined a series of specific utility functions (called helpers), such as:\n+\n+      * Expectations - these start with ``expect_`` and are used to compare objects\n+            - for example, ``expect_altrep_roundtrip()`` compares the result\n+            of a function ``fn`` run on a vector ``x`` with the result of the\n+            same function run on the altrep version of ``x``. More generally,\n+            expect_\u2026_roundtrip() functions do \u2026\n+\n+            .. TODO _fill in the blanks_\n+            .. TODO\n+\n+            - Expect\n+      * ``skip_`` - skips a unit test - think of them as acceptable fails. Situations in which we might want to skip unit tests:\n+\n+        - ``skip_if_r_version()`` - this is a specific ``arrow`` skip. For example, we use this to skip a unit test when the R version is 3.5.0 and below (``skip_if_r_version(\u201c3.5.0\u201d)``). You will likely see it used when the functionality we are testing depends on features introduced after version 3.5.0 of R (such as the alternative representation of vectors, Altrep, introduced in R 3.5.0, but with significant additions in subsequent releases). As part of our CI workflow we test against different versions of R and this is where this feature comes in.\n+        - ``skip_if_not_available()`` - another specific {arrow} skip. Arrow (libarrow) has a series of additional features that can be switched on or off (but this needs to happen at build time). If a unit test depends on such a feature and this feature is not available (i.e. was not selected when libarrow was built) the test is skipped, as opposed to having a failed test.\n+        - ``skip_if_offline()`` - will not run tests that require an internet connection\n+        - ``skip_on_os()`` - for unit tests that are OS specific.\n+\n+      *Important*: Once the conditions for a ``skip_()`` statement is met, no other line of code in the same ``test_that()`` test block will get executed.\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:40:27.547+0000",
                    "updated": "2022-01-13T16:40:27.547+0000",
                    "started": "2022-01-13T16:40:27.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708483",
                    "issueId": "13412504"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@28cb2057[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f958257[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73e0d8dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@50446bcc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71c6cae7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@37921747[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42c11758[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@31a81ec7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76fe6be7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@51f16250[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b40c4e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6aefaf68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 18 19:41:49 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-18T19:41:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14759/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-11-18T10:51:11.000+0000",
        "updated": "2022-01-19T21:11:34.000+0000",
        "timeoriginalestimate": null,
        "description": "*Testing (R)*\u00a0section of the Steps in making your first PR.\r\n\r\nSteps in making your first PR outline:\r\n * Set up (command line and Git)\r\n * Building Arrow package\r\n ** Building C++\r\n ** Building PyArrow\r\n ** Building R-Arrow\r\n * Finding good first issues\r\n * Solving the problem\r\n ** Python bindings\r\n ** R bindings\r\n * Testing\r\n * Life cycle of a Pull Request\r\n ** Making the PR\r\n ** Reviews and get the PR merge",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc] Steps in making your first PR - test in R",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412504/comment/17478154",
                    "id": "17478154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 12140\n[https://github.com/apache/arrow/pull/12140]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2022-01-18T19:41:49.107+0000",
                    "updated": "2022-01-18T19:41:49.107+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wuyg:",
        "customfield_12314139": null
    }
}