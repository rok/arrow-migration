{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13322493",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493",
    "key": "ARROW-9718",
    "fields": {
        "parent": {
            "id": "13320854",
            "key": "ARROW-9645",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13320854",
            "fields": {
                "summary": "[Python] Deprecate the legacy pyarrow.filesystem interface",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "filesystem",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9718/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/472007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche opened a new pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-18T15:28:49.216+0000",
                    "updated": "2020-08-18T15:28:49.216+0000",
                    "started": "2020-08-18T15:28:49.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "472007",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/472010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#issuecomment-675551251\n\n\n   https://issues.apache.org/jira/browse/ARROW-9718\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-18T15:33:40.736+0000",
                    "updated": "2020-08-18T15:33:40.736+0000",
                    "started": "2020-08-18T15:33:40.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "472010",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/477294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#discussion_r481241805\n\n\n\n##########\nFile path: python/pyarrow/fs.py\n##########\n@@ -79,15 +83,44 @@ def _ensure_filesystem(filesystem, use_mmap=False):\n             return PyFileSystem(FSSpecHandler(filesystem))\n \n     # map old filesystems to new ones\n-    from pyarrow.filesystem import LocalFileSystem as LegacyLocalFileSystem\n+    from pyarrow.filesystem import (\n+        FileSystem as LegacyFileSystem,\n+        LocalFileSystem as LegacyLocalFileSystem\n+    )\n \n     if isinstance(filesystem, LegacyLocalFileSystem):\n         return LocalFileSystem(use_mmap=use_mmap)\n     # TODO handle HDFS?\n+    if allow_legacy_filesystem and isinstance(filesystem, LegacyFileSystem):\n+        return filesystem\n \n     raise TypeError(\"Unrecognized filesystem: {}\".format(type(filesystem)))\n \n \n+def _resolve_filesystem_and_path(\n+    path, filesystem=None, allow_legacy_filesystem=False\n+):\n+    \"\"\"\n+    Return filesystem/path from path which could be an URI or a plain\n+    filesystem path.\n+    \"\"\"\n+    if not _is_path_like(path):\n+        if filesystem is not None:\n+            raise ValueError(\"filesystem passed but where is file-like, so\"\n\nReview comment:\n       \"where\"?\n\n##########\nFile path: python/pyarrow/parquet.py\n##########\n@@ -35,8 +35,9 @@\n                               FileMetaData, RowGroupMetaData,\n                               ColumnChunkMetaData,\n                               ParquetSchema, ColumnSchema)\n-from pyarrow.filesystem import (LocalFileSystem, _ensure_filesystem,\n-                                resolve_filesystem_and_path)\n+from pyarrow.filesystem import (\n\nReview comment:\n       Perhaps `import pyarrow.filesystem as legacyfs` would make the code easier to read below.\n\n##########\nFile path: python/pyarrow/parquet.py\n##########\n@@ -35,8 +35,9 @@\n                               FileMetaData, RowGroupMetaData,\n                               ColumnChunkMetaData,\n                               ParquetSchema, ColumnSchema)\n-from pyarrow.filesystem import (LocalFileSystem, _ensure_filesystem,\n-                                resolve_filesystem_and_path)\n+from pyarrow.filesystem import (\n\nReview comment:\n       These are legacy filesystem imports? Do we still need them?\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(uri).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.mark.pandas\n+def test_parquet_writer_filesystem_buffer_raises():\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    filesystem = fs.LocalFileSystem()\n+\n+    # Should raise ValueError when filesystem is passed with file-like object\n+    with pytest.raises(ValueError) as err_info:\n+        pq.ParquetWriter(\n+            pa.BufferOutputStream(), table.schema, filesystem=filesystem\n+        )\n+        expected_msg = (\"filesystem passed but where is file-like, so\"\n\nReview comment:\n       This must be lifted out of the `with` block.\n\n##########\nFile path: python/pyarrow/fs.py\n##########\n@@ -79,15 +83,44 @@ def _ensure_filesystem(filesystem, use_mmap=False):\n             return PyFileSystem(FSSpecHandler(filesystem))\n \n     # map old filesystems to new ones\n-    from pyarrow.filesystem import LocalFileSystem as LegacyLocalFileSystem\n+    from pyarrow.filesystem import (\n+        FileSystem as LegacyFileSystem,\n+        LocalFileSystem as LegacyLocalFileSystem\n+    )\n \n     if isinstance(filesystem, LegacyLocalFileSystem):\n         return LocalFileSystem(use_mmap=use_mmap)\n     # TODO handle HDFS?\n+    if allow_legacy_filesystem and isinstance(filesystem, LegacyFileSystem):\n+        return filesystem\n \n     raise TypeError(\"Unrecognized filesystem: {}\".format(type(filesystem)))\n \n \n+def _resolve_filesystem_and_path(\n+    path, filesystem=None, allow_legacy_filesystem=False\n+):\n+    \"\"\"\n+    Return filesystem/path from path which could be an URI or a plain\n+    filesystem path.\n+    \"\"\"\n+    if not _is_path_like(path):\n+        if filesystem is not None:\n+            raise ValueError(\"filesystem passed but where is file-like, so\"\n\nReview comment:\n       If it's the name of an argument, then put backquotes around it.\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(uri).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.mark.pandas\n+def test_parquet_writer_filesystem_buffer_raises():\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    filesystem = fs.LocalFileSystem()\n+\n+    # Should raise ValueError when filesystem is passed with file-like object\n+    with pytest.raises(ValueError) as err_info:\n+        pq.ParquetWriter(\n+            pa.BufferOutputStream(), table.schema, filesystem=filesystem\n+        )\n+        expected_msg = (\"filesystem passed but where is file-like, so\"\n\nReview comment:\n       Note that it may be simpler to use `pytest.raises(ValueError, match=\"...\")`\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -31,6 +31,7 @@\n from pyarrow.tests import util\n from pyarrow.util import guid\n from pyarrow.filesystem import LocalFileSystem, FileSystem\n+from pyarrow import fs\n\nReview comment:\n       Also `from pyarrow import filesystem as legacyfs`?\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n\nReview comment:\n       Should we also test `ParquetWriter(path=uri)`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T15:53:53.424+0000",
                    "updated": "2020-09-01T15:53:53.424+0000",
                    "started": "2020-09-01T15:53:53.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477294",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/478339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#discussion_r482761693\n\n\n\n##########\nFile path: python/pyarrow/fs.py\n##########\n@@ -79,15 +83,44 @@ def _ensure_filesystem(filesystem, use_mmap=False):\n             return PyFileSystem(FSSpecHandler(filesystem))\n \n     # map old filesystems to new ones\n-    from pyarrow.filesystem import LocalFileSystem as LegacyLocalFileSystem\n+    from pyarrow.filesystem import (\n+        FileSystem as LegacyFileSystem,\n+        LocalFileSystem as LegacyLocalFileSystem\n+    )\n \n     if isinstance(filesystem, LegacyLocalFileSystem):\n         return LocalFileSystem(use_mmap=use_mmap)\n     # TODO handle HDFS?\n+    if allow_legacy_filesystem and isinstance(filesystem, LegacyFileSystem):\n+        return filesystem\n \n     raise TypeError(\"Unrecognized filesystem: {}\".format(type(filesystem)))\n \n \n+def _resolve_filesystem_and_path(\n+    path, filesystem=None, allow_legacy_filesystem=False\n+):\n+    \"\"\"\n+    Return filesystem/path from path which could be an URI or a plain\n+    filesystem path.\n+    \"\"\"\n+    if not _is_path_like(path):\n+        if filesystem is not None:\n+            raise ValueError(\"filesystem passed but where is file-like, so\"\n\nReview comment:\n       Yeah, this was copy pasted from the implementation in `pyarrow.filesystem`, but agree it can be improved. Will update.\r\n   \r\n   The keyword name itself may vary depending on where this helper function is called, so will keep it on a general \"the specified path\" or so.\n\n##########\nFile path: python/pyarrow/parquet.py\n##########\n@@ -35,8 +35,9 @@\n                               FileMetaData, RowGroupMetaData,\n                               ColumnChunkMetaData,\n                               ParquetSchema, ColumnSchema)\n-from pyarrow.filesystem import (LocalFileSystem, _ensure_filesystem,\n-                                resolve_filesystem_and_path)\n+from pyarrow.filesystem import (\n\nReview comment:\n       Yes, we still need them because the full ParquetDataset/ParquetManifest (python) implementation here is based on the legacy filesystems. \r\n   But switched to use `legacyfs.` for the old ones, and plain imports for the new ones\r\n   \r\n   \n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -31,6 +31,7 @@\n from pyarrow.tests import util\n from pyarrow.util import guid\n from pyarrow.filesystem import LocalFileSystem, FileSystem\n+from pyarrow import fs\n\nReview comment:\n       Here I am going to leave it as is for now, because the old ones are still used a lot (would make the diff much larger, will keep that for a next PR, eg when actually deprecating)\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(uri).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.mark.pandas\n+def test_parquet_writer_filesystem_buffer_raises():\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    filesystem = fs.LocalFileSystem()\n+\n+    # Should raise ValueError when filesystem is passed with file-like object\n+    with pytest.raises(ValueError) as err_info:\n+        pq.ParquetWriter(\n+            pa.BufferOutputStream(), table.schema, filesystem=filesystem\n+        )\n+        expected_msg = (\"filesystem passed but where is file-like, so\"\n\nReview comment:\n       Yes, indeed, was copied from another test, but updated to use `match`\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n\nReview comment:\n       I added one, but it is segfaulting .. (maybe similar as ARROW-9814)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-03T07:47:22.023+0000",
                    "updated": "2020-09-03T07:47:22.023+0000",
                    "started": "2020-09-03T07:47:22.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478339",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/478346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#discussion_r482774031\n\n\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n\nReview comment:\n       I added one, but it is segfaulting locally .. (maybe similar as ARROW-9814)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-03T07:53:21.474+0000",
                    "updated": "2020-09-03T07:53:21.474+0000",
                    "started": "2020-09-03T07:53:21.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478346",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/478444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#discussion_r482862639\n\n\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n\nReview comment:\n       If you pass `-s` to pytest, you should be able to see the C++ crash message (if any).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-03T10:05:13.523+0000",
                    "updated": "2020-09-03T10:05:13.523+0000",
                    "started": "2020-09-03T10:05:13.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478444",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/478574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#discussion_r482989146\n\n\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n\nReview comment:\n       OK to merge it with the commented out test for now? (opened issue for it at https://issues.apache.org/jira/browse/ARROW-9906)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-03T13:45:30.736+0000",
                    "updated": "2020-09-03T13:45:30.736+0000",
                    "started": "2020-09-03T13:45:30.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478574",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/478609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#discussion_r483018640\n\n\n\n##########\nFile path: python/pyarrow/tests/test_parquet.py\n##########\n@@ -3510,6 +3511,75 @@ def test_parquet_file_pass_directory_instead_of_file(tempdir):\n         pq.ParquetFile(path)\n \n \n+@pytest.mark.pandas\n+@pytest.mark.parametrize(\"filesystem\", [\n+    None,\n+    LocalFileSystem.get_instance(),\n+    fs.LocalFileSystem(),\n+])\n+def test_parquet_writer_filesystem_local(tempdir, filesystem):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+    path = str(tempdir / 'data.parquet')\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=filesystem, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n+\n+    result = _read_table(path).to_pandas()\n+    tm.assert_frame_equal(result, df)\n+\n+\n+@pytest.fixture\n+def s3_example_fs(s3_connection, s3_server):\n+    from pyarrow.fs import FileSystem\n+\n+    host, port, access_key, secret_key = s3_connection\n+    uri = (\n+        \"s3://{}:{}@mybucket/data.parquet?scheme=http&endpoint_override={}:{}\"\n+        .format(access_key, secret_key, host, port)\n+    )\n+    fs, path = FileSystem.from_uri(uri)\n+\n+    fs.create_dir(\"mybucket\")\n+\n+    yield fs, uri, path\n+\n+\n+@pytest.mark.pandas\n+@pytest.mark.s3\n+def test_parquet_writer_filesystem_s3(s3_example_fs):\n+    df = _test_dataframe(100)\n+    table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+    fs, uri, path = s3_example_fs\n+\n+    with pq.ParquetWriter(\n+        path, table.schema, filesystem=fs, version='2.0'\n+    ) as writer:\n+        writer.write_table(table)\n\nReview comment:\n       Yes!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-03T14:25:19.668+0000",
                    "updated": "2020-09-03T14:25:19.668+0000",
                    "started": "2020-09-03T14:25:19.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478609",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/479667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#issuecomment-688376250\n\n\n   @jorisvandenbossche Do you want to merge this?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T14:55:56.397+0000",
                    "updated": "2020-09-07T14:55:56.397+0000",
                    "started": "2020-09-07T14:55:56.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479667",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/479747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991#issuecomment-688469658\n\n\n   Yep\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T18:39:57.509+0000",
                    "updated": "2020-09-07T18:39:57.509+0000",
                    "started": "2020-09-07T18:39:57.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479747",
                    "issueId": "13322493"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/worklog/479748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche closed pull request #7991:\nURL: https://github.com/apache/arrow/pull/7991\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T18:40:40.594+0000",
                    "updated": "2020-09-07T18:40:40.594+0000",
                    "started": "2020-09-07T18:40:40.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479748",
                    "issueId": "13322493"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6c1efc8f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@292cfadc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@396ae2ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@775e0525[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7308255c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@db9dc11[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63ab33fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@64db6587[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@564b8e85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@15d19909[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fdf4caa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1097e38b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 07 18:40:36 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-07T18:40:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9718/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-08-13T08:46:31.000+0000",
        "updated": "2020-09-07T18:40:52.000+0000",
        "timeoriginalestimate": null,
        "description": "The place internally where the \"legacy\" `pyarrow.filesystem` filesystems are still used is in the {{pyarrow.parquet}} module.\r\n\r\nIt is used in:\r\n\r\n- ParquetWriter\r\n- ParquetManifest/ParquetDataset\r\n- write_to_dataset\r\n\r\nFor {{ParquetWriter}}, we need to update this to work with the new filesystems (since ParquetWriter is not dataset related, and thus won't be deprecated).  \r\nFor {{ParquetManifest}}/{{ParquetDataset}}, it might not need to be updated, since those might get deprecated itself (to be discussed -> ARROW-9720), and when using the {{use_legacy_dataset=False}} option, it already uses the new datasets.  \r\nFor {{write_to_dataset}}, this might depend on how the writing capabilities of the dataset project evolve.\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Make pyarrow.parquet work with the new filesystem interfaces",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322493/comment/17191837",
                    "id": "17191837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Issue resolved by pull request 7991\n[https://github.com/apache/arrow/pull/7991]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-09-07T18:40:36.079+0000",
                    "updated": "2020-09-07T18:40:36.079+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hqg0:",
        "customfield_12314139": null
    }
}