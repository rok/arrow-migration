{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13320283",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283",
    "key": "ARROW-9603",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 27600,
            "total": 27600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27600,
            "total": 27600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9603/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 46,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/486129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219\n\n\n   Don't rely on nullability values of leaf nodes matching their parents.\r\n   \r\n   In general it feels like the WriteArrow code path in column_writer.cc could use some cleanup to remove duplicated code, but while ugly I think this fix works.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T09:21:46.817+0000",
                    "updated": "2020-09-18T09:21:46.817+0000",
                    "started": "2020-09-18T09:21:46.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486129",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/486131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-694759432\n\n\n   https://issues.apache.org/jira/browse/ARROW-9603\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T09:24:04.611+0000",
                    "updated": "2020-09-18T09:24:04.611+0000",
                    "started": "2020-09-18T09:24:04.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486131",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/486563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-695361437\n\n\n   There is a better solution.  I'll update the PR\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-19T22:14:22.044+0000",
                    "updated": "2020-09-19T22:14:22.044+0000",
                    "started": "2020-09-19T22:14:22.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486563",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/486597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-695392925\n\n\n   Nm, I think this is likely the only reasonable approach.  We might consider pushing bitmap building up the stack at some point.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-20T00:52:49.604+0000",
                    "updated": "2020-09-20T00:52:49.604+0000",
                    "started": "2020-09-20T00:52:49.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486597",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487090",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-696248994\n\n\n   I'm not sure I have enough mental context to review this PR carefully\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T17:11:07.877+0000",
                    "updated": "2020-09-21T17:11:07.877+0000",
                    "started": "2020-09-21T17:11:07.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487090",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-696287071\n\n\n   @wesm hmm, I think you might be the only once familiar with the write path.  But maybe @pitrou could give a more general review?  Anyone else you would suggest?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:21:50.984+0000",
                    "updated": "2020-09-21T18:21:50.984+0000",
                    "started": "2020-09-21T18:21:50.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487160",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492259759\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/path_internal.cc\n##########\n@@ -838,10 +841,13 @@ class PathBuilder {\n #undef NOT_IMPLEMENTED_VISIT\n   std::vector<PathInfo>& paths() { return paths_; }\n \n+  bool root_is_nullable() const { return root_is_nullable_; }\n\nReview comment:\n       this is unused now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:22:57.614+0000",
                    "updated": "2020-09-21T18:22:57.614+0000",
                    "started": "2020-09-21T18:22:57.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487162",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-696368598\n\n\n   @xhochy might be the only one. I can do my best to provide some comments\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T20:51:09.776+0000",
                    "updated": "2020-09-21T20:51:09.776+0000",
                    "started": "2020-09-21T20:51:09.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487259",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492407465\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2360,6 +2361,49 @@ TEST(ArrowReadWrite, SingleColumnNullableStruct) {\n       3);\n }\n \n+TEST(ArrowReadWrite, DisagreeingValidityBitmap) {}\n+\n+TEST(ArrowReadWrite, NestedRequiredField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32(), /*nullable=*/false);\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, 1, 2, 3, 4, 5, 7, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n+  CheckSimpleRoundtrip(\n+      ::arrow::Table::Make(\n+          ::arrow::schema({struct_field}),\n+          {std::make_shared<::arrow::ChunkedArray>(::arrow::MakeArray(struct_data))}),\n+      /*row_group_size=*/8);\n\nReview comment:\n       Seems like there might be a helper function opportunity if this pattern is repeated in other test functions\n\n##########\nFile path: cpp/src/parquet/arrow/writer.cc\n##########\n@@ -134,15 +134,14 @@ class ArrowColumnWriterV2 {\n               std::shared_ptr<Array> values_array =\n                   result.leaf_array->Slice(range.start, range.Size());\n \n-              return column_writer->WriteArrow(result.def_levels, result.rep_levels,\n-                                               result.def_rep_level_count, *values_array,\n-                                               ctx);\n+              PARQUET_CATCH_AND_RETURN(column_writer->WriteArrow(\n+                  result.def_levels, result.rep_levels, result.def_rep_level_count,\n+                  *values_array, ctx, level_builder->Nested(), result.leaf_is_nullable));\n\nReview comment:\n       Since `WriteArrow` returns Status, should we adopt that APIs must either return Status or throw an exception, but not both? (FWIW I regret that we chose to allow exceptions in the Parquet C++ project back in 2016)\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1130,37 +1185,60 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n     return values_to_write;\n   }\n \n+  void MaybeCalculateValidityBits(const int16_t* def_levels, int64_t batch_size,\n+                                  int64_t* out_values_to_write,\n+                                  int64_t* out_spaced_values_to_write,\n+                                  int64_t* null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      if (!level_info_.HasNullableValues()) {\n+        *out_values_to_write = batch_size;\n+        *out_spaced_values_to_write = batch_size;\n+        *null_count = 0;\n+      } else {\n+        for (int x = 0; x < batch_size; x++) {\n+          *out_values_to_write += def_levels[x] == level_info_.def_level ? 1 : 0;\n+          *out_spaced_values_to_write +=\n+              def_levels[x] >= level_info_.repeated_ancestor_def_level ? 1 : 0;\n+        }\n+        *null_count = *out_values_to_write - *out_spaced_values_to_write;\n+      }\n+      return;\n+    }\n+    // Shrink to fit possible causes another allocation, and would only be necessary\n+    // on the last batch.\n+    int64_t new_bitmap_size = BitUtil::BytesForBits(batch_size);\n+    if (new_bitmap_size != bits_buffer_->size()) {\n+      PARQUET_THROW_NOT_OK(\n+          bits_buffer_->Resize(new_bitmap_size, /*shrink_to_fit=*/false));\n+      bits_buffer_->ZeroPadding();\n+    }\n+    internal::ValidityBitmapInputOutput io;\n+    io.valid_bits = bits_buffer_->mutable_data();\n+    io.values_read_upper_bound = batch_size;\n+    internal::DefLevelsToBitmap(def_levels, batch_size, level_info_, &io);\n+    *out_values_to_write = io.values_read - io.null_count;\n+    *out_spaced_values_to_write = io.values_read;\n+    *null_count = io.null_count;\n+  }\n+\n+  std::shared_ptr<Array> MaybeUpdateArray(std::shared_ptr<Array> array,\n\nReview comment:\n       `MaybeReplaceValidity`?\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,11 +1046,29 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n+    // Leaf nulls are canonical when there is only a single null element and it is at the\n+    // leaf.\n+    bool leaf_nulls_are_canonical =\n+        (level_info_.def_level == level_info_.repeated_ancestor_def_level + 1) &&\n+        array_nullable;\n+    bool maybe_has_nulls = nested && !(leaf_is_not_nullable || leaf_nulls_are_canonical);\n\nReview comment:\n       The fact that `maybe_has_nulls` is false whenever `nested` is false seems odd\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1130,37 +1185,60 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n     return values_to_write;\n   }\n \n+  void MaybeCalculateValidityBits(const int16_t* def_levels, int64_t batch_size,\n+                                  int64_t* out_values_to_write,\n+                                  int64_t* out_spaced_values_to_write,\n+                                  int64_t* null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      if (!level_info_.HasNullableValues()) {\n+        *out_values_to_write = batch_size;\n+        *out_spaced_values_to_write = batch_size;\n+        *null_count = 0;\n+      } else {\n+        for (int x = 0; x < batch_size; x++) {\n+          *out_values_to_write += def_levels[x] == level_info_.def_level ? 1 : 0;\n+          *out_spaced_values_to_write +=\n+              def_levels[x] >= level_info_.repeated_ancestor_def_level ? 1 : 0;\n+        }\n+        *null_count = *out_values_to_write - *out_spaced_values_to_write;\n+      }\n+      return;\n+    }\n+    // Shrink to fit possible causes another allocation, and would only be necessary\n+    // on the last batch.\n+    int64_t new_bitmap_size = BitUtil::BytesForBits(batch_size);\n+    if (new_bitmap_size != bits_buffer_->size()) {\n+      PARQUET_THROW_NOT_OK(\n+          bits_buffer_->Resize(new_bitmap_size, /*shrink_to_fit=*/false));\n+      bits_buffer_->ZeroPadding();\n+    }\n+    internal::ValidityBitmapInputOutput io;\n+    io.valid_bits = bits_buffer_->mutable_data();\n+    io.values_read_upper_bound = batch_size;\n+    internal::DefLevelsToBitmap(def_levels, batch_size, level_info_, &io);\n+    *out_values_to_write = io.values_read - io.null_count;\n+    *out_spaced_values_to_write = io.values_read;\n+    *null_count = io.null_count;\n+  }\n+\n+  std::shared_ptr<Array> MaybeUpdateArray(std::shared_ptr<Array> array,\n+                                          int64_t new_null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      return array;\n+    }\n+    std::vector<std::shared_ptr<Buffer>> buffers = array->data()->buffers;\n+    buffers[0] = bits_buffer_;\n+    DCHECK(array->num_fields() == 0);\n+    return arrow::MakeArray(std::make_shared<ArrayData>(\n+        array->type(), array->length(), std::move(buffers), new_null_count));\n\nReview comment:\n       Might be useful someday to have a helper function to make an array copy with a particular buffer replaced, I seem to recall a JIRA issue about this\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2360,6 +2361,49 @@ TEST(ArrowReadWrite, SingleColumnNullableStruct) {\n       3);\n }\n \n+TEST(ArrowReadWrite, DisagreeingValidityBitmap) {}\n+\n+TEST(ArrowReadWrite, NestedRequiredField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32(), /*nullable=*/false);\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, 1, 2, 3, 4, 5, 7, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n+  CheckSimpleRoundtrip(\n+      ::arrow::Table::Make(\n+          ::arrow::schema({struct_field}),\n+          {std::make_shared<::arrow::ChunkedArray>(::arrow::MakeArray(struct_data))}),\n+      /*row_group_size=*/8);\n+}\n+\n+TEST(ArrowReadWrite, NestedNullableField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32());\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, null, 2, null, 4, 5, null, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n\nReview comment:\n       You can use `ArrayData::Make` for nicer syntax (don't have to write out `std::vector<std::shared_ptr<Buffer>>`)\n\n##########\nFile path: cpp/src/parquet/arrow/path_internal.cc\n##########\n@@ -871,6 +877,8 @@ class MultipathLevelBuilderImpl : public MultipathLevelBuilder {\n                      std::move(write_leaf_callback));\n   }\n \n+  bool Nested() const override { return !data_->child_data.empty(); }\n\nReview comment:\n       IsNested?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T02:24:06.330+0000",
                    "updated": "2020-09-22T02:24:06.330+0000",
                    "started": "2020-09-22T02:24:06.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487402",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492259759\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/path_internal.cc\n##########\n@@ -838,10 +841,13 @@ class PathBuilder {\n #undef NOT_IMPLEMENTED_VISIT\n   std::vector<PathInfo>& paths() { return paths_; }\n \n+  bool root_is_nullable() const { return root_is_nullable_; }\n\nReview comment:\n       this is unused now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:16:40.508+0000",
                    "updated": "2020-09-22T03:16:40.508+0000",
                    "started": "2020-09-22T03:16:40.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487564",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492407465\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2360,6 +2361,49 @@ TEST(ArrowReadWrite, SingleColumnNullableStruct) {\n       3);\n }\n \n+TEST(ArrowReadWrite, DisagreeingValidityBitmap) {}\n+\n+TEST(ArrowReadWrite, NestedRequiredField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32(), /*nullable=*/false);\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, 1, 2, 3, 4, 5, 7, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n+  CheckSimpleRoundtrip(\n+      ::arrow::Table::Make(\n+          ::arrow::schema({struct_field}),\n+          {std::make_shared<::arrow::ChunkedArray>(::arrow::MakeArray(struct_data))}),\n+      /*row_group_size=*/8);\n\nReview comment:\n       Seems like there might be a helper function opportunity if this pattern is repeated in other test functions\n\n##########\nFile path: cpp/src/parquet/arrow/writer.cc\n##########\n@@ -134,15 +134,14 @@ class ArrowColumnWriterV2 {\n               std::shared_ptr<Array> values_array =\n                   result.leaf_array->Slice(range.start, range.Size());\n \n-              return column_writer->WriteArrow(result.def_levels, result.rep_levels,\n-                                               result.def_rep_level_count, *values_array,\n-                                               ctx);\n+              PARQUET_CATCH_AND_RETURN(column_writer->WriteArrow(\n+                  result.def_levels, result.rep_levels, result.def_rep_level_count,\n+                  *values_array, ctx, level_builder->Nested(), result.leaf_is_nullable));\n\nReview comment:\n       Since `WriteArrow` returns Status, should we adopt that APIs must either return Status or throw an exception, but not both? (FWIW I regret that we chose to allow exceptions in the Parquet C++ project back in 2016)\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1130,37 +1185,60 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n     return values_to_write;\n   }\n \n+  void MaybeCalculateValidityBits(const int16_t* def_levels, int64_t batch_size,\n+                                  int64_t* out_values_to_write,\n+                                  int64_t* out_spaced_values_to_write,\n+                                  int64_t* null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      if (!level_info_.HasNullableValues()) {\n+        *out_values_to_write = batch_size;\n+        *out_spaced_values_to_write = batch_size;\n+        *null_count = 0;\n+      } else {\n+        for (int x = 0; x < batch_size; x++) {\n+          *out_values_to_write += def_levels[x] == level_info_.def_level ? 1 : 0;\n+          *out_spaced_values_to_write +=\n+              def_levels[x] >= level_info_.repeated_ancestor_def_level ? 1 : 0;\n+        }\n+        *null_count = *out_values_to_write - *out_spaced_values_to_write;\n+      }\n+      return;\n+    }\n+    // Shrink to fit possible causes another allocation, and would only be necessary\n+    // on the last batch.\n+    int64_t new_bitmap_size = BitUtil::BytesForBits(batch_size);\n+    if (new_bitmap_size != bits_buffer_->size()) {\n+      PARQUET_THROW_NOT_OK(\n+          bits_buffer_->Resize(new_bitmap_size, /*shrink_to_fit=*/false));\n+      bits_buffer_->ZeroPadding();\n+    }\n+    internal::ValidityBitmapInputOutput io;\n+    io.valid_bits = bits_buffer_->mutable_data();\n+    io.values_read_upper_bound = batch_size;\n+    internal::DefLevelsToBitmap(def_levels, batch_size, level_info_, &io);\n+    *out_values_to_write = io.values_read - io.null_count;\n+    *out_spaced_values_to_write = io.values_read;\n+    *null_count = io.null_count;\n+  }\n+\n+  std::shared_ptr<Array> MaybeUpdateArray(std::shared_ptr<Array> array,\n\nReview comment:\n       `MaybeReplaceValidity`?\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,11 +1046,29 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n+    // Leaf nulls are canonical when there is only a single null element and it is at the\n+    // leaf.\n+    bool leaf_nulls_are_canonical =\n+        (level_info_.def_level == level_info_.repeated_ancestor_def_level + 1) &&\n+        array_nullable;\n+    bool maybe_has_nulls = nested && !(leaf_is_not_nullable || leaf_nulls_are_canonical);\n\nReview comment:\n       The fact that `maybe_has_nulls` is false whenever `nested` is false seems odd\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1130,37 +1185,60 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n     return values_to_write;\n   }\n \n+  void MaybeCalculateValidityBits(const int16_t* def_levels, int64_t batch_size,\n+                                  int64_t* out_values_to_write,\n+                                  int64_t* out_spaced_values_to_write,\n+                                  int64_t* null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      if (!level_info_.HasNullableValues()) {\n+        *out_values_to_write = batch_size;\n+        *out_spaced_values_to_write = batch_size;\n+        *null_count = 0;\n+      } else {\n+        for (int x = 0; x < batch_size; x++) {\n+          *out_values_to_write += def_levels[x] == level_info_.def_level ? 1 : 0;\n+          *out_spaced_values_to_write +=\n+              def_levels[x] >= level_info_.repeated_ancestor_def_level ? 1 : 0;\n+        }\n+        *null_count = *out_values_to_write - *out_spaced_values_to_write;\n+      }\n+      return;\n+    }\n+    // Shrink to fit possible causes another allocation, and would only be necessary\n+    // on the last batch.\n+    int64_t new_bitmap_size = BitUtil::BytesForBits(batch_size);\n+    if (new_bitmap_size != bits_buffer_->size()) {\n+      PARQUET_THROW_NOT_OK(\n+          bits_buffer_->Resize(new_bitmap_size, /*shrink_to_fit=*/false));\n+      bits_buffer_->ZeroPadding();\n+    }\n+    internal::ValidityBitmapInputOutput io;\n+    io.valid_bits = bits_buffer_->mutable_data();\n+    io.values_read_upper_bound = batch_size;\n+    internal::DefLevelsToBitmap(def_levels, batch_size, level_info_, &io);\n+    *out_values_to_write = io.values_read - io.null_count;\n+    *out_spaced_values_to_write = io.values_read;\n+    *null_count = io.null_count;\n+  }\n+\n+  std::shared_ptr<Array> MaybeUpdateArray(std::shared_ptr<Array> array,\n+                                          int64_t new_null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      return array;\n+    }\n+    std::vector<std::shared_ptr<Buffer>> buffers = array->data()->buffers;\n+    buffers[0] = bits_buffer_;\n+    DCHECK(array->num_fields() == 0);\n+    return arrow::MakeArray(std::make_shared<ArrayData>(\n+        array->type(), array->length(), std::move(buffers), new_null_count));\n\nReview comment:\n       Might be useful someday to have a helper function to make an array copy with a particular buffer replaced, I seem to recall a JIRA issue about this\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2360,6 +2361,49 @@ TEST(ArrowReadWrite, SingleColumnNullableStruct) {\n       3);\n }\n \n+TEST(ArrowReadWrite, DisagreeingValidityBitmap) {}\n+\n+TEST(ArrowReadWrite, NestedRequiredField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32(), /*nullable=*/false);\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, 1, 2, 3, 4, 5, 7, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n+  CheckSimpleRoundtrip(\n+      ::arrow::Table::Make(\n+          ::arrow::schema({struct_field}),\n+          {std::make_shared<::arrow::ChunkedArray>(::arrow::MakeArray(struct_data))}),\n+      /*row_group_size=*/8);\n+}\n+\n+TEST(ArrowReadWrite, NestedNullableField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32());\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, null, 2, null, 4, 5, null, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n\nReview comment:\n       You can use `ArrayData::Make` for nicer syntax (don't have to write out `std::vector<std::shared_ptr<Buffer>>`)\n\n##########\nFile path: cpp/src/parquet/arrow/path_internal.cc\n##########\n@@ -871,6 +877,8 @@ class MultipathLevelBuilderImpl : public MultipathLevelBuilder {\n                      std::move(write_leaf_callback));\n   }\n \n+  bool Nested() const override { return !data_->child_data.empty(); }\n\nReview comment:\n       IsNested?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:27:57.130+0000",
                    "updated": "2020-09-22T03:27:57.130+0000",
                    "started": "2020-09-22T03:27:57.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487693",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-696287071\n\n\n   @wesm hmm, I think you might be the only once familiar with the write path.  But maybe @pitrou could give a more general review?  Anyone else you would suggest?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:37:53.060+0000",
                    "updated": "2020-09-22T03:37:53.060+0000",
                    "started": "2020-09-22T03:37:53.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487815",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-696248994\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:40:48.542+0000",
                    "updated": "2020-09-22T03:40:48.542+0000",
                    "started": "2020-09-22T03:40:48.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487860",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492461706\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2360,6 +2361,49 @@ TEST(ArrowReadWrite, SingleColumnNullableStruct) {\n       3);\n }\n \n+TEST(ArrowReadWrite, DisagreeingValidityBitmap) {}\n+\n+TEST(ArrowReadWrite, NestedRequiredField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32(), /*nullable=*/false);\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, 1, 2, 3, 4, 5, 7, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n+  CheckSimpleRoundtrip(\n+      ::arrow::Table::Make(\n+          ::arrow::schema({struct_field}),\n+          {std::make_shared<::arrow::ChunkedArray>(::arrow::MakeArray(struct_data))}),\n+      /*row_group_size=*/8);\n+}\n+\n+TEST(ArrowReadWrite, NestedNullableField) {\n+  auto int_field = ::arrow::field(\"int_array\", ::arrow::int32());\n+  auto int_array = ::arrow::ArrayFromJSON(int_field->type(), \"[0, null, 2, null, 4, 5, null, 8]\");\n+  auto struct_field =\n+      ::arrow::field(\"root\", ::arrow::struct_({int_field}), /*nullable=*/true);\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  ASSERT_OK_AND_ASSIGN(validity_bitmap, ::arrow::AllocateBitmap(8));\n+  validity_bitmap->mutable_data()[0] = 0xCC;\n+\n+  auto struct_data = std::make_shared<ArrayData>(\n+      struct_field->type(), /*length=*/8,\n+      std::vector<std::shared_ptr<Buffer>>{validity_bitmap},\n+      std::vector<std::shared_ptr<ArrayData>>{int_array->data()});\n\nReview comment:\n       thanks, I somehow keep forgetting this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:57:52.125+0000",
                    "updated": "2020-09-22T03:57:52.125+0000",
                    "started": "2020-09-22T03:57:52.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487927",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492465434\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/path_internal.cc\n##########\n@@ -871,6 +877,8 @@ class MultipathLevelBuilderImpl : public MultipathLevelBuilder {\n                      std::move(write_leaf_callback));\n   }\n \n+  bool Nested() const override { return !data_->child_data.empty(); }\n\nReview comment:\n       done.\n\n##########\nFile path: cpp/src/parquet/arrow/writer.cc\n##########\n@@ -134,15 +134,14 @@ class ArrowColumnWriterV2 {\n               std::shared_ptr<Array> values_array =\n                   result.leaf_array->Slice(range.start, range.Size());\n \n-              return column_writer->WriteArrow(result.def_levels, result.rep_levels,\n-                                               result.def_rep_level_count, *values_array,\n-                                               ctx);\n+              PARQUET_CATCH_AND_RETURN(column_writer->WriteArrow(\n+                  result.def_levels, result.rep_levels, result.def_rep_level_count,\n+                  *values_array, ctx, level_builder->Nested(), result.leaf_is_nullable));\n\nReview comment:\n       done.  I suppose it is too late to revisit this?  Perhaps provide status/result returning  methods in one PR and then deprecated exception throwing ones?\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1130,37 +1185,60 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n     return values_to_write;\n   }\n \n+  void MaybeCalculateValidityBits(const int16_t* def_levels, int64_t batch_size,\n+                                  int64_t* out_values_to_write,\n+                                  int64_t* out_spaced_values_to_write,\n+                                  int64_t* null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      if (!level_info_.HasNullableValues()) {\n+        *out_values_to_write = batch_size;\n+        *out_spaced_values_to_write = batch_size;\n+        *null_count = 0;\n+      } else {\n+        for (int x = 0; x < batch_size; x++) {\n+          *out_values_to_write += def_levels[x] == level_info_.def_level ? 1 : 0;\n+          *out_spaced_values_to_write +=\n+              def_levels[x] >= level_info_.repeated_ancestor_def_level ? 1 : 0;\n+        }\n+        *null_count = *out_values_to_write - *out_spaced_values_to_write;\n+      }\n+      return;\n+    }\n+    // Shrink to fit possible causes another allocation, and would only be necessary\n+    // on the last batch.\n+    int64_t new_bitmap_size = BitUtil::BytesForBits(batch_size);\n+    if (new_bitmap_size != bits_buffer_->size()) {\n+      PARQUET_THROW_NOT_OK(\n+          bits_buffer_->Resize(new_bitmap_size, /*shrink_to_fit=*/false));\n+      bits_buffer_->ZeroPadding();\n+    }\n+    internal::ValidityBitmapInputOutput io;\n+    io.valid_bits = bits_buffer_->mutable_data();\n+    io.values_read_upper_bound = batch_size;\n+    internal::DefLevelsToBitmap(def_levels, batch_size, level_info_, &io);\n+    *out_values_to_write = io.values_read - io.null_count;\n+    *out_spaced_values_to_write = io.values_read;\n+    *null_count = io.null_count;\n+  }\n+\n+  std::shared_ptr<Array> MaybeUpdateArray(std::shared_ptr<Array> array,\n\nReview comment:\n       done.\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1130,37 +1185,60 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n     return values_to_write;\n   }\n \n+  void MaybeCalculateValidityBits(const int16_t* def_levels, int64_t batch_size,\n+                                  int64_t* out_values_to_write,\n+                                  int64_t* out_spaced_values_to_write,\n+                                  int64_t* null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      if (!level_info_.HasNullableValues()) {\n+        *out_values_to_write = batch_size;\n+        *out_spaced_values_to_write = batch_size;\n+        *null_count = 0;\n+      } else {\n+        for (int x = 0; x < batch_size; x++) {\n+          *out_values_to_write += def_levels[x] == level_info_.def_level ? 1 : 0;\n+          *out_spaced_values_to_write +=\n+              def_levels[x] >= level_info_.repeated_ancestor_def_level ? 1 : 0;\n+        }\n+        *null_count = *out_values_to_write - *out_spaced_values_to_write;\n+      }\n+      return;\n+    }\n+    // Shrink to fit possible causes another allocation, and would only be necessary\n+    // on the last batch.\n+    int64_t new_bitmap_size = BitUtil::BytesForBits(batch_size);\n+    if (new_bitmap_size != bits_buffer_->size()) {\n+      PARQUET_THROW_NOT_OK(\n+          bits_buffer_->Resize(new_bitmap_size, /*shrink_to_fit=*/false));\n+      bits_buffer_->ZeroPadding();\n+    }\n+    internal::ValidityBitmapInputOutput io;\n+    io.valid_bits = bits_buffer_->mutable_data();\n+    io.values_read_upper_bound = batch_size;\n+    internal::DefLevelsToBitmap(def_levels, batch_size, level_info_, &io);\n+    *out_values_to_write = io.values_read - io.null_count;\n+    *out_spaced_values_to_write = io.values_read;\n+    *null_count = io.null_count;\n+  }\n+\n+  std::shared_ptr<Array> MaybeUpdateArray(std::shared_ptr<Array> array,\n+                                          int64_t new_null_count) {\n+    if (bits_buffer_ == nullptr) {\n+      return array;\n+    }\n+    std::vector<std::shared_ptr<Buffer>> buffers = array->data()->buffers;\n+    buffers[0] = bits_buffer_;\n+    DCHECK(array->num_fields() == 0);\n+    return arrow::MakeArray(std::make_shared<ArrayData>(\n+        array->type(), array->length(), std::move(buffers), new_null_count));\n\nReview comment:\n       Agree, looks like:https://issues.apache.org/jira/browse/ARROW-7071  might be it?\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,11 +1046,29 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n+    // Leaf nulls are canonical when there is only a single null element and it is at the\n+    // leaf.\n+    bool leaf_nulls_are_canonical =\n+        (level_info_.def_level == level_info_.repeated_ancestor_def_level + 1) &&\n+        array_nullable;\n+    bool maybe_has_nulls = nested && !(leaf_is_not_nullable || leaf_nulls_are_canonical);\n\nReview comment:\n       yeah, I renamed maybe_has_nulls to maybe_has_parent_nulls which is hopefully clearer?  Happy to pick another name that makes sense.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T04:33:22.820+0000",
                    "updated": "2020-09-22T04:33:22.820+0000",
                    "started": "2020-09-22T04:33:22.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487932",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/487933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#issuecomment-696503073\n\n\n   @xhochy did you want to review?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T04:33:45.918+0000",
                    "updated": "2020-09-22T04:33:45.918+0000",
                    "started": "2020-09-22T04:33:45.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487933",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/488062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492558115\n\n\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,12 +1046,33 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n+    // Leaf nulls are canonical when there is only a single null element and it is at the\n\nReview comment:\n       \"single nullable element\" perhaps?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T08:27:01.211+0000",
                    "updated": "2020-09-22T08:27:01.211+0000",
                    "started": "2020-09-22T08:27:01.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488062",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/488063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492558836\n\n\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,12 +1046,33 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n+    // Leaf nulls are canonical when there is only a single null element and it is at the\n+    // leaf.\n+    bool leaf_nulls_are_canonical =\n+        (level_info_.def_level == level_info_.repeated_ancestor_def_level + 1) &&\n+        array_nullable;\n\nReview comment:\n       `array_nullable` refers to the parent, the root, the leaf? This is difficult to follow.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T08:28:12.966+0000",
                    "updated": "2020-09-22T08:28:12.966+0000",
                    "started": "2020-09-22T08:28:12.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488063",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/488064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492559005\n\n\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,12 +1046,33 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n\nReview comment:\n       Maybe avoid double negatives?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T08:28:26.079+0000",
                    "updated": "2020-09-22T08:28:26.079+0000",
                    "started": "2020-09-22T08:28:26.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488064",
                    "issueId": "13320283"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/worklog/488065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8219:\nURL: https://github.com/apache/arrow/pull/8219#discussion_r492559517\n\n\n\n##########\nFile path: cpp/src/parquet/column_writer.cc\n##########\n@@ -1009,12 +1046,33 @@ class TypedColumnWriterImpl : public ColumnWriterImpl, public TypedColumnWriter<\n \n   Status WriteArrow(const int16_t* def_levels, const int16_t* rep_levels,\n                     int64_t num_levels, const ::arrow::Array& array,\n-                    ArrowWriteContext* ctx) override {\n+                    ArrowWriteContext* ctx, bool nested, bool array_nullable) override {\n+    BEGIN_PARQUET_CATCH_EXCEPTIONS\n+    bool leaf_is_not_nullable = !level_info_.HasNullableValues();\n+    // Leaf nulls are canonical when there is only a single null element and it is at the\n+    // leaf.\n+    bool leaf_nulls_are_canonical =\n+        (level_info_.def_level == level_info_.repeated_ancestor_def_level + 1) &&\n+        array_nullable;\n\nReview comment:\n       Perhaps rename to `parent_nullable` or `root_nullable` or...\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T08:29:20.174+0000",
                    "updated": "2020-09-22T08:29:20.174+0000",
                    "started": "2020-09-22T08:29:20.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488065",
                    "issueId": "13320283"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 27600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@77654[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@236b69d3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d4d3a9e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1590f315[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39a47412[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@75b5cd81[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71a88063[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6332dd18[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@792c2188[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22ae22e9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17300547[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@629fd0a4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 24 09:44:23 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-24T09:44:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9603/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-07-30T22:29:46.000+0000",
        "updated": "2020-09-25T13:44:46.000+0000",
        "timeoriginalestimate": null,
        "description": "parquet/column_writer.cc WriteArrow implementations at certain points checks null counts/required data and passes through the null bitmap for encoding.\u00a0 This only works for nested data types if the if the null slot on a parent implies a null slot on the leaf.\u00a0 This relationship is not required by the specifications.\r\n\r\n\u00a0\r\n\r\nMost paths for creating arrays follow this pattern so it would be esoteric to hit this bug, but we should still fix it.\r\n\r\n\u00a0\r\n\r\nAll branches that rely on reading nullness should generate a new null bitmap based on definition levels if the column is nested, and decisions should be based off of that.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Write Arrow relies on unspecified behavior for nested types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320283/comment/17201409",
                    "id": "17201409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8219\n[https://github.com/apache/arrow/pull/8219]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-09-24T09:44:23.814+0000",
                    "updated": "2020-09-24T09:44:23.814+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hcxc:",
        "customfield_12314139": null
    }
}