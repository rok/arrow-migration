{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13379940",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940",
    "key": "ARROW-12851",
    "fields": {
        "parent": {
            "id": "13286806",
            "key": "ARROW-7905",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13286806",
            "fields": {
                "summary": "[Go][Parquet] Port the C++ Parquet implementation to Go",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                    "name": "Minor",
                    "id": "4"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12619237",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619237",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13389481",
                    "key": "ARROW-13330",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481",
                    "fields": {
                        "summary": "[Go][Parquet] Add Encoding Package Part 2",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 53400,
            "total": 53400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 53400,
            "total": 53400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12851/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 89,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/600892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379\n\n\n   Adding the implementation of encoding types of data for Parquet including Plain, RLE, Dictionary, Delta Byte Array, Delta Packing types. It also includes hashing implementation for more efficient hash tables than using go's std map implementation as shown in the benchmarks included in the test files which do benchmark comparisons between a go-map based implementation and the hash table implementation that I ported from the C++ \r\n   \r\n   In addition, while adding some test cases I discovered that apparently the -force-vector-width=32 argument on the asm generation was causing segfaults on the encoding tests, so let's let LLVM make it's own choice about the vector width and interleaving.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-22T19:21:20.665+0000",
                    "updated": "2021-05-22T19:21:20.665+0000",
                    "started": "2021-05-22T19:21:20.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600892",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/600893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#issuecomment-846452439\n\n\n   https://issues.apache.org/jira/browse/ARROW-12851\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-22T19:21:34.409+0000",
                    "updated": "2021-05-22T19:21:34.409+0000",
                    "started": "2021-05-22T19:21:34.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600893",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/600894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#issuecomment-846452513\n\n\n   @emkornfield @sbinet @nickpoorman And here we go with the next chunk! time for the implementation of the encoding types, we're in the home stretch now, i think i've only got about 2 or 3 more of these: metadata, file reading/writing, and integration with arrow\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-22T19:22:17.646+0000",
                    "updated": "2021-05-22T19:22:17.646+0000",
                    "started": "2021-05-22T19:22:17.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600894",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/601509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#issuecomment-847495023\n\n\n   @zeroshade apologies this is likely going to be another rough week in terms of availability to review.  If you don't hear anything by next tuesday please ping again.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T03:09:11.106+0000",
                    "updated": "2021-05-25T03:09:11.106+0000",
                    "started": "2021-05-25T03:09:11.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601509",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/604632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#issuecomment-852297082\n\n\n   @emkornfield Pinging for tuesday update :smiley: \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-01T17:13:52.415+0000",
                    "updated": "2021-06-01T17:13:52.415+0000",
                    "started": "2021-06-01T17:13:52.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "604632",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#issuecomment-853129506\n\n\n   Starting to take a look.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T15:34:19.700+0000",
                    "updated": "2021-06-02T15:34:19.700+0000",
                    "started": "2021-06-02T15:34:19.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605276",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644087064\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_decoder.go\n##########\n@@ -0,0 +1,98 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// PlainBooleanDecoder is for the Plain Encoding type, there is no\n+// dictionary decoding for bools.\n+type PlainBooleanDecoder struct {\n+\tdecoder\n+\n+\tbitOffset int\n+}\n+\n+// Type for the PlainBooleanDecoder is parquet.Types.Boolean\n+func (PlainBooleanDecoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Decode fills out with bools decoded from the data at the current point\n+// or until we reach the end of the data.\n+//\n+// Returns the number of values decoded\n+func (dec *PlainBooleanDecoder) Decode(out []bool) (int, error) {\n+\tmax := utils.MinInt(len(out), dec.nvals)\n+\n+\t// if we aren't at a byte boundary, then get bools until we hit\n+\t// a byte boundary with the bit offset.\n+\ti := 0\n+\tfor dec.bitOffset != 0 && dec.bitOffset < 8 && i < max {\n+\t\tout[i] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n+\t\tdec.bitOffset++\n+\t\ti++\n+\t}\n+\tif dec.bitOffset == 8 {\n+\t\tdec.bitOffset = 0\n+\t}\n+\n+\t// determine the number of full bytes worth of bits we can decode\n+\t// given the number of values we want to decode.\n+\tbitsRemain := max - i\n+\tbatch := bitsRemain / 8 * 8\n+\tif batch > 0 { // only go in here if there's at least one full byte to decode\n+\t\tif i > 0 { // skip our data forward if we decoded anything above\n+\t\t\tdec.data = dec.data[1:]\n+\t\t\tout = out[i:]\n+\t\t}\n+\t\t// determine the number of aligned bytes we can grab using SIMD optimized\n+\t\t// functions to improve performance.\n+\t\talignedBytes := bitutil.BytesForBits(int64(batch))\n+\t\tutils.BytesToBools(dec.data[:alignedBytes], out)\n+\t\tdec.data = dec.data[alignedBytes:]\n+\t\tout = out[alignedBytes*8:]\n+\t}\n+\n+\t// grab any trailing bits now that we've got our aligned bytes.\n+\tfor ; dec.bitOffset < (bitsRemain - batch); dec.bitOffset++ {\n+\t\tout[dec.bitOffset] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n\nReview comment:\n       might be nice factor out the unaligned bit extract?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T15:38:51.871+0000",
                    "updated": "2021-06-02T15:38:51.871+0000",
                    "started": "2021-06-02T15:38:51.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605280",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644089074\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_decoder.go\n##########\n@@ -0,0 +1,98 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// PlainBooleanDecoder is for the Plain Encoding type, there is no\n+// dictionary decoding for bools.\n+type PlainBooleanDecoder struct {\n+\tdecoder\n+\n+\tbitOffset int\n+}\n+\n+// Type for the PlainBooleanDecoder is parquet.Types.Boolean\n+func (PlainBooleanDecoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Decode fills out with bools decoded from the data at the current point\n+// or until we reach the end of the data.\n+//\n+// Returns the number of values decoded\n+func (dec *PlainBooleanDecoder) Decode(out []bool) (int, error) {\n+\tmax := utils.MinInt(len(out), dec.nvals)\n+\n+\t// if we aren't at a byte boundary, then get bools until we hit\n+\t// a byte boundary with the bit offset.\n+\ti := 0\n+\tfor dec.bitOffset != 0 && dec.bitOffset < 8 && i < max {\n+\t\tout[i] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n+\t\tdec.bitOffset++\n+\t\ti++\n+\t}\n+\tif dec.bitOffset == 8 {\n+\t\tdec.bitOffset = 0\n+\t}\n+\n+\t// determine the number of full bytes worth of bits we can decode\n+\t// given the number of values we want to decode.\n+\tbitsRemain := max - i\n+\tbatch := bitsRemain / 8 * 8\n+\tif batch > 0 { // only go in here if there's at least one full byte to decode\n+\t\tif i > 0 { // skip our data forward if we decoded anything above\n+\t\t\tdec.data = dec.data[1:]\n+\t\t\tout = out[i:]\n+\t\t}\n+\t\t// determine the number of aligned bytes we can grab using SIMD optimized\n+\t\t// functions to improve performance.\n+\t\talignedBytes := bitutil.BytesForBits(int64(batch))\n+\t\tutils.BytesToBools(dec.data[:alignedBytes], out)\n+\t\tdec.data = dec.data[alignedBytes:]\n+\t\tout = out[alignedBytes*8:]\n+\t}\n+\n+\t// grab any trailing bits now that we've got our aligned bytes.\n+\tfor ; dec.bitOffset < (bitsRemain - batch); dec.bitOffset++ {\n+\t\tout[dec.bitOffset] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n+\t}\n+\n+\tdec.nvals -= max\n+\treturn max, nil\n+}\n+\n+// DecodeSpaced is like Decode except it expands the values to leave spaces for null\n+// as determined by the validBits bitmap.\n+func (dec *PlainBooleanDecoder) DecodeSpaced(out []bool, nullCount int, validBits []byte, validBitsOffset int64) (int, error) {\n+\tif nullCount > 0 {\n+\t\ttoRead := len(out) - nullCount\n+\t\tvaluesRead, err := dec.Decode(out[:toRead])\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n+\t\t}\n+\t\tif valuesRead != toRead {\n+\t\t\tpanic(\"parquet: number of values / definition levels read did not match\")\n\nReview comment:\n       unless there is validation elsewhere (and even if there is) it is probably a good idea to return an error here instead of panic, since this could be a bad file instead of code a bug?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T15:41:11.238+0000",
                    "updated": "2021-06-02T15:41:11.238+0000",
                    "started": "2021-06-02T15:41:11.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605283",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644100191\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_encoder.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+const boolBufSize = 1024\n+\n+// PlainBooleanEncoder encodes bools as a bitmap as per the Plain Encoding\n+type PlainBooleanEncoder struct {\n+\tencoder\n+\tnbits      int\n+\tbitsBuffer []byte\n+}\n+\n+// Type for the PlainBooleanEncoder is parquet.Types.Boolean\n+func (PlainBooleanEncoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Put encodes the contents of in into the underlying data buffer.\n+func (enc *PlainBooleanEncoder) Put(in []bool) {\n+\tif enc.bitsBuffer == nil {\n+\t\tenc.bitsBuffer = make([]byte, boolBufSize)\n+\t}\n+\n+\tbitOffset := 0\n+\t// first check if we are in the middle of a byte due to previous\n+\t// encoding of data and finish out that byte's bits.\n+\tif enc.nbits > 0 {\n+\t\tbitsToWrite := utils.MinInt(enc.nbits, len(in))\n+\t\tbeg := (boolBufSize * 8) - enc.nbits\n+\t\tfor i, val := range in[:bitsToWrite] {\n+\t\t\tbitmask := uint8(1 << uint((beg+i)%8))\n+\t\t\tif val {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] |= bitmask\n\nReview comment:\n       general, comment, I'm not sure how good go is about optimizing away \"/8\" and \"*8\" operation into shifts for signed ints.  regardless it might pay to factor out some of these operations into ByteForBit.\r\n   \r\n   One other comment, did you port over the BitMapWriter (might be off on the name) from C++, this appears to be exactly what the class was meant for?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T15:53:55.817+0000",
                    "updated": "2021-06-02T15:53:55.817+0000",
                    "started": "2021-06-02T15:53:55.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605295",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644101301\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_encoder.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+const boolBufSize = 1024\n+\n+// PlainBooleanEncoder encodes bools as a bitmap as per the Plain Encoding\n+type PlainBooleanEncoder struct {\n+\tencoder\n+\tnbits      int\n+\tbitsBuffer []byte\n+}\n+\n+// Type for the PlainBooleanEncoder is parquet.Types.Boolean\n+func (PlainBooleanEncoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Put encodes the contents of in into the underlying data buffer.\n+func (enc *PlainBooleanEncoder) Put(in []bool) {\n+\tif enc.bitsBuffer == nil {\n+\t\tenc.bitsBuffer = make([]byte, boolBufSize)\n+\t}\n+\n+\tbitOffset := 0\n+\t// first check if we are in the middle of a byte due to previous\n+\t// encoding of data and finish out that byte's bits.\n+\tif enc.nbits > 0 {\n+\t\tbitsToWrite := utils.MinInt(enc.nbits, len(in))\n+\t\tbeg := (boolBufSize * 8) - enc.nbits\n+\t\tfor i, val := range in[:bitsToWrite] {\n+\t\t\tbitmask := uint8(1 << uint((beg+i)%8))\n+\t\t\tif val {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] |= bitmask\n+\t\t\t} else {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] &= bitmask ^ 0xFF\n\nReview comment:\n       might just be pre-caffience but isn't this just `~bitmask` (or does go not have that concept\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T15:54:54.212+0000",
                    "updated": "2021-06-02T15:54:54.212+0000",
                    "started": "2021-06-02T15:54:54.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605296",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#issuecomment-853150678\n\n\n   @zeroshade still working my way through but at least I've started, will try to continue to review over the next few days.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T16:01:21.307+0000",
                    "updated": "2021-06-02T16:01:21.307+0000",
                    "started": "2021-06-02T16:01:21.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605302",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644132276\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_encoder.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+const boolBufSize = 1024\n+\n+// PlainBooleanEncoder encodes bools as a bitmap as per the Plain Encoding\n+type PlainBooleanEncoder struct {\n+\tencoder\n+\tnbits      int\n+\tbitsBuffer []byte\n+}\n+\n+// Type for the PlainBooleanEncoder is parquet.Types.Boolean\n+func (PlainBooleanEncoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Put encodes the contents of in into the underlying data buffer.\n+func (enc *PlainBooleanEncoder) Put(in []bool) {\n+\tif enc.bitsBuffer == nil {\n+\t\tenc.bitsBuffer = make([]byte, boolBufSize)\n+\t}\n+\n+\tbitOffset := 0\n+\t// first check if we are in the middle of a byte due to previous\n+\t// encoding of data and finish out that byte's bits.\n+\tif enc.nbits > 0 {\n+\t\tbitsToWrite := utils.MinInt(enc.nbits, len(in))\n+\t\tbeg := (boolBufSize * 8) - enc.nbits\n+\t\tfor i, val := range in[:bitsToWrite] {\n+\t\t\tbitmask := uint8(1 << uint((beg+i)%8))\n+\t\t\tif val {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] |= bitmask\n+\t\t\t} else {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] &= bitmask ^ 0xFF\n\nReview comment:\n       huh, you're right, i didn't even realize this was just a bitwise not.\r\n   \r\n   So Go doesn't have a `~` operator, but you can use the XOR operator to do a unary bitwise NOT. So this could just be `^bitmask` i'll fix that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T16:33:08.917+0000",
                    "updated": "2021-06-02T16:33:08.917+0000",
                    "started": "2021-06-02T16:33:08.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605327",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644261917\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_encoder.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+const boolBufSize = 1024\n+\n+// PlainBooleanEncoder encodes bools as a bitmap as per the Plain Encoding\n+type PlainBooleanEncoder struct {\n+\tencoder\n+\tnbits      int\n+\tbitsBuffer []byte\n+}\n+\n+// Type for the PlainBooleanEncoder is parquet.Types.Boolean\n+func (PlainBooleanEncoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Put encodes the contents of in into the underlying data buffer.\n+func (enc *PlainBooleanEncoder) Put(in []bool) {\n+\tif enc.bitsBuffer == nil {\n+\t\tenc.bitsBuffer = make([]byte, boolBufSize)\n+\t}\n+\n+\tbitOffset := 0\n+\t// first check if we are in the middle of a byte due to previous\n+\t// encoding of data and finish out that byte's bits.\n+\tif enc.nbits > 0 {\n+\t\tbitsToWrite := utils.MinInt(enc.nbits, len(in))\n+\t\tbeg := (boolBufSize * 8) - enc.nbits\n+\t\tfor i, val := range in[:bitsToWrite] {\n+\t\t\tbitmask := uint8(1 << uint((beg+i)%8))\n+\t\t\tif val {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] |= bitmask\n\nReview comment:\n       I did port the bitmap writer, and originally i was doing that, i need to do some digging to confirm, but if i remember correctly, I ended up doing it this way instead of using the bitmapwriter for this because it ultimately ended up being faster since I had bools rather than appending words, and thus avoided significant function calls by calling `Next()`, `Set()` and `Clear()`. \r\n   \r\n   I'll take another look at the benchmarks and maybe add a function into the bitmapwriter that takes a bunch of bools to optimize that workflow\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T19:29:56.610+0000",
                    "updated": "2021-06-02T19:29:56.610+0000",
                    "started": "2021-06-02T19:29:56.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605463",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644345648\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_encoder.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+const boolBufSize = 1024\n+\n+// PlainBooleanEncoder encodes bools as a bitmap as per the Plain Encoding\n+type PlainBooleanEncoder struct {\n+\tencoder\n+\tnbits      int\n+\tbitsBuffer []byte\n+}\n+\n+// Type for the PlainBooleanEncoder is parquet.Types.Boolean\n+func (PlainBooleanEncoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Put encodes the contents of in into the underlying data buffer.\n+func (enc *PlainBooleanEncoder) Put(in []bool) {\n+\tif enc.bitsBuffer == nil {\n+\t\tenc.bitsBuffer = make([]byte, boolBufSize)\n+\t}\n+\n+\tbitOffset := 0\n+\t// first check if we are in the middle of a byte due to previous\n+\t// encoding of data and finish out that byte's bits.\n+\tif enc.nbits > 0 {\n+\t\tbitsToWrite := utils.MinInt(enc.nbits, len(in))\n+\t\tbeg := (boolBufSize * 8) - enc.nbits\n+\t\tfor i, val := range in[:bitsToWrite] {\n+\t\t\tbitmask := uint8(1 << uint((beg+i)%8))\n+\t\t\tif val {\n+\t\t\t\tenc.bitsBuffer[(beg+i)/8] |= bitmask\n\nReview comment:\n       So the combination of the changes I made to how I handle the bitmapwriter and utilize an `AppendBools` function resulted in about a 40% improvement in speed of encoding bools! It also turns out that Go definitely does optimize the /8 and the *8 as far as i can tell since there was very little performance difference between using them or the shifts directly. \r\n   \r\n   The primary benefits that resulted in the performance improvements came from switching to use `bitutil.SetBit` / `bitutil.ClearBit` since they used the constant slices with the bitmasks that we index into rather than constructing them on the fly as it converted a modulus+shift operation into a simple index lookup inside of a tight loop.\r\n   \r\n   The big reason why it needed an AppendBools function instead of just using a loop with `Next()`, `Set()`, and `Clear()` is because `Next()` has to check for bitmask being 0 to update it along with the offset and position tracking, whereas having the function inside there allows for a single update of the bookkeeping and just looping through to set the bits. Either way, the result is a significant performance improvement so I'm happy :smiley:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T21:54:12.351+0000",
                    "updated": "2021-06-02T21:54:12.351+0000",
                    "started": "2021-06-02T21:54:12.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605595",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/605596",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644346457\n\n\n\n##########\nFile path: go/parquet/internal/encoding/boolean_decoder.go\n##########\n@@ -0,0 +1,98 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// PlainBooleanDecoder is for the Plain Encoding type, there is no\n+// dictionary decoding for bools.\n+type PlainBooleanDecoder struct {\n+\tdecoder\n+\n+\tbitOffset int\n+}\n+\n+// Type for the PlainBooleanDecoder is parquet.Types.Boolean\n+func (PlainBooleanDecoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Decode fills out with bools decoded from the data at the current point\n+// or until we reach the end of the data.\n+//\n+// Returns the number of values decoded\n+func (dec *PlainBooleanDecoder) Decode(out []bool) (int, error) {\n+\tmax := utils.MinInt(len(out), dec.nvals)\n+\n+\t// if we aren't at a byte boundary, then get bools until we hit\n+\t// a byte boundary with the bit offset.\n+\ti := 0\n+\tfor dec.bitOffset != 0 && dec.bitOffset < 8 && i < max {\n+\t\tout[i] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n+\t\tdec.bitOffset++\n+\t\ti++\n+\t}\n+\tif dec.bitOffset == 8 {\n+\t\tdec.bitOffset = 0\n+\t}\n+\n+\t// determine the number of full bytes worth of bits we can decode\n+\t// given the number of values we want to decode.\n+\tbitsRemain := max - i\n+\tbatch := bitsRemain / 8 * 8\n+\tif batch > 0 { // only go in here if there's at least one full byte to decode\n+\t\tif i > 0 { // skip our data forward if we decoded anything above\n+\t\t\tdec.data = dec.data[1:]\n+\t\t\tout = out[i:]\n+\t\t}\n+\t\t// determine the number of aligned bytes we can grab using SIMD optimized\n+\t\t// functions to improve performance.\n+\t\talignedBytes := bitutil.BytesForBits(int64(batch))\n+\t\tutils.BytesToBools(dec.data[:alignedBytes], out)\n+\t\tdec.data = dec.data[alignedBytes:]\n+\t\tout = out[alignedBytes*8:]\n+\t}\n+\n+\t// grab any trailing bits now that we've got our aligned bytes.\n+\tfor ; dec.bitOffset < (bitsRemain - batch); dec.bitOffset++ {\n+\t\tout[dec.bitOffset] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n+\t}\n+\n+\tdec.nvals -= max\n+\treturn max, nil\n+}\n+\n+// DecodeSpaced is like Decode except it expands the values to leave spaces for null\n+// as determined by the validBits bitmap.\n+func (dec *PlainBooleanDecoder) DecodeSpaced(out []bool, nullCount int, validBits []byte, validBitsOffset int64) (int, error) {\n+\tif nullCount > 0 {\n+\t\ttoRead := len(out) - nullCount\n+\t\tvaluesRead, err := dec.Decode(out[:toRead])\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n+\t\t}\n+\t\tif valuesRead != toRead {\n+\t\t\tpanic(\"parquet: number of values / definition levels read did not match\")\n\nReview comment:\n       updated to return an error, that's a good point.\n\n##########\nFile path: go/parquet/internal/encoding/boolean_decoder.go\n##########\n@@ -0,0 +1,98 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// PlainBooleanDecoder is for the Plain Encoding type, there is no\n+// dictionary decoding for bools.\n+type PlainBooleanDecoder struct {\n+\tdecoder\n+\n+\tbitOffset int\n+}\n+\n+// Type for the PlainBooleanDecoder is parquet.Types.Boolean\n+func (PlainBooleanDecoder) Type() parquet.Type {\n+\treturn parquet.Types.Boolean\n+}\n+\n+// Decode fills out with bools decoded from the data at the current point\n+// or until we reach the end of the data.\n+//\n+// Returns the number of values decoded\n+func (dec *PlainBooleanDecoder) Decode(out []bool) (int, error) {\n+\tmax := utils.MinInt(len(out), dec.nvals)\n+\n+\t// if we aren't at a byte boundary, then get bools until we hit\n+\t// a byte boundary with the bit offset.\n+\ti := 0\n+\tfor dec.bitOffset != 0 && dec.bitOffset < 8 && i < max {\n+\t\tout[i] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n+\t\tdec.bitOffset++\n+\t\ti++\n+\t}\n+\tif dec.bitOffset == 8 {\n+\t\tdec.bitOffset = 0\n+\t}\n+\n+\t// determine the number of full bytes worth of bits we can decode\n+\t// given the number of values we want to decode.\n+\tbitsRemain := max - i\n+\tbatch := bitsRemain / 8 * 8\n+\tif batch > 0 { // only go in here if there's at least one full byte to decode\n+\t\tif i > 0 { // skip our data forward if we decoded anything above\n+\t\t\tdec.data = dec.data[1:]\n+\t\t\tout = out[i:]\n+\t\t}\n+\t\t// determine the number of aligned bytes we can grab using SIMD optimized\n+\t\t// functions to improve performance.\n+\t\talignedBytes := bitutil.BytesForBits(int64(batch))\n+\t\tutils.BytesToBools(dec.data[:alignedBytes], out)\n+\t\tdec.data = dec.data[alignedBytes:]\n+\t\tout = out[alignedBytes*8:]\n+\t}\n+\n+\t// grab any trailing bits now that we've got our aligned bytes.\n+\tfor ; dec.bitOffset < (bitsRemain - batch); dec.bitOffset++ {\n+\t\tout[dec.bitOffset] = (dec.data[0] & byte(1<<dec.bitOffset)) != 0\n\nReview comment:\n       done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T21:56:07.920+0000",
                    "updated": "2021-06-02T21:56:07.920+0000",
                    "started": "2021-06-02T21:56:07.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605596",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/606025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644923055\n\n\n\n##########\nFile path: go/parquet/internal/encoding/byte_array_decoder.go\n##########\n@@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"encoding/binary\"\n+\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// PlainByteArrayDecoder decodes a data chunk for bytearrays according to\n+// the plain encoding. The byte arrays will use slices to reference the\n\nReview comment:\n       might be worth adding a quick summary fo what plain encoding is\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T16:01:24.233+0000",
                    "updated": "2021-06-03T16:01:24.233+0000",
                    "started": "2021-06-03T16:01:24.233+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606025",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/606027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644924084\n\n\n\n##########\nFile path: go/parquet/internal/encoding/byte_array_decoder.go\n##########\n@@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"encoding/binary\"\n+\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// PlainByteArrayDecoder decodes a data chunk for bytearrays according to\n+// the plain encoding. The byte arrays will use slices to reference the\n+// data rather than copying it.\n+type PlainByteArrayDecoder struct {\n+\tdecoder\n+}\n+\n+// Type returns parquet.Types.ByteArray for this decoder\n+func (PlainByteArrayDecoder) Type() parquet.Type {\n+\treturn parquet.Types.ByteArray\n+}\n+\n+// Decode will populate the slice of bytearrays in full or until the number\n+// of values is emptied.\n\nReview comment:\n       ```suggestion\r\n   // of values is consumed.\r\n   ```\r\n   Is this more accurate?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T16:02:32.587+0000",
                    "updated": "2021-06-03T16:02:32.587+0000",
                    "started": "2021-06-03T16:02:32.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606027",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/606028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644926066\n\n\n\n##########\nFile path: go/parquet/internal/encoding/byte_array_decoder.go\n##########\n@@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"encoding/binary\"\n+\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// PlainByteArrayDecoder decodes a data chunk for bytearrays according to\n+// the plain encoding. The byte arrays will use slices to reference the\n+// data rather than copying it.\n+type PlainByteArrayDecoder struct {\n+\tdecoder\n+}\n+\n+// Type returns parquet.Types.ByteArray for this decoder\n+func (PlainByteArrayDecoder) Type() parquet.Type {\n+\treturn parquet.Types.ByteArray\n+}\n+\n+// Decode will populate the slice of bytearrays in full or until the number\n+// of values is emptied.\n+//\n+// Returns the number of values that were decoded.\n+func (pbad *PlainByteArrayDecoder) Decode(out []parquet.ByteArray) (int, error) {\n+\tmax := utils.MinInt(len(out), pbad.nvals)\n+\n+\tfor i := 0; i < max; i++ {\n+\t\t// there should always be at least four bytes which is the length of the\n+\t\t// next value in the data.\n+\t\tif len(pbad.data) < 4 {\n+\t\t\treturn i, xerrors.New(\"parquet: eof reading bytearray\")\n+\t\t}\n+\n+\t\t// the first 4 bytes are a little endian uint32 length\n+\t\tnbytes := int32(binary.LittleEndian.Uint32(pbad.data[:4]))\n+\t\tif nbytes < 0 {\n\nReview comment:\n       byte_len or str_len might be a better variable name?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T16:05:06.984+0000",
                    "updated": "2021-06-03T16:05:06.984+0000",
                    "started": "2021-06-03T16:05:06.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606028",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/606031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644928045\n\n\n\n##########\nFile path: go/parquet/internal/encoding/byte_array_decoder.go\n##########\n@@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"encoding/binary\"\n+\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// PlainByteArrayDecoder decodes a data chunk for bytearrays according to\n+// the plain encoding. The byte arrays will use slices to reference the\n+// data rather than copying it.\n+type PlainByteArrayDecoder struct {\n+\tdecoder\n+}\n+\n+// Type returns parquet.Types.ByteArray for this decoder\n+func (PlainByteArrayDecoder) Type() parquet.Type {\n+\treturn parquet.Types.ByteArray\n+}\n+\n+// Decode will populate the slice of bytearrays in full or until the number\n+// of values is emptied.\n+//\n+// Returns the number of values that were decoded.\n+func (pbad *PlainByteArrayDecoder) Decode(out []parquet.ByteArray) (int, error) {\n+\tmax := utils.MinInt(len(out), pbad.nvals)\n+\n+\tfor i := 0; i < max; i++ {\n+\t\t// there should always be at least four bytes which is the length of the\n+\t\t// next value in the data.\n+\t\tif len(pbad.data) < 4 {\n+\t\t\treturn i, xerrors.New(\"parquet: eof reading bytearray\")\n+\t\t}\n+\n+\t\t// the first 4 bytes are a little endian uint32 length\n\nReview comment:\n       Is there a reference for unsigned?  I believe this is actually [signed](https://github.com/apache/parquet-mr/blob/master/parquet-column/src/main/java/org/apache/parquet/column/values/plain/PlainValuesWriter.java#L54)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T16:07:39.581+0000",
                    "updated": "2021-06-03T16:07:39.581+0000",
                    "started": "2021-06-03T16:07:39.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606031",
                    "issueId": "13379940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/worklog/606032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10379:\nURL: https://github.com/apache/arrow/pull/10379#discussion_r644929054\n\n\n\n##########\nFile path: go/parquet/internal/encoding/byte_array_decoder.go\n##########\n@@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"encoding/binary\"\n+\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// PlainByteArrayDecoder decodes a data chunk for bytearrays according to\n+// the plain encoding. The byte arrays will use slices to reference the\n+// data rather than copying it.\n+type PlainByteArrayDecoder struct {\n+\tdecoder\n+}\n+\n+// Type returns parquet.Types.ByteArray for this decoder\n+func (PlainByteArrayDecoder) Type() parquet.Type {\n+\treturn parquet.Types.ByteArray\n+}\n+\n+// Decode will populate the slice of bytearrays in full or until the number\n+// of values is emptied.\n+//\n+// Returns the number of values that were decoded.\n+func (pbad *PlainByteArrayDecoder) Decode(out []parquet.ByteArray) (int, error) {\n+\tmax := utils.MinInt(len(out), pbad.nvals)\n+\n+\tfor i := 0; i < max; i++ {\n+\t\t// there should always be at least four bytes which is the length of the\n+\t\t// next value in the data.\n+\t\tif len(pbad.data) < 4 {\n+\t\t\treturn i, xerrors.New(\"parquet: eof reading bytearray\")\n+\t\t}\n+\n+\t\t// the first 4 bytes are a little endian uint32 length\n\nReview comment:\n       it seems that you also check below whether it is less then zero which would be a good indication that it is signed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T16:08:28.936+0000",
                    "updated": "2021-06-03T16:08:28.936+0000",
                    "started": "2021-06-03T16:08:28.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606032",
                    "issueId": "13379940"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 53400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@254415b5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fd27543[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70fac541[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7c0ede70[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11f3e74[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@40b780fb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66c19561[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6cb62a97[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14a255eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@68eeafdc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26e553d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5f513575[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 53400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 13 15:48:38 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-13T15:48:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12851/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-05-22T19:14:28.000+0000",
        "updated": "2021-07-13T22:03:53.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "14h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 53400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go][Parquet] Add Encoding Package Part 1",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940/comment/17379992",
                    "id": "17379992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10379\n[https://github.com/apache/arrow/pull/10379]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-13T15:48:38.370+0000",
                    "updated": "2021-07-13T15:48:38.370+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rads:",
        "customfield_12314139": null
    }
}