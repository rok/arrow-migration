{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13185372",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372",
    "key": "ARROW-3242",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3242/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571\n \n \n   Rather than having a bunch of static state in a header file (which is not a great pattern anyway), this makes `arrow::CpuInfo` a singleton. I added support for vector-level dispatch to SSE4 hashing in the Parquet dictionary encoder.\r\n   \r\n   This solves ARROW-3241 for me\r\n   \r\n   NB. This is precisely the kind of change that is not radically simpler after the monorepo merge\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-16T18:36:42.648+0000",
                    "updated": "2018-09-16T18:36:42.648+0000",
                    "started": "2018-09-16T18:36:42.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144681",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571#issuecomment-421810211\n \n \n   cc @majetideepak @xhochy @pitrou \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-16T18:36:57.960+0000",
                    "updated": "2018-09-16T18:36:57.960+0000",
                    "started": "2018-09-16T18:36:57.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144682",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571#issuecomment-421811019\n \n \n   cc also @pcmoritz -- this fixes the Plasma test core dump I'd been having\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-16T18:42:39.442+0000",
                    "updated": "2018-09-16T18:42:39.442+0000",
                    "started": "2018-09-16T18:42:39.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144683",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571#discussion_r217923687\n \n \n\n ##########\n File path: cpp/CMakeLists.txt\n ##########\n @@ -690,7 +690,9 @@ if (ARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})\n \n-  if (CMAKE_COMPILER_IS_GNUCXX AND PTHREAD_LIBRARY)\n+  if ((CMAKE_COMPILER_IS_GNUCXX OR\n+        (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n+      AND PTHREAD_LIBRARY)\n \n Review comment:\n   I found that linking pthread is also necessary for me when using clang-6 on Linux with Ubuntu 14.04\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-16T18:42:48.013+0000",
                    "updated": "2018-09-16T18:42:48.013+0000",
                    "started": "2018-09-16T18:42:48.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144684",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571#discussion_r217923700\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -33,12 +33,17 @@\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/cpu-info.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/hash-util.h\"\n #include \"arrow/util/hash.h\"\n #include \"arrow/util/logging.h\"\n \n+#ifdef ARROW_USE_SSE\n+#define SSE4_FLAG true\n+#else\n+#define SSE4_FLAG false\n+#endif\n \n Review comment:\n   We'll have to do more work if we want better dynamic dispatch to sse4.2 in here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-16T18:42:48.033+0000",
                    "updated": "2018-09-16T18:42:48.033+0000",
                    "started": "2018-09-16T18:42:48.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144685",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "majetideepak commented on a change in pull request #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571#discussion_r218120254\n \n \n\n ##########\n File path: cpp/src/parquet/column_writer.cc\n ##########\n @@ -32,6 +33,8 @@\n #include \"parquet/thrift.h\"\n #include \"parquet/util/memory.h\"\n \n+using arrow::CpuInfo;\n \n Review comment:\n   Why is this needed here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T15:40:52.920+0000",
                    "updated": "2018-09-17T15:40:52.920+0000",
                    "started": "2018-09-17T15:40:52.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144888",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571#discussion_r218130322\n \n \n\n ##########\n File path: cpp/src/parquet/column_writer.cc\n ##########\n @@ -32,6 +33,8 @@\n #include \"parquet/thrift.h\"\n #include \"parquet/util/memory.h\"\n \n+using arrow::CpuInfo;\n \n Review comment:\n   Refactor artifact, will remove\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T16:05:00.299+0000",
                    "updated": "2018-09-17T16:05:00.299+0000",
                    "started": "2018-09-17T16:05:00.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144892",
                    "issueId": "13185372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/worklog/144895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2571: ARROW-3242: [C++] Make CpuInfo a singleton, use coarser-grained dispatch to SSE4 in Parquet dictionary encoding\nURL: https://github.com/apache/arrow/pull/2571\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 9eb37d2a4a..0cb52cbee3 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -690,7 +690,11 @@ if (ARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})\n \n-  if (CMAKE_COMPILER_IS_GNUCXX AND PTHREAD_LIBRARY)\n+  # If using gcc or clang on Linux, we need to link pthread for older Linuxes,\n+  # including distros as new as Ubuntu 14.04\n+  if ((CMAKE_COMPILER_IS_GNUCXX OR\n+        (NOT APPLE AND CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n+      AND PTHREAD_LIBRARY)\n     set(ARROW_JEMALLOC_LINK_LIBS\n       jemalloc_static\n       # For glibc <2.17 we need to link to librt.\ndiff --git a/cpp/cmake_modules/SetupCxxFlags.cmake b/cpp/cmake_modules/SetupCxxFlags.cmake\nindex aee2654c07..a707a21d71 100644\n--- a/cpp/cmake_modules/SetupCxxFlags.cmake\n+++ b/cpp/cmake_modules/SetupCxxFlags.cmake\n@@ -212,6 +212,10 @@ if (CXX_SUPPORTS_ALTIVEC AND ARROW_ALTIVEC)\n   set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -maltivec\")\n endif()\n \n+if (ARROW_USE_SSE)\n+  add_definitions(-DARROW_USE_SSE)\n+endif()\n+\n if (APPLE)\n   # Depending on the default OSX_DEPLOYMENT_TARGET (< 10.9), libstdc++ may be\n   # the default standard library which does not support C++11. libc++ is the\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 65d1ea7ff3..677f2fd256 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -33,12 +33,17 @@\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/cpu-info.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/hash-util.h\"\n #include \"arrow/util/hash.h\"\n #include \"arrow/util/logging.h\"\n \n+#ifdef ARROW_USE_SSE\n+#define SSE4_FLAG true\n+#else\n+#define SSE4_FLAG false\n+#endif\n+\n namespace arrow {\n \n using internal::AdaptiveIntBuilderBase;\n@@ -776,7 +781,7 @@ struct DictionaryHashHelper<T, enable_if_has_c_type<T>> {\n \n   // Compute the hash of a scalar value\n   static int64_t HashValue(const Scalar& value, int byte_width) {\n-    return HashUtil::Hash(&value, sizeof(Scalar), 0);\n+    return HashUtil::Hash<SSE4_FLAG>(&value, sizeof(Scalar), 0);\n   }\n \n   // Return whether the dictionary value at the given builder index is unequal to value\n@@ -810,7 +815,7 @@ struct DictionaryHashHelper<T, enable_if_binary<T>> {\n   }\n \n   static int64_t HashValue(const Scalar& value, int byte_width) {\n-    return HashUtil::Hash(value.ptr_, value.length_, 0);\n+    return HashUtil::Hash<SSE4_FLAG>(value.ptr_, value.length_, 0);\n   }\n \n   static bool SlotDifferent(const Builder& builder, int64_t index, const Scalar& value) {\n@@ -846,7 +851,7 @@ struct DictionaryHashHelper<T, enable_if_fixed_size_binary<T>> {\n   }\n \n   static int64_t HashValue(const Scalar& value, int byte_width) {\n-    return HashUtil::Hash(value, byte_width, 0);\n+    return HashUtil::Hash<SSE4_FLAG>(value, byte_width, 0);\n   }\n \n   static bool SlotDifferent(const Builder& builder, int64_t index, const uint8_t* value) {\n@@ -879,19 +884,11 @@ DictionaryBuilder<T>::DictionaryBuilder(const std::shared_ptr<DataType>& type,\n       dict_builder_(type, pool),\n       overflow_dict_builder_(type, pool),\n       values_builder_(pool),\n-      byte_width_(-1) {\n-  if (!::arrow::CpuInfo::initialized()) {\n-    ::arrow::CpuInfo::Init();\n-  }\n-}\n+      byte_width_(-1) {}\n \n DictionaryBuilder<NullType>::DictionaryBuilder(const std::shared_ptr<DataType>& type,\n                                                MemoryPool* pool)\n-    : ArrayBuilder(type, pool), values_builder_(pool) {\n-  if (!::arrow::CpuInfo::initialized()) {\n-    ::arrow::CpuInfo::Init();\n-  }\n-}\n+    : ArrayBuilder(type, pool), values_builder_(pool) {}\n \n template <>\n DictionaryBuilder<FixedSizeBinaryType>::DictionaryBuilder(\n@@ -901,11 +898,7 @@ DictionaryBuilder<FixedSizeBinaryType>::DictionaryBuilder(\n       dict_builder_(type, pool),\n       overflow_dict_builder_(type, pool),\n       values_builder_(pool),\n-      byte_width_(checked_cast<const FixedSizeBinaryType&>(*type).byte_width()) {\n-  if (!::arrow::CpuInfo::initialized()) {\n-    ::arrow::CpuInfo::Init();\n-  }\n-}\n+      byte_width_(checked_cast<const FixedSizeBinaryType&>(*type).byte_width()) {}\n \n template <typename T>\n void DictionaryBuilder<T>::Reset() {\ndiff --git a/cpp/src/arrow/compute/context.cc b/cpp/src/arrow/compute/context.cc\nindex 63aa341a3d..ab2b595f74 100644\n--- a/cpp/src/arrow/compute/context.cc\n+++ b/cpp/src/arrow/compute/context.cc\n@@ -25,11 +25,8 @@\n namespace arrow {\n namespace compute {\n \n-FunctionContext::FunctionContext(MemoryPool* pool) : pool_(pool) {\n-  if (!::arrow::CpuInfo::initialized()) {\n-    ::arrow::CpuInfo::Init();\n-  }\n-}\n+FunctionContext::FunctionContext(MemoryPool* pool)\n+    : pool_(pool), cpu_info_(CpuInfo::GetInstance()) {}\n \n MemoryPool* FunctionContext::memory_pool() const { return pool_; }\n \ndiff --git a/cpp/src/arrow/compute/context.h b/cpp/src/arrow/compute/context.h\nindex 09838195a5..7df61e6b0d 100644\n--- a/cpp/src/arrow/compute/context.h\n+++ b/cpp/src/arrow/compute/context.h\n@@ -26,6 +26,9 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+class CpuInfo;\n+\n namespace compute {\n \n #define RETURN_IF_ERROR(ctx)                  \\\n@@ -60,9 +63,12 @@ class ARROW_EXPORT FunctionContext {\n   /// \\brief Return the current status of the context\n   const Status& status() const { return status_; }\n \n+  CpuInfo* cpu_info() const { return cpu_info_; }\n+\n  private:\n   Status status_;\n   MemoryPool* pool_;\n+  CpuInfo* cpu_info_;\n };\n \n }  // namespace compute\ndiff --git a/cpp/src/arrow/compute/kernels/hash.cc b/cpp/src/arrow/compute/kernels/hash.cc\nindex 4004f8d639..212f788eda 100644\n--- a/cpp/src/arrow/compute/kernels/hash.cc\n+++ b/cpp/src/arrow/compute/kernels/hash.cc\n@@ -37,6 +37,9 @@\n namespace arrow {\n namespace compute {\n \n+// TODO(wesm): Enable top-level dispatch to SSE4 hashing if it is enabled\n+#define HASH_USE_SSE false\n+\n namespace {\n \n enum class SIMDMode : char { NOSIMD, SSE4, AVX2 };\n@@ -298,7 +301,7 @@ class HashTableKernel<\n  protected:\n   int64_t HashValue(const T& value) const {\n     // TODO(wesm): Use faster hash function for C types\n-    return HashUtil::Hash(&value, sizeof(T), 0);\n+    return HashUtil::Hash<HASH_USE_SSE>(&value, sizeof(T), 0);\n   }\n \n   Status DoubleTableSize() {\n@@ -489,7 +492,7 @@ class HashTableKernel<Type, Action, enable_if_binary<Type>> : public HashTable {\n \n  protected:\n   int64_t HashValue(const uint8_t* data, int32_t length) const {\n-    return HashUtil::Hash(data, length, 0);\n+    return HashUtil::Hash<HASH_USE_SSE>(data, length, 0);\n   }\n \n   Status DoubleTableSize() {\n@@ -595,7 +598,7 @@ class HashTableKernel<Type, Action, enable_if_fixed_size_binary<Type>>\n \n  protected:\n   int64_t HashValue(const uint8_t* data) const {\n-    return HashUtil::Hash(data, byte_width_, 0);\n+    return HashUtil::Hash<HASH_USE_SSE>(data, byte_width_, 0);\n   }\n \n   Status DoubleTableSize() {\ndiff --git a/cpp/src/arrow/util/cpu-info.cc b/cpp/src/arrow/util/cpu-info.cc\nindex 822fcaea74..9280ac84a7 100644\n--- a/cpp/src/arrow/util/cpu-info.cc\n+++ b/cpp/src/arrow/util/cpu-info.cc\n@@ -44,6 +44,7 @@\n #include <algorithm>\n #include <cstdint>\n #include <fstream>\n+#include <memory>\n #include <mutex>\n #include <string>\n \n@@ -52,21 +53,11 @@\n using boost::algorithm::contains;\n using boost::algorithm::trim;\n using std::max;\n-using std::string;\n \n namespace arrow {\n \n-bool CpuInfo::initialized_ = false;\n-int64_t CpuInfo::hardware_flags_ = 0;\n-int64_t CpuInfo::original_hardware_flags_;\n-int64_t CpuInfo::cache_sizes_[L3_CACHE + 1];\n-int64_t CpuInfo::cycles_per_ms_;\n-int CpuInfo::num_cores_ = 1;\n-string CpuInfo::model_name_ = \"unknown\";  // NOLINT\n-static std::mutex cpuinfo_mutex;\n-\n static struct {\n-  string name;\n+  std::string name;\n   int64_t flag;\n } flag_mappings[] = {\n     {\"ssse3\", CpuInfo::SSSE3},\n@@ -82,7 +73,7 @@ namespace {\n // values contains a list of space-seperated flags.  check to see if the flags we\n // care about are present.\n // Returns a bitmap of flags.\n-int64_t ParseCPUFlags(const string& values) {\n+int64_t ParseCPUFlags(const std::string& values) {\n   int64_t flags = 0;\n   for (int i = 0; i < num_flags; ++i) {\n     if (contains(values, flag_mappings[i].name)) {\n@@ -181,16 +172,24 @@ bool RetrieveCPUInfo(int64_t* hardware_flags, std::string* model_name) {\n }\n #endif\n \n-void CpuInfo::Init() {\n-  std::lock_guard<std::mutex> cpuinfo_lock(cpuinfo_mutex);\n+CpuInfo::CpuInfo() : hardware_flags_(0), num_cores_(1), model_name_(\"unknown\") {}\n+\n+std::unique_ptr<CpuInfo> g_cpu_info;\n+static std::mutex cpuinfo_mutex;\n \n-  if (initialized()) {\n-    return;\n+CpuInfo* CpuInfo::GetInstance() {\n+  std::lock_guard<std::mutex> lock(cpuinfo_mutex);\n+  if (!g_cpu_info) {\n+    g_cpu_info.reset(new CpuInfo);\n+    g_cpu_info->Init();\n   }\n+  return g_cpu_info.get();\n+}\n \n-  string line;\n-  string name;\n-  string value;\n+void CpuInfo::Init() {\n+  std::string line;\n+  std::string name;\n+  std::string value;\n \n   float max_mhz = 0;\n   int num_cores = 0;\n@@ -212,9 +211,9 @@ void CpuInfo::Init() {\n   while (cpuinfo) {\n     getline(cpuinfo, line);\n     size_t colon = line.find(':');\n-    if (colon != string::npos) {\n+    if (colon != std::string::npos) {\n       name = line.substr(0, colon - 1);\n-      value = line.substr(colon + 1, string::npos);\n+      value = line.substr(colon + 1, std::string::npos);\n       trim(name);\n       trim(value);\n       if (name.compare(\"flags\") == 0) {\n@@ -270,18 +269,23 @@ void CpuInfo::Init() {\n   } else {\n     num_cores_ = 1;\n   }\n-\n-  initialized_ = true;\n }\n \n void CpuInfo::VerifyCpuRequirements() {\n-  if (!CpuInfo::IsSupported(CpuInfo::SSSE3)) {\n+  if (!IsSupported(CpuInfo::SSSE3)) {\n     DCHECK(false) << \"CPU does not support the Supplemental SSE3 instruction set\";\n   }\n }\n \n+bool CpuInfo::CanUseSSE4_2() const {\n+#ifdef ARROW_USE_SSE\n+  return IsSupported(CpuInfo::SSE4_2);\n+#else\n+  return false;\n+#endif\n+}\n+\n void CpuInfo::EnableFeature(int64_t flag, bool enable) {\n-  DCHECK(initialized_);\n   if (!enable) {\n     hardware_flags_ &= ~flag;\n   } else {\n@@ -291,30 +295,15 @@ void CpuInfo::EnableFeature(int64_t flag, bool enable) {\n   }\n }\n \n-int64_t CpuInfo::hardware_flags() {\n-  DCHECK(initialized_);\n-  return hardware_flags_;\n-}\n+int64_t CpuInfo::hardware_flags() { return hardware_flags_; }\n \n-int64_t CpuInfo::CacheSize(CacheLevel level) {\n-  DCHECK(initialized_);\n-  return cache_sizes_[level];\n-}\n+int64_t CpuInfo::CacheSize(CacheLevel level) { return cache_sizes_[level]; }\n \n-int64_t CpuInfo::cycles_per_ms() {\n-  DCHECK(initialized_);\n-  return cycles_per_ms_;\n-}\n+int64_t CpuInfo::cycles_per_ms() { return cycles_per_ms_; }\n \n-int CpuInfo::num_cores() {\n-  DCHECK(initialized_);\n-  return num_cores_;\n-}\n+int CpuInfo::num_cores() { return num_cores_; }\n \n-std::string CpuInfo::model_name() {\n-  DCHECK(initialized_);\n-  return model_name_;\n-}\n+std::string CpuInfo::model_name() { return model_name_; }\n \n void CpuInfo::SetDefaultCacheSize() {\n #ifndef _SC_LEVEL1_DCACHE_SIZE\ndiff --git a/cpp/src/arrow/util/cpu-info.h b/cpp/src/arrow/util/cpu-info.h\nindex f4bc8c35e3..dee6a5243c 100644\n--- a/cpp/src/arrow/util/cpu-info.h\n+++ b/cpp/src/arrow/util/cpu-info.h\n@@ -34,10 +34,10 @@ namespace arrow {\n /// /sys/devices)\n class ARROW_EXPORT CpuInfo {\n  public:\n-  static const int64_t SSSE3 = (1 << 1);\n-  static const int64_t SSE4_1 = (1 << 2);\n-  static const int64_t SSE4_2 = (1 << 3);\n-  static const int64_t POPCNT = (1 << 4);\n+  static constexpr int64_t SSSE3 = (1 << 1);\n+  static constexpr int64_t SSE4_1 = (1 << 2);\n+  static constexpr int64_t SSE4_2 = (1 << 3);\n+  static constexpr int64_t POPCNT = (1 << 4);\n \n   /// Cache enums for L1 (data), L2 and L3\n   enum CacheLevel {\n@@ -46,48 +46,52 @@ class ARROW_EXPORT CpuInfo {\n     L3_CACHE = 2,\n   };\n \n-  /// Initialize CpuInfo.\n-  static void Init();\n+  static CpuInfo* GetInstance();\n \n   /// Determine if the CPU meets the minimum CPU requirements and if not, issue an error\n   /// and terminate.\n-  static void VerifyCpuRequirements();\n+  void VerifyCpuRequirements();\n \n   /// Returns all the flags for this cpu\n-  static int64_t hardware_flags();\n+  int64_t hardware_flags();\n \n   /// Returns whether of not the cpu supports this flag\n-  inline static bool IsSupported(int64_t flag) { return (hardware_flags_ & flag) != 0; }\n+  bool IsSupported(int64_t flag) const { return (hardware_flags_ & flag) != 0; }\n+\n+  /// \\brief The processor supports SSE4.2 and the Arrow libraries are built\n+  /// with support for it\n+  bool CanUseSSE4_2() const;\n \n   /// Toggle a hardware feature on and off.  It is not valid to turn on a feature\n   /// that the underlying hardware cannot support. This is useful for testing.\n-  static void EnableFeature(int64_t flag, bool enable);\n+  void EnableFeature(int64_t flag, bool enable);\n \n   /// Returns the size of the cache in KB at this cache level\n-  static int64_t CacheSize(CacheLevel level);\n+  int64_t CacheSize(CacheLevel level);\n \n   /// Returns the number of cpu cycles per millisecond\n-  static int64_t cycles_per_ms();\n+  int64_t cycles_per_ms();\n \n   /// Returns the number of cores (including hyper-threaded) on this machine.\n-  static int num_cores();\n+  int num_cores();\n \n   /// Returns the model name of the cpu (e.g. Intel i7-2600)\n-  static std::string model_name();\n-\n-  static bool initialized() { return initialized_; }\n+  std::string model_name();\n \n  private:\n+  CpuInfo();\n+\n+  void Init();\n+\n   /// Inits CPU cache size variables with default values\n-  static void SetDefaultCacheSize();\n-\n-  static bool initialized_;\n-  static int64_t hardware_flags_;\n-  static int64_t original_hardware_flags_;\n-  static int64_t cache_sizes_[L3_CACHE + 1];\n-  static int64_t cycles_per_ms_;\n-  static int num_cores_;\n-  static std::string model_name_;  // NOLINT\n+  void SetDefaultCacheSize();\n+\n+  int64_t hardware_flags_;\n+  int64_t original_hardware_flags_;\n+  int64_t cache_sizes_[L3_CACHE + 1];\n+  int64_t cycles_per_ms_;\n+  int num_cores_;\n+  std::string model_name_;\n };\n \n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/hash-util.h b/cpp/src/arrow/util/hash-util.h\nindex 3bba07bb20..da23b8f509 100644\n--- a/cpp/src/arrow/util/hash-util.h\n+++ b/cpp/src/arrow/util/hash-util.h\n@@ -40,7 +40,6 @@ class HashUtil {\n   /// The resulting hashes are correlated.\n   /// TODO: update this to also use SSE4_crc32_u64 and SSE4_crc32_u16 where appropriate.\n   static uint32_t CrcHash(const void* data, int32_t bytes, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     uint32_t words = static_cast<uint32_t>(bytes / sizeof(uint32_t));\n     bytes = static_cast<int32_t>(bytes % sizeof(uint32_t));\n \n@@ -64,7 +63,6 @@ class HashUtil {\n \n   /// CrcHash() specialized for 1-byte data\n   static inline uint32_t CrcHash1(const void* v, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     const uint8_t* s = reinterpret_cast<const uint8_t*>(v);\n     hash = SSE4_crc32_u8(hash, *s);\n     hash = (hash << 16) | (hash >> 16);\n@@ -73,7 +71,6 @@ class HashUtil {\n \n   /// CrcHash() specialized for 2-byte data\n   static inline uint32_t CrcHash2(const void* v, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     const uint16_t* s = reinterpret_cast<const uint16_t*>(v);\n     hash = SSE4_crc32_u16(hash, *s);\n     hash = (hash << 16) | (hash >> 16);\n@@ -82,7 +79,6 @@ class HashUtil {\n \n   /// CrcHash() specialized for 4-byte data\n   static inline uint32_t CrcHash4(const void* v, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     const uint32_t* p = reinterpret_cast<const uint32_t*>(v);\n     hash = SSE4_crc32_u32(hash, *p);\n     hash = (hash << 16) | (hash >> 16);\n@@ -91,7 +87,6 @@ class HashUtil {\n \n   /// CrcHash() specialized for 8-byte data\n   static inline uint32_t CrcHash8(const void* v, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     const uint64_t* p = reinterpret_cast<const uint64_t*>(v);\n     hash = SSE4_crc32_u64(hash, *p);\n     hash = (hash << 16) | (hash >> 16);\n@@ -100,7 +95,6 @@ class HashUtil {\n \n   /// CrcHash() specialized for 12-byte data\n   static inline uint32_t CrcHash12(const void* v, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     const uint64_t* p = reinterpret_cast<const uint64_t*>(v);\n     hash = SSE4_crc32_u64(hash, *p);\n     ++p;\n@@ -111,7 +105,6 @@ class HashUtil {\n \n   /// CrcHash() specialized for 16-byte data\n   static inline uint32_t CrcHash16(const void* v, uint32_t hash) {\n-    DCHECK(CpuInfo::IsSupported(CpuInfo::SSE4_2));\n     const uint64_t* p = reinterpret_cast<const uint64_t*>(v);\n     hash = SSE4_crc32_u64(hash, *p);\n     ++p;\n@@ -204,21 +197,9 @@ class HashUtil {\n     return static_cast<uint32_t>((hash_u64 >> 32) ^ (hash_u64 & 0xFFFFFFFF));\n   }\n \n-  /// Computes the hash value for data.  Will call either CrcHash or MurmurHash\n-  /// depending on hardware capabilities.\n-  /// Seed values for different steps of the query execution should use different seeds\n-  /// to prevent accidental key collisions. (See IMPALA-219 for more details).\n-  static uint32_t Hash(const void* data, int32_t bytes, uint32_t seed) {\n-#ifdef ARROW_USE_SSE\n-    if (LIKELY(CpuInfo::IsSupported(CpuInfo::SSE4_2))) {\n-      return CrcHash(data, bytes, seed);\n-    } else {\n-      return MurmurHash2_64(data, bytes, seed);\n-    }\n-#else\n-    return static_cast<uint32_t>(MurmurHash2_64(data, bytes, seed));\n-#endif\n-  }\n+  // With sse4.2\n+  template <bool use_sse42 = true>\n+  static inline int Hash(const void* data, int32_t bytes, uint32_t seed);\n \n   /// The magic number (used in hash_combine()) 0x9e3779b9 = 2^32 / (golden ratio).\n   static const uint32_t HASH_COMBINE_SEED = 0x9e3779b9;\n@@ -253,6 +234,18 @@ class HashUtil {\n   }\n };\n \n+// With sse4.2\n+template <>\n+inline int HashUtil::Hash<true>(const void* data, int32_t bytes, uint32_t seed) {\n+  return static_cast<int>(HashUtil::CrcHash(data, bytes, seed));\n+}\n+\n+// Non-sse4 hash\n+template <>\n+inline int HashUtil::Hash<false>(const void* data, int32_t bytes, uint32_t seed) {\n+  return static_cast<int>(HashUtil::MurmurHash2_64(data, bytes, seed));\n+}\n+\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_HASH_UTIL_H\ndiff --git a/cpp/src/arrow/util/sse-util.h b/cpp/src/arrow/util/sse-util.h\nindex 32ac43f919..50e38d7032 100644\n--- a/cpp/src/arrow/util/sse-util.h\n+++ b/cpp/src/arrow/util/sse-util.h\n@@ -123,7 +123,7 @@ static inline uint32_t SSE4_crc32_u32(uint32_t crc, uint32_t v) {\n static inline uint32_t SSE4_crc32_u64(uint32_t crc, uint64_t v) {\n   uint64_t result = crc;\n   __asm__(\"crc32q %1, %0\" : \"+r\"(result) : \"rm\"(v));\n-  return result;\n+  return static_cast<uint32_t>(result);\n }\n \n static inline int64_t POPCNT_popcnt_u64(uint64_t a) {\ndiff --git a/cpp/src/parquet/encoding-benchmark.cc b/cpp/src/parquet/encoding-benchmark.cc\nindex 364cdba15a..e7309dbead 100644\n--- a/cpp/src/parquet/encoding-benchmark.cc\n+++ b/cpp/src/parquet/encoding-benchmark.cc\n@@ -110,7 +110,8 @@ static void DecodeDict(std::vector<typename Type::c_type>& values,\n \n   DictEncoder<Type> encoder(descr.get(), &pool, allocator);\n   for (int i = 0; i < num_values; ++i) {\n-    encoder.Put(values[i]);\n+    // No SSE\n+    encoder.template Put<false>(values[i]);\n   }\n \n   std::shared_ptr<ResizableBuffer> dict_buffer =\ndiff --git a/cpp/src/parquet/encoding-internal.h b/cpp/src/parquet/encoding-internal.h\nindex 2dfb9ff3d2..0bfd26fbda 100644\n--- a/cpp/src/parquet/encoding-internal.h\n+++ b/cpp/src/parquet/encoding-internal.h\n@@ -40,7 +40,6 @@\n namespace parquet {\n \n namespace BitUtil = ::arrow::BitUtil;\n-using HashUtil = ::arrow::HashUtil;\n \n class ColumnDescriptor;\n \n@@ -469,9 +468,7 @@ class DictEncoder : public Encoder<DType> {\n         dict_encoded_size_(0),\n         type_length_(desc->type_length()) {\n     hash_slots_.Assign(hash_table_size_, HASH_SLOT_EMPTY);\n-    if (!::arrow::CpuInfo::initialized()) {\n-      ::arrow::CpuInfo::Init();\n-    }\n+    cpu_info_ = ::arrow::CpuInfo::GetInstance();\n   }\n \n   ~DictEncoder() override { DCHECK(buffered_indices_.empty()); }\n@@ -516,8 +513,12 @@ class DictEncoder : public Encoder<DType> {\n \n   /// Encode value. Note that this does not actually write any data, just\n   /// buffers the value's index to be written later.\n+  template <bool use_sse42>\n   void Put(const T& value);\n \n+  template <bool use_sse42>\n+  int Hash(const T& value);\n+\n   std::shared_ptr<Buffer> FlushValues() override {\n     std::shared_ptr<ResizableBuffer> buffer =\n         AllocateBuffer(this->allocator_, EstimatedDataEncodedSize());\n@@ -529,20 +530,38 @@ class DictEncoder : public Encoder<DType> {\n   }\n \n   void Put(const T* values, int num_values) override {\n-    for (int i = 0; i < num_values; i++) {\n-      Put(values[i]);\n+    if (cpu_info_->CanUseSSE4_2()) {\n+      for (int i = 0; i < num_values; i++) {\n+        Put<true>(values[i]);\n+      }\n+    } else {\n+      for (int i = 0; i < num_values; i++) {\n+        Put<false>(values[i]);\n+      }\n     }\n   }\n \n+  template <bool use_sse42>\n+  void DoubleTableSize();\n+\n   void PutSpaced(const T* src, int num_values, const uint8_t* valid_bits,\n                  int64_t valid_bits_offset) override {\n     ::arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n                                                       num_values);\n-    for (int32_t i = 0; i < num_values; i++) {\n-      if (valid_bits_reader.IsSet()) {\n-        Put(src[i]);\n+    if (cpu_info_->CanUseSSE4_2()) {\n+      for (int32_t i = 0; i < num_values; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          Put<true>(src[i]);\n+        }\n+        valid_bits_reader.Next();\n+      }\n+    } else {\n+      for (int32_t i = 0; i < num_values; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          Put<false>(src[i]);\n+        }\n+        valid_bits_reader.Next();\n       }\n-      valid_bits_reader.Next();\n     }\n   }\n \n@@ -561,6 +580,8 @@ class DictEncoder : public Encoder<DType> {\n   // For ByteArray / FixedLenByteArray data. Not owned\n   ChunkedAllocator* pool_;\n \n+  ::arrow::CpuInfo* cpu_info_;\n+\n   /// Size of the table. Must be a power of 2.\n   int hash_table_size_;\n \n@@ -583,37 +604,36 @@ class DictEncoder : public Encoder<DType> {\n   std::vector<T> uniques_;\n \n   bool SlotDifferent(const T& v, hash_slot_t slot);\n-  void DoubleTableSize();\n \n   /// Size of each encoded dictionary value. -1 for variable-length types.\n   int type_length_;\n \n-  /// Hash function for mapping a value to a bucket.\n-  inline int Hash(const T& value) const;\n-\n   /// Adds value to the hash table and updates dict_encoded_size_\n   void AddDictKey(const T& value);\n };\n \n template <typename DType>\n-inline int DictEncoder<DType>::Hash(const typename DType::c_type& value) const {\n-  return HashUtil::Hash(&value, sizeof(value), 0);\n+template <bool use_sse42>\n+int DictEncoder<DType>::Hash(const typename DType::c_type& value) {\n+  return ::arrow::HashUtil::Hash<use_sse42>(&value, sizeof(value), 0);\n }\n \n template <>\n-inline int DictEncoder<ByteArrayType>::Hash(const ByteArray& value) const {\n+template <bool use_sse42>\n+int DictEncoder<ByteArrayType>::Hash(const ByteArray& value) {\n   if (value.len > 0) {\n     DCHECK_NE(nullptr, value.ptr) << \"Value ptr cannot be NULL\";\n   }\n-  return HashUtil::Hash(value.ptr, value.len, 0);\n+  return ::arrow::HashUtil::Hash<use_sse42>(value.ptr, value.len, 0);\n }\n \n template <>\n-inline int DictEncoder<FLBAType>::Hash(const FixedLenByteArray& value) const {\n+template <bool use_sse42>\n+int DictEncoder<FLBAType>::Hash(const FixedLenByteArray& value) {\n   if (type_length_ > 0) {\n     DCHECK_NE(nullptr, value.ptr) << \"Value ptr cannot be NULL\";\n   }\n-  return HashUtil::Hash(value.ptr, type_length_, 0);\n+  return ::arrow::HashUtil::Hash<use_sse42>(value.ptr, type_length_, 0);\n }\n \n template <typename DType>\n@@ -629,8 +649,9 @@ inline bool DictEncoder<FLBAType>::SlotDifferent(const FixedLenByteArray& v,\n }\n \n template <typename DType>\n+template <bool use_sse42>\n inline void DictEncoder<DType>::Put(const typename DType::c_type& v) {\n-  int j = Hash(v) & mod_bitmask_;\n+  int j = Hash<use_sse42>(v) & mod_bitmask_;\n   hash_slot_t index = hash_slots_[j];\n \n   // Find an empty slot\n@@ -649,7 +670,7 @@ inline void DictEncoder<DType>::Put(const typename DType::c_type& v) {\n \n     if (ARROW_PREDICT_FALSE(static_cast<int>(uniques_.size()) >\n                             hash_table_size_ * MAX_HASH_LOAD)) {\n-      DoubleTableSize();\n+      DoubleTableSize<use_sse42>();\n     }\n   }\n \n@@ -657,6 +678,7 @@ inline void DictEncoder<DType>::Put(const typename DType::c_type& v) {\n }\n \n template <typename DType>\n+template <bool use_sse42>\n inline void DictEncoder<DType>::DoubleTableSize() {\n   int new_size = hash_table_size_ * 2;\n   Vector<hash_slot_t> new_hash_slots(0, allocator_);\n@@ -675,7 +697,7 @@ inline void DictEncoder<DType>::DoubleTableSize() {\n     const typename DType::c_type& v = uniques_[index];\n \n     // Find an empty slot in the new hash table\n-    j = Hash(v) & (new_size - 1);\n+    j = Hash<use_sse42>(v) & (new_size - 1);\n     slot = new_hash_slots[j];\n     while (HASH_SLOT_EMPTY != slot && SlotDifferent(v, slot)) {\n       ++j;\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T16:09:49.589+0000",
                    "updated": "2018-09-17T16:09:49.589+0000",
                    "started": "2018-09-17T16:09:49.589+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144895",
                    "issueId": "13185372"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1231609f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c81f5ec[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@371b9309[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@34363e93[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76497b29[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61b7f7c3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a5fa327[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@f98c659[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32b564b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6c6294ca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bd344fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@52b0f3d7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 17 16:09:39 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-17T16:09:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3242/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-16T14:57:07.000+0000",
        "updated": "2018-09-17T16:09:49.000+0000",
        "timeoriginalestimate": null,
        "description": "The way that we dispatch to SSE4 hash functions is a remnant from the Impala codebase, which checks CpuInfo on every iteration in debug builds:\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/util/hash-util.h#L43\r\n\r\nHowever, the static {{model_name_}} member is causing some non-determinism related to static member lifetime as reported in ARROW-3241. \r\n\r\nI'm proposing to refactor CpuInfo into a singleton pattern and handle SIMD vs non-SIMD dispatch at a higher level rather than at the lowest level like it is now. This should hopefully make the issue in ARROW-3241 go away",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Use coarser-grained dispatch to SIMD hash functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185372/comment/16617744",
                    "id": "16617744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2571\n[https://github.com/apache/arrow/pull/2571]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-17T16:09:39.620+0000",
                    "updated": "2018-09-17T16:09:39.620+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3y4zr:",
        "customfield_12314139": null
    }
}