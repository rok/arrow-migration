{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13260332",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332",
    "key": "ARROW-6781",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6781/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/515136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735\n\n\n   Adds more descriptive failures for comparison CHECKs.\r\n   \r\n   ```c++\r\n     ARROW_CHECK(1 == 2) << \"fails and prints operands\";\r\n     // ../src/arrow/util/logging_test.cc:101:  Check failed: 1 == 2\r\n     //   left:  1\r\n     //   right: 2\r\n     // fails and prints operands\r\n   \r\n     ARROW_CHECK(std::string(\"hello\") == \"hello\")\r\n         << \"differently typed operands are fine; they just need to \"\r\n         << \"support the relevant comparision\";\r\n   \r\n     ARROW_CHECK(std::vector<int>{1, 2} == std::vector<int>{})\r\n         << \"vector isn't printable - no extra printing\";\r\n   \r\n     ARROW_CHECK_OK(Status::OK()) << \"Status Checks can be streamed into\";\r\n   ```\r\n   \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T20:45:45.009+0000",
                    "updated": "2020-11-21T20:45:45.009+0000",
                    "started": "2020-11-21T20:45:45.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515136",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/515137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#issuecomment-731634539\n\n\n   https://issues.apache.org/jira/browse/ARROW-6781\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T20:47:38.551+0000",
                    "updated": "2020-11-21T20:47:38.551+0000",
                    "started": "2020-11-21T20:47:38.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515137",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/515541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#issuecomment-732160454\n\n\n   This PR needs rebasing now.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T13:26:02.890+0000",
                    "updated": "2020-11-23T13:26:02.890+0000",
                    "started": "2020-11-23T13:26:02.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515541",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r529636621\n\n\n\n##########\nFile path: cpp/build-support/cpplint.py\n##########\n@@ -4560,7 +4560,7 @@ def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,\n   CheckCommaSpacing(filename, clean_lines, linenum, error)\n   CheckBracesSpacing(filename, clean_lines, linenum, nesting_state, error)\n   CheckSpacingForFunctionCall(filename, clean_lines, linenum, error)\n-  CheckCheck(filename, clean_lines, linenum, error)\n+  #CheckCheck(filename, clean_lines, linenum, error)\n\nReview comment:\n       Is there a reason this is commented out?\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -86,56 +67,40 @@ enum class ArrowLogLevel : int {\n #define ARROW_CHECK_GE(val1, val2) ARROW_CHECK((val1) >= (val2))\n #define ARROW_CHECK_GT(val1, val2) ARROW_CHECK((val1) > (val2))\n \n-#ifdef NDEBUG\n-#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_WARNING\n+#define ARROW_LOG_FAILED_STATUS(status, ...)                                        \\\n+  ARROW_LOG(FATAL) << \" Operation failed: \" << ARROW_STRINGIFY(__VA_ARGS__) << \"\\n\" \\\n+                   << \" Bad status: \" << _s.ToString()\n+\n+// If the status is bad, CHECK immediately, appending the status to the logged\n+// message.\n+#define ARROW_CHECK_OK(...)                                                    \\\n+  for (::arrow::Status _s = ::arrow::internal::GenericToStatus((__VA_ARGS__)); \\\n\nReview comment:\n       Is there a particular reason for using a for loop?\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -22,22 +22,21 @@\n // The LLVM IR code doesn't have an NDEBUG mode. And, it shouldn't include references to\n // streams or stdc++. So, making the DCHECK calls void in that case.\n \n-#define ARROW_IGNORE_EXPR(expr) ((void)(expr))\n-\n-#define DCHECK(condition) ARROW_IGNORE_EXPR(condition)\n-#define DCHECK_OK(status) ARROW_IGNORE_EXPR(status)\n-#define DCHECK_EQ(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_NE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LT(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GT(val1, val2) ARROW_IGNORE_EXPR(val1)\n+#define DCHECK(condition) ARROW_UNUSED(condition)\n+#define DCHECK_OK(status) ARROW_UNUSED(status)\n+#define DCHECK_EQ(val1, val2) ARROW_UNUSED(val1 == val2)\n+#define DCHECK_NE(val1, val2) ARROW_UNUSED(val1 != val2)\n+#define DCHECK_LE(val1, val2) ARROW_UNUSED(val1 <= val2)\n+#define DCHECK_LT(val1, val2) ARROW_UNUSED(val1 < val2)\n+#define DCHECK_GE(val1, val2) ARROW_UNUSED(val1 >= val2)\n+#define DCHECK_GT(val1, val2) ARROW_UNUSED(val1 > val2)\n\nReview comment:\n       Hmm... if the comparisons are not trivial (for example they call a function that the compiler can't see whether it has side effects), then not all code will be eliminated?\r\n   \r\n   Perahsp instead something like `ARROW_UNUSED(val1), ARROW_UNUSED(val2)`?\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n\nReview comment:\n       Hmm... why?\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n+    const Lhs& lhs;\n+    const Rhs& rhs;\n+  };\n+\n+  template <typename Lhs, typename Rhs>\n+  static auto PrintOperands(const BoundLhsRhs<Lhs, Rhs>& bound, ArrowLogBase&& log)\n+      -> decltype(std::move(log) << bound.lhs << bound.rhs) {\n+    return std::move(log) << \"\\n  left:  \" << bound.lhs << \"\\n  right: \" << bound.rhs\n+                          << \"\\n\";\n+  }\n \n-/// @brief A helper for the nil log sink.\n-///\n-/// Using this helper is analogous to sending log messages to /dev/null:\n-/// nothing gets logged.\n-class NullLog {\n- public:\n-  /// The no-op output operator.\n-  ///\n-  /// @param [in] t\n-  ///   The object to send into the nil sink.\n-  /// @return Reference to the updated object.\n-  template <class T>\n-  NullLog& operator<<(const T& t) {\n-    return *this;\n+  template <typename Lhs>\n+  struct BoundLhs {\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator==(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator!=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    explicit constexpr operator bool() const { return false; }\n+\n+    const Lhs& lhs;\n+  };\n+\n+  template <typename Lhs>\n+  BoundLhs<Lhs> operator<=(const Lhs& lhs) && {\n\nReview comment:\n       Same question here... Don't you want to used regular method names?\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n+    const Lhs& lhs;\n+    const Rhs& rhs;\n+  };\n+\n+  template <typename Lhs, typename Rhs>\n+  static auto PrintOperands(const BoundLhsRhs<Lhs, Rhs>& bound, ArrowLogBase&& log)\n+      -> decltype(std::move(log) << bound.lhs << bound.rhs) {\n+    return std::move(log) << \"\\n  left:  \" << bound.lhs << \"\\n  right: \" << bound.rhs\n+                          << \"\\n\";\n+  }\n \n-/// @brief A helper for the nil log sink.\n-///\n-/// Using this helper is analogous to sending log messages to /dev/null:\n-/// nothing gets logged.\n-class NullLog {\n- public:\n-  /// The no-op output operator.\n-  ///\n-  /// @param [in] t\n-  ///   The object to send into the nil sink.\n-  /// @return Reference to the updated object.\n-  template <class T>\n-  NullLog& operator<<(const T& t) {\n-    return *this;\n+  template <typename Lhs>\n+  struct BoundLhs {\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator==(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator!=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n\nReview comment:\n       Why all these operators? They don't look like they perform the advertised operations.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T15:42:52.473+0000",
                    "updated": "2020-11-24T15:42:52.473+0000",
                    "started": "2020-11-24T15:42:52.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516212",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r529850927\n\n\n\n##########\nFile path: cpp/build-support/cpplint.py\n##########\n@@ -4560,7 +4560,7 @@ def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,\n   CheckCommaSpacing(filename, clean_lines, linenum, error)\n   CheckBracesSpacing(filename, clean_lines, linenum, nesting_state, error)\n   CheckSpacingForFunctionCall(filename, clean_lines, linenum, error)\n-  CheckCheck(filename, clean_lines, linenum, error)\n+  #CheckCheck(filename, clean_lines, linenum, error)\n\nReview comment:\n       Yes, this is a lint check which fails for `DCHECK(x == y)` (consider using `DCHECK_EQ(x, y)`)  \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T20:15:10.117+0000",
                    "updated": "2020-11-24T20:15:10.117+0000",
                    "started": "2020-11-24T20:15:10.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516327",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r529852117\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -22,22 +22,21 @@\n // The LLVM IR code doesn't have an NDEBUG mode. And, it shouldn't include references to\n // streams or stdc++. So, making the DCHECK calls void in that case.\n \n-#define ARROW_IGNORE_EXPR(expr) ((void)(expr))\n-\n-#define DCHECK(condition) ARROW_IGNORE_EXPR(condition)\n-#define DCHECK_OK(status) ARROW_IGNORE_EXPR(status)\n-#define DCHECK_EQ(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_NE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LT(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GT(val1, val2) ARROW_IGNORE_EXPR(val1)\n+#define DCHECK(condition) ARROW_UNUSED(condition)\n+#define DCHECK_OK(status) ARROW_UNUSED(status)\n+#define DCHECK_EQ(val1, val2) ARROW_UNUSED(val1 == val2)\n+#define DCHECK_NE(val1, val2) ARROW_UNUSED(val1 != val2)\n+#define DCHECK_LE(val1, val2) ARROW_UNUSED(val1 <= val2)\n+#define DCHECK_LT(val1, val2) ARROW_UNUSED(val1 < val2)\n+#define DCHECK_GE(val1, val2) ARROW_UNUSED(val1 >= val2)\n+#define DCHECK_GT(val1, val2) ARROW_UNUSED(val1 > val2)\n\nReview comment:\n       okay, but since these are debug checks anyway the giving them side effects results in differing behavior between release and debug. In general it's buggy to have non trivial code inside a debug check\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T20:17:23.231+0000",
                    "updated": "2020-11-24T20:17:23.231+0000",
                    "started": "2020-11-24T20:17:23.231+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516328",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r529853863\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -86,56 +67,40 @@ enum class ArrowLogLevel : int {\n #define ARROW_CHECK_GE(val1, val2) ARROW_CHECK((val1) >= (val2))\n #define ARROW_CHECK_GT(val1, val2) ARROW_CHECK((val1) > (val2))\n \n-#ifdef NDEBUG\n-#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_WARNING\n+#define ARROW_LOG_FAILED_STATUS(status, ...)                                        \\\n+  ARROW_LOG(FATAL) << \" Operation failed: \" << ARROW_STRINGIFY(__VA_ARGS__) << \"\\n\" \\\n+                   << \" Bad status: \" << _s.ToString()\n+\n+// If the status is bad, CHECK immediately, appending the status to the logged\n+// message.\n+#define ARROW_CHECK_OK(...)                                                    \\\n+  for (::arrow::Status _s = ::arrow::internal::GenericToStatus((__VA_ARGS__)); \\\n\nReview comment:\n       Yes, it allows us to confine `_s` to the scope of the loop body. The loop body is a single statement with no braces, allowing `*CHECK_OK()` to accept a stream.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T20:20:16.960+0000",
                    "updated": "2020-11-24T20:20:16.960+0000",
                    "started": "2020-11-24T20:20:16.960+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516329",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r529855297\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n\nReview comment:\n       These bound expressions must be contextually convertible to bool to enable `DCHECK(x >= 0 && x < 8)`. (It can't be destructured for better printing, but it should still be a valid assertion.) If the conversion to bool is not provided, then `bound_expr && x < 8` breaks compilation\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T20:22:55.250+0000",
                    "updated": "2020-11-24T20:22:55.250+0000",
                    "started": "2020-11-24T20:22:55.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516332",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r529862621\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n+    const Lhs& lhs;\n+    const Rhs& rhs;\n+  };\n+\n+  template <typename Lhs, typename Rhs>\n+  static auto PrintOperands(const BoundLhsRhs<Lhs, Rhs>& bound, ArrowLogBase&& log)\n+      -> decltype(std::move(log) << bound.lhs << bound.rhs) {\n+    return std::move(log) << \"\\n  left:  \" << bound.lhs << \"\\n  right: \" << bound.rhs\n+                          << \"\\n\";\n+  }\n \n-/// @brief A helper for the nil log sink.\n-///\n-/// Using this helper is analogous to sending log messages to /dev/null:\n-/// nothing gets logged.\n-class NullLog {\n- public:\n-  /// The no-op output operator.\n-  ///\n-  /// @param [in] t\n-  ///   The object to send into the nil sink.\n-  /// @return Reference to the updated object.\n-  template <class T>\n-  NullLog& operator<<(const T& t) {\n-    return *this;\n+  template <typename Lhs>\n+  struct BoundLhs {\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator==(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator!=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n\nReview comment:\n       The assert condition is tested [without decoration](https://github.com/apache/arrow/pull/8735/files#diff-e4af9b24769d2da2516cca1deb194f67f3fdbf692e6486c0e7149279af01cfb6R83). This avoids some compiler warnings and suspicion that destructuring might slow down the fast path (the check passes).\r\n   \r\n   Destructuring operates on another copy of the condition expression for printing purposes only.\r\n   \r\n   It relies on the slightly higher precedence of `<=` compared to the other comparison operators. After macro expansion, the [intercepted comparison](https://github.com/apache/arrow/pull/8735/files#diff-e4af9b24769d2da2516cca1deb194f67f3fdbf692e6486c0e7149279af01cfb6R85) is as follows:\r\n   ```\r\n   InterceptComparison() <= x > y\r\n   ((InterceptComparison() <= x) > y)  // parentheses for clarity\r\n   ```\r\n   The inner parenthesis captures `x`, then the outer parenthesis captures `y`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T20:37:21.185+0000",
                    "updated": "2020-11-24T20:37:21.185+0000",
                    "started": "2020-11-24T20:37:21.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516337",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530186803\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -22,22 +22,21 @@\n // The LLVM IR code doesn't have an NDEBUG mode. And, it shouldn't include references to\n // streams or stdc++. So, making the DCHECK calls void in that case.\n \n-#define ARROW_IGNORE_EXPR(expr) ((void)(expr))\n-\n-#define DCHECK(condition) ARROW_IGNORE_EXPR(condition)\n-#define DCHECK_OK(status) ARROW_IGNORE_EXPR(status)\n-#define DCHECK_EQ(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_NE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LT(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GT(val1, val2) ARROW_IGNORE_EXPR(val1)\n+#define DCHECK(condition) ARROW_UNUSED(condition)\n+#define DCHECK_OK(status) ARROW_UNUSED(status)\n+#define DCHECK_EQ(val1, val2) ARROW_UNUSED(val1 == val2)\n+#define DCHECK_NE(val1, val2) ARROW_UNUSED(val1 != val2)\n+#define DCHECK_LE(val1, val2) ARROW_UNUSED(val1 <= val2)\n+#define DCHECK_LT(val1, val2) ARROW_UNUSED(val1 < val2)\n+#define DCHECK_GE(val1, val2) ARROW_UNUSED(val1 >= val2)\n+#define DCHECK_GT(val1, val2) ARROW_UNUSED(val1 > val2)\n\nReview comment:\n       I'm not saying the comparison _would_ have a side-effect, just that the compiler wouldn't know about it and therefore couldn't entirely eliminate the comparison code.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T08:29:25.431+0000",
                    "updated": "2020-11-25T08:29:25.431+0000",
                    "started": "2020-11-25T08:29:25.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516531",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530187025\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -86,56 +67,40 @@ enum class ArrowLogLevel : int {\n #define ARROW_CHECK_GE(val1, val2) ARROW_CHECK((val1) >= (val2))\n #define ARROW_CHECK_GT(val1, val2) ARROW_CHECK((val1) > (val2))\n \n-#ifdef NDEBUG\n-#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_WARNING\n+#define ARROW_LOG_FAILED_STATUS(status, ...)                                        \\\n+  ARROW_LOG(FATAL) << \" Operation failed: \" << ARROW_STRINGIFY(__VA_ARGS__) << \"\\n\" \\\n+                   << \" Bad status: \" << _s.ToString()\n+\n+// If the status is bad, CHECK immediately, appending the status to the logged\n+// message.\n+#define ARROW_CHECK_OK(...)                                                    \\\n+  for (::arrow::Status _s = ::arrow::internal::GenericToStatus((__VA_ARGS__)); \\\n\nReview comment:\n       Ok, but I mean compared to a regular `while` or `do...while`? \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T08:29:48.859+0000",
                    "updated": "2020-11-25T08:29:48.859+0000",
                    "started": "2020-11-25T08:29:48.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516532",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530187510\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n\nReview comment:\n       Would there be a less cryptic way to implement the whole thing?\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n+    const Lhs& lhs;\n+    const Rhs& rhs;\n+  };\n+\n+  template <typename Lhs, typename Rhs>\n+  static auto PrintOperands(const BoundLhsRhs<Lhs, Rhs>& bound, ArrowLogBase&& log)\n+      -> decltype(std::move(log) << bound.lhs << bound.rhs) {\n+    return std::move(log) << \"\\n  left:  \" << bound.lhs << \"\\n  right: \" << bound.rhs\n+                          << \"\\n\";\n+  }\n \n-/// @brief A helper for the nil log sink.\n-///\n-/// Using this helper is analogous to sending log messages to /dev/null:\n-/// nothing gets logged.\n-class NullLog {\n- public:\n-  /// The no-op output operator.\n-  ///\n-  /// @param [in] t\n-  ///   The object to send into the nil sink.\n-  /// @return Reference to the updated object.\n-  template <class T>\n-  NullLog& operator<<(const T& t) {\n-    return *this;\n+  template <typename Lhs>\n+  struct BoundLhs {\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator==(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator!=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n\nReview comment:\n       Same question then :-)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T08:30:47.824+0000",
                    "updated": "2020-11-25T08:30:47.824+0000",
                    "started": "2020-11-25T08:30:47.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516534",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530348934\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -86,56 +67,40 @@ enum class ArrowLogLevel : int {\n #define ARROW_CHECK_GE(val1, val2) ARROW_CHECK((val1) >= (val2))\n #define ARROW_CHECK_GT(val1, val2) ARROW_CHECK((val1) > (val2))\n \n-#ifdef NDEBUG\n-#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_WARNING\n+#define ARROW_LOG_FAILED_STATUS(status, ...)                                        \\\n+  ARROW_LOG(FATAL) << \" Operation failed: \" << ARROW_STRINGIFY(__VA_ARGS__) << \"\\n\" \\\n+                   << \" Bad status: \" << _s.ToString()\n+\n+// If the status is bad, CHECK immediately, appending the status to the logged\n+// message.\n+#define ARROW_CHECK_OK(...)                                                    \\\n+  for (::arrow::Status _s = ::arrow::internal::GenericToStatus((__VA_ARGS__)); \\\n\nReview comment:\n       The last tokens of a `do... while` loop are the loop condition, which precludes providing a stream for extra error messages.\r\n   \r\n   `for` supports a scoped decl, which `while` doesn't. If we wanted to avoid `for`, we could introduce a variable as in `ARROW_ASSIGN_OR_RAISE`. After some macro expansion that'd look like:\r\n   \r\n   ```c++\r\n   Status _s_56 = Thing();\r\n   if (ARROW_PREDICT_FALSE(!_s_56.ok()))\r\n   ARROW_LOG(FATAL) << _s.message() << \"Extra messages\";\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T12:48:52.747+0000",
                    "updated": "2020-11-25T12:48:52.747+0000",
                    "started": "2020-11-25T12:48:52.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516660",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530348934\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -86,56 +67,40 @@ enum class ArrowLogLevel : int {\n #define ARROW_CHECK_GE(val1, val2) ARROW_CHECK((val1) >= (val2))\n #define ARROW_CHECK_GT(val1, val2) ARROW_CHECK((val1) > (val2))\n \n-#ifdef NDEBUG\n-#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_WARNING\n+#define ARROW_LOG_FAILED_STATUS(status, ...)                                        \\\n+  ARROW_LOG(FATAL) << \" Operation failed: \" << ARROW_STRINGIFY(__VA_ARGS__) << \"\\n\" \\\n+                   << \" Bad status: \" << _s.ToString()\n+\n+// If the status is bad, CHECK immediately, appending the status to the logged\n+// message.\n+#define ARROW_CHECK_OK(...)                                                    \\\n+  for (::arrow::Status _s = ::arrow::internal::GenericToStatus((__VA_ARGS__)); \\\n\nReview comment:\n       The last tokens of a `do... while` loop are the loop condition, which precludes providing a stream for extra error messages.\r\n   \r\n   `for` supports a scoped decl, which `while` doesn't. If we wanted to avoid `for`, we could introduce a variable as in `ARROW_ASSIGN_OR_RAISE`. After some macro expansion that'd look like:\r\n   \r\n   ```c++\r\n   Status _s_56 = Thing();\r\n   if (ARROW_PREDICT_FALSE(!_s_56.ok()))\r\n   ARROW_LOG(FATAL) << _s.message() << \"Extra messages\";\r\n   ```\r\n   \r\n   It seems more desirable to keep things scoped with a `for`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T12:51:37.800+0000",
                    "updated": "2020-11-25T12:51:37.800+0000",
                    "started": "2020-11-25T12:51:37.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516663",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530353939\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -22,22 +22,21 @@\n // The LLVM IR code doesn't have an NDEBUG mode. And, it shouldn't include references to\n // streams or stdc++. So, making the DCHECK calls void in that case.\n \n-#define ARROW_IGNORE_EXPR(expr) ((void)(expr))\n-\n-#define DCHECK(condition) ARROW_IGNORE_EXPR(condition)\n-#define DCHECK_OK(status) ARROW_IGNORE_EXPR(status)\n-#define DCHECK_EQ(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_NE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_LT(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GE(val1, val2) ARROW_IGNORE_EXPR(val1)\n-#define DCHECK_GT(val1, val2) ARROW_IGNORE_EXPR(val1)\n+#define DCHECK(condition) ARROW_UNUSED(condition)\n+#define DCHECK_OK(status) ARROW_UNUSED(status)\n+#define DCHECK_EQ(val1, val2) ARROW_UNUSED(val1 == val2)\n+#define DCHECK_NE(val1, val2) ARROW_UNUSED(val1 != val2)\n+#define DCHECK_LE(val1, val2) ARROW_UNUSED(val1 <= val2)\n+#define DCHECK_LT(val1, val2) ARROW_UNUSED(val1 < val2)\n+#define DCHECK_GE(val1, val2) ARROW_UNUSED(val1 >= val2)\n+#define DCHECK_GT(val1, val2) ARROW_UNUSED(val1 > val2)\n\nReview comment:\n       Ah, I see. In that case I should prefix `if (false)` so the entire expr can be dropped\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T12:57:03.292+0000",
                    "updated": "2020-11-25T12:57:03.292+0000",
                    "started": "2020-11-25T12:57:03.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516667",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530369496\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n+    const Lhs& lhs;\n+    const Rhs& rhs;\n+  };\n+\n+  template <typename Lhs, typename Rhs>\n+  static auto PrintOperands(const BoundLhsRhs<Lhs, Rhs>& bound, ArrowLogBase&& log)\n+      -> decltype(std::move(log) << bound.lhs << bound.rhs) {\n+    return std::move(log) << \"\\n  left:  \" << bound.lhs << \"\\n  right: \" << bound.rhs\n+                          << \"\\n\";\n+  }\n \n-/// @brief A helper for the nil log sink.\n-///\n-/// Using this helper is analogous to sending log messages to /dev/null:\n-/// nothing gets logged.\n-class NullLog {\n- public:\n-  /// The no-op output operator.\n-  ///\n-  /// @param [in] t\n-  ///   The object to send into the nil sink.\n-  /// @return Reference to the updated object.\n-  template <class T>\n-  NullLog& operator<<(const T& t) {\n-    return *this;\n+  template <typename Lhs>\n+  struct BoundLhs {\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator==(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator!=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n\nReview comment:\n       This is the approach used by the [Catch2](https://github.com/catchorg/Catch2) test framework's assertion macro. I'm not aware of another way to destructure a comparison's operands\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T13:22:03.990+0000",
                    "updated": "2020-11-25T13:22:03.990+0000",
                    "started": "2020-11-25T13:22:03.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516675",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/516700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#discussion_r530408123\n\n\n\n##########\nFile path: cpp/src/arrow/util/logging.h\n##########\n@@ -202,48 +169,81 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  private:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n \n+  std::ostream* Stream() override;\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\n   /// True if log messages should be logged and false if they should be ignored.\n   bool is_enabled_;\n \n   static ArrowLogLevel severity_threshold_;\n-\n- protected:\n-  std::ostream& Stream() override;\n };\n \n-// This class make ARROW_CHECK compilation pass to change the << operator to void.\n-// This class is copied from glog.\n-class ARROW_EXPORT Voidify {\n- public:\n-  Voidify() {}\n-  // This has to be an operator with a precedence lower than << but\n-  // higher than ?:\n-  void operator&(ArrowLogBase&) {}\n-};\n+struct ARROW_EXPORT InterceptComparison {\n+  template <typename NotBinaryOrNotPrintable>\n+  static ArrowLogBase&& PrintOperands(const NotBinaryOrNotPrintable&,\n+                                      ArrowLogBase&& log) {\n+    return std::move(log);\n+  }\n \n-namespace detail {\n+  template <typename Lhs, typename Rhs>\n+  struct BoundLhsRhs {\n+    explicit constexpr operator bool() const { return false; }\n+    const Lhs& lhs;\n+    const Rhs& rhs;\n+  };\n+\n+  template <typename Lhs, typename Rhs>\n+  static auto PrintOperands(const BoundLhsRhs<Lhs, Rhs>& bound, ArrowLogBase&& log)\n+      -> decltype(std::move(log) << bound.lhs << bound.rhs) {\n+    return std::move(log) << \"\\n  left:  \" << bound.lhs << \"\\n  right: \" << bound.rhs\n+                          << \"\\n\";\n+  }\n \n-/// @brief A helper for the nil log sink.\n-///\n-/// Using this helper is analogous to sending log messages to /dev/null:\n-/// nothing gets logged.\n-class NullLog {\n- public:\n-  /// The no-op output operator.\n-  ///\n-  /// @param [in] t\n-  ///   The object to send into the nil sink.\n-  /// @return Reference to the updated object.\n-  template <class T>\n-  NullLog& operator<<(const T& t) {\n-    return *this;\n+  template <typename Lhs>\n+  struct BoundLhs {\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator==(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator!=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator>=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n+\n+    template <typename Rhs>\n+    BoundLhsRhs<Lhs, Rhs> operator<=(const Rhs& rhs) && {\n+      return {lhs, rhs};\n+    }\n\nReview comment:\n       Ok, but destructuring in the first place shouldn't be required. I guess you want `DCHECK(a == b)` to function exactly like `DCHECK_EQ(a, b)`, but that doesn't sound required to me. \r\n   \r\n   Otherwise, please at least explain all this in comments, because it's extremely cryptic at first sight.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T14:20:31.177+0000",
                    "updated": "2020-11-25T14:20:31.177+0000",
                    "started": "2020-11-25T14:20:31.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516700",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/530781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735#issuecomment-754109097\n\n\n   closing for now\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T17:30:35.956+0000",
                    "updated": "2021-01-04T17:30:35.956+0000",
                    "started": "2021-01-04T17:30:35.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530781",
                    "issueId": "13260332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/worklog/530782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #8735:\nURL: https://github.com/apache/arrow/pull/8735\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T17:30:38.854+0000",
                    "updated": "2021-01-04T17:30:38.854+0000",
                    "started": "2021-01-04T17:30:38.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530782",
                    "issueId": "13260332"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@d467359[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15f2995e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bae9a6a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3a97cc28[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c993ae4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@e5e77a3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@416cd1c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@451eb341[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6075ef1c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1deb6fde[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3aae1f3a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@a9a3795[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:22 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6781/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2019-10-03T15:23:45.000+0000",
        "updated": "2022-07-12T14:04:22.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently we have multiple macros like {{DCHECK_EQ}} and {{DCHECK_LT}} which check various comparisons but don't report anything about their operands. Furthermore, the \"stream to assertion\" pattern for appending extra info has proven fragile. I propose a new unified macro which can capture operands of comparisons and report them:\r\n\r\n{code:cpp}\r\n  int three = 3;\r\n  int five = 5;\r\n  DCHECK(three == five, \"extra: \", 1, 2, five);\r\n{code}\r\n\r\nResults in check failure messages like:\r\n{code}\r\nF1003 11:12:46.174767  4166 logging_test.cc:141]  Check failed: three == five\r\n  LHS: 3\r\n  RHS: 5\r\nextra: 125\r\n{code}\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve and consolidate ARROW_CHECK, DCHECK macros",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260332/comment/17565566",
                    "id": "17565566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:22.714+0000",
                    "updated": "2022-07-12T14:04:22.714+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z079o0:",
        "customfield_12314139": null
    }
}