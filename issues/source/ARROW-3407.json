{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188932",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932",
    "key": "ARROW-3407",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "csv",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3407/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/worklog/163975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2924: ARROW-3407: [C++] Add UTF8 handling to CSV conversion\nURL: https://github.com/apache/arrow/pull/2924\n \n \n   CSV conversion now has distinct paths for string and binary columns. String columns are UTF8-validated by default, but it can be disabled by setting the `check_utf8` option in `ConvertOptions`.\r\n   \r\n   CSV type inference now first attempts string conversion and falls back on binary if UTF8 validation fails (if it's not disabled).\r\n   \r\n   As for performance, on pure ASCII columns single-threaded reading slows down by ~10% (which can be avoided by setting `check_utf8` to false). Multi-threaded reading does not seem affected here.\r\n   \r\n   Based on PR #2916.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T17:00:20.304+0000",
                    "updated": "2018-11-08T17:00:20.304+0000",
                    "started": "2018-11-08T17:00:20.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163975",
                    "issueId": "13188932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/worklog/164168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2924: ARROW-3407: [C++] Add UTF8 handling to CSV conversion\nURL: https://github.com/apache/arrow/pull/2924#issuecomment-437207152\n \n \n   Rebased\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T00:32:32.677+0000",
                    "updated": "2018-11-09T00:32:32.677+0000",
                    "started": "2018-11-09T00:32:32.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164168",
                    "issueId": "13188932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/worklog/164531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2924: ARROW-3407: [C++] Add UTF8 handling to CSV conversion\nURL: https://github.com/apache/arrow/pull/2924#discussion_r232111291\n \n \n\n ##########\n File path: cpp/src/arrow/csv/column-builder.cc\n ##########\n @@ -155,7 +155,7 @@ class InferringColumnBuilder : public ColumnBuilder {\n   std::shared_ptr<Converter> converter_;\n \n   // Current inference status\n-  enum class InferKind { Null, Integer, Real, Text };\n+  enum class InferKind { Null, Integer, Real, Text, Binary };\n \n Review comment:\n   Should Text be renamed to `Utf8`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T22:22:46.686+0000",
                    "updated": "2018-11-09T22:22:46.686+0000",
                    "started": "2018-11-09T22:22:46.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164531",
                    "issueId": "13188932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/worklog/164532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2924: ARROW-3407: [C++] Add UTF8 handling to CSV conversion\nURL: https://github.com/apache/arrow/pull/2924#discussion_r232410016\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-converter-test.cc\n ##########\n @@ -109,16 +142,8 @@ TEST(FixedSizeBinaryConversion, Basics) {\n }\n \n TEST(FixedSizeBinaryConversion, Errors) {\n-  std::shared_ptr<BlockParser> parser;\n-  std::shared_ptr<Converter> converter;\n-  std::shared_ptr<Array> array;\n-  std::shared_ptr<DataType> type = fixed_size_binary(2);\n-\n-  ASSERT_OK(Converter::Make(type, ConvertOptions::Defaults(), &converter));\n-\n-  MakeCSVParser({\"ab,cd\\n\", \"g,ij\\n\"}, &parser);\n-  ASSERT_RAISES(Invalid, converter->Convert(*parser, 0, &array));\n-  ASSERT_OK(converter->Convert(*parser, 1, &array));\n \n Review comment:\n   nice\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T22:22:46.687+0000",
                    "updated": "2018-11-09T22:22:46.687+0000",
                    "started": "2018-11-09T22:22:46.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164532",
                    "issueId": "13188932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/worklog/164533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2924: ARROW-3407: [C++] Add UTF8 handling to CSV conversion\nURL: https://github.com/apache/arrow/pull/2924#discussion_r232410188\n \n \n\n ##########\n File path: python/doc/source/csv.rst\n ##########\n @@ -69,11 +69,17 @@ To alter the default parsing settings in case of reading CSV files with an\n unusual structure, you should create a :class:`ParseOptions` instance\n and pass it to :func:`read_csv`.\n \n+Customized conversion\n+---------------------\n+\n+To alter how CSV data is converted to Arrow types and data, you should create\n+a :class:`ConvertOptions` instance and pass it to :func:`read_csv`.\n+\n Limitations\n -----------\n \n Arrow is not able to detect or convert other data types (such as dates\n-and times) than the four mentioned above.  It is also not possible to\n+and times) than the five mentioned above.  It is also not possible to\n \n Review comment:\n   Maybe should change this to \"the ones mentioned above\" next time =) \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T22:22:46.691+0000",
                    "updated": "2018-11-09T22:22:46.691+0000",
                    "started": "2018-11-09T22:22:46.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164533",
                    "issueId": "13188932"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/worklog/164537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2924: ARROW-3407: [C++] Add UTF8 handling to CSV conversion\nURL: https://github.com/apache/arrow/pull/2924\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/csv/column-builder.cc b/cpp/src/arrow/csv/column-builder.cc\nindex b7610a532e..4895f2032c 100644\n--- a/cpp/src/arrow/csv/column-builder.cc\n+++ b/cpp/src/arrow/csv/column-builder.cc\n@@ -155,7 +155,7 @@ class InferringColumnBuilder : public ColumnBuilder {\n   std::shared_ptr<Converter> converter_;\n \n   // Current inference status\n-  enum class InferKind { Null, Integer, Real, Text };\n+  enum class InferKind { Null, Integer, Real, Text, Binary };\n \n   std::shared_ptr<DataType> infer_type_;\n   InferKind infer_kind_;\n@@ -185,6 +185,9 @@ Status InferringColumnBuilder::LoosenType() {\n       infer_kind_ = InferKind::Text;\n       break;\n     case InferKind::Text:\n+      infer_kind_ = InferKind::Binary;\n+      break;\n+    case InferKind::Binary:\n       return Status::UnknownError(\"Shouldn't come here\");\n   }\n   return UpdateType();\n@@ -207,6 +210,10 @@ Status InferringColumnBuilder::UpdateType() {\n       can_loosen_type_ = true;\n       break;\n     case InferKind::Text:\n+      infer_type_ = utf8();\n+      can_loosen_type_ = true;\n+      break;\n+    case InferKind::Binary:\n       infer_type_ = binary();\n       can_loosen_type_ = false;\n       break;\ndiff --git a/cpp/src/arrow/csv/converter.cc b/cpp/src/arrow/csv/converter.cc\nindex 81015c1a07..729c9344d1 100644\n--- a/cpp/src/arrow/csv/converter.cc\n+++ b/cpp/src/arrow/csv/converter.cc\n@@ -28,6 +28,7 @@\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/parsing.h\"  // IWYU pragma: keep\n+#include \"arrow/util/utf8.h\"\n \n namespace arrow {\n namespace csv {\n@@ -56,6 +57,7 @@ class ConcreteConverter : public Converter {\n   using Converter::Converter;\n \n  protected:\n+  Status Initialize() override { return Status::OK(); }\n   inline bool IsNull(const uint8_t* data, uint32_t size, bool quoted);\n };\n \n@@ -197,34 +199,41 @@ Status NullConverter::Convert(const BlockParser& parser, int32_t col_index,\n /////////////////////////////////////////////////////////////////////////\n // Concrete Converter for var-sized binary strings\n \n-template <typename T>\n+template <typename T, bool CheckUTF8>\n class VarSizeBinaryConverter : public ConcreteConverter {\n  public:\n   using ConcreteConverter::ConcreteConverter;\n \n   Status Convert(const BlockParser& parser, int32_t col_index,\n-                 std::shared_ptr<Array>* out) override;\n-};\n+                 std::shared_ptr<Array>* out) override {\n+    using BuilderType = typename TypeTraits<T>::BuilderType;\n+    BuilderType builder(pool_);\n \n-template <typename T>\n-Status VarSizeBinaryConverter<T>::Convert(const BlockParser& parser, int32_t col_index,\n-                                          std::shared_ptr<Array>* out) {\n-  using BuilderType = typename TypeTraits<T>::BuilderType;\n-  BuilderType builder(pool_);\n+    // TODO do we accept nulls here?\n \n-  // TODO handle nulls\n+    auto visit = [&](const uint8_t* data, uint32_t size, bool quoted) -> Status {\n+      if (CheckUTF8 && ARROW_PREDICT_FALSE(!util::ValidateUTF8(data, size))) {\n+        std::stringstream ss;\n+        ss << \"CSV conversion error to \" << type_->ToString() << \": invalid UTF8 data\";\n+        return Status::Invalid(ss.str());\n+      }\n+      builder.UnsafeAppend(data, size);\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(builder.Resize(parser.num_rows()));\n+    RETURN_NOT_OK(builder.ReserveData(parser.num_bytes()));\n+    RETURN_NOT_OK(parser.VisitColumn(col_index, visit));\n+    RETURN_NOT_OK(builder.Finish(out));\n \n-  auto visit = [&](const uint8_t* data, uint32_t size, bool quoted) -> Status {\n-    builder.UnsafeAppend(data, size);\n     return Status::OK();\n-  };\n-  RETURN_NOT_OK(builder.Resize(parser.num_rows()));\n-  RETURN_NOT_OK(builder.ReserveData(parser.num_bytes()));\n-  RETURN_NOT_OK(parser.VisitColumn(col_index, visit));\n-  RETURN_NOT_OK(builder.Finish(out));\n+  }\n \n-  return Status::OK();\n-}\n+ protected:\n+  Status Initialize() override {\n+    util::InitializeUTF8();\n+    return Status::OK();\n+  }\n+};\n \n /////////////////////////////////////////////////////////////////////////\n // Concrete Converter for fixed-sized binary strings\n@@ -242,7 +251,7 @@ Status FixedSizeBinaryConverter::Convert(const BlockParser& parser, int32_t col_\n   FixedSizeBinaryBuilder builder(type_, pool_);\n   const uint32_t byte_width = static_cast<uint32_t>(builder.byte_width());\n \n-  // TODO handle nulls\n+  // TODO do we accept nulls here?\n \n   auto visit = [&](const uint8_t* data, uint32_t size, bool quoted) -> Status {\n     if (ARROW_PREDICT_FALSE(size != byte_width)) {\n@@ -340,9 +349,6 @@ Status Converter::Make(const std::shared_ptr<DataType>& type, ConvertOptions opt\n     break;\n \n     CONVERTER_CASE(Type::NA, NullConverter)\n-    CONVERTER_CASE(Type::BINARY, VarSizeBinaryConverter<BinaryType>)\n-    CONVERTER_CASE(Type::STRING, VarSizeBinaryConverter<StringType>)\n-    CONVERTER_CASE(Type::FIXED_SIZE_BINARY, FixedSizeBinaryConverter)\n     CONVERTER_CASE(Type::INT8, NumericConverter<Int8Type>)\n     CONVERTER_CASE(Type::INT16, NumericConverter<Int16Type>)\n     CONVERTER_CASE(Type::INT32, NumericConverter<Int32Type>)\n@@ -354,6 +360,16 @@ Status Converter::Make(const std::shared_ptr<DataType>& type, ConvertOptions opt\n     CONVERTER_CASE(Type::FLOAT, NumericConverter<FloatType>)\n     CONVERTER_CASE(Type::DOUBLE, NumericConverter<DoubleType>)\n     CONVERTER_CASE(Type::BOOL, NumericConverter<BooleanType>)\n+    CONVERTER_CASE(Type::BINARY, (VarSizeBinaryConverter<BinaryType, false>))\n+    CONVERTER_CASE(Type::FIXED_SIZE_BINARY, FixedSizeBinaryConverter)\n+\n+    case Type::STRING:\n+      if (options.check_utf8) {\n+        result = new VarSizeBinaryConverter<StringType, true>(type, options, pool);\n+      } else {\n+        result = new VarSizeBinaryConverter<StringType, false>(type, options, pool);\n+      }\n+      break;\n \n     default: {\n       std::stringstream ss;\n@@ -364,7 +380,7 @@ Status Converter::Make(const std::shared_ptr<DataType>& type, ConvertOptions opt\n #undef CONVERTER_CASE\n   }\n   out->reset(result);\n-  return Status::OK();\n+  return result->Initialize();\n }\n \n Status Converter::Make(const std::shared_ptr<DataType>& type, ConvertOptions options,\ndiff --git a/cpp/src/arrow/csv/converter.h b/cpp/src/arrow/csv/converter.h\nindex 52f893445b..3fc3ac491a 100644\n--- a/cpp/src/arrow/csv/converter.h\n+++ b/cpp/src/arrow/csv/converter.h\n@@ -55,6 +55,8 @@ class ARROW_EXPORT Converter {\n  protected:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(Converter);\n \n+  virtual Status Initialize() = 0;\n+\n   ConvertOptions options_;\n   MemoryPool* pool_;\n   std::shared_ptr<DataType> type_;\ndiff --git a/cpp/src/arrow/csv/csv-column-builder-test.cc b/cpp/src/arrow/csv/csv-column-builder-test.cc\nindex a4dc236287..7488ad8051 100644\n--- a/cpp/src/arrow/csv/csv-column-builder-test.cc\n+++ b/cpp/src/arrow/csv/csv-column-builder-test.cc\n@@ -214,17 +214,58 @@ TEST(InferringColumnBuilder, MultipleChunkReal) {\n   AssertChunkedEqual(*expected, *actual);\n }\n \n+TEST(InferringColumnBuilder, SingleChunkString) {\n+  auto tg = TaskGroup::MakeSerial();\n+  std::shared_ptr<ColumnBuilder> builder;\n+  std::shared_ptr<ChunkedArray> actual;\n+  std::shared_ptr<ChunkedArray> expected;\n+\n+  // With valid UTF8\n+  ASSERT_OK(ColumnBuilder::Make(0, ConvertOptions::Defaults(), tg, &builder));\n+  AssertBuilding(builder, {{\"\", \"foo\", \"bar\u00e9\"}}, &actual);\n+\n+  ChunkedArrayFromVector<StringType, std::string>({{true, true, true}},\n+                                                  {{\"\", \"foo\", \"bar\u00e9\"}}, &expected);\n+  AssertChunkedEqual(*expected, *actual);\n+\n+  // With invalid UTF8, non-checking\n+  auto options = ConvertOptions::Defaults();\n+  options.check_utf8 = false;\n+  tg = TaskGroup::MakeSerial();\n+  ASSERT_OK(ColumnBuilder::Make(0, options, tg, &builder));\n+  AssertBuilding(builder, {{\"\", \"foo\\xff\", \"bar\u00e9\"}}, &actual);\n+\n+  ChunkedArrayFromVector<StringType, std::string>({{true, true, true}},\n+                                                  {{\"\", \"foo\\xff\", \"bar\u00e9\"}}, &expected);\n+  AssertChunkedEqual(*expected, *actual);\n+}\n+\n TEST(InferringColumnBuilder, SingleChunkBinary) {\n+  auto tg = TaskGroup::MakeSerial();\n+  std::shared_ptr<ColumnBuilder> builder;\n+  std::shared_ptr<ChunkedArray> actual;\n+  std::shared_ptr<ChunkedArray> expected;\n+\n+  // With invalid UTF8, checking\n+  ASSERT_OK(ColumnBuilder::Make(0, ConvertOptions::Defaults(), tg, &builder));\n+  AssertBuilding(builder, {{\"\", \"foo\\xff\", \"bar\u00e9\"}}, &actual);\n+\n+  ChunkedArrayFromVector<BinaryType, std::string>({{true, true, true}},\n+                                                  {{\"\", \"foo\\xff\", \"bar\u00e9\"}}, &expected);\n+  AssertChunkedEqual(*expected, *actual);\n+}\n+\n+TEST(InferringColumnBuilder, MultipleChunkString) {\n   auto tg = TaskGroup::MakeSerial();\n   std::shared_ptr<ColumnBuilder> builder;\n   ASSERT_OK(ColumnBuilder::Make(0, ConvertOptions::Defaults(), tg, &builder));\n \n   std::shared_ptr<ChunkedArray> actual;\n-  AssertBuilding(builder, {{\"\", \"foo\", \"bar\"}}, &actual);\n+  AssertBuilding(builder, {{\"\"}, {\"008\"}, {\"NaN\", \"bar\u00e9\"}}, &actual);\n \n   std::shared_ptr<ChunkedArray> expected;\n-  ChunkedArrayFromVector<BinaryType, std::string>({{true, true, true}},\n-                                                  {{\"\", \"foo\", \"bar\"}}, &expected);\n+  ChunkedArrayFromVector<StringType, std::string>(\n+      {{true}, {true}, {true, true}}, {{\"\"}, {\"008\"}, {\"NaN\", \"bar\u00e9\"}}, &expected);\n   AssertChunkedEqual(*expected, *actual);\n }\n \n@@ -234,11 +275,11 @@ TEST(InferringColumnBuilder, MultipleChunkBinary) {\n   ASSERT_OK(ColumnBuilder::Make(0, ConvertOptions::Defaults(), tg, &builder));\n \n   std::shared_ptr<ChunkedArray> actual;\n-  AssertBuilding(builder, {{\"\"}, {\"008\"}, {\"NaN\", \"bar\"}}, &actual);\n+  AssertBuilding(builder, {{\"\"}, {\"008\"}, {\"NaN\", \"bar\u00e9\\xff\"}}, &actual);\n \n   std::shared_ptr<ChunkedArray> expected;\n   ChunkedArrayFromVector<BinaryType, std::string>(\n-      {{true}, {true}, {true, true}}, {{\"\"}, {\"008\"}, {\"NaN\", \"bar\"}}, &expected);\n+      {{true}, {true}, {true, true}}, {{\"\"}, {\"008\"}, {\"NaN\", \"bar\u00e9\\xff\"}}, &expected);\n   AssertChunkedEqual(*expected, *actual);\n }\n \ndiff --git a/cpp/src/arrow/csv/csv-converter-test.cc b/cpp/src/arrow/csv/csv-converter-test.cc\nindex dd3dba6232..024a54c0a4 100644\n--- a/cpp/src/arrow/csv/csv-converter-test.cc\n+++ b/cpp/src/arrow/csv/csv-converter-test.cc\n@@ -17,6 +17,7 @@\n \n #include <cstdint>\n #include <memory>\n+#include <set>\n #include <string>\n #include <vector>\n \n@@ -45,12 +46,13 @@ std::vector<std::string> AllNulls() {\n template <typename DATA_TYPE, typename C_TYPE>\n void AssertConversion(const std::shared_ptr<DataType>& type,\n                       const std::vector<std::string>& csv_string,\n-                      const std::vector<std::vector<C_TYPE>>& expected) {\n+                      const std::vector<std::vector<C_TYPE>>& expected,\n+                      ConvertOptions options = ConvertOptions::Defaults()) {\n   std::shared_ptr<BlockParser> parser;\n   std::shared_ptr<Converter> converter;\n   std::shared_ptr<Array> array, expected_array;\n \n-  ASSERT_OK(Converter::Make(type, ConvertOptions::Defaults(), &converter));\n+  ASSERT_OK(Converter::Make(type, options, &converter));\n \n   MakeCSVParser(csv_string, &parser);\n   for (int32_t col_index = 0; col_index < static_cast<int32_t>(expected.size());\n@@ -65,12 +67,13 @@ template <typename DATA_TYPE, typename C_TYPE>\n void AssertConversion(const std::shared_ptr<DataType>& type,\n                       const std::vector<std::string>& csv_string,\n                       const std::vector<std::vector<C_TYPE>>& expected,\n-                      const std::vector<std::vector<bool>>& is_valid) {\n+                      const std::vector<std::vector<bool>>& is_valid,\n+                      ConvertOptions options = ConvertOptions::Defaults()) {\n   std::shared_ptr<BlockParser> parser;\n   std::shared_ptr<Converter> converter;\n   std::shared_ptr<Array> array, expected_array;\n \n-  ASSERT_OK(Converter::Make(type, ConvertOptions::Defaults(), &converter));\n+  ASSERT_OK(Converter::Make(type, options, &converter));\n \n   MakeCSVParser(csv_string, &parser);\n   for (int32_t col_index = 0; col_index < static_cast<int32_t>(expected.size());\n@@ -90,17 +93,47 @@ void AssertConversionAllNulls(const std::shared_ptr<DataType>& type) {\n   AssertConversion<DATA_TYPE, C_TYPE>(type, nulls, {values}, {is_valid});\n }\n \n+void AssertConversionError(const std::shared_ptr<DataType>& type,\n+                           const std::vector<std::string>& csv_string,\n+                           const std::set<int32_t>& invalid_columns,\n+                           ConvertOptions options = ConvertOptions::Defaults()) {\n+  std::shared_ptr<BlockParser> parser;\n+  std::shared_ptr<Converter> converter;\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_OK(Converter::Make(type, options, &converter));\n+\n+  MakeCSVParser(csv_string, &parser);\n+  for (int32_t i = 0; i < parser->num_cols(); ++i) {\n+    if (invalid_columns.find(i) == invalid_columns.end()) {\n+      ASSERT_OK(converter->Convert(*parser, i, &array));\n+    } else {\n+      ASSERT_RAISES(Invalid, converter->Convert(*parser, i, &array));\n+    }\n+  }\n+}\n+\n //////////////////////////////////////////////////////////////////////////\n // Test functions begin here\n \n TEST(BinaryConversion, Basics) {\n-  AssertConversion<BinaryType, std::string>(binary(), {\"ab,cde\\n\", \",gh\\n\"},\n-                                            {{\"ab\", \"\"}, {\"cde\", \"gh\"}});\n+  AssertConversion<BinaryType, std::string>(binary(), {\"ab,cd\u00e9\\n\", \",\\xffgh\\n\"},\n+                                            {{\"ab\", \"\"}, {\"cd\u00e9\", \"\\xffgh\"}});\n }\n \n TEST(StringConversion, Basics) {\n-  AssertConversion<StringType, std::string>(utf8(), {\"ab,cde\\n\", \",gh\\n\"},\n-                                            {{\"ab\", \"\"}, {\"cde\", \"gh\"}});\n+  AssertConversion<StringType, std::string>(utf8(), {\"ab,cd\u00e9\\n\", \",gh\\n\"},\n+                                            {{\"ab\", \"\"}, {\"cd\u00e9\", \"gh\"}});\n+\n+  auto options = ConvertOptions::Defaults();\n+  options.check_utf8 = false;\n+  AssertConversion<StringType, std::string>(utf8(), {\"ab,cd\u00e9\\n\", \",\\xffgh\\n\"},\n+                                            {{\"ab\", \"\"}, {\"cd\u00e9\", \"\\xffgh\"}}, options);\n+}\n+\n+TEST(StringConversion, Errors) {\n+  // Invalid UTF8 in column 0\n+  AssertConversionError(utf8(), {\"ab,cd\u00e9\\n\", \"\\xff,gh\\n\"}, {0});\n }\n \n TEST(FixedSizeBinaryConversion, Basics) {\n@@ -109,16 +142,8 @@ TEST(FixedSizeBinaryConversion, Basics) {\n }\n \n TEST(FixedSizeBinaryConversion, Errors) {\n-  std::shared_ptr<BlockParser> parser;\n-  std::shared_ptr<Converter> converter;\n-  std::shared_ptr<Array> array;\n-  std::shared_ptr<DataType> type = fixed_size_binary(2);\n-\n-  ASSERT_OK(Converter::Make(type, ConvertOptions::Defaults(), &converter));\n-\n-  MakeCSVParser({\"ab,cd\\n\", \"g,ij\\n\"}, &parser);\n-  ASSERT_RAISES(Invalid, converter->Convert(*parser, 0, &array));\n-  ASSERT_OK(converter->Convert(*parser, 1, &array));\n+  // Wrong-sized string in column 0\n+  AssertConversionError(fixed_size_binary(2), {\"ab,cd\\n\", \"g,ij\\n\"}, {0});\n }\n \n TEST(NullConversion, Basics) {\ndiff --git a/cpp/src/arrow/csv/options.h b/cpp/src/arrow/csv/options.h\nindex 6119786301..0e423414d5 100644\n--- a/cpp/src/arrow/csv/options.h\n+++ b/cpp/src/arrow/csv/options.h\n@@ -51,6 +51,11 @@ struct ARROW_EXPORT ParseOptions {\n };\n \n struct ARROW_EXPORT ConvertOptions {\n+  // Conversion options\n+\n+  // Whether to check UTF8 validity of string columns\n+  bool check_utf8 = true;\n+\n   static ConvertOptions Defaults();\n };\n \ndiff --git a/python/doc/source/api.rst b/python/doc/source/api.rst\nindex caa2d65d82..4ecd7d66ce 100644\n--- a/python/doc/source/api.rst\n+++ b/python/doc/source/api.rst\n@@ -350,6 +350,7 @@ CSV Files\n \n    ReadOptions\n    ParseOptions\n+   ConvertOptions\n    read_csv\n \n .. currentmodule:: pyarrow.parquet\ndiff --git a/python/doc/source/csv.rst b/python/doc/source/csv.rst\nindex 5f9b46f5bb..3fff8a856f 100644\n--- a/python/doc/source/csv.rst\n+++ b/python/doc/source/csv.rst\n@@ -29,7 +29,7 @@ The features currently offered are the following:\n   such as ``my_data.csv.gz``)\n * fetching column names from the first row in the CSV file\n * column-wise type inference and conversion to one of ``null``, ``int64``,\n-  ``float64`` or ``binary`` data\n+  ``float64``, ``string`` or ``binary`` data\n * detecting various spellings of null values such as ``NaN`` or ``#N/A``\n \n Usage\n@@ -46,21 +46,21 @@ with the file path you want to read from::\n    pyarrow.Table\n    total_bill: double\n    tip: double\n-   sex: binary\n-   smoker: binary\n-   day: binary\n-   time: binary\n+   sex: string\n+   smoker: string\n+   day: string\n+   time: string\n    size: int64\n    >>> len(table)\n    244\n    >>> df = table.to_pandas()\n    >>> df.head()\n-      total_bill   tip        sex smoker     day       time  size\n-   0       16.99  1.01  b'Female'  b'No'  b'Sun'  b'Dinner'     2\n-   1       10.34  1.66    b'Male'  b'No'  b'Sun'  b'Dinner'     3\n-   2       21.01  3.50    b'Male'  b'No'  b'Sun'  b'Dinner'     3\n-   3       23.68  3.31    b'Male'  b'No'  b'Sun'  b'Dinner'     2\n-   4       24.59  3.61  b'Female'  b'No'  b'Sun'  b'Dinner'     4\n+      total_bill   tip     sex smoker  day    time  size\n+   0       16.99  1.01  Female     No  Sun  Dinner     2\n+   1       10.34  1.66    Male     No  Sun  Dinner     3\n+   2       21.01  3.50    Male     No  Sun  Dinner     3\n+   3       23.68  3.31    Male     No  Sun  Dinner     2\n+   4       24.59  3.61  Female     No  Sun  Dinner     4\n \n Customized parsing\n ------------------\n@@ -69,11 +69,17 @@ To alter the default parsing settings in case of reading CSV files with an\n unusual structure, you should create a :class:`ParseOptions` instance\n and pass it to :func:`read_csv`.\n \n+Customized conversion\n+---------------------\n+\n+To alter how CSV data is converted to Arrow types and data, you should create\n+a :class:`ConvertOptions` instance and pass it to :func:`read_csv`.\n+\n Limitations\n -----------\n \n Arrow is not able to detect or convert other data types (such as dates\n-and times) than the four mentioned above.  It is also not possible to\n+and times) than the five mentioned above.  It is also not possible to\n choose the data types of columns explicitly.\n \n Performance\ndiff --git a/python/pyarrow/_csv.pyx b/python/pyarrow/_csv.pyx\nindex 90da157803..e6488d0331 100644\n--- a/python/pyarrow/_csv.pyx\n+++ b/python/pyarrow/_csv.pyx\n@@ -215,6 +215,38 @@ cdef class ParseOptions:\n         self.options.newlines_in_values = value\n \n \n+cdef class ConvertOptions:\n+    \"\"\"\n+    Options for converting CSV data.\n+\n+    Parameters\n+    ----------\n+    check_utf8 : bool, optional (default True)\n+        Whether to check UTF8 validity of string columns.\n+    \"\"\"\n+    cdef:\n+        CCSVConvertOptions options\n+\n+    # Avoid mistakingly creating attributes\n+    __slots__ = ()\n+\n+    def __init__(self, check_utf8=None):\n+        self.options = CCSVConvertOptions.Defaults()\n+        if check_utf8 is not None:\n+            self.check_utf8 = check_utf8\n+\n+    @property\n+    def check_utf8(self):\n+        \"\"\"\n+        Whether to check UTF8 validity of string columns.\n+        \"\"\"\n+        return self.options.check_utf8\n+\n+    @check_utf8.setter\n+    def check_utf8(self, value):\n+        self.options.check_utf8 = value\n+\n+\n cdef _get_reader(input_file, shared_ptr[InputStream]* out):\n     use_memory_map = False\n     get_input_stream(input_file, use_memory_map, out)\n@@ -234,11 +266,12 @@ cdef _get_parse_options(ParseOptions parse_options, CCSVParseOptions* out):\n         out[0] = parse_options.options\n \n \n-cdef _get_convert_options(convert_options, CCSVConvertOptions* out):\n+cdef _get_convert_options(ConvertOptions convert_options,\n+                          CCSVConvertOptions* out):\n     if convert_options is None:\n         out[0] = CCSVConvertOptions.Defaults()\n     else:\n-        raise NotImplementedError(\"non-default convert options not supported\")\n+        out[0] = convert_options.options\n \n \n def read_csv(input_file, read_options=None, parse_options=None,\n@@ -257,8 +290,9 @@ def read_csv(input_file, read_options=None, parse_options=None,\n     parse_options: ParseOptions, optional\n         Options for the CSV parser\n         (see ParseOptions constructor for defaults)\n-    convert_options: None\n-        Currently unused\n+    convert_options: ConvertOptions, optional\n+        Options for converting CSV data\n+        (see ConvertOptions constructor for defaults)\n     memory_pool: MemoryPool, optional\n         Pool to allocate Table memory from\n \ndiff --git a/python/pyarrow/csv.py b/python/pyarrow/csv.py\nindex d6830a0d1e..8375ad49da 100644\n--- a/python/pyarrow/csv.py\n+++ b/python/pyarrow/csv.py\n@@ -15,4 +15,4 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-from pyarrow._csv import ReadOptions, ParseOptions, read_csv  # noqa\n+from pyarrow._csv import ReadOptions, ParseOptions, ConvertOptions, read_csv  # noqa\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 1f5f4cf547..a3d356ec20 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -947,6 +947,8 @@ cdef extern from \"arrow/csv/api.h\" namespace \"arrow::csv\" nogil:\n         CCSVParseOptions Defaults()\n \n     cdef cppclass CCSVConvertOptions\" arrow::csv::ConvertOptions\":\n+        c_bool check_utf8\n+\n         @staticmethod\n         CCSVConvertOptions Defaults()\n \ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex dbfa4f3395..c204fdfd85 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -30,7 +30,7 @@\n import numpy as np\n \n import pyarrow as pa\n-from pyarrow.csv import read_csv, ReadOptions, ParseOptions\n+from pyarrow.csv import read_csv, ReadOptions, ParseOptions, ConvertOptions\n \n \n def generate_col_names():\n@@ -117,6 +117,18 @@ def test_parse_options():\n     assert opts.newlines_in_values is True\n \n \n+def test_convert_options():\n+    cls = ConvertOptions\n+    opts = cls()\n+\n+    assert opts.check_utf8 is True\n+    opts.check_utf8 = False\n+    assert opts.check_utf8 is False\n+\n+    opts = cls(check_utf8=False)\n+    assert opts.check_utf8 is False\n+\n+\n class BaseTestCSVRead:\n \n     def read_bytes(self, b, **kwargs):\n@@ -153,31 +165,33 @@ def test_simple_varied(self):\n         table = self.read_bytes(rows)\n         schema = pa.schema([('a', pa.float64()),\n                             ('b', pa.int64()),\n-                            ('c', pa.binary())])\n+                            ('c', pa.string())])\n         assert table.schema == schema\n         assert table.to_pydict() == {\n             'a': [1.0, 4.0],\n             'b': [2, -5],\n-            'c': [b\"3\", b\"foo\"],\n+            'c': [u\"3\", u\"foo\"],\n             }\n \n     def test_simple_nulls(self):\n         # Infer various kinds of data, with nulls\n-        rows = (b\"a,b,c,d\\n\"\n-                b\"1,2,,\\n\"\n-                b\"nan,-5,foo,\\n\"\n-                b\"4.5,#N/A,nan,\\n\")\n+        rows = (b\"a,b,c,d,e\\n\"\n+                b\"1,2,,,3\\n\"\n+                b\"nan,-5,foo,,nan\\n\"\n+                b\"4.5,#N/A,nan,,\\xff\\n\")\n         table = self.read_bytes(rows)\n         schema = pa.schema([('a', pa.float64()),\n                             ('b', pa.int64()),\n-                            ('c', pa.binary()),\n-                            ('d', pa.null())])\n+                            ('c', pa.string()),\n+                            ('d', pa.null()),\n+                            ('e', pa.binary())])\n         assert table.schema == schema\n         assert table.to_pydict() == {\n             'a': [1.0, None, 4.5],\n             'b': [2, -5, None],\n-            'c': [b\"\", b\"foo\", b\"nan\"],\n-            'd': [None, None, None]\n+            'c': [u\"\", u\"foo\", u\"nan\"],\n+            'd': [None, None, None],\n+            'e': [b\"3\", b\"nan\", b\"\\xff\"],\n             }\n \n     def test_no_ending_newline(self):\n@@ -212,14 +226,14 @@ def test_options_delimiter(self):\n         rows = b\"a;b,c\\nde,fg;eh\\n\"\n         table = self.read_bytes(rows)\n         assert table.to_pydict() == {\n-            'a;b': [b'de'],\n-            'c': [b'fg;eh'],\n+            'a;b': [u'de'],\n+            'c': [u'fg;eh'],\n             }\n         opts = ParseOptions(delimiter=';')\n         table = self.read_bytes(rows, parse_options=opts)\n         assert table.to_pydict() == {\n-            'a': [b'de,fg'],\n-            'b,c': [b'eh'],\n+            'a': [u'de,fg'],\n+            'b,c': [u'eh'],\n             }\n \n     def test_small_random_csv(self):\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T22:44:06.175+0000",
                    "updated": "2018-11-09T22:44:06.175+0000",
                    "started": "2018-11-09T22:44:06.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164537",
                    "issueId": "13188932"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@657528e6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4545bf0f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27865c71[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4fd33249[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d026b9b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@350db4a0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20fd13a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@766a2c88[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@783adf6d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@204adc7e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68e28be0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4f4bf418[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 09 22:50:28 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-09T22:50:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3407/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-02T17:44:35.000+0000",
        "updated": "2018-11-09T22:50:39.000+0000",
        "timeoriginalestimate": null,
        "description": "There should be a few options:\r\n\r\n* Assume UTF8, but do not verify (\"no seatbelts mode\", for users that have reasonable security about UTF8 and want the maximum performance)\r\n\r\n* Full UTF8 verification\r\n\r\n* Maybe ASCII-only verification (because ASCII verification is very fast)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add UTF8 conversion modes in CSV reader conversion options",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188932/comment/16682031",
                    "id": "16682031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2924\n[https://github.com/apache/arrow/pull/2924]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-09T22:50:28.560+0000",
                    "updated": "2018-11-09T22:50:28.560+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yqvr:",
        "customfield_12314139": null
    }
}