{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13046512",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512",
    "key": "ARROW-585",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12560176",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560176",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13231540",
                    "key": "ARROW-5255",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231540",
                    "fields": {
                        "summary": "[Java] Implement user-defined data types API",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12560852",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560852",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13233612",
                    "key": "ARROW-5342",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233612",
                    "fields": {
                        "summary": "[Format] Formalize extension type metadata in IPC protocol",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-585/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/200215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694\n \n \n   This patch proposes a public API for user-defined C++ types that can be sent and received faithfully in Arrow's IPC protocol. \r\n   \r\n   Summary of approach:\r\n   \r\n   * User implements subclass of `arrow::ExtensionType`, which wraps an underlying \"storage type\", how the data is represented in memory\r\n   * User implements subclass of `arrow::ExtensionArray`, their custom container for the user-defined type. This wraps data matching the \"storage\" type \r\n   * User implements subclass of `arrow::ExtensionTypeAdapter`, a serialization and wrapper interface, when is then registered globally with `arrow::RegisterExtensionType`\r\n   * Extension type metadata is embedded in the `Field::custom_metadata` Flatbuffers field in two keys, `arrow_extension_name` and `arrow_extension_data`. This represent the name of the type and the serialized internals of the type, if any\r\n   * If a receiver does not have any special handling for the extension type, they can still handle the data as though it were an instance of the storage type\r\n   \r\n   I implemented an example `UUIDType` in the unit tests. It is implemented like this:\r\n   \r\n   * The extension type name is `\"uuid\"`\r\n   * The storage type is `fixed_size_binary(16)`\r\n   \r\n   I also implemented ARROW-572 in this patch which modifies the IPC metadata serialization to use the visitor pattern, removing a long-standing TODO\r\n   \r\n   Per ARROW-1587 I would like to have extension types as a formal construct in the protocol, so I will propose additions to the Flatbuffers files in a separate patch, and then we can easily change the implementation here to conform to whatever decision is reached in the protocol. \r\n   \r\n   Some next steps would be to provide a way for UDT's to be implemented in pure Python.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-18T19:22:48.432+0000",
                    "updated": "2019-02-18T19:22:48.432+0000",
                    "started": "2019-02-18T19:22:48.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200215",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/200217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#issuecomment-464849833\n \n \n   cc @xhochy @leifwalsh @xhochy @cpcloud for comments\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-18T19:23:16.257+0000",
                    "updated": "2019-02-18T19:23:16.257+0000",
                    "started": "2019-02-18T19:23:16.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200217",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/200219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#issuecomment-464850253\n \n \n   I'll add adequate doxygen comments to all of the new public APIs, but wanted to get this up for feedback in case anyone is thinking of something radically different\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-18T19:25:04.993+0000",
                    "updated": "2019-02-18T19:25:04.993+0000",
                    "started": "2019-02-18T19:25:04.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200219",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/200351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#issuecomment-464974075\n \n \n   I'll fix the test failures tomorrow; they are no barrier to code review\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-19T04:07:52.628+0000",
                    "updated": "2019-02-19T04:07:52.628+0000",
                    "started": "2019-02-19T04:07:52.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200351",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/200363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r257890201\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n+\n+  virtual Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                             const std::string& serialized_data,\n+                             std::shared_ptr<DataType>* out) = 0;\n+\n+  virtual std::string Serialize(const ExtensionType& type) = 0;\n+};\n+\n+/// \\brief\n+ARROW_EXPORT\n+Status RegisterExtensionType(const std::string& type_name,\n \n Review comment:\n   Should registering an extension type be a global thing?  Or should it be something more like MemoryPool where there is a default one to use but different instances can be passed around?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-19T04:55:07.923+0000",
                    "updated": "2019-02-19T04:55:07.923+0000",
                    "started": "2019-02-19T04:55:07.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200363",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/200675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#issuecomment-465173210\n \n \n   Perhaps a test for nesting an ExtensionType into a ListType or StructType?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-19T15:24:18.442+0000",
                    "updated": "2019-02-19T15:24:18.442+0000",
                    "started": "2019-02-19T15:24:18.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200675",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258391492\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type-test.cc\n ##########\n @@ -0,0 +1,142 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <array>\n+#include <cstdint>\n+#include <cstring>\n+#include <iterator>\n+#include <limits>\n+#include <memory>\n+#include <numeric>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer-builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/extension_type.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/ipc/reader.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+class UUIDType : public ExtensionType {\n+ public:\n+  UUIDType() : ExtensionType(::arrow::fixed_size_binary(16)) {}\n+\n+  std::string extension_name() const override { return \"uuid\"; }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    const auto& other_ext = static_cast<const ExtensionType&>(other);\n+    if (other_ext.extension_name() != this->extension_name()) {\n+      return false;\n+    }\n+    return true;\n+  }\n+};\n+\n+class UUIDArray : public ExtensionArray {\n+ public:\n+  explicit UUIDArray(const std::shared_ptr<ArrayData>& data) : ExtensionArray(data) {}\n+};\n+\n+class UUIDTypeAdapter : public ExtensionTypeAdapter {\n+ public:\n+  std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) override {\n+    DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+    DCHECK_EQ(\"uuid\", static_cast<const ExtensionType&>(*data->type).extension_name());\n+    return std::make_shared<UUIDArray>(data);\n+  }\n+\n+  Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                     const std::string& serialized,\n+                     std::shared_ptr<DataType>* out) override {\n+    if (serialized != \"uuid-type-unique-code\") {\n+      return Status::Invalid(\"Type identifier did not match\");\n+    }\n+    DCHECK(storage_type->Equals(*fixed_size_binary(16)));\n+    *out = std::make_shared<UUIDType>();\n+    return Status::OK();\n+  }\n+\n+  std::string Serialize(const ExtensionType& type) override {\n+    return \"uuid-type-unique-code\";\n+  }\n+};\n+\n+class TestExtensionType : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    auto adapter = std::unique_ptr<ExtensionTypeAdapter>(new UUIDTypeAdapter());\n+    ASSERT_OK(::arrow::RegisterExtensionType(\"uuid\", std::move(adapter)));\n+  }\n+\n+  void TearDown() { ASSERT_OK(::arrow::UnregisterExtensionType(\"uuid\")); }\n+};\n+\n+TEST_F(TestExtensionType, AdapterTest) {\n+  auto adapter_not_exist = GetExtensionType(\"uuid-unknown\");\n+  ASSERT_EQ(adapter_not_exist, nullptr);\n+\n+  auto adapter = GetExtensionType(\"uuid\");\n+  ASSERT_NE(adapter, nullptr);\n+\n+  auto type = std::make_shared<UUIDType>();\n+\n+  std::string serialized = adapter->Serialize(*type);\n+\n+  std::shared_ptr<DataType> deserialized;\n+  ASSERT_OK(adapter->Deserialize(fixed_size_binary(16), serialized, &deserialized));\n+  ASSERT_TRUE(deserialized->Equals(*type));\n+  ASSERT_FALSE(deserialized->Equals(*fixed_size_binary(16)));\n+}\n+\n+TEST_F(TestExtensionType, IpcRoundtrip) {\n \n Review comment:\n   Please test this roundtrip for an ExtensionType that is not known to the receiver. This could probably done by calling `UnregisterExtensionType` before `ipc::ReadRecordBatch`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T09:17:05.341+0000",
                    "updated": "2019-02-20T09:17:05.341+0000",
                    "started": "2019-02-20T09:17:05.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201169",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258542260\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type-test.cc\n ##########\n @@ -0,0 +1,142 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <array>\n+#include <cstdint>\n+#include <cstring>\n+#include <iterator>\n+#include <limits>\n+#include <memory>\n+#include <numeric>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer-builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/extension_type.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/ipc/reader.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+class UUIDType : public ExtensionType {\n+ public:\n+  UUIDType() : ExtensionType(::arrow::fixed_size_binary(16)) {}\n+\n+  std::string extension_name() const override { return \"uuid\"; }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    const auto& other_ext = static_cast<const ExtensionType&>(other);\n+    if (other_ext.extension_name() != this->extension_name()) {\n+      return false;\n+    }\n+    return true;\n+  }\n+};\n+\n+class UUIDArray : public ExtensionArray {\n+ public:\n+  explicit UUIDArray(const std::shared_ptr<ArrayData>& data) : ExtensionArray(data) {}\n+};\n+\n+class UUIDTypeAdapter : public ExtensionTypeAdapter {\n+ public:\n+  std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) override {\n+    DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+    DCHECK_EQ(\"uuid\", static_cast<const ExtensionType&>(*data->type).extension_name());\n+    return std::make_shared<UUIDArray>(data);\n+  }\n+\n+  Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                     const std::string& serialized,\n+                     std::shared_ptr<DataType>* out) override {\n+    if (serialized != \"uuid-type-unique-code\") {\n+      return Status::Invalid(\"Type identifier did not match\");\n+    }\n+    DCHECK(storage_type->Equals(*fixed_size_binary(16)));\n+    *out = std::make_shared<UUIDType>();\n+    return Status::OK();\n+  }\n+\n+  std::string Serialize(const ExtensionType& type) override {\n+    return \"uuid-type-unique-code\";\n+  }\n+};\n+\n+class TestExtensionType : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    auto adapter = std::unique_ptr<ExtensionTypeAdapter>(new UUIDTypeAdapter());\n+    ASSERT_OK(::arrow::RegisterExtensionType(\"uuid\", std::move(adapter)));\n+  }\n+\n+  void TearDown() { ASSERT_OK(::arrow::UnregisterExtensionType(\"uuid\")); }\n+};\n+\n+TEST_F(TestExtensionType, AdapterTest) {\n+  auto adapter_not_exist = GetExtensionType(\"uuid-unknown\");\n+  ASSERT_EQ(adapter_not_exist, nullptr);\n+\n+  auto adapter = GetExtensionType(\"uuid\");\n+  ASSERT_NE(adapter, nullptr);\n+\n+  auto type = std::make_shared<UUIDType>();\n+\n+  std::string serialized = adapter->Serialize(*type);\n+\n+  std::shared_ptr<DataType> deserialized;\n+  ASSERT_OK(adapter->Deserialize(fixed_size_binary(16), serialized, &deserialized));\n+  ASSERT_TRUE(deserialized->Equals(*type));\n+  ASSERT_FALSE(deserialized->Equals(*fixed_size_binary(16)));\n+}\n+\n+TEST_F(TestExtensionType, IpcRoundtrip) {\n \n Review comment:\n   Very good point. Will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T15:43:10.891+0000",
                    "updated": "2019-02-20T15:43:10.891+0000",
                    "started": "2019-02-20T15:43:10.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201386",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258637168\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n+\n+  virtual Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                             const std::string& serialized_data,\n+                             std::shared_ptr<DataType>* out) = 0;\n+\n+  virtual std::string Serialize(const ExtensionType& type) = 0;\n+};\n+\n+/// \\brief\n+ARROW_EXPORT\n+Status RegisterExtensionType(const std::string& type_name,\n+                             std::unique_ptr<ExtensionTypeAdapter> wrapper);\n \n Review comment:\n   I would really expect `shared_ptr` here...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.478+0000",
                    "updated": "2019-02-20T19:29:26.478+0000",
                    "started": "2019-02-20T19:29:26.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201554",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258637628\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n+\n+  virtual Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                             const std::string& serialized_data,\n \n Review comment:\n   Rather than `std::string`, shouldn't we give a buffer?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.480+0000",
                    "updated": "2019-02-20T19:29:26.480+0000",
                    "started": "2019-02-20T19:29:26.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201555",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258637859\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n+\n+  virtual Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                             const std::string& serialized_data,\n+                             std::shared_ptr<DataType>* out) = 0;\n+\n+  virtual std::string Serialize(const ExtensionType& type) = 0;\n \n Review comment:\n   Shouldn't this return a Status and take a out parameter to a buffer?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.520+0000",
                    "updated": "2019-02-20T19:29:26.520+0000",
                    "started": "2019-02-20T19:29:26.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201556",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258638743\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n \n Review comment:\n   I don't understand: why do we have `ExtensionArray::SetData` in addition to `ExtensionTypeAdapter::WrapArray`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.530+0000",
                    "updated": "2019-02-20T19:29:26.530+0000",
                    "started": "2019-02-20T19:29:26.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201557",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258639399\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n \n Review comment:\n   Is it worth having this in addition to `ExtensionTypeAdapter`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.594+0000",
                    "updated": "2019-02-20T19:29:26.594+0000",
                    "started": "2019-02-20T19:29:26.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201558",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258636885\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n \n Review comment:\n   I'm a bit wary about multiple inheritance here.\r\n   How about instead store a `shared_ptr<ExtensionTypeAdapter>` in the `ExtensionType` and use that to query extension name etc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.726+0000",
                    "updated": "2019-02-20T19:29:26.726+0000",
                    "started": "2019-02-20T19:29:26.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201559",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258637456\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n \n Review comment:\n   `MakeArray` instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T19:29:26.764+0000",
                    "updated": "2019-02-20T19:29:26.764+0000",
                    "started": "2019-02-20T19:29:26.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201560",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258669150\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n \n Review comment:\n   That's fine, will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T20:48:07.732+0000",
                    "updated": "2019-02-20T20:48:07.732+0000",
                    "started": "2019-02-20T20:48:07.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201597",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258669150\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n \n Review comment:\n   That's fine, will do.\r\n   \r\n   EDIT: Hmm, not sure about this. I'll play with it and see. The multiple inheritance really is not intrusive\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T20:49:08.139+0000",
                    "updated": "2019-02-20T20:49:08.139+0000",
                    "started": "2019-02-20T20:49:08.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201598",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258669782\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n+\n+  virtual Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                             const std::string& serialized_data,\n+                             std::shared_ptr<DataType>* out) = 0;\n+\n+  virtual std::string Serialize(const ExtensionType& type) = 0;\n+};\n+\n+/// \\brief\n+ARROW_EXPORT\n+Status RegisterExtensionType(const std::string& type_name,\n+                             std::unique_ptr<ExtensionTypeAdapter> wrapper);\n \n Review comment:\n   Yeah, I guess the API exposes possible race conditions if a different thread unregisters the extension\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T20:49:59.487+0000",
                    "updated": "2019-02-20T20:49:59.487+0000",
                    "started": "2019-02-20T20:49:59.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201599",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258669861\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n \n Review comment:\n   Sure\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T20:50:14.105+0000",
                    "updated": "2019-02-20T20:50:14.105+0000",
                    "started": "2019-02-20T20:50:14.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201600",
                    "issueId": "13046512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/worklog/201604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3694: ARROW-585: [C++] Experimental public API for user-defined extension types and arrays\nURL: https://github.com/apache/arrow/pull/3694#discussion_r258670668\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.h\n ##########\n @@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// User-defined extension types. EXPERIMENTAL in 0.13.0\n+/// \\since 0.13.0\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class TypeVisitor;\n+\n+class ExtensionTypeTraits {\n+ public:\n+  virtual ~ExtensionTypeTraits() = default;\n+\n+  /// \\brief Name used for serialization, and lookups for deeserialization\n+  virtual std::string extension_name() const = 0;\n+\n+  /// \\brief Determine if two instances of the same extension types are\n+  /// equal. Invoked from ExtensionType::Equals\n+  /// \\param[in] other the type to compare this type with\n+  /// \\return bool true if type instances are equal\n+  virtual bool ExtensionEquals(const ExtensionType& other) const = 0;\n+};\n+\n+/// \\brief The base class for custom / user-defined types.\n+class ARROW_EXPORT ExtensionType : public DataType, public ExtensionTypeTraits {\n+ public:\n+  static constexpr Type::type type_id = Type::EXTENSION;\n+\n+  std::shared_ptr<DataType> storage_type() const { return storage_type_; }\n+\n+  std::string ToString() const override;\n+  std::string name() const override;\n+\n+ protected:\n+  explicit ExtensionType(std::shared_ptr<DataType> storage_type)\n+      : DataType(Type::EXTENSION), storage_type_(storage_type) {}\n+\n+  std::shared_ptr<DataType> storage_type_;\n+};\n+\n+class ARROW_EXPORT ExtensionArray : public Array {\n+ public:\n+  /// \\brief The physical storage for the extension array\n+  std::shared_ptr<Array> storage() const { return storage_; }\n+\n+ protected:\n+  explicit ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+  void SetData(const std::shared_ptr<ArrayData>& data);\n+\n+  std::shared_ptr<Array> storage_;\n+};\n+\n+/// \\brief Serializer interface for user-defined types\n+class ExtensionTypeAdapter {\n+ public:\n+  /// \\brief Wrap built-in Array type in a user-defined ExtensionArray instance\n+  /// \\param[in] data the physical storage for the extension type\n+  virtual std::shared_ptr<Array> WrapArray(std::shared_ptr<ArrayData> data) = 0;\n+\n+  virtual Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                             const std::string& serialized_data,\n+                             std::shared_ptr<DataType>* out) = 0;\n+\n+  virtual std::string Serialize(const ExtensionType& type) = 0;\n \n Review comment:\n   I question whether it's worth going to so much effort. The serialized extension type is written into the Flatbuffers schema on serialization, which means that practically speaking it should be small, inconsequential in size in the context of a running application\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T20:52:30.884+0000",
                    "updated": "2019-02-20T20:52:30.884+0000",
                    "started": "2019-02-20T20:52:30.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201604",
                    "issueId": "13046512"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4ed22d56[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@101f7dd9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d151bad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@460f4a63[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1dbb37be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e2b27d1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7be693ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@47869287[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3445b0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2476f118[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b415e9f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1820fbda[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 26 02:09:41 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-26T02:09:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-585/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-02-26T22:40:32.000+0000",
        "updated": "2019-05-15T22:03:28.000+0000",
        "timeoriginalestimate": null,
        "description": "This will include:\n\n* Implementing a subclass of DataType\n* A \"fallback\" mechanism for receivers that do not understand our custom metadata\n* Implementing a serializer interface for custom metadata (to be send and received in an IPC setting)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Define public API for user-defined data types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16763898",
                    "id": "16763898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm going to take a stab at a prototype of this. The idea is that the type's {{id()}} method will return {{Type::USER_DEFINED}}, and {{UserDefinedArray}} will have an API to return the physical representation of the data (which might be {{BinaryArray}} or something else depending on what kind of data it is). Then {{UserDefinedArray}} can be static-casted by application code to the desired container type. \r\n\r\nPython code can define similar wrapper-callbacks. This can be used to implement the \"uuid\" type that's been discussed elsewhere (though it may make sense at some point to add that to the spec)\r\n\r\nI think user-defined types can also be a useful way to experiment with new data types which may or may not formally become part of the Arrow specification.\r\n\r\ncc [~xhochy] [~leif] for any thoughts",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-08T21:30:07.807+0000",
                    "updated": "2019-02-08T21:30:07.807+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16764273",
                    "id": "16764273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=leif",
                        "name": "leif",
                        "key": "leif",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Leif Mortenson",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Could you describe the planned interface for defining and consuming custom data types in the c++ and java APIs? For example, how would one define a new type and associate a name with the physical type and custom serializer/deserializer, and if any, how would one recognize such a field and dispatch to the appropriate serializer/deserializer in client code? ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=leif",
                        "name": "leif",
                        "key": "leif",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Leif Mortenson",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-10T01:22:43.385+0000",
                    "updated": "2019-02-10T01:22:43.385+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16764444",
                    "id": "16764444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yes, in C++ the idea is to have a user-defined type registry. When defining a new user type we need to provide the registry the following:\r\n\r\n* A string (hopefully unique) identifier for the user-defined type. \r\n* A deserialization callback, which, when provided with a serialized representation of the user type, returns an instance of the type. So the callback signature would be {{Status(const std::string& serialized, std::shared_ptr<DataType>* type)}}\r\n* A callback to \"box\" the physical data into a subclass of {{std::shared_ptr<Array>}} so clients can then statically-cast to the user-container\r\n\r\nA user-defined type would look similar to this:\r\n\r\n{code}\r\nclass MyUserType : public UserDefinedType {\r\n public:\r\n  // Get serialized representation of type, for schema serialization\r\n  std::string Serialize() const override;\r\n};\r\n{code}\r\n\r\nSo in the IPC code paths\r\n\r\n* Serialize is invoked, and this is stored in the {{custom_metadata}} field on the wire. We need to decide what \"key\" is used something like \"arrow_user_type\"\r\n* On read in the consumer, if \"arrow_user_type\" is populated, look in the type registry, reconstruct the data type, then create the right \"box\" around the data. We'll need to add a special case for user types in https://github.com/apache/arrow/blob/master/cpp/src/arrow/array.cc#L884\r\n\r\nAll and all this doesn't seem like too much work to me once you decide how to do it. In Java I'm not sure how this would have to be adapted. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-10T14:50:00.911+0000",
                    "updated": "2019-02-10T14:50:00.911+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16764446",
                    "id": "16764446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "To be clear, with this scheme client code would not have to be involved with any of the serialization and deserialization details when consuming or producing IPC payloads, this would all be implemented in the Arrow libraries",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-10T14:52:18.721+0000",
                    "updated": "2019-02-10T14:52:18.721+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16771338",
                    "id": "16771338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=leif",
                        "name": "leif",
                        "key": "leif",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Leif Mortenson",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Looks reasonable, I'm curious how the java side would look, and to see an integration test for UUID types or something.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=leif",
                        "name": "leif",
                        "key": "leif",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Leif Mortenson",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-18T19:49:28.343+0000",
                    "updated": "2019-02-18T19:49:28.343+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16771447",
                    "id": "16771447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yeah, I think the next steps would be to create an equivalent Java implementation, then add support for extension types to the integration tests\r\n\r\nWe'll need to find a champion to help with the Java development. I presume that a similar scheme, aka creating an {{ExtensionVector}} class to be extended, will be possible",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-19T00:27:55.130+0000",
                    "updated": "2019-02-19T00:27:55.130+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13046512/comment/16777481",
                    "id": "16777481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3694\n[https://github.com/apache/arrow/pull/3694]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-26T02:09:41.690+0000",
                    "updated": "2019-02-26T02:09:41.690+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3anj3:",
        "customfield_12314139": null
    }
}