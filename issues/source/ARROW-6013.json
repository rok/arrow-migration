{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13246542",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542",
    "key": "ARROW-6013",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6013/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/280956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925\n \n \n   For a sorted vector, the range searcher finds the first/last occurrence of a particular element. \r\n   \r\n   The search is based on binary search, which takes O(logn) time.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-23T10:59:34.052+0000",
                    "updated": "2019-07-23T10:59:34.052+0000",
                    "started": "2019-07-23T10:59:34.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280956",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/283155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r307605514\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.search;\n+\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Search for the range of a particular element in the target vector.\n+ */\n+public class VectorRangeSearcher {\n+\n+  /**\n+   * Search for the first occurrence of an element.\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\n+   * @param targetVector the vector from which to perform the search.\n+   * @param comparator the criterion for the comparison.\n+   * @param keyVector the vector containing the element to search.\n+   * @param keyIndex the index of the search key in the key vector.\n+   * @param <V> the vector type.\n+   * @return the index of the first matched element if any, and -1 otherwise.\n+   */\n+  public static <V extends ValueVector> int getLowerBound(\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\n+    comparator.attachVectors(keyVector, targetVector);\n+\n+    int low = 0;\n+    int high = targetVector.getValueCount() - 1;\n+\n+    while (low <= high) {\n+      int mid = (low + high) / 2;\n \n Review comment:\n   overflow?  Didn't we already have binary search someplace else?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-26T06:36:50.643+0000",
                    "updated": "2019-07-26T06:36:50.643+0000",
                    "started": "2019-07-26T06:36:50.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283155",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/283156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r307605849\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.search;\n+\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Search for the range of a particular element in the target vector.\n+ */\n+public class VectorRangeSearcher {\n+\n+  /**\n+   * Search for the first occurrence of an element.\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\n+   * @param targetVector the vector from which to perform the search.\n+   * @param comparator the criterion for the comparison.\n+   * @param keyVector the vector containing the element to search.\n+   * @param keyIndex the index of the search key in the key vector.\n+   * @param <V> the vector type.\n+   * @return the index of the first matched element if any, and -1 otherwise.\n+   */\n+  public static <V extends ValueVector> int getLowerBound(\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\n+    comparator.attachVectors(keyVector, targetVector);\n+\n+    int low = 0;\n+    int high = targetVector.getValueCount() - 1;\n+\n+    while (low <= high) {\n+      int mid = (low + high) / 2;\n+      int result = comparator.compare(keyIndex, mid);\n+      if (result < 0) {\n+        // the key is smaller\n+        high = mid - 1;\n+      } else if (result > 0) {\n+        // the key is larger\n+        low = mid + 1;\n+      } else {\n+        // the key equals the mid value, find the lower bound by going left-ward.\n+\n+        // compare with the left neighbour\n+        int left = mid - 1;\n+        if (left == -1) {\n+          // this is the first value in the vector\n+          return mid;\n+        } else {\n+          int leftResult = comparator.compare(keyIndex, left);\n+          if (leftResult > 0) {\n+            // the key is greater than the left neighbour, and equal to the current one\n+            // we find it\n+            return mid;\n+          } else if (leftResult == 0) {\n+            // the left neighbour is also equal, continue to go left\n+            high = mid - 1;\n+          } else {\n+            // the key is larger than the left neighbour, this is not possible\n+            throw new IllegalStateException(\"The target vector is not sorted \");\n+          }\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  /**\n+   * Search for the last occurrence of an element.\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\n+   * @param targetVector the vector from which to perform the search.\n+   * @param comparator the criterion for the comparison.\n+   * @param keyVector the vector containing the element to search.\n+   * @param keyIndex the index of the search key in the key vector.\n+   * @param <V> the vector type.\n+   * @return the index of the last matched element if any, and -1 otherwise.\n+   */\n+  public static <V extends ValueVector> int getUpperBound(\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\n+    comparator.attachVectors(keyVector, targetVector);\n+\n+    int low = 0;\n+    int high = targetVector.getValueCount() - 1;\n+\n+    while (low <= high) {\n \n Review comment:\n   is it possible to factor out some duplicate code?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-26T06:38:30.941+0000",
                    "updated": "2019-07-26T06:38:30.941+0000",
                    "started": "2019-07-26T06:38:30.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283156",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/283759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r307957362\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.search;\n+\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Search for the range of a particular element in the target vector.\n+ */\n+public class VectorRangeSearcher {\n+\n+  /**\n+   * Search for the first occurrence of an element.\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\n+   * @param targetVector the vector from which to perform the search.\n+   * @param comparator the criterion for the comparison.\n+   * @param keyVector the vector containing the element to search.\n+   * @param keyIndex the index of the search key in the key vector.\n+   * @param <V> the vector type.\n+   * @return the index of the first matched element if any, and -1 otherwise.\n+   */\n+  public static <V extends ValueVector> int getLowerBound(\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\n+    comparator.attachVectors(keyVector, targetVector);\n+\n+    int low = 0;\n+    int high = targetVector.getValueCount() - 1;\n+\n+    while (low <= high) {\n+      int mid = (low + high) / 2;\n \n Review comment:\n   Good suggestion for overflow.\r\n   \r\n   This algorithm is similar to binary search. However, they solve different problems, and I think this one is more useful in practice. \r\n   \r\n   In particular, given a (sorted) vector with duplicated elements. This algorithm finds the bounds: the first/last element equal to the given element.\r\n   \r\n   By different problems, I mean it is possible to solve the problem for binary search by this algorithm. But it is not efficient to solve the problem for this algorithm by binary search. \r\n   \r\n   To see this, note that binary search finds any match element, and after that, we may either go left-ward or right-ward to find the first/last match. However, the time complexity for the latter can be O(n), which is worse than the time complexity of this algorithm O(logn).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T07:54:56.797+0000",
                    "updated": "2019-07-27T07:54:56.797+0000",
                    "started": "2019-07-27T07:54:56.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283759",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/283760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r307957464\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.search;\n+\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Search for the range of a particular element in the target vector.\n+ */\n+public class VectorRangeSearcher {\n+\n+  /**\n+   * Search for the first occurrence of an element.\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\n+   * @param targetVector the vector from which to perform the search.\n+   * @param comparator the criterion for the comparison.\n+   * @param keyVector the vector containing the element to search.\n+   * @param keyIndex the index of the search key in the key vector.\n+   * @param <V> the vector type.\n+   * @return the index of the first matched element if any, and -1 otherwise.\n+   */\n+  public static <V extends ValueVector> int getLowerBound(\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\n+    comparator.attachVectors(keyVector, targetVector);\n+\n+    int low = 0;\n+    int high = targetVector.getValueCount() - 1;\n+\n+    while (low <= high) {\n+      int mid = (low + high) / 2;\n+      int result = comparator.compare(keyIndex, mid);\n+      if (result < 0) {\n+        // the key is smaller\n+        high = mid - 1;\n+      } else if (result > 0) {\n+        // the key is larger\n+        low = mid + 1;\n+      } else {\n+        // the key equals the mid value, find the lower bound by going left-ward.\n+\n+        // compare with the left neighbour\n+        int left = mid - 1;\n+        if (left == -1) {\n+          // this is the first value in the vector\n+          return mid;\n+        } else {\n+          int leftResult = comparator.compare(keyIndex, left);\n+          if (leftResult > 0) {\n+            // the key is greater than the left neighbour, and equal to the current one\n+            // we find it\n+            return mid;\n+          } else if (leftResult == 0) {\n+            // the left neighbour is also equal, continue to go left\n+            high = mid - 1;\n+          } else {\n+            // the key is larger than the left neighbour, this is not possible\n+            throw new IllegalStateException(\"The target vector is not sorted \");\n+          }\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  /**\n+   * Search for the last occurrence of an element.\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\n+   * @param targetVector the vector from which to perform the search.\n+   * @param comparator the criterion for the comparison.\n+   * @param keyVector the vector containing the element to search.\n+   * @param keyIndex the index of the search key in the key vector.\n+   * @param <V> the vector type.\n+   * @return the index of the last matched element if any, and -1 otherwise.\n+   */\n+  public static <V extends ValueVector> int getUpperBound(\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\n+    comparator.attachVectors(keyVector, targetVector);\n+\n+    int low = 0;\n+    int high = targetVector.getValueCount() - 1;\n+\n+    while (low <= high) {\n \n Review comment:\n   It is possible, however, it may not be good for readability and code structure.\r\n   \r\n   This is because, the only difference is in the case that the target element is equal to the source element. In this case, we either go left-ward or right-ward by binary search. \r\n   \r\n   So to extract the common code, we need to extract the logic for going left-ward or right-ward. This involves passing and returning multiple states: low, mid, high, plus a flag indicating is we have found the bound. This makes the code less clear.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T07:59:03.445+0000",
                    "updated": "2019-07-27T07:59:03.445+0000",
                    "started": "2019-07-27T07:59:03.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283760",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/283766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#issuecomment-515666851\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=h1) Report\n   > Merging [#4925](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/38b01764da445ce6383b60a50d1e9b313857a3d7?src=pr&el=desc) will **increase** coverage by `2.13%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4925/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4925      +/-   ##\n   ==========================================\n   + Coverage   87.49%   89.63%   +2.13%     \n   ==========================================\n     Files         998      664     -334     \n     Lines      141784    97936   -43848     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       124058    87786   -36272     \n   + Misses      17364    10150    -7214     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [rust/datafusion/src/execution/projection.rs](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcHJvamVjdGlvbi5ycw==) | | |\n   | [rust/datafusion/src/execution/filter.rs](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZmlsdGVyLnJz) | | |\n   | [rust/arrow/src/csv/writer.rs](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY3N2L3dyaXRlci5ycw==) | | |\n   | [rust/datafusion/src/bin/main.rs](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9iaW4vbWFpbi5ycw==) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | ... and [324 more](https://codecov.io/gh/apache/arrow/pull/4925/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=footer). Last update [38b0176...d7438d7](https://codecov.io/gh/apache/arrow/pull/4925?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T08:32:13.815+0000",
                    "updated": "2019-07-27T08:32:13.815+0000",
                    "started": "2019-07-27T08:32:13.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283766",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/284064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r308085771\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,141 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getLowerBound(\r\n \n Review comment:\n   nit: the name is confusing. maybe, getFirstMatch() or getLowestMatch() ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-29T07:24:14.946+0000",
                    "updated": "2019-07-29T07:24:14.946+0000",
                    "started": "2019-07-29T07:24:14.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284064",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/284757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r308576278\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,141 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getLowerBound(\r\n \n Review comment:\n   @pravindra Thanks for your good suggestion.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T07:44:16.586+0000",
                    "updated": "2019-07-30T07:44:16.586+0000",
                    "started": "2019-07-30T07:44:16.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284757",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r308998074\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,141 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = (low + high) / 2;\r\n+      if (mid < 0) {\r\n \n Review comment:\n   low + (high - low)/2 is more canonical\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T00:34:15.503+0000",
                    "updated": "2019-07-31T00:34:15.503+0000",
                    "started": "2019-07-31T00:34:15.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285373",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r308998614\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,141 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = (low + high) / 2;\r\n+      if (mid < 0) {\r\n+        // overflow has occurred, so calculate the mid by converting to long first\r\n+        mid = (int) (((long) high + (long) low) / 2L);\r\n+      }\r\n+      int result = comparator.compare(keyIndex, mid);\r\n+      if (result < 0) {\r\n+        // the key is smaller\r\n+        high = mid - 1;\r\n+      } else if (result > 0) {\r\n+        // the key is larger\r\n+        low = mid + 1;\r\n+      } else {\r\n+        // the key equals the mid value, find the lower bound by going left-ward.\r\n+\r\n+        // compare with the left neighbour\r\n+        int left = mid - 1;\r\n+        if (left == -1) {\r\n+          // this is the first value in the vector\r\n+          return mid;\r\n+        } else {\r\n+          int leftResult = comparator.compare(keyIndex, left);\r\n+          if (leftResult > 0) {\r\n+            // the key is greater than the left neighbour, and equal to the current one\r\n+            // we find it\r\n+            return mid;\r\n+          } else if (leftResult == 0) {\r\n+            // the left neighbour is also equal, continue to go left\r\n+            high = mid - 1;\r\n+          } else {\r\n+            // the key is larger than the left neighbour, this is not possible\r\n+            throw new IllegalStateException(\"The target vector is not sorted \");\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return -1;\r\n \n Review comment:\n   Make this a constant.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T00:37:05.210+0000",
                    "updated": "2019-07-31T00:37:05.210+0000",
                    "started": "2019-07-31T00:37:05.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285377",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r309027621\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,141 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = (low + high) / 2;\r\n+      if (mid < 0) {\r\n \n Review comment:\n   Good point. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T03:41:40.111+0000",
                    "updated": "2019-07-31T03:41:40.111+0000",
                    "started": "2019-07-31T03:41:40.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285482",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r309027666\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,141 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = (low + high) / 2;\r\n+      if (mid < 0) {\r\n+        // overflow has occurred, so calculate the mid by converting to long first\r\n+        mid = (int) (((long) high + (long) low) / 2L);\r\n+      }\r\n+      int result = comparator.compare(keyIndex, mid);\r\n+      if (result < 0) {\r\n+        // the key is smaller\r\n+        high = mid - 1;\r\n+      } else if (result > 0) {\r\n+        // the key is larger\r\n+        low = mid + 1;\r\n+      } else {\r\n+        // the key equals the mid value, find the lower bound by going left-ward.\r\n+\r\n+        // compare with the left neighbour\r\n+        int left = mid - 1;\r\n+        if (left == -1) {\r\n+          // this is the first value in the vector\r\n+          return mid;\r\n+        } else {\r\n+          int leftResult = comparator.compare(keyIndex, left);\r\n+          if (leftResult > 0) {\r\n+            // the key is greater than the left neighbour, and equal to the current one\r\n+            // we find it\r\n+            return mid;\r\n+          } else if (leftResult == 0) {\r\n+            // the left neighbour is also equal, continue to go left\r\n+            high = mid - 1;\r\n+          } else {\r\n+            // the key is larger than the left neighbour, this is not possible\r\n+            throw new IllegalStateException(\"The target vector is not sorted \");\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return -1;\r\n \n Review comment:\n   Revised accordingly. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T03:41:56.699+0000",
                    "updated": "2019-07-31T03:41:56.699+0000",
                    "started": "2019-07-31T03:41:56.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285483",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r309248052\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,138 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Result returned when a search fails.\r\n+   */\r\n+  public static final int SEARCH_FAIL_RESULT = -1;\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = low + (high - low) / 2;\r\n+      int result = comparator.compare(keyIndex, mid);\r\n+      if (result < 0) {\r\n+        // the key is smaller\r\n+        high = mid - 1;\r\n+      } else if (result > 0) {\r\n+        // the key is larger\r\n+        low = mid + 1;\r\n+      } else {\r\n+        // the key equals the mid value, find the lower bound by going left-ward.\r\n+\r\n \n Review comment:\n   The following requires less branching. I haven't validated if it properly works, so be cautious (or add more test!).\r\n   \r\n   ```\r\n       int low = 0;\r\n       int high = targetVector.getValueCount() - 1;\r\n       int ret = SEARCH_FAIL_RESULT;\r\n   \r\n        while (low <= high) {\r\n         int mid = low + (high - low) / 2;\r\n         int result = comparator.compare(keyIndex, mid);\r\n         if (result < 0) {\r\n           // the key is smaller\r\n           high = mid - 1;\r\n         } else if (result > 0) {\r\n           // the key is larger\r\n           low = mid + 1;\r\n         } else {\r\n           // A match is found, stash it.\r\n           ret = mid;\r\n           // Binary search will continue by clamping on the left\r\n           high = mid - 1; \r\n         }\r\n        }\r\n      return ret;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T14:21:41.211+0000",
                    "updated": "2019-07-31T14:21:41.211+0000",
                    "started": "2019-07-31T14:21:41.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285980",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r309248052\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,138 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Result returned when a search fails.\r\n+   */\r\n+  public static final int SEARCH_FAIL_RESULT = -1;\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = low + (high - low) / 2;\r\n+      int result = comparator.compare(keyIndex, mid);\r\n+      if (result < 0) {\r\n+        // the key is smaller\r\n+        high = mid - 1;\r\n+      } else if (result > 0) {\r\n+        // the key is larger\r\n+        low = mid + 1;\r\n+      } else {\r\n+        // the key equals the mid value, find the lower bound by going left-ward.\r\n+\r\n \n Review comment:\n   The following requires less branching. I haven't proved if it properly works (only toying with ipython), so be cautious (or add more test!).\r\n   \r\n   ```\r\n       int low = 0;\r\n       int high = targetVector.getValueCount() - 1;\r\n       int ret = SEARCH_FAIL_RESULT;\r\n   \r\n        while (low <= high) {\r\n         int mid = low + (high - low) / 2;\r\n         int result = comparator.compare(keyIndex, mid);\r\n         if (result < 0) {\r\n           // the key is smaller\r\n           high = mid - 1;\r\n         } else if (result > 0) {\r\n           // the key is larger\r\n           low = mid + 1;\r\n         } else {\r\n           // A match is found, stash it.\r\n           ret = mid;\r\n           // Binary search will continue by clamping on the left\r\n           high = mid - 1; \r\n         }\r\n        }\r\n      return ret;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T14:22:28.325+0000",
                    "updated": "2019-07-31T14:22:28.325+0000",
                    "started": "2019-07-31T14:22:28.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285981",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/285983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r309248052\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,138 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Result returned when a search fails.\r\n+   */\r\n+  public static final int SEARCH_FAIL_RESULT = -1;\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = low + (high - low) / 2;\r\n+      int result = comparator.compare(keyIndex, mid);\r\n+      if (result < 0) {\r\n+        // the key is smaller\r\n+        high = mid - 1;\r\n+      } else if (result > 0) {\r\n+        // the key is larger\r\n+        low = mid + 1;\r\n+      } else {\r\n+        // the key equals the mid value, find the lower bound by going left-ward.\r\n+\r\n \n Review comment:\n   The following requires less branching. I haven't proved if it properly works (only toyed with ipython), so be cautious (or add more test!).\r\n   \r\n   ```\r\n       int low = 0;\r\n       int high = targetVector.getValueCount() - 1;\r\n       int ret = SEARCH_FAIL_RESULT;\r\n   \r\n        while (low <= high) {\r\n         int mid = low + (high - low) / 2;\r\n         int result = comparator.compare(keyIndex, mid);\r\n         if (result < 0) {\r\n           // the key is smaller\r\n           high = mid - 1;\r\n         } else if (result > 0) {\r\n           // the key is larger\r\n           low = mid + 1;\r\n         } else {\r\n           // A match is found, stash it.\r\n           ret = mid;\r\n           // Binary search will continue by clamping on the left\r\n           high = mid - 1; \r\n         }\r\n        }\r\n      return ret;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T14:24:27.400+0000",
                    "updated": "2019-07-31T14:24:27.400+0000",
                    "started": "2019-07-31T14:24:27.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285983",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/286397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#discussion_r309520352\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/search/VectorRangeSearcher.java\n ##########\n @@ -0,0 +1,138 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.algorithm.search;\r\n+\r\n+import org.apache.arrow.algorithm.sort.VectorValueComparator;\r\n+import org.apache.arrow.vector.ValueVector;\r\n+\r\n+/**\r\n+ * Search for the range of a particular element in the target vector.\r\n+ */\r\n+public class VectorRangeSearcher {\r\n+\r\n+  /**\r\n+   * Result returned when a search fails.\r\n+   */\r\n+  public static final int SEARCH_FAIL_RESULT = -1;\r\n+\r\n+  /**\r\n+   * Search for the first occurrence of an element.\r\n+   * The search is based on the binary search algorithm. So the target vector must be sorted.\r\n+   * @param targetVector the vector from which to perform the search.\r\n+   * @param comparator the criterion for the comparison.\r\n+   * @param keyVector the vector containing the element to search.\r\n+   * @param keyIndex the index of the search key in the key vector.\r\n+   * @param <V> the vector type.\r\n+   * @return the index of the first matched element if any, and -1 otherwise.\r\n+   */\r\n+  public static <V extends ValueVector> int getFirstMatch(\r\n+          V targetVector, VectorValueComparator<V> comparator, V keyVector, int keyIndex) {\r\n+    comparator.attachVectors(keyVector, targetVector);\r\n+\r\n+    int low = 0;\r\n+    int high = targetVector.getValueCount() - 1;\r\n+\r\n+    while (low <= high) {\r\n+      int mid = low + (high - low) / 2;\r\n+      int result = comparator.compare(keyIndex, mid);\r\n+      if (result < 0) {\r\n+        // the key is smaller\r\n+        high = mid - 1;\r\n+      } else if (result > 0) {\r\n+        // the key is larger\r\n+        low = mid + 1;\r\n+      } else {\r\n+        // the key equals the mid value, find the lower bound by going left-ward.\r\n+\r\n \n Review comment:\n   @fsaintjacques Thanks a lot for your comments, and the improved algorithm.\r\n   \r\n   I think to prove the correctness of the algorithm, we need to maintain some loop invariants. Suppose we call the boundary point (lower or upper bound) the bp, the following invariants must hold throughout:\r\n   \r\n   1. low <= bp\r\n   2. high >= bp\r\n   \r\n   It seems in some cases, this statement may break the second invariant (Maybe I am wrong)?\r\n   \r\n   high = mid - 1\r\n   \r\n   Anyway, it is interesting question. Would you please give more details about the reasoning behind your algorithm?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T04:42:20.572+0000",
                    "updated": "2019-08-01T04:42:20.572+0000",
                    "started": "2019-08-01T04:42:20.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286397",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/286448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#issuecomment-517134036\n \n \n   @liyafan82 do you want to follow up on the potentially improved algo suggested by @fsaintjacques as part of this CR ? Or, do it as part of a different follow up jira/CR ?\r\n   \r\n   I'm fine either way.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T06:07:44.971+0000",
                    "updated": "2019-08-01T06:07:44.971+0000",
                    "started": "2019-08-01T06:07:44.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286448",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/286516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#issuecomment-517170164\n \n \n   > @liyafan82 do you want to follow up on the potentially improved algo suggested by @fsaintjacques as part of this CR ? Or, do it as part of a different follow up jira/CR ?\r\n   > \r\n   > I'm fine either way.\r\n   \r\n   @pravindra I prefer refining the algorithm in a following CR, because we may need some effort to revise/verify/test the refined algorithm. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T07:59:45.926+0000",
                    "updated": "2019-08-01T07:59:45.926+0000",
                    "started": "2019-08-01T07:59:45.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286516",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/286562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T09:17:12.340+0000",
                    "updated": "2019-08-01T09:17:12.340+0000",
                    "started": "2019-08-01T09:17:12.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286562",
                    "issueId": "13246542"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/worklog/286570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #4925: ARROW-6013: [Java] Support range searcher\nURL: https://github.com/apache/arrow/pull/4925#issuecomment-517203270\n \n \n   I've created ARROW-6093 to track the algo improvement suggested by @fsaintjacques \r\n   \r\n   Thanks @liyafan82 for the change.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T09:21:54.252+0000",
                    "updated": "2019-08-01T09:21:54.252+0000",
                    "started": "2019-08-01T09:21:54.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286570",
                    "issueId": "13246542"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6256fb06[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4da388c6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@653264eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@34063533[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38ee05ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@41c7bdb3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37248c5c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@320e8826[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a870ad8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6511a1e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@150430e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@538dc5da[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 01 09:17:06 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-01T09:17:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6013/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-23T10:55:25.000+0000",
        "updated": "2019-08-01T09:49:23.000+0000",
        "timeoriginalestimate": null,
        "description": "For a sorted vector, the range searcher finds the first/last occurrence of a particular element.\u00a0\r\n\r\nThe search is based on binary search, which takes O(logn) time.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Support range searcher",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246542/comment/16897906",
                    "id": "16897906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 4925\n[https://github.com/apache/arrow/pull/4925]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2019-08-01T09:17:06.012+0000",
                    "updated": "2019-08-01T09:17:06.012+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z04xmg:",
        "customfield_12314139": null
    }
}