{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13295273",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273",
    "key": "ARROW-8289",
    "fields": {
        "parent": {
            "id": "13298042",
            "key": "ARROW-8421",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13298042",
            "fields": {
                "summary": "[Rust] [Parquet] Implement parquet writer",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8289/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/413191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785\n \n \n   The current state is that this is a quick PoC representing an hours work. I have a test that writes an Arrow batch to a parquet file. I can successfully read the Parquet file from Apache Spark.\r\n   \r\n   ```\r\n   scala> val df = spark.read.parquet(\"/home/andy/git/andygrove/arrow/rust/parquet/test.parquet\")\r\n   df: org.apache.spark.sql.DataFrame = [a: int, b: int]                           \r\n   \r\n   scala> df.show\r\n   +---+---+\r\n   |  a|  b|\r\n   +---+---+\r\n   |  1|  1|\r\n   |  2|  2|\r\n   |  3|  3|\r\n   |  4|  4|\r\n   |  5|  5|\r\n   +---+---+\r\n   ```\r\n   \r\n   Next steps:\r\n   \r\n   - Create an ArrowWriter struct + impl\r\n   - Add support for all primitive columns\r\n   - Add unit tests\r\n   - Add integration tests (separate PR most likely)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T14:39:10.387+0000",
                    "updated": "2020-03-31T14:39:10.387+0000",
                    "started": "2020-03-31T14:39:10.387+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413191",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/413214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-606673561\n \n \n   https://issues.apache.org/jira/browse/ARROW-8289\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T14:46:46.065+0000",
                    "updated": "2020-03-31T14:46:46.065+0000",
                    "started": "2020-03-31T14:46:46.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413214",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/413431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#discussion_r401118487\n \n \n\n ##########\n File path: rust/parquet/src/file/writer.rs\n ##########\n @@ -521,6 +526,75 @@ impl<T: Write + Position> PageWriter for SerializedPageWriter<T> {\n     }\n }\n \n+struct ArrowWriter {\n+    writer: SerializedFileWriter<File>,\n+    rows: i64,\n+}\n+\n+impl ArrowWriter {\n+    pub fn new(file: File, _arrow_schema: &Schema) -> Self {\n+        //TODO convert Arrow schema to Parquet schema\n+        let schema = Rc::new(\n+            types::Type::group_type_builder(\"schema\")\n+                .with_fields(&mut vec![\n+                    Rc::new(\n+                        types::Type::primitive_type_builder(\"a\", Type::INT32)\n+                            .with_repetition(Repetition::REQUIRED)\n+                            .build()\n+                            .unwrap(),\n+                    ),\n+                    Rc::new(\n+                        types::Type::primitive_type_builder(\"b\", Type::INT32)\n+                            .with_repetition(Repetition::REQUIRED)\n+                            .build()\n+                            .unwrap(),\n+                    ),\n+                ])\n+                .build()\n+                .unwrap(),\n+        );\n+        let props = Rc::new(WriterProperties::builder().build());\n+        let file_writer =\n+            SerializedFileWriter::new(file.try_clone().unwrap(), schema, props).unwrap();\n+\n+        Self {\n+            writer: file_writer,\n+            rows: 0,\n+        }\n+    }\n+\n+    pub fn write(&mut self, batch: &RecordBatch) {\n+        let mut row_group_writer = self.writer.next_row_group().unwrap();\n+        for i in 0..batch.schema().fields().len() {\n+            let col_writer = row_group_writer.next_column().unwrap();\n+            if let Some(mut writer) = col_writer {\n+                match writer {\n+                    ColumnWriter::Int32ColumnWriter(ref mut typed) => {\n+                        let array = batch\n+                            .column(i)\n+                            .as_any()\n+                            .downcast_ref::<array::Int32Array>()\n+                            .unwrap();\n+                        self.rows += typed\n+                            .write_batch(array.value_slice(0, array.len()), None, None)\n+                            .unwrap() as i64;\n+                    }\n+                    //TODO add other types\n \n Review comment:\n   A couple of initial things to keep in mind\r\n   \r\n   * Writes of both Nullable (OPTIONAL) and non-nullable (REQUIRED) fields\r\n   * You can optimize the special case where a nullable field's data has no nulls \r\n   * A good amount of code is required to handle converting from the Arrow physical form of various logical types to the Parquet equivalent one, see https://github.com/apache/arrow/blob/master/cpp/src/parquet/column_writer.cc for details\r\n   * It would be worth thinking up front about how dictionary-encoded data is handled both on the Arrow write and Arrow read paths. In parquet-cpp we initially discarded Arrow DictionaryArrays on write, and through real world need I was forced to revisit this (quite painfully) to enable Arrow dictionaries to survive roundtrips to Parquet format, and also achieve better performance and memory use in both reads and writes. You can certainly do a dictionary-to-dense conversion like we did, but you may someday find yourselves doing the same painful refactor that I did to make dictionary write and read not only more efficient but also dictionary order preserving. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T18:17:58.529+0000",
                    "updated": "2020-03-31T18:17:58.529+0000",
                    "started": "2020-03-31T18:17:58.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413431",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/413434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#discussion_r401118487\n \n \n\n ##########\n File path: rust/parquet/src/file/writer.rs\n ##########\n @@ -521,6 +526,75 @@ impl<T: Write + Position> PageWriter for SerializedPageWriter<T> {\n     }\n }\n \n+struct ArrowWriter {\n+    writer: SerializedFileWriter<File>,\n+    rows: i64,\n+}\n+\n+impl ArrowWriter {\n+    pub fn new(file: File, _arrow_schema: &Schema) -> Self {\n+        //TODO convert Arrow schema to Parquet schema\n+        let schema = Rc::new(\n+            types::Type::group_type_builder(\"schema\")\n+                .with_fields(&mut vec![\n+                    Rc::new(\n+                        types::Type::primitive_type_builder(\"a\", Type::INT32)\n+                            .with_repetition(Repetition::REQUIRED)\n+                            .build()\n+                            .unwrap(),\n+                    ),\n+                    Rc::new(\n+                        types::Type::primitive_type_builder(\"b\", Type::INT32)\n+                            .with_repetition(Repetition::REQUIRED)\n+                            .build()\n+                            .unwrap(),\n+                    ),\n+                ])\n+                .build()\n+                .unwrap(),\n+        );\n+        let props = Rc::new(WriterProperties::builder().build());\n+        let file_writer =\n+            SerializedFileWriter::new(file.try_clone().unwrap(), schema, props).unwrap();\n+\n+        Self {\n+            writer: file_writer,\n+            rows: 0,\n+        }\n+    }\n+\n+    pub fn write(&mut self, batch: &RecordBatch) {\n+        let mut row_group_writer = self.writer.next_row_group().unwrap();\n+        for i in 0..batch.schema().fields().len() {\n+            let col_writer = row_group_writer.next_column().unwrap();\n+            if let Some(mut writer) = col_writer {\n+                match writer {\n+                    ColumnWriter::Int32ColumnWriter(ref mut typed) => {\n+                        let array = batch\n+                            .column(i)\n+                            .as_any()\n+                            .downcast_ref::<array::Int32Array>()\n+                            .unwrap();\n+                        self.rows += typed\n+                            .write_batch(array.value_slice(0, array.len()), None, None)\n+                            .unwrap() as i64;\n+                    }\n+                    //TODO add other types\n \n Review comment:\n   A couple of initial things to keep in mind\r\n   \r\n   * Writes of both Nullable (OPTIONAL) and non-nullable (REQUIRED) fields\r\n   * You can optimize the special case where a nullable field's data has no nulls \r\n   * A good amount of code is required to handle converting from the Arrow physical form of various logical types to the Parquet equivalent one, see https://github.com/apache/arrow/blob/master/cpp/src/parquet/column_writer.cc for details\r\n   * It would be worth thinking up front about how dictionary-encoded data is handled both on the Arrow write and Arrow read paths. In parquet-cpp we initially discarded Arrow DictionaryArrays on write (casting e.g. Dictionary<String> to dense String), and through real world need I was forced to revisit this (quite painfully) to enable Arrow dictionaries to survive roundtrips to Parquet format, and also achieve better performance and memory use in both reads and writes. You can certainly do a dictionary-to-dense conversion like we did, but you may someday find yourselves doing the same painful refactor that I did to make dictionary write and read not only more efficient but also dictionary order preserving. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T18:18:43.061+0000",
                    "updated": "2020-03-31T18:18:43.061+0000",
                    "started": "2020-03-31T18:18:43.060+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413434",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/414132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#discussion_r401738115\n \n \n\n ##########\n File path: rust/parquet/src/file/writer.rs\n ##########\n @@ -521,6 +526,75 @@ impl<T: Write + Position> PageWriter for SerializedPageWriter<T> {\n     }\n }\n \n+struct ArrowWriter {\n \n Review comment:\n   it is more appropriate to put this in `src/arrow/writer`? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:22:58.013+0000",
                    "updated": "2020-04-01T16:22:58.013+0000",
                    "started": "2020-04-01T16:22:58.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414132",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/414133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-607350821\n \n \n   Thanks @andygrove . Do you intend to continue working on this or you intend to commit this as the first step? I see this is more like an example but still lots of pieces missing (as you already pointed out).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:23:02.228+0000",
                    "updated": "2020-04-01T16:23:02.228+0000",
                    "started": "2020-04-01T16:23:02.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414133",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/414258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-607447542\n \n \n   @sunchao I don't really have a plan. I just wanted to get the conversation started. Maybe it makes sense to get this to the point where it can accurately write parquet files with support for i32 only and then we create JIRAs for all other data types?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T19:31:26.446+0000",
                    "updated": "2020-04-01T19:31:26.446+0000",
                    "started": "2020-04-01T19:31:26.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414258",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/414268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-607460837\n \n \n   > @sunchao I don't really have a plan. I just wanted to get the conversation started. Maybe it makes sense to get this to the point where it can accurately write parquet files with support for i32 only and then we create JIRAs for all other data types?\r\n   \r\n   Although it's not good to have \"half-support\" I agree with this.  It's hard to get larger PR's reviewed and merged.  It would also be easier for others to jump in.  I don't know parquet well enough to take this on as is but I might be able to help out if the tasks are broken down.\r\n   \r\n   @sunchao would you be up for breaking the work down on JIRA into bite size pieces?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T20:00:20.417+0000",
                    "updated": "2020-04-01T20:00:20.417+0000",
                    "started": "2020-04-01T20:00:20.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414268",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/414352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-607526812\n \n \n   Yes agree. I will also be happy to take a stab on this, and also help to break the work down (naively we could start with the basic primitive types). We can start by first looking at other implementations (i.e., C++) and get familiar with the scope.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T22:46:47.059+0000",
                    "updated": "2020-04-01T22:46:47.059+0000",
                    "started": "2020-04-01T22:46:47.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414352",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/418594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-611009823\n \n \n   Thanks @sunchao . That sounds great. Let me know how I (or other committers) can help.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T15:00:19.099+0000",
                    "updated": "2020-04-08T15:00:19.099+0000",
                    "started": "2020-04-08T15:00:19.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418594",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/418933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-611219557\n \n \n   Thanks @andygrove . I roughly skimmed through the C++ implementation and think on the high level we need to do the following:\r\n   \r\n   1. implement a method similar to `WriteArrow` in [column_writer.cc](https://github.com/apache/arrow/blob/master/cpp/src/parquet/column_writer.cc). We can further break this up into smaller pieces such as: dictionary/non-dictionary, primitive types, booleans, timestamps, dates, so on and so forth.\r\n   2. implement an arrow writer in the parquet crate [here](https://github.com/apache/arrow/tree/master/rust/parquet/src/arrow). This needs to offer similar APIs as [writer.h](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/writer.h).\r\n   \r\n   We also should pay good attention to performance on this part. I'll spend some more time on this and after that I'll create JIRAs under the parent JIRA you created.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T22:07:35.864+0000",
                    "updated": "2020-04-08T22:07:35.864+0000",
                    "started": "2020-04-08T22:07:35.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418933",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/421334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #6785: ARROW-8289: [Rust] Implement Arrow writer for Parquet [DRAFT]\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-612926900\n \n \n   I went ahead and created a new parent JIRA with some subtasks: https://issues.apache.org/jira/browse/ARROW-8421\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-13T14:40:24.069+0000",
                    "updated": "2020-04-13T14:40:24.069+0000",
                    "started": "2020-04-13T14:40:24.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421334",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/435178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6785:\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-631065724\n\n\n   I'll push the minor changes that I made here, to use the schema conversion. I got distracted by trying to figure out how to compute repetition levels to support nulls, but I can try that as part of a separate JIRA.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T20:31:27.217+0000",
                    "updated": "2020-05-19T20:31:27.217+0000",
                    "started": "2020-05-19T20:31:27.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435178",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/441341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #6785:\nURL: https://github.com/apache/arrow/pull/6785\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T15:19:14.593+0000",
                    "updated": "2020-06-04T15:19:14.593+0000",
                    "started": "2020-06-04T15:19:14.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441341",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/441342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6785:\nURL: https://github.com/apache/arrow/pull/6785#issuecomment-638919534\n\n\n   Closing this since it is replaced by https://github.com/apache/arrow/pull/7319\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T15:19:17.740+0000",
                    "updated": "2020-06-04T15:19:17.740+0000",
                    "started": "2020-06-04T15:19:17.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441342",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/442206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7319:\nURL: https://github.com/apache/arrow/pull/7319#issuecomment-640010989\n\n\n   https://issues.apache.org/jira/browse/ARROW-8289\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T08:16:44.631+0000",
                    "updated": "2020-06-06T08:16:44.631+0000",
                    "started": "2020-06-06T08:16:44.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442206",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/453072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #7319:\nURL: https://github.com/apache/arrow/pull/7319#discussion_r447898772\n\n\n\n##########\nFile path: rust/parquet/src/arrow/arrow_writer.rs\n##########\n@@ -0,0 +1,348 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Contains writer which writes arrow data into parquet data.\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+\n+use array::Array;\n+use arrow::array;\n+use arrow::datatypes::{DataType as ArrowDataType, Field, Schema};\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::column::writer::ColumnWriter;\n+use crate::errors::Result;\n+use crate::file::properties::WriterProperties;\n+use crate::{\n+    data_type::*,\n+    file::writer::{FileWriter, RowGroupWriter, SerializedFileWriter},\n+};\n+\n+struct ArrowWriter {\n+    writer: SerializedFileWriter<File>,\n+    rows: i64,\n+}\n+\n+impl ArrowWriter {\n+    pub fn try_new(file: File, arrow_schema: &Schema) -> Result<Self> {\n+        let schema = crate::arrow::arrow_to_parquet_schema(arrow_schema)?;\n+        let props = Rc::new(WriterProperties::builder().build());\n+        let file_writer = SerializedFileWriter::new(\n+            file.try_clone()?,\n+            schema.root_schema_ptr(),\n+            props,\n+        )?;\n+\n+        Ok(Self {\n+            writer: file_writer,\n+            rows: 0,\n+        })\n+    }\n+\n+    pub fn write(&mut self, batch: &RecordBatch) -> Result<()> {\n+        let mut row_group_writer = self.writer.next_row_group()?;\n+        self.rows += unnest_arrays_to_leaves(\n+            &mut row_group_writer,\n+            batch.schema().fields(),\n+            batch.columns(),\n+            &vec![1i16; batch.num_rows()][..],\n+            0,\n+        )?;\n+        self.writer.close_row_group(row_group_writer)\n+    }\n+\n+    pub fn close(&mut self) -> Result<()> {\n+        self.writer.close()\n+    }\n+}\n+\n+/// Write nested arrays by traversing into structs and lists until primitive\n+/// arrays are found.\n+fn unnest_arrays_to_leaves(\n+    row_group_writer: &mut Box<dyn RowGroupWriter>,\n+    // The fields from the record batch or struct\n+    fields: &Vec<Field>,\n+    // The columns from record batch or struct, must have same length as fields\n+    columns: &[array::ArrayRef],\n+    // The parent mask, in the case of a struct, this represents which values\n+    // of the struct are true (1) or false(0).\n+    // This is useful to respect the definition level of structs where all values are null in a row\n+    parent_mask: &[i16],\n+    // The current level that is being read at\n+    level: i16,\n+) -> Result<i64> {\n+    let mut rows_written = 0;\n+    for (field, column) in fields.iter().zip(columns) {\n+        match field.data_type() {\n+            ArrowDataType::List(_dtype) => unimplemented!(\"list not yet implemented\"),\n+            ArrowDataType::FixedSizeList(_, _) => {\n+                unimplemented!(\"fsl not yet implemented\")\n+            }\n+            ArrowDataType::Struct(fields) => {\n+                // fields in a struct should recursively be written out\n+                let array = column\n+                    .as_any()\n+                    .downcast_ref::<array::StructArray>()\n+                    .expect(\"Unable to get struct array\");\n+                let mut null_mask = Vec::with_capacity(array.len());\n+                for i in 0..array.len() {\n+                    null_mask.push(array.is_valid(i) as i16);\n+                }\n+                rows_written += unnest_arrays_to_leaves(\n+                    row_group_writer,\n+                    fields,\n+                    &array.columns_ref()[..],\n+                    &null_mask[..],\n+                    // if the field is nullable, we have to increment level\n+                    level + field.is_nullable() as i16,\n+                )?;\n+            }\n+            ArrowDataType::Null => unimplemented!(),\n+            ArrowDataType::Boolean\n+            | ArrowDataType::Int8\n+            | ArrowDataType::Int16\n+            | ArrowDataType::Int32\n+            | ArrowDataType::Int64\n+            | ArrowDataType::UInt8\n+            | ArrowDataType::UInt16\n+            | ArrowDataType::UInt32\n+            | ArrowDataType::UInt64\n+            | ArrowDataType::Float16\n+            | ArrowDataType::Float32\n+            | ArrowDataType::Float64\n+            | ArrowDataType::Timestamp(_, _)\n+            | ArrowDataType::Date32(_)\n+            | ArrowDataType::Date64(_)\n+            | ArrowDataType::Time32(_)\n+            | ArrowDataType::Time64(_)\n+            | ArrowDataType::Duration(_)\n+            | ArrowDataType::Interval(_)\n+            | ArrowDataType::Binary\n+            | ArrowDataType::FixedSizeBinary(_)\n+            | ArrowDataType::Utf8 => {\n+                let col_writer = row_group_writer.next_column()?;\n+                if let Some(mut writer) = col_writer {\n+                    // write_column\n+                    rows_written +=\n+                        write_column(&mut writer, column, level, parent_mask)? as i64;\n+                    row_group_writer.close_column(writer)?;\n+                } else {\n+                    panic!(\"No writer found\")\n+                }\n+            }\n+            ArrowDataType::Union(_) => unimplemented!(),\n+            ArrowDataType::Dictionary(_, _) => unimplemented!(),\n+        }\n+    }\n+    Ok(rows_written)\n+}\n+\n+/// Write column to writer\n+fn write_column(\n+    writer: &mut ColumnWriter,\n+    column: &array::ArrayRef,\n+    level: i16,\n+    parent_levels: &[i16],\n+) -> Result<usize> {\n+    match writer {\n+        ColumnWriter::Int32ColumnWriter(ref mut typed) => {\n+            let array = array::Int32Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<Int32Type, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::BoolColumnWriter(ref mut _typed) => unimplemented!(),\n+        ColumnWriter::Int64ColumnWriter(ref mut typed) => {\n+            let array = array::Int64Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<Int64Type, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::Int96ColumnWriter(ref mut _typed) => unimplemented!(),\n+        ColumnWriter::FloatColumnWriter(ref mut typed) => {\n+            let array = array::Float32Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<FloatType, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::DoubleColumnWriter(ref mut typed) => {\n+            let array = array::Float64Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<DoubleType, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::ByteArrayColumnWriter(ref mut _typed) => unimplemented!(),\n+        ColumnWriter::FixedLenByteArrayColumnWriter(ref mut _typed) => unimplemented!(),\n+    }\n+}\n+\n+/// Get the definition levels of the numeric array, with level 0 being null and 1 being not null\n+/// In the case where the array in question is a child of either a list or struct, the levels\n+/// are incremented in accordance with the `level` parameter.\n+/// Parent levels are either 0 or 1, and are used to higher (correct terminology?) leaves as null\n+fn get_primitive_def_levels(\n+    array: &array::ArrayRef,\n+    level: i16,\n+    parent_levels: &[i16],\n+) -> Vec<i16> {\n+    // convince the compiler that bounds are fine\n+    let len = array.len();\n+    assert_eq!(\n+        len,\n+        parent_levels.len(),\n+        \"Parent definition levels must equal array length\"\n+    );\n+    let levels = (0..len)\n+        .map(|index| (array.is_valid(index) as i16 + level) * parent_levels[index])\n+        .collect();\n+    levels\n+}\n+\n+/// Get the underlying numeric array slice, skipping any null values.\n+/// If there are no null values, the entire slice is returned,\n+/// thus this should only be called when there are null values.\n+fn get_numeric_array_slice<T, A>(array: &array::PrimitiveArray<A>) -> Vec<T::T>\n+where\n+    T: DataType,\n+    A: arrow::datatypes::ArrowNumericType,\n+    T::T: From<A::Native>,\n+{\n+    let mut values = Vec::with_capacity(array.len() - array.null_count());\n\nReview comment:\n       Not sure if this is the best way to handle this. For one, we can skip the for-loop if all array elements are not-null. Also perhaps we should use array builder for this? Eventually we can have a `write_arrow_batch` method in `column/writer.rs`.\n\n##########\nFile path: rust/parquet/src/arrow/arrow_writer.rs\n##########\n@@ -0,0 +1,348 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Contains writer which writes arrow data into parquet data.\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+\n+use array::Array;\n+use arrow::array;\n+use arrow::datatypes::{DataType as ArrowDataType, Field, Schema};\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::column::writer::ColumnWriter;\n+use crate::errors::Result;\n+use crate::file::properties::WriterProperties;\n+use crate::{\n+    data_type::*,\n+    file::writer::{FileWriter, RowGroupWriter, SerializedFileWriter},\n+};\n+\n+struct ArrowWriter {\n+    writer: SerializedFileWriter<File>,\n+    rows: i64,\n\nReview comment:\n       May add comments on what this is for\n\n##########\nFile path: rust/parquet/src/arrow/arrow_writer.rs\n##########\n@@ -0,0 +1,348 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Contains writer which writes arrow data into parquet data.\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+\n+use array::Array;\n+use arrow::array;\n+use arrow::datatypes::{DataType as ArrowDataType, Field, Schema};\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::column::writer::ColumnWriter;\n+use crate::errors::Result;\n+use crate::file::properties::WriterProperties;\n+use crate::{\n+    data_type::*,\n+    file::writer::{FileWriter, RowGroupWriter, SerializedFileWriter},\n+};\n+\n+struct ArrowWriter {\n+    writer: SerializedFileWriter<File>,\n+    rows: i64,\n+}\n+\n+impl ArrowWriter {\n+    pub fn try_new(file: File, arrow_schema: &Schema) -> Result<Self> {\n+        let schema = crate::arrow::arrow_to_parquet_schema(arrow_schema)?;\n+        let props = Rc::new(WriterProperties::builder().build());\n+        let file_writer = SerializedFileWriter::new(\n+            file.try_clone()?,\n+            schema.root_schema_ptr(),\n+            props,\n+        )?;\n+\n+        Ok(Self {\n+            writer: file_writer,\n+            rows: 0,\n+        })\n+    }\n+\n+    pub fn write(&mut self, batch: &RecordBatch) -> Result<()> {\n+        let mut row_group_writer = self.writer.next_row_group()?;\n+        self.rows += unnest_arrays_to_leaves(\n+            &mut row_group_writer,\n+            batch.schema().fields(),\n+            batch.columns(),\n+            &vec![1i16; batch.num_rows()][..],\n+            0,\n+        )?;\n+        self.writer.close_row_group(row_group_writer)\n+    }\n+\n+    pub fn close(&mut self) -> Result<()> {\n+        self.writer.close()\n+    }\n+}\n+\n+/// Write nested arrays by traversing into structs and lists until primitive\n+/// arrays are found.\n+fn unnest_arrays_to_leaves(\n+    row_group_writer: &mut Box<dyn RowGroupWriter>,\n+    // The fields from the record batch or struct\n+    fields: &Vec<Field>,\n+    // The columns from record batch or struct, must have same length as fields\n+    columns: &[array::ArrayRef],\n+    // The parent mask, in the case of a struct, this represents which values\n+    // of the struct are true (1) or false(0).\n+    // This is useful to respect the definition level of structs where all values are null in a row\n+    parent_mask: &[i16],\n+    // The current level that is being read at\n+    level: i16,\n+) -> Result<i64> {\n+    let mut rows_written = 0;\n+    for (field, column) in fields.iter().zip(columns) {\n+        match field.data_type() {\n+            ArrowDataType::List(_dtype) => unimplemented!(\"list not yet implemented\"),\n+            ArrowDataType::FixedSizeList(_, _) => {\n+                unimplemented!(\"fsl not yet implemented\")\n+            }\n+            ArrowDataType::Struct(fields) => {\n+                // fields in a struct should recursively be written out\n+                let array = column\n+                    .as_any()\n+                    .downcast_ref::<array::StructArray>()\n+                    .expect(\"Unable to get struct array\");\n+                let mut null_mask = Vec::with_capacity(array.len());\n+                for i in 0..array.len() {\n+                    null_mask.push(array.is_valid(i) as i16);\n+                }\n+                rows_written += unnest_arrays_to_leaves(\n+                    row_group_writer,\n+                    fields,\n+                    &array.columns_ref()[..],\n+                    &null_mask[..],\n+                    // if the field is nullable, we have to increment level\n+                    level + field.is_nullable() as i16,\n+                )?;\n+            }\n+            ArrowDataType::Null => unimplemented!(),\n+            ArrowDataType::Boolean\n+            | ArrowDataType::Int8\n+            | ArrowDataType::Int16\n+            | ArrowDataType::Int32\n+            | ArrowDataType::Int64\n+            | ArrowDataType::UInt8\n+            | ArrowDataType::UInt16\n+            | ArrowDataType::UInt32\n+            | ArrowDataType::UInt64\n+            | ArrowDataType::Float16\n+            | ArrowDataType::Float32\n+            | ArrowDataType::Float64\n+            | ArrowDataType::Timestamp(_, _)\n+            | ArrowDataType::Date32(_)\n+            | ArrowDataType::Date64(_)\n+            | ArrowDataType::Time32(_)\n+            | ArrowDataType::Time64(_)\n+            | ArrowDataType::Duration(_)\n+            | ArrowDataType::Interval(_)\n+            | ArrowDataType::Binary\n+            | ArrowDataType::FixedSizeBinary(_)\n+            | ArrowDataType::Utf8 => {\n+                let col_writer = row_group_writer.next_column()?;\n+                if let Some(mut writer) = col_writer {\n+                    // write_column\n+                    rows_written +=\n+                        write_column(&mut writer, column, level, parent_mask)? as i64;\n+                    row_group_writer.close_column(writer)?;\n+                } else {\n+                    panic!(\"No writer found\")\n+                }\n+            }\n+            ArrowDataType::Union(_) => unimplemented!(),\n+            ArrowDataType::Dictionary(_, _) => unimplemented!(),\n+        }\n+    }\n+    Ok(rows_written)\n+}\n+\n+/// Write column to writer\n+fn write_column(\n+    writer: &mut ColumnWriter,\n+    column: &array::ArrayRef,\n+    level: i16,\n+    parent_levels: &[i16],\n+) -> Result<usize> {\n+    match writer {\n+        ColumnWriter::Int32ColumnWriter(ref mut typed) => {\n+            let array = array::Int32Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<Int32Type, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::BoolColumnWriter(ref mut _typed) => unimplemented!(),\n+        ColumnWriter::Int64ColumnWriter(ref mut typed) => {\n+            let array = array::Int64Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<Int64Type, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::Int96ColumnWriter(ref mut _typed) => unimplemented!(),\n+        ColumnWriter::FloatColumnWriter(ref mut typed) => {\n+            let array = array::Float32Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<FloatType, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::DoubleColumnWriter(ref mut typed) => {\n+            let array = array::Float64Array::from(column.data());\n+            typed.write_batch(\n+                get_numeric_array_slice::<DoubleType, _>(&array).as_slice(),\n+                Some(get_primitive_def_levels(column, level, parent_levels).as_slice()),\n+                None,\n+            )\n+        }\n+        ColumnWriter::ByteArrayColumnWriter(ref mut _typed) => unimplemented!(),\n+        ColumnWriter::FixedLenByteArrayColumnWriter(ref mut _typed) => unimplemented!(),\n+    }\n+}\n+\n+/// Get the definition levels of the numeric array, with level 0 being null and 1 being not null\n+/// In the case where the array in question is a child of either a list or struct, the levels\n+/// are incremented in accordance with the `level` parameter.\n+/// Parent levels are either 0 or 1, and are used to higher (correct terminology?) leaves as null\n+fn get_primitive_def_levels(\n+    array: &array::ArrayRef,\n+    level: i16,\n+    parent_levels: &[i16],\n+) -> Vec<i16> {\n+    // convince the compiler that bounds are fine\n+    let len = array.len();\n+    assert_eq!(\n+        len,\n+        parent_levels.len(),\n+        \"Parent definition levels must equal array length\"\n+    );\n+    let levels = (0..len)\n+        .map(|index| (array.is_valid(index) as i16 + level) * parent_levels[index])\n\nReview comment:\n       Hmm is this correct? if I have a deeply nested struct and if its parent is null, then its def level is 0?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-30T18:44:02.331+0000",
                    "updated": "2020-06-30T18:44:02.331+0000",
                    "started": "2020-06-30T18:44:02.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "453072",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/465338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7319:\nURL: https://github.com/apache/arrow/pull/7319#issuecomment-667618090\n\n\n   > IMO we can solve this in two steps: 1) have a top-level method to compute def/rep levels for all leaf arrays of a given an arrow array, and then 2) use column writer to write Parquet value/def/rep using the result from the previous step and the input leaf array.\r\n   \r\n   FWIW, this is the approach the C++ code takes (supports arbitrary nessting).  One thing to note which is currently a bug in C++ is once rep/def levels are computed for any anything \r\n    with deep nesting (any leaf column one or more direct struct/group ancestor), nullness should be determined rep/def-levels and not leaf-arrays (this is currently a bug in C++).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-02T03:02:54.787+0000",
                    "updated": "2020-08-02T03:02:54.787+0000",
                    "started": "2020-08-02T03:02:54.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "465338",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/466438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maxburke commented on pull request #7319:\nURL: https://github.com/apache/arrow/pull/7319#issuecomment-668810183\n\n\n   Small comment about the API, something I found necessary was being able to pass in props to the writer interface: https://github.com/urbanlogiq/arrow/commit/5e08cf655aa78536d1fe72dc1ef1a0dcb91ff442\r\n   \r\n   The idea here is so that we can set the created_by attributes and compression, as an example.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-04T20:31:23.063+0000",
                    "updated": "2020-08-04T20:31:23.063+0000",
                    "started": "2020-08-04T20:31:23.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "466438",
                    "issueId": "13295273"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/worklog/466440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maxburke commented on pull request #7319:\nURL: https://github.com/apache/arrow/pull/7319#issuecomment-668815376\n\n\n   Oh! One more :) This one uses the ParquetWriter trait instead of std::fs::File: https://github.com/urbanlogiq/arrow/commit/e15851e11cef942fcd3803cb80016c35e49dca1b\r\n   \r\n   (our primary usecase is we write parquet files to memory because they immediately get persisted to object storage like AWS S3 so we never deal with local files)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-04T20:43:23.159+0000",
                    "updated": "2020-08-04T20:43:23.159+0000",
                    "started": "2020-08-04T20:43:23.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "466440",
                    "issueId": "13295273"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@77275861[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d4a15d5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24ce7630[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@39b73bc1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a577a28[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4d1e50f8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ab6c09d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a5f9939[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b783660[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4de3867[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28c0a249[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4e307039[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 13 16:47:54 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-13T16:47:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8289/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-03-31T14:32:54.000+0000",
        "updated": "2021-01-16T21:38:42.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement a minimal Arrow writer for Parquet so that RecordBatches can be written to a Parquet file. Ths initial version will only support i32 data type and separate JIRAs will be created for each data type or additional feature to support.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [Parquet] Implement minimal Arrow Parquet writer as starting point for full writer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295273/comment/17177149",
                    "id": "17177149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 7319\n[https://github.com/apache/arrow/pull/7319]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-08-13T16:47:54.790+0000",
                    "updated": "2020-08-13T16:47:54.790+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0d4eo:",
        "customfield_12314139": null
    }
}