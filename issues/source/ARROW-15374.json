{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13423599",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599",
    "key": "ARROW-15374",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15374/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/713839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239\n\n\n   This enables using Flight with something like CUDA without having to manually copy data. Given the work around UCX on the mailing list, this would enable alternative backends to optimize based on where data is allocated.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-24T15:26:20.242+0000",
                    "updated": "2022-01-24T15:26:20.242+0000",
                    "started": "2022-01-24T15:26:20.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "713839",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/713851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#issuecomment-1020227167\n\n\n   https://issues.apache.org/jira/browse/ARROW-15374\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-24T15:33:56.182+0000",
                    "updated": "2022-01-24T15:33:56.182+0000",
                    "started": "2022-01-24T15:33:56.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "713851",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/714364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#discussion_r791564011\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client.cc\n##########\n@@ -460,6 +462,11 @@ class GrpcIpcMessageReader : public ipc::MessageReader {\n       stream_finished_ = true;\n       return stream_->Finish(Status::OK());\n     }\n+\n+    if (ARROW_PREDICT_FALSE(!memory_manager_->is_cpu() && data->body)) {\n+      ARROW_ASSIGN_OR_RAISE(data->body, Buffer::ViewOrCopy(data->body, memory_manager_));\n+    }\n\nReview comment:\n       Nit: Does it make sense to move this code inside peekable_reader_->Next()?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T10:23:23.229+0000",
                    "updated": "2022-01-25T10:23:23.229+0000",
                    "started": "2022-01-25T10:23:23.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714364",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/714486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#discussion_r791739985\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client.cc\n##########\n@@ -460,6 +462,11 @@ class GrpcIpcMessageReader : public ipc::MessageReader {\n       stream_finished_ = true;\n       return stream_->Finish(Status::OK());\n     }\n+\n+    if (ARROW_PREDICT_FALSE(!memory_manager_->is_cpu() && data->body)) {\n+      ARROW_ASSIGN_OR_RAISE(data->body, Buffer::ViewOrCopy(data->body, memory_manager_));\n+    }\n\nReview comment:\n       We could, it does make error reporting more complicated though since PeekableReader doesn't have a way to report errors.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T14:00:20.842+0000",
                    "updated": "2022-01-25T14:00:20.842+0000",
                    "started": "2022-01-25T14:00:20.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714486",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/714817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#discussion_r791564011\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client.cc\n##########\n@@ -460,6 +462,11 @@ class GrpcIpcMessageReader : public ipc::MessageReader {\n       stream_finished_ = true;\n       return stream_->Finish(Status::OK());\n     }\n+\n+    if (ARROW_PREDICT_FALSE(!memory_manager_->is_cpu() && data->body)) {\n+      ARROW_ASSIGN_OR_RAISE(data->body, Buffer::ViewOrCopy(data->body, memory_manager_));\n+    }\n\nReview comment:\n       Nit: Does it make sense to move this code inside peekable_reader_->Next()?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T16:50:04.686+0000",
                    "updated": "2022-01-25T16:50:04.686+0000",
                    "started": "2022-01-25T16:50:04.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714817",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/715106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#discussion_r791739985\n\n\n\n##########\nFile path: cpp/src/arrow/flight/client.cc\n##########\n@@ -460,6 +462,11 @@ class GrpcIpcMessageReader : public ipc::MessageReader {\n       stream_finished_ = true;\n       return stream_->Finish(Status::OK());\n     }\n+\n+    if (ARROW_PREDICT_FALSE(!memory_manager_->is_cpu() && data->body)) {\n+      ARROW_ASSIGN_OR_RAISE(data->body, Buffer::ViewOrCopy(data->body, memory_manager_));\n+    }\n\nReview comment:\n       We could, it does make error reporting more complicated though since PeekableReader doesn't have a way to report errors.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T17:13:34.882+0000",
                    "updated": "2022-01-25T17:13:34.882+0000",
                    "started": "2022-01-25T17:13:34.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715106",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/716335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#discussion_r793461781\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight_cuda_test.cc\n##########\n@@ -0,0 +1,201 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/flight/client.h\"\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/gpu/cuda_api.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status CheckBuffersOnDevice(const Array& array, const Device& device) {\n+  for (const auto& buffer : array.data()->buffers) {\n+    if (!buffer) continue;\n+    if (!buffer->device()->Equals(device)) {\n+      return Status::Invalid(\"Expected buffer on device: \", device.ToString(),\n+                             \". Was allocated on device: \", buffer->device()->ToString());\n+    }\n+  }\n\nReview comment:\n       Should we also recurse into child data here?\n\n##########\nFile path: cpp/src/arrow/flight/flight_cuda_test.cc\n##########\n@@ -0,0 +1,201 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/flight/client.h\"\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/gpu/cuda_api.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status CheckBuffersOnDevice(const Array& array, const Device& device) {\n+  for (const auto& buffer : array.data()->buffers) {\n+    if (!buffer) continue;\n+    if (!buffer->device()->Equals(device)) {\n+      return Status::Invalid(\"Expected buffer on device: \", device.ToString(),\n+                             \". Was allocated on device: \", buffer->device()->ToString());\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n+class CudaTestServer : public FlightServerBase {\n+ public:\n+  explicit CudaTestServer(std::shared_ptr<Device> device) : device_(std::move(device)) {}\n+\n+  Status DoGet(const ServerCallContext&, const Ticket&,\n+               std::unique_ptr<FlightDataStream>* data_stream) override {\n+    BatchVector batches;\n+    RETURN_NOT_OK(ExampleIntBatches(&batches));\n+    auto batch_reader = std::make_shared<BatchIterator>(batches[0]->schema(), batches);\n+    *data_stream = std::unique_ptr<FlightDataStream>(new RecordBatchStream(batch_reader));\n+    return Status::OK();\n+  }\n+\n+  Status DoPut(const ServerCallContext&, std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override {\n+    BatchVector batches;\n+    RETURN_NOT_OK(reader->ReadAll(&batches));\n+    for (const auto& batch : batches) {\n+      for (const auto& column : batch->columns()) {\n+        RETURN_NOT_OK(CheckBuffersOnDevice(*column, *device_));\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status DoExchange(const ServerCallContext& context,\n+                    std::unique_ptr<FlightMessageReader> reader,\n+                    std::unique_ptr<FlightMessageWriter> writer) override {\n+    FlightStreamChunk chunk;\n+    bool begun = false;\n+    while (true) {\n+      RETURN_NOT_OK(reader->Next(&chunk));\n+      if (!chunk.data) break;\n+      if (!begun) {\n+        begun = true;\n+        RETURN_NOT_OK(writer->Begin(chunk.data->schema()));\n+      }\n+      for (const auto& column : chunk.data->columns()) {\n+        RETURN_NOT_OK(CheckBuffersOnDevice(*column, *device_));\n+      }\n+      RETURN_NOT_OK(writer->WriteRecordBatch(*chunk.data));\n+    }\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Device> device_;\n+};\n+\n+class TestCuda : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK_AND_ASSIGN(manager_, cuda::CudaDeviceManager::Instance());\n+    ASSERT_OK_AND_ASSIGN(device_, manager_->GetDevice(0));\n+    ASSERT_OK_AND_ASSIGN(context_, device_->GetContext());\n+\n+    ASSERT_OK(MakeServer<CudaTestServer>(\n+        &server_, &client_,\n+        [this](FlightServerOptions* options) {\n+          options->memory_manager = device_->default_memory_manager();\n+          return Status::OK();\n+        },\n+        [](FlightClientOptions* options) { return Status::OK(); }, device_));\n+  }\n+  void TearDown() { ASSERT_OK(server_->Shutdown()); }\n+\n+ protected:\n+  cuda::CudaDeviceManager* manager_;\n+  std::shared_ptr<cuda::CudaDevice> device_;\n+  std::shared_ptr<cuda::CudaContext> context_;\n+\n+  std::unique_ptr<FlightClient> client_;\n+  std::unique_ptr<FlightServerBase> server_;\n+};\n+\n+TEST_F(TestCuda, DoGet) {\n+  // Check that we can allocate the results of DoGet with a custom\n+  // memory manager.\n+  FlightCallOptions options;\n+  options.memory_manager = device_->default_memory_manager();\n+\n+  Ticket ticket{\"\"};\n+  std::unique_ptr<FlightStreamReader> stream;\n+  ASSERT_OK(client_->DoGet(options, ticket, &stream));\n+  std::shared_ptr<Table> table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  for (const auto& column : table->columns()) {\n+    for (const auto& chunk : column->chunks()) {\n+      ASSERT_OK(CheckBuffersOnDevice(*chunk, *device_));\n+    }\n+  }\n+}\n+\n+TEST_F(TestCuda, DoPut) {\n+  // Check that we can send a record batch containing references to\n+  // GPU buffers.\n+  BatchVector batches;\n+  ASSERT_OK(ExampleIntBatches(&batches));\n+\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  std::unique_ptr<FlightMetadataReader> reader;\n+  auto descriptor = FlightDescriptor::Path({\"\"});\n+  ASSERT_OK(client_->DoPut(descriptor, batches[0]->schema(), &writer, &reader));\n+\n+  ipc::DictionaryMemo memo;\n+  for (const auto& batch : batches) {\n+    ASSERT_OK_AND_ASSIGN(auto buffer, cuda::SerializeRecordBatch(*batch, context_.get()));\n+    ASSERT_OK_AND_ASSIGN(auto cuda_batch,\n+                         cuda::ReadRecordBatch(batch->schema(), &memo, buffer));\n+\n+    for (const auto& column : cuda_batch->columns()) {\n+      ASSERT_OK(CheckBuffersOnDevice(*column, *device_));\n+    }\n+\n+    ASSERT_OK(writer->WriteRecordBatch(*cuda_batch));\n+  }\n+  ASSERT_OK(writer->Close());\n+}\n+\n+TEST_F(TestCuda, DoExchange) {\n+  // Check that we can send a record batch containing references to\n+  // GPU buffers.\n+  FlightCallOptions options;\n+  options.memory_manager = device_->default_memory_manager();\n+\n+  BatchVector batches;\n+  ASSERT_OK(ExampleIntBatches(&batches));\n+\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  std::unique_ptr<FlightStreamReader> reader;\n+  auto descriptor = FlightDescriptor::Path({\"\"});\n+  ASSERT_OK(client_->DoExchange(options, descriptor, &writer, &reader));\n+  ASSERT_OK(writer->Begin(batches[0]->schema()));\n+\n+  ipc::DictionaryMemo memo;\n+  for (const auto& batch : batches) {\n+    ASSERT_OK_AND_ASSIGN(auto buffer, cuda::SerializeRecordBatch(*batch, context_.get()));\n+    ASSERT_OK_AND_ASSIGN(auto cuda_batch,\n+                         cuda::ReadRecordBatch(batch->schema(), &memo, buffer));\n+\n+    for (const auto& column : cuda_batch->columns()) {\n+      ASSERT_OK(CheckBuffersOnDevice(*column, *device_));\n+    }\n+\n+    ASSERT_OK(writer->WriteRecordBatch(*cuda_batch));\n+\n+    FlightStreamChunk chunk;\n+    ASSERT_OK(reader->Next(&chunk));\n+    for (const auto& column : chunk.data->columns()) {\n\nReview comment:\n       Should we also check the contents of the returned data here?\n\n##########\nFile path: cpp/src/arrow/flight/serialization_internal.cc\n##########\n@@ -272,7 +282,13 @@ grpc::Status FlightDataSerialize(const FlightPayload& msg, ByteBuffer* out,\n         // entries are invalid.\n         if (!buffer) continue;\n \n-        slices.push_back(SliceFromBuffer(buffer));\n+        grpc::Slice slice;\n+        auto status = SliceFromBuffer(buffer).Value(&slice);\n+        if (ARROW_PREDICT_FALSE(!status.ok())) {\n+          // This will likely lead to abort as gRPC cannot recover from an error here\n+          return ToGrpcStatus(status);\n+        }\n+        slices.push_back(slice);\n\nReview comment:\n       (not sure how `grpc::Slice` behaves wrt copies)\r\n   \r\n   ```suggestion\r\n           slices.push_back(std::move(slice));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/flight/flight_cuda_test.cc\n##########\n@@ -0,0 +1,201 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/flight/client.h\"\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/gpu/cuda_api.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status CheckBuffersOnDevice(const Array& array, const Device& device) {\n+  for (const auto& buffer : array.data()->buffers) {\n+    if (!buffer) continue;\n+    if (!buffer->device()->Equals(device)) {\n+      return Status::Invalid(\"Expected buffer on device: \", device.ToString(),\n+                             \". Was allocated on device: \", buffer->device()->ToString());\n+    }\n+  }\n\nReview comment:\n       Ok, I realize the test might only use primitive data, in which case it doesn't matter.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T10:29:45.247+0000",
                    "updated": "2022-01-27T10:29:45.247+0000",
                    "started": "2022-01-27T10:29:45.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716335",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/716503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#discussion_r793736383\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight_cuda_test.cc\n##########\n@@ -0,0 +1,201 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/flight/client.h\"\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/gpu/cuda_api.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status CheckBuffersOnDevice(const Array& array, const Device& device) {\n+  for (const auto& buffer : array.data()->buffers) {\n+    if (!buffer) continue;\n+    if (!buffer->device()->Equals(device)) {\n+      return Status::Invalid(\"Expected buffer on device: \", device.ToString(),\n+                             \". Was allocated on device: \", buffer->device()->ToString());\n+    }\n+  }\n\nReview comment:\n       I added a guard against this.\n\n##########\nFile path: cpp/src/arrow/flight/flight_cuda_test.cc\n##########\n@@ -0,0 +1,201 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/flight/client.h\"\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/gpu/cuda_api.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status CheckBuffersOnDevice(const Array& array, const Device& device) {\n+  for (const auto& buffer : array.data()->buffers) {\n+    if (!buffer) continue;\n+    if (!buffer->device()->Equals(device)) {\n+      return Status::Invalid(\"Expected buffer on device: \", device.ToString(),\n+                             \". Was allocated on device: \", buffer->device()->ToString());\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n+class CudaTestServer : public FlightServerBase {\n+ public:\n+  explicit CudaTestServer(std::shared_ptr<Device> device) : device_(std::move(device)) {}\n+\n+  Status DoGet(const ServerCallContext&, const Ticket&,\n+               std::unique_ptr<FlightDataStream>* data_stream) override {\n+    BatchVector batches;\n+    RETURN_NOT_OK(ExampleIntBatches(&batches));\n+    auto batch_reader = std::make_shared<BatchIterator>(batches[0]->schema(), batches);\n+    *data_stream = std::unique_ptr<FlightDataStream>(new RecordBatchStream(batch_reader));\n+    return Status::OK();\n+  }\n+\n+  Status DoPut(const ServerCallContext&, std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override {\n+    BatchVector batches;\n+    RETURN_NOT_OK(reader->ReadAll(&batches));\n+    for (const auto& batch : batches) {\n+      for (const auto& column : batch->columns()) {\n+        RETURN_NOT_OK(CheckBuffersOnDevice(*column, *device_));\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status DoExchange(const ServerCallContext& context,\n+                    std::unique_ptr<FlightMessageReader> reader,\n+                    std::unique_ptr<FlightMessageWriter> writer) override {\n+    FlightStreamChunk chunk;\n+    bool begun = false;\n+    while (true) {\n+      RETURN_NOT_OK(reader->Next(&chunk));\n+      if (!chunk.data) break;\n+      if (!begun) {\n+        begun = true;\n+        RETURN_NOT_OK(writer->Begin(chunk.data->schema()));\n+      }\n+      for (const auto& column : chunk.data->columns()) {\n+        RETURN_NOT_OK(CheckBuffersOnDevice(*column, *device_));\n+      }\n+      RETURN_NOT_OK(writer->WriteRecordBatch(*chunk.data));\n+    }\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Device> device_;\n+};\n+\n+class TestCuda : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK_AND_ASSIGN(manager_, cuda::CudaDeviceManager::Instance());\n+    ASSERT_OK_AND_ASSIGN(device_, manager_->GetDevice(0));\n+    ASSERT_OK_AND_ASSIGN(context_, device_->GetContext());\n+\n+    ASSERT_OK(MakeServer<CudaTestServer>(\n+        &server_, &client_,\n+        [this](FlightServerOptions* options) {\n+          options->memory_manager = device_->default_memory_manager();\n+          return Status::OK();\n+        },\n+        [](FlightClientOptions* options) { return Status::OK(); }, device_));\n+  }\n+  void TearDown() { ASSERT_OK(server_->Shutdown()); }\n+\n+ protected:\n+  cuda::CudaDeviceManager* manager_;\n+  std::shared_ptr<cuda::CudaDevice> device_;\n+  std::shared_ptr<cuda::CudaContext> context_;\n+\n+  std::unique_ptr<FlightClient> client_;\n+  std::unique_ptr<FlightServerBase> server_;\n+};\n+\n+TEST_F(TestCuda, DoGet) {\n+  // Check that we can allocate the results of DoGet with a custom\n+  // memory manager.\n+  FlightCallOptions options;\n+  options.memory_manager = device_->default_memory_manager();\n+\n+  Ticket ticket{\"\"};\n+  std::unique_ptr<FlightStreamReader> stream;\n+  ASSERT_OK(client_->DoGet(options, ticket, &stream));\n+  std::shared_ptr<Table> table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  for (const auto& column : table->columns()) {\n+    for (const auto& chunk : column->chunks()) {\n+      ASSERT_OK(CheckBuffersOnDevice(*chunk, *device_));\n+    }\n+  }\n+}\n+\n+TEST_F(TestCuda, DoPut) {\n+  // Check that we can send a record batch containing references to\n+  // GPU buffers.\n+  BatchVector batches;\n+  ASSERT_OK(ExampleIntBatches(&batches));\n+\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  std::unique_ptr<FlightMetadataReader> reader;\n+  auto descriptor = FlightDescriptor::Path({\"\"});\n+  ASSERT_OK(client_->DoPut(descriptor, batches[0]->schema(), &writer, &reader));\n+\n+  ipc::DictionaryMemo memo;\n+  for (const auto& batch : batches) {\n+    ASSERT_OK_AND_ASSIGN(auto buffer, cuda::SerializeRecordBatch(*batch, context_.get()));\n+    ASSERT_OK_AND_ASSIGN(auto cuda_batch,\n+                         cuda::ReadRecordBatch(batch->schema(), &memo, buffer));\n+\n+    for (const auto& column : cuda_batch->columns()) {\n+      ASSERT_OK(CheckBuffersOnDevice(*column, *device_));\n+    }\n+\n+    ASSERT_OK(writer->WriteRecordBatch(*cuda_batch));\n+  }\n+  ASSERT_OK(writer->Close());\n+}\n+\n+TEST_F(TestCuda, DoExchange) {\n+  // Check that we can send a record batch containing references to\n+  // GPU buffers.\n+  FlightCallOptions options;\n+  options.memory_manager = device_->default_memory_manager();\n+\n+  BatchVector batches;\n+  ASSERT_OK(ExampleIntBatches(&batches));\n+\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  std::unique_ptr<FlightStreamReader> reader;\n+  auto descriptor = FlightDescriptor::Path({\"\"});\n+  ASSERT_OK(client_->DoExchange(options, descriptor, &writer, &reader));\n+  ASSERT_OK(writer->Begin(batches[0]->schema()));\n+\n+  ipc::DictionaryMemo memo;\n+  for (const auto& batch : batches) {\n+    ASSERT_OK_AND_ASSIGN(auto buffer, cuda::SerializeRecordBatch(*batch, context_.get()));\n+    ASSERT_OK_AND_ASSIGN(auto cuda_batch,\n+                         cuda::ReadRecordBatch(batch->schema(), &memo, buffer));\n+\n+    for (const auto& column : cuda_batch->columns()) {\n+      ASSERT_OK(CheckBuffersOnDevice(*column, *device_));\n+    }\n+\n+    ASSERT_OK(writer->WriteRecordBatch(*cuda_batch));\n+\n+    FlightStreamChunk chunk;\n+    ASSERT_OK(reader->Next(&chunk));\n+    for (const auto& column : chunk.data->columns()) {\n\nReview comment:\n       Makes sense, I added a helper to do this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T15:40:30.701+0000",
                    "updated": "2022-01-27T15:40:30.701+0000",
                    "started": "2022-01-27T15:40:30.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716503",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/717821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T10:17:07.011+0000",
                    "updated": "2022-01-31T10:17:07.011+0000",
                    "started": "2022-01-31T10:17:07.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717821",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/717823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#issuecomment-1025583247\n\n\n   Benchmark runs are scheduled for baseline = 690e22f8256d2d4fe548cdbdaf2d70362780fdff and contender = a7f518ca90fa12ac0edad59e70486b96c8c72f8e. a7f518ca90fa12ac0edad59e70486b96c8c72f8e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/42e6419ea7aa46679286f3c4f5a34180...7bbbbe87486f4464a15269da8e2ecadc/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7835de18ed5942c0b175cac52b814b76...d0ac4bad5f6e4ad7b21261a4d80446b5/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/da8258ae281a4b9d9ab3b1d9633accb7...bcef6c6d20e8427ea21d98f58943ada1/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T10:21:35.206+0000",
                    "updated": "2022-01-31T10:21:35.206+0000",
                    "started": "2022-01-31T10:21:35.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717823",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/717832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#issuecomment-1025583247\n\n\n   Benchmark runs are scheduled for baseline = 690e22f8256d2d4fe548cdbdaf2d70362780fdff and contender = a7f518ca90fa12ac0edad59e70486b96c8c72f8e. a7f518ca90fa12ac0edad59e70486b96c8c72f8e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/42e6419ea7aa46679286f3c4f5a34180...7bbbbe87486f4464a15269da8e2ecadc/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7835de18ed5942c0b175cac52b814b76...d0ac4bad5f6e4ad7b21261a4d80446b5/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/da8258ae281a4b9d9ab3b1d9633accb7...bcef6c6d20e8427ea21d98f58943ada1/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T10:41:29.490+0000",
                    "updated": "2022-01-31T10:41:29.490+0000",
                    "started": "2022-01-31T10:41:29.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717832",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/717860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#issuecomment-1025583247\n\n\n   Benchmark runs are scheduled for baseline = 690e22f8256d2d4fe548cdbdaf2d70362780fdff and contender = a7f518ca90fa12ac0edad59e70486b96c8c72f8e. a7f518ca90fa12ac0edad59e70486b96c8c72f8e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/42e6419ea7aa46679286f3c4f5a34180...7bbbbe87486f4464a15269da8e2ecadc/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7835de18ed5942c0b175cac52b814b76...d0ac4bad5f6e4ad7b21261a4d80446b5/)\n   [Finished :arrow_down:0.17% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/da8258ae281a4b9d9ab3b1d9633accb7...bcef6c6d20e8427ea21d98f58943ada1/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T12:11:22.125+0000",
                    "updated": "2022-01-31T12:11:22.125+0000",
                    "started": "2022-01-31T12:11:22.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717860",
                    "issueId": "13423599"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/worklog/717878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12239:\nURL: https://github.com/apache/arrow/pull/12239#issuecomment-1025583247\n\n\n   Benchmark runs are scheduled for baseline = 690e22f8256d2d4fe548cdbdaf2d70362780fdff and contender = a7f518ca90fa12ac0edad59e70486b96c8c72f8e. a7f518ca90fa12ac0edad59e70486b96c8c72f8e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/42e6419ea7aa46679286f3c4f5a34180...7bbbbe87486f4464a15269da8e2ecadc/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7835de18ed5942c0b175cac52b814b76...d0ac4bad5f6e4ad7b21261a4d80446b5/)\n   [Finished :arrow_down:0.17% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/da8258ae281a4b9d9ab3b1d9633accb7...bcef6c6d20e8427ea21d98f58943ada1/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T13:01:37.580+0000",
                    "updated": "2022-01-31T13:01:37.580+0000",
                    "started": "2022-01-31T13:01:37.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717878",
                    "issueId": "13423599"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@88ac7f4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19e9b1ec[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ce86dfb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@38dac75b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ce59434[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4380bae9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ca890d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2266206[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42a21242[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@433af0d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c35a974[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1d32c8a6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 31 10:16:48 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-31T10:16:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15374/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-01-19T19:38:05.000+0000",
        "updated": "2022-04-24T18:38:50.000+0000",
        "timeoriginalestimate": null,
        "description": "We should add support for sending/receiving data using a non-standard allocator, given that:\r\n * the plan is to support UCX as a backend to Flight,\r\n * UCX can manage non-CPU memory,\r\n * the existing Device/MemoryManager API handles this case,\r\n\r\nWe should find some way to ensure we fully reflect UCX's capabilities to Flight users. Furthermore, we should integrate the MemoryManager and Flight APIs so that Flight user code should not _have_ to worry about whether their backend supports this or not. (That means that for gRPC, we should do the copy for the user.)\r\n\r\nAs part of this, we should extend the Flight benchmark to test this case so we also have a baseline.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][FlightRPC] Add support for alternative MemoryManagers",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423599/comment/17484595",
                    "id": "17484595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12239\n[https://github.com/apache/arrow/pull/12239]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-01-31T10:16:48.450+0000",
                    "updated": "2022-01-31T10:16:48.450+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0yqu8:",
        "customfield_12314139": null
    }
}