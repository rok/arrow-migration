{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13208709",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709",
    "key": "ARROW-4226",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available",
            "sparse"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 36600,
            "total": 36600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 36600,
            "total": 36600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4226/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 88,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/377275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on issue #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#issuecomment-578432055\n \n \n   @mrkn @pitrou this is ready for a review in case you can spare some time. :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-25T18:48:33.211+0000",
                    "updated": "2020-01-25T18:48:33.211+0000",
                    "started": "2020-01-25T18:48:33.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "377275",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/377305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#issuecomment-578453103\n \n \n   I\u2019ll look this tomorrow.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-25T23:30:09.085+0000",
                    "updated": "2020-01-25T23:30:09.085+0000",
                    "started": "2020-01-25T23:30:09.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "377305",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/377991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371572006\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -113,9 +113,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer;\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n+  ///   X[1, 1, 1, 3] := 2\n+  ///   X[1, 2, 1, 1] := 3\n+  ///   X[1, 2, 1, 3] := 4\n+  ///   X[1, 2, 2, 1] := 5\n+  ///   X[2, 2, 2, 1] := 6\n+  ///   X[2, 2, 2, 2] := 7\n+  ///   X[2, 2, 2, 3] := 8\n+  ///\n+  /// As a prefix tree this would be represented be:\n+  ///\n+  ///         1          2\n+  ///        / \\         |\n+  ///       1   2        2\n+  ///      /   / \\       |\n+  ///     1   1   2      2\n+  ///    / \\ / \\   \\    /|\\\n+  ///   2  3 1  3   1  1 2 3\n+\n+  /// The type of values in indptrBuffers\n+  indptrType: Int;\n+\n+  /// indptrBuffers stores the sparsity structure.\n+  /// Position in the indptrBuffers vector signifies the dimension.\n+  /// For example, the indptrBuffers for the above X is:\n+  ///\n+  ///   indptrBuffer(X) = [[0, 2, 3], [0, 1, 3, 4], [0, 2, 4, 5, 8]].\n+  ///\n+  indptrBuffers: [Buffer];\n \n Review comment:\n   Could you please mark `indptrBuffers`, `indicesBuffers`, and `axisOrder` property required?\r\n   You can see how to do this in https://github.com/apache/arrow/pull/6234.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T01:31:57.025+0000",
                    "updated": "2020-01-28T01:31:57.025+0000",
                    "started": "2020-01-28T01:31:57.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "377991",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371826898\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -113,9 +113,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer;\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n+  ///   X[1, 1, 1, 3] := 2\n+  ///   X[1, 2, 1, 1] := 3\n+  ///   X[1, 2, 1, 3] := 4\n+  ///   X[1, 2, 2, 1] := 5\n+  ///   X[2, 2, 2, 1] := 6\n+  ///   X[2, 2, 2, 2] := 7\n+  ///   X[2, 2, 2, 3] := 8\n+  ///\n+  /// As a prefix tree this would be represented be:\n+  ///\n+  ///         1          2\n+  ///        / \\         |\n+  ///       1   2        2\n+  ///      /   / \\       |\n+  ///     1   1   2      2\n+  ///    / \\ / \\   \\    /|\\\n+  ///   2  3 1  3   1  1 2 3\n+\n+  /// The type of values in indptrBuffers\n+  indptrType: Int;\n+\n+  /// indptrBuffers stores the sparsity structure.\n+  /// Position in the indptrBuffers vector signifies the dimension.\n+  /// For example, the indptrBuffers for the above X is:\n+  ///\n+  ///   indptrBuffer(X) = [[0, 2, 3], [0, 1, 3, 4], [0, 2, 4, 5, 8]].\n+  ///\n+  indptrBuffers: [Buffer];\n \n Review comment:\n   Done. I've also made `indptrType` and `indicesType` required since I see `SparseMatrixIndexCSX` and `SparseTensorIndexCOO` have it as required.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T14:16:26.693+0000",
                    "updated": "2020-01-28T14:16:26.693+0000",
                    "started": "2020-01-28T14:16:26.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378259",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371834688\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor.cc\n ##########\n @@ -17,12 +17,14 @@\n \n #include \"arrow/sparse_tensor.h\"\n \n+#include <arrow/util/sort.h>\n \n Review comment:\n   Please use the existing convention for this:\r\n   ```c++\r\n   #include \"arrow/util/sort.h\"\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:22.593+0000",
                    "updated": "2020-01-28T15:21:22.593+0000",
                    "started": "2020-01-28T15:21:22.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378295",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371837952\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -114,9 +114,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer (required);\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n \n Review comment:\n   Could you write out the example using 0-based indices instead? I think it would be less confusing for readers.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:22.593+0000",
                    "updated": "2020-01-28T15:21:22.593+0000",
                    "started": "2020-01-28T15:21:22.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378296",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371839264\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -114,9 +114,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer (required);\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n+  ///   X[1, 1, 1, 3] := 2\n+  ///   X[1, 2, 1, 1] := 3\n+  ///   X[1, 2, 1, 3] := 4\n+  ///   X[1, 2, 2, 1] := 5\n+  ///   X[2, 2, 2, 1] := 6\n+  ///   X[2, 2, 2, 2] := 7\n+  ///   X[2, 2, 2, 3] := 8\n+  ///\n+  /// As a prefix tree this would be represented be:\n+  ///\n+  ///         1          2\n+  ///        / \\         |\n+  ///       1   2        2\n+  ///      /   / \\       |\n+  ///     1   1   2      2\n+  ///    /|  /|   |    /| |\n+  ///   2 3 1 3   1   1 2 3\n+\n+  /// The type of values in indptrBuffers\n+  indptrType: Int (required);\n+\n+  /// indptrBuffers stores the sparsity structure.\n+  /// Position in the indptrBuffers vector signifies the dimension.\n+  /// For example, the indptrBuffers for the above X is:\n+  ///\n+  ///   indptrBuffer(X) = [[0, 2, 3], [0, 1, 3, 4], [0, 2, 4, 5, 8]].\n \n Review comment:\n   Hmm... so the first dimension isn't represented in `indptrBuffer`? Is that always the case? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:22.922+0000",
                    "updated": "2020-01-28T15:21:22.922+0000",
                    "started": "2020-01-28T15:21:22.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378297",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371841346\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -114,9 +114,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer (required);\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n+  ///   X[1, 1, 1, 3] := 2\n+  ///   X[1, 2, 1, 1] := 3\n+  ///   X[1, 2, 1, 3] := 4\n+  ///   X[1, 2, 2, 1] := 5\n+  ///   X[2, 2, 2, 1] := 6\n+  ///   X[2, 2, 2, 2] := 7\n+  ///   X[2, 2, 2, 3] := 8\n+  ///\n+  /// As a prefix tree this would be represented be:\n+  ///\n+  ///         1          2\n+  ///        / \\         |\n+  ///       1   2        2\n+  ///      /   / \\       |\n+  ///     1   1   2      2\n+  ///    /|  /|   |    /| |\n+  ///   2 3 1 3   1   1 2 3\n+\n+  /// The type of values in indptrBuffers\n+  indptrType: Int (required);\n+\n+  /// indptrBuffers stores the sparsity structure.\n+  /// Position in the indptrBuffers vector signifies the dimension.\n+  /// For example, the indptrBuffers for the above X is:\n+  ///\n+  ///   indptrBuffer(X) = [[0, 2, 3], [0, 1, 3, 4], [0, 2, 4, 5, 8]].\n \n Review comment:\n   If so, I would rephrase the above: \"Position in the indptrBuffers vector signifies the dimension\" into something more accurate e.g. \"Each tensor dimension except the first one corresponds to an entry in indptrBuffers\".\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:23.083+0000",
                    "updated": "2020-01-28T15:21:23.083+0000",
                    "started": "2020-01-28T15:21:23.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378298",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371841751\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -114,9 +114,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer (required);\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n+  ///   X[1, 1, 1, 3] := 2\n+  ///   X[1, 2, 1, 1] := 3\n+  ///   X[1, 2, 1, 3] := 4\n+  ///   X[1, 2, 2, 1] := 5\n+  ///   X[2, 2, 2, 1] := 6\n+  ///   X[2, 2, 2, 2] := 7\n+  ///   X[2, 2, 2, 3] := 8\n+  ///\n+  /// As a prefix tree this would be represented be:\n+  ///\n+  ///         1          2\n+  ///        / \\         |\n+  ///       1   2        2\n+  ///      /   / \\       |\n+  ///     1   1   2      2\n+  ///    /|  /|   |    /| |\n+  ///   2 3 1 3   1   1 2 3\n+\n+  /// The type of values in indptrBuffers\n+  indptrType: Int (required);\n+\n+  /// indptrBuffers stores the sparsity structure.\n+  /// Position in the indptrBuffers vector signifies the dimension.\n+  /// For example, the indptrBuffers for the above X is:\n+  ///\n+  ///   indptrBuffer(X) = [[0, 2, 3], [0, 1, 3, 4], [0, 2, 4, 5, 8]].\n+  ///\n+  indptrBuffers: [Buffer] (required);\n+\n+  /// The type of values in indicesBuffers\n+  indicesType: Int (required);\n+\n+  /// indicesBuffers stores the label of each node.\n+  /// Position in the indicesBuffers vector signifies the dimension.\n \n Review comment:\n   If the change above is done, perhaps change this one to \"Each tensor dimension corresponds to an entry in indicesBuffers\".\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:23.317+0000",
                    "updated": "2020-01-28T15:21:23.317+0000",
                    "started": "2020-01-28T15:21:23.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378299",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371842965\n \n \n\n ##########\n File path: format/SparseTensor.fbs\n ##########\n @@ -114,9 +114,71 @@ table SparseMatrixIndexCSX {\n   indicesBuffer: Buffer (required);\n }\n \n+/// Compressed Sparse Fiber (CSF) sparse tensor index.\n+table SparseTensorIndexCSF {\n+  /// CSF is a generalization of compressed sparse row (CSR) index.\n+  /// See [smith2017knl]: http://shaden.io/pub-files/smith2017knl.pdf\n+  ///\n+  /// CSF recursively compresses each mode of the tensor into a set\n+  /// of prefix trees. Each path from a root to leaf forms one tensor\n+  /// non-zero index. CSF is implemented with two buffers and three arrays.\n+  ///\n+  /// For example, let X be a 3x3x3x4 tensor, and it has the following\n+  /// 8 non-zero values:\n+  ///\n+  ///   X[1, 1, 1, 2] := 1\n+  ///   X[1, 1, 1, 3] := 2\n+  ///   X[1, 2, 1, 1] := 3\n+  ///   X[1, 2, 1, 3] := 4\n+  ///   X[1, 2, 2, 1] := 5\n+  ///   X[2, 2, 2, 1] := 6\n+  ///   X[2, 2, 2, 2] := 7\n+  ///   X[2, 2, 2, 3] := 8\n+  ///\n+  /// As a prefix tree this would be represented be:\n+  ///\n+  ///         1          2\n+  ///        / \\         |\n+  ///       1   2        2\n+  ///      /   / \\       |\n+  ///     1   1   2      2\n+  ///    /|  /|   |    /| |\n+  ///   2 3 1 3   1   1 2 3\n+\n+  /// The type of values in indptrBuffers\n+  indptrType: Int (required);\n+\n+  /// indptrBuffers stores the sparsity structure.\n+  /// Position in the indptrBuffers vector signifies the dimension.\n+  /// For example, the indptrBuffers for the above X is:\n+  ///\n+  ///   indptrBuffer(X) = [[0, 2, 3], [0, 1, 3, 4], [0, 2, 4, 5, 8]].\n+  ///\n+  indptrBuffers: [Buffer] (required);\n+\n+  /// The type of values in indicesBuffers\n+  indicesType: Int (required);\n+\n+  /// indicesBuffers stores the label of each node.\n+  /// Position in the indicesBuffers vector signifies the dimension.\n+  /// For example, the indicesBuffers for the above X is:\n+  ///\n+  ///   indicesBuffer(X) = [[1, 2], [1, 2, 2], [1, 1, 2, 2], [2, 3, 1, 3, 1, 1, 2, 3]].\n+  ///\n+  indicesBuffers: [Buffer] (required);\n+\n+  /// axisOrder stores the sequence in which dimensions were traversed to produce the prefix tree.\n+  /// For example, the axisOrder for the above X is:\n+  ///\n+  ///   axisOrder(X) = [0, 1, 2, 3].\n+  ///\n+  axisOrder: [Int] (required);\n \n Review comment:\n   This looks weird. Uppercase `Int` is an integer *type*, so `axisOrder` is a vector of integer types?\r\n   \r\n   Shouldn't that be something like:\r\n   ```fbs\r\n     axisOrder: [int] (required);\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:23.397+0000",
                    "updated": "2020-01-28T15:21:23.397+0000",
                    "started": "2020-01-28T15:21:23.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378300",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371850039\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n \n Review comment:\n   This isn't terrific for readability and maintenance.\r\n   How about something like:\r\n   ```c++\r\n   int64_t dense_values[3][3][3][4] = {};  // zero-initialized\r\n   dense_values[0, 0, 0, 1] = 1;\r\n   // etc.\r\n   dense_values[1, 1, 1, 2] = 8;\r\n   auto dense_data = Buffer::Wrap(dense_values);\r\n   ```\r\n   \r\n   This would also make the comment above superfluous.\r\n   \r\n   Also note that if you reuse the same example in different places, it can be beneficial to factor out its initialization in a helper function.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:23.890+0000",
                    "updated": "2020-01-28T15:21:23.890+0000",
                    "started": "2020-01-28T15:21:23.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378301",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371850774\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n \n Review comment:\n   By the way, for testing it would be better to choose an index type different from the value type. So perhaps use e.g. `int16_t` as value type.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:23.911+0000",
                    "updated": "2020-01-28T15:21:23.911+0000",
                    "started": "2020-01-28T15:21:23.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378302",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371851789\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+    auto dense_data = Buffer::Wrap(dense_values);\n+    NumericTensor<Int64Type> dense_tensor(dense_data, shape_, {}, dim_names_);\n+    ASSERT_OK_AND_ASSIGN(sparse_tensor_from_dense_,\n+                         SparseCSFTensor::Make(\n+                             dense_tensor, TypeTraits<IndexValueType>::type_singleton()));\n+  }\n+\n+ protected:\n+  std::vector<int64_t> shape_;\n+  std::vector<std::string> dim_names_;\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor_from_dense_;\n+};\n+\n+class TestSparseCSFTensor : public TestSparseCSFTensorBase<Int64Type> {};\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers1) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 2, 3, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3}, {0, 3, 1, 3, 5}};\n+  std::vector<int64_t> indices_shapes({3, 5});\n+  std::vector<int64_t> axis_order = {0, 1};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 3, 2, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n \n Review comment:\n   Please use `const auto&` when not mutating the source.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.075+0000",
                    "updated": "2020-01-28T15:21:24.075+0000",
                    "started": "2020-01-28T15:21:24.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378303",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371843820\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n \n Review comment:\n   Can you write those out as 0-based indices?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.078+0000",
                    "updated": "2020-01-28T15:21:24.078+0000",
                    "started": "2020-01-28T15:21:24.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378304",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371857879\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+    auto dense_data = Buffer::Wrap(dense_values);\n+    NumericTensor<Int64Type> dense_tensor(dense_data, shape_, {}, dim_names_);\n+    ASSERT_OK_AND_ASSIGN(sparse_tensor_from_dense_,\n+                         SparseCSFTensor::Make(\n+                             dense_tensor, TypeTraits<IndexValueType>::type_singleton()));\n+  }\n+\n+ protected:\n+  std::vector<int64_t> shape_;\n+  std::vector<std::string> dim_names_;\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor_from_dense_;\n+};\n+\n+class TestSparseCSFTensor : public TestSparseCSFTensorBase<Int64Type> {};\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers1) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 2, 3, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3}, {0, 3, 1, 3, 5}};\n+  std::vector<int64_t> indices_shapes({3, 5});\n+  std::vector<int64_t> axis_order = {0, 1};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 3, 2, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFIndex> sparse_index;\n+  ASSERT_OK_AND_ASSIGN(sparse_index,\n+                       SparseCSFIndex::Make(tensor.type(), tensor.type(), indices_shapes,\n+                                            axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st = std::make_shared<SparseCSFTensor>(\n+      sparse_index, int64(), data_buffer, shape, dim_names);\n+  std::shared_ptr<Tensor> dt;\n+  ASSERT_OK(st->ToTensor(&dt));\n+  ASSERT_TRUE(tensor.Equals(*dt));\n+}\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers2) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 1, 2, 4, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3, 5}, {0, 1, 0, 3, 3}};\n+  std::vector<int64_t> indices_shapes({4, 5});\n+  std::vector<int64_t> axis_order = {1, 0};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 2, 3, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFIndex> sparse_index;\n+  ASSERT_OK_AND_ASSIGN(sparse_index,\n+                       SparseCSFIndex::Make(tensor.type(), tensor.type(), indices_shapes,\n+                                            axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st = std::make_shared<SparseCSFTensor>(\n+      sparse_index, int64(), data_buffer, shape, dim_names);\n+  std::shared_ptr<Tensor> dt;\n+  ASSERT_OK(st->ToTensor(&dt));\n+  ASSERT_TRUE(tensor.Equals(*dt));\n+}\n+\n+template <typename IndexValueType>\n+class TestSparseCSFTensorForIndexValueType\n+    : public TestSparseCSFTensorBase<IndexValueType> {\n+ protected:\n+  std::shared_ptr<SparseCSFIndex> MakeSparseCSFIndex(\n+      std::vector<typename IndexValueType::c_type>& indptr_values,\n+      std::vector<typename IndexValueType::c_type>& indices_values,\n+      const std::vector<int64_t>& indptr_offsets,\n+      const std::vector<int64_t>& indices_offsets,\n+      const std::vector<int64_t>& indptr_shape, const std::vector<int64_t>& indices_shape,\n+      const std::vector<int64_t>& axis_order) const {\n+    auto indptr_data = Buffer::Wrap(indptr_values);\n+    auto indices_data = Buffer::Wrap(indices_values);\n+    auto indptr =\n+        std::make_shared<NumericTensor<IndexValueType>>(indptr_data, indptr_shape);\n+    auto indices =\n+        std::make_shared<NumericTensor<IndexValueType>>(indices_data, indices_shape);\n+    return std::make_shared<SparseCSFIndex>(indptr, indices, indptr_offsets,\n+                                            indices_offsets, axis_order);\n+  }\n+\n+  template <typename CValueType>\n+  std::shared_ptr<SparseCSFTensor> MakeSparseTensor(\n+      const std::shared_ptr<SparseCSFIndex>& si,\n+      std::vector<CValueType>& sparse_values) const {\n+    auto data = Buffer::Wrap(sparse_values);\n+    return std::make_shared<SparseCSFTensor>(si,\n+                                             CTypeTraits<CValueType>::type_singleton(),\n+                                             data, this->shape_, this->dim_names_);\n+  }\n+};\n+\n+TYPED_TEST_CASE_P(TestSparseCSFTensorForIndexValueType);\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestBufferToSparseTensor) {\n+  using IndexValueType = TypeParam;\n+  using c_index_value_type = typename IndexValueType::c_type;\n+\n+  std::vector<std::vector<c_index_value_type>> indptr_values = {\n+      {0, 2, 3}, {0, 1, 3, 4}, {0, 2, 4, 5, 8}};\n+  std::vector<std::vector<c_index_value_type>> indices_values = {\n+      {1, 2}, {1, 2, 2}, {1, 1, 2, 2}, {2, 3, 1, 3, 1, 1, 2, 3}};\n+  std::vector<int64_t> indices_shapes = {2, 3, 4, 8};\n+  std::vector<int64_t> axis_order = {0, 1, 2, 3};\n+  std::vector<int64_t> sparse_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n+  std::vector<std::string> dim_names = {\"a\", \"b\", \"c\", \"d\"};\n+\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(sparse_values);\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  std::shared_ptr<SparseCSFIndex> si;\n+  ASSERT_OK_AND_ASSIGN(\n+      si,\n+      SparseCSFIndex::Make(TypeTraits<IndexValueType>::type_singleton(), indices_shapes,\n+                           axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st =\n+      std::make_shared<SparseCSFTensor>(si, int64(), data_buffer, shape, dim_names);\n \n Review comment:\n   This code is used several time accross the tests. Can you factor it out, please?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.158+0000",
                    "updated": "2020-01-28T15:21:24.158+0000",
                    "started": "2020-01-28T15:21:24.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378305",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371859324\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+    auto dense_data = Buffer::Wrap(dense_values);\n+    NumericTensor<Int64Type> dense_tensor(dense_data, shape_, {}, dim_names_);\n+    ASSERT_OK_AND_ASSIGN(sparse_tensor_from_dense_,\n+                         SparseCSFTensor::Make(\n+                             dense_tensor, TypeTraits<IndexValueType>::type_singleton()));\n+  }\n+\n+ protected:\n+  std::vector<int64_t> shape_;\n+  std::vector<std::string> dim_names_;\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor_from_dense_;\n+};\n+\n+class TestSparseCSFTensor : public TestSparseCSFTensorBase<Int64Type> {};\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers1) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 2, 3, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3}, {0, 3, 1, 3, 5}};\n+  std::vector<int64_t> indices_shapes({3, 5});\n+  std::vector<int64_t> axis_order = {0, 1};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 3, 2, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFIndex> sparse_index;\n+  ASSERT_OK_AND_ASSIGN(sparse_index,\n+                       SparseCSFIndex::Make(tensor.type(), tensor.type(), indices_shapes,\n+                                            axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st = std::make_shared<SparseCSFTensor>(\n+      sparse_index, int64(), data_buffer, shape, dim_names);\n+  std::shared_ptr<Tensor> dt;\n+  ASSERT_OK(st->ToTensor(&dt));\n+  ASSERT_TRUE(tensor.Equals(*dt));\n+}\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers2) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 1, 2, 4, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3, 5}, {0, 1, 0, 3, 3}};\n+  std::vector<int64_t> indices_shapes({4, 5});\n+  std::vector<int64_t> axis_order = {1, 0};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 2, 3, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFIndex> sparse_index;\n+  ASSERT_OK_AND_ASSIGN(sparse_index,\n+                       SparseCSFIndex::Make(tensor.type(), tensor.type(), indices_shapes,\n+                                            axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st = std::make_shared<SparseCSFTensor>(\n+      sparse_index, int64(), data_buffer, shape, dim_names);\n+  std::shared_ptr<Tensor> dt;\n+  ASSERT_OK(st->ToTensor(&dt));\n+  ASSERT_TRUE(tensor.Equals(*dt));\n+}\n+\n+template <typename IndexValueType>\n+class TestSparseCSFTensorForIndexValueType\n+    : public TestSparseCSFTensorBase<IndexValueType> {\n+ protected:\n+  std::shared_ptr<SparseCSFIndex> MakeSparseCSFIndex(\n+      std::vector<typename IndexValueType::c_type>& indptr_values,\n+      std::vector<typename IndexValueType::c_type>& indices_values,\n+      const std::vector<int64_t>& indptr_offsets,\n+      const std::vector<int64_t>& indices_offsets,\n+      const std::vector<int64_t>& indptr_shape, const std::vector<int64_t>& indices_shape,\n+      const std::vector<int64_t>& axis_order) const {\n+    auto indptr_data = Buffer::Wrap(indptr_values);\n+    auto indices_data = Buffer::Wrap(indices_values);\n+    auto indptr =\n+        std::make_shared<NumericTensor<IndexValueType>>(indptr_data, indptr_shape);\n+    auto indices =\n+        std::make_shared<NumericTensor<IndexValueType>>(indices_data, indices_shape);\n+    return std::make_shared<SparseCSFIndex>(indptr, indices, indptr_offsets,\n+                                            indices_offsets, axis_order);\n+  }\n+\n+  template <typename CValueType>\n+  std::shared_ptr<SparseCSFTensor> MakeSparseTensor(\n+      const std::shared_ptr<SparseCSFIndex>& si,\n+      std::vector<CValueType>& sparse_values) const {\n+    auto data = Buffer::Wrap(sparse_values);\n+    return std::make_shared<SparseCSFTensor>(si,\n+                                             CTypeTraits<CValueType>::type_singleton(),\n+                                             data, this->shape_, this->dim_names_);\n+  }\n+};\n+\n+TYPED_TEST_CASE_P(TestSparseCSFTensorForIndexValueType);\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestBufferToSparseTensor) {\n+  using IndexValueType = TypeParam;\n+  using c_index_value_type = typename IndexValueType::c_type;\n+\n+  std::vector<std::vector<c_index_value_type>> indptr_values = {\n+      {0, 2, 3}, {0, 1, 3, 4}, {0, 2, 4, 5, 8}};\n+  std::vector<std::vector<c_index_value_type>> indices_values = {\n+      {1, 2}, {1, 2, 2}, {1, 1, 2, 2}, {2, 3, 1, 3, 1, 1, 2, 3}};\n+  std::vector<int64_t> indices_shapes = {2, 3, 4, 8};\n+  std::vector<int64_t> axis_order = {0, 1, 2, 3};\n+  std::vector<int64_t> sparse_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n+  std::vector<std::string> dim_names = {\"a\", \"b\", \"c\", \"d\"};\n+\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(sparse_values);\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  std::shared_ptr<SparseCSFIndex> si;\n+  ASSERT_OK_AND_ASSIGN(\n+      si,\n+      SparseCSFIndex::Make(TypeTraits<IndexValueType>::type_singleton(), indices_shapes,\n+                           axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st =\n+      std::make_shared<SparseCSFTensor>(si, int64(), data_buffer, shape, dim_names);\n+\n+  ASSERT_TRUE(st->Equals(*this->sparse_tensor_from_dense_));\n+}\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestTensorToSparseTensor) {\n+  using IndexValueType = TypeParam;\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n+  std::vector<int64_t> values = {\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor;\n+  ASSERT_OK_AND_ASSIGN(\n+      sparse_tensor,\n+      SparseCSFTensor::Make(tensor, TypeTraits<IndexValueType>::type_singleton()));\n+\n+  ASSERT_EQ(8, sparse_tensor->non_zero_length());\n+  ASSERT_TRUE(sparse_tensor->is_mutable());\n+  ASSERT_TRUE(sparse_tensor->Equals(*this->sparse_tensor_from_dense_));\n+}\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestSparseTensorToTensor) {\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n+  std::vector<int64_t> dense_values = {\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+  auto dense_data = Buffer::Wrap(dense_values);\n+  Tensor tensor(int64(), dense_data, shape, {});\n+\n+  std::shared_ptr<Tensor> dense_tensor;\n+  ASSERT_OK(this->sparse_tensor_from_dense_->ToTensor(&dense_tensor));\n+  ASSERT_TRUE(tensor.Equals(*dense_tensor));\n+}\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, CreateFromBuffers) {\n+  using IndexValueType = TypeParam;\n+  using c_index_value_type = typename IndexValueType::c_type;\n+\n+  std::vector<std::vector<c_index_value_type>> indptr_values_1 = {\n+      {0, 2, 3}, {0, 1, 3, 4}, {0, 2, 4, 5, 8}};\n+  std::vector<std::vector<c_index_value_type>> indices_values_1 = {\n+      {1, 2}, {1, 2, 2}, {1, 1, 2, 2}, {2, 3, 1, 3, 1, 1, 2, 3}};\n+  std::vector<int64_t> indices_shapes_1 = {2, 3, 4, 8};\n+  std::vector<int64_t> axis_order_1 = {0, 1, 2, 3};\n+  std::vector<int64_t> sparse_values_1 = {1, 2, 3, 4, 5, 6, 7, 8};\n+  std::vector<int64_t> shape_1 = {3, 3, 3, 4};\n+  std::vector<std::string> dim_names_1 = {\"a\", \"b\", \"c\", \"d\"};\n+\n+  std::vector<std::vector<c_index_value_type>> indptr_values_2 = {\n+      {0, 2, 4, 6}, {0, 1, 2, 3, 4, 6, 7}, {0, 2, 3, 4, 5, 6, 7, 8}};\n+  std::vector<std::vector<c_index_value_type>> indices_values_2 = {\n+      {1, 2, 3}, {1, 2, 1, 2, 1, 2}, {2, 2, 1, 2, 1, 2, 2}, {1, 2, 2, 1, 2, 1, 1, 2}};\n+  std::vector<int64_t> indices_shapes_2 = {3, 6, 7, 8};\n+  std::vector<int64_t> axis_order_2 = {3, 0, 1, 2};\n+  std::vector<int64_t> sparse_values_2 = {3, 5, 6, 1, 7, 2, 4, 8};\n+  std::vector<int64_t> shape_2 = {5, 5, 5, 4};\n+  std::vector<std::string> dim_names_2 = {\"d\", \"a\", \"b\", \"c\"};\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers_1;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers_1;\n+  for (auto& indptr : indptr_values_1) indptr_buffers_1.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values_1)\n+    indices_buffers_1.push_back(Buffer::Wrap(indices));\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers_2;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers_2;\n+  for (auto& indptr : indptr_values_2) indptr_buffers_2.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values_2)\n+    indices_buffers_2.push_back(Buffer::Wrap(indices));\n+\n+  std::vector<int64_t> dense_values_1 = {\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+\n+  std::vector<int64_t> dense_values_2 = {\n \n Review comment:\n   Please find another idiom for this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.248+0000",
                    "updated": "2020-01-28T15:21:24.248+0000",
                    "started": "2020-01-28T15:21:24.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378306",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371852136\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+    auto dense_data = Buffer::Wrap(dense_values);\n+    NumericTensor<Int64Type> dense_tensor(dense_data, shape_, {}, dim_names_);\n+    ASSERT_OK_AND_ASSIGN(sparse_tensor_from_dense_,\n+                         SparseCSFTensor::Make(\n+                             dense_tensor, TypeTraits<IndexValueType>::type_singleton()));\n+  }\n+\n+ protected:\n+  std::vector<int64_t> shape_;\n+  std::vector<std::string> dim_names_;\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor_from_dense_;\n+};\n+\n+class TestSparseCSFTensor : public TestSparseCSFTensorBase<Int64Type> {};\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers1) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 2, 3, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3}, {0, 3, 1, 3, 5}};\n+  std::vector<int64_t> indices_shapes({3, 5});\n+  std::vector<int64_t> axis_order = {0, 1};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 3, 2, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n \n Review comment:\n   Call this `dense_values`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.249+0000",
                    "updated": "2020-01-28T15:21:24.249+0000",
                    "started": "2020-01-28T15:21:24.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378307",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371864577\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor_test.cc\n ##########\n @@ -910,4 +911,326 @@ TEST_F(TestSparseCSCMatrix, TestToTensor) {\n   ASSERT_TRUE(tensor.Equals(*dense_tensor));\n }\n \n+template <typename IndexValueType>\n+class TestSparseCSFTensorBase : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    shape_ = {3, 3, 3, 4};\n+    dim_names_ = {\"a\", \"b\", \"c\", \"d\"};\n+\n+    // COO representation:\n+    //   X[1, 1, 1, 2] := 1\n+    //   X[1, 1, 1, 4] := 2\n+    //   X[1, 2, 1, 1] := 3\n+    //   X[1, 2, 1, 3] := 4\n+    //   X[1, 2, 2, 1] := 5\n+    //   X[2, 2, 2, 1] := 6\n+    //   X[2, 2, 2, 2] := 7\n+    //   X[2, 2, 2, 3] := 8\n+\n+    std::vector<int64_t> dense_values = {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+    auto dense_data = Buffer::Wrap(dense_values);\n+    NumericTensor<Int64Type> dense_tensor(dense_data, shape_, {}, dim_names_);\n+    ASSERT_OK_AND_ASSIGN(sparse_tensor_from_dense_,\n+                         SparseCSFTensor::Make(\n+                             dense_tensor, TypeTraits<IndexValueType>::type_singleton()));\n+  }\n+\n+ protected:\n+  std::vector<int64_t> shape_;\n+  std::vector<std::string> dim_names_;\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor_from_dense_;\n+};\n+\n+class TestSparseCSFTensor : public TestSparseCSFTensorBase<Int64Type> {};\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers1) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 2, 3, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3}, {0, 3, 1, 3, 5}};\n+  std::vector<int64_t> indices_shapes({3, 5});\n+  std::vector<int64_t> axis_order = {0, 1};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 3, 2, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFIndex> sparse_index;\n+  ASSERT_OK_AND_ASSIGN(sparse_index,\n+                       SparseCSFIndex::Make(tensor.type(), tensor.type(), indices_shapes,\n+                                            axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st = std::make_shared<SparseCSFTensor>(\n+      sparse_index, int64(), data_buffer, shape, dim_names);\n+  std::shared_ptr<Tensor> dt;\n+  ASSERT_OK(st->ToTensor(&dt));\n+  ASSERT_TRUE(tensor.Equals(*dt));\n+}\n+\n+TEST_F(TestSparseCSFTensor, CreateFromBuffers2) {\n+  std::vector<std::vector<int64_t>> indptr_values = {{0, 1, 2, 4, 5}};\n+  std::vector<std::vector<int64_t>> indices_values = {{0, 1, 3, 5}, {0, 1, 0, 3, 3}};\n+  std::vector<int64_t> indices_shapes({4, 5});\n+  std::vector<int64_t> axis_order = {1, 0};\n+  std::vector<std::string> dim_names({\"a\", \"b\"});\n+  std::vector<int64_t> data_values = {1, 2, 3, 4, 5};\n+  std::vector<int64_t> values = {1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0,\n+                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5};\n+  std::vector<int64_t> shape({4, 6});\n+\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(data_values);\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFIndex> sparse_index;\n+  ASSERT_OK_AND_ASSIGN(sparse_index,\n+                       SparseCSFIndex::Make(tensor.type(), tensor.type(), indices_shapes,\n+                                            axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st = std::make_shared<SparseCSFTensor>(\n+      sparse_index, int64(), data_buffer, shape, dim_names);\n+  std::shared_ptr<Tensor> dt;\n+  ASSERT_OK(st->ToTensor(&dt));\n+  ASSERT_TRUE(tensor.Equals(*dt));\n+}\n+\n+template <typename IndexValueType>\n+class TestSparseCSFTensorForIndexValueType\n+    : public TestSparseCSFTensorBase<IndexValueType> {\n+ protected:\n+  std::shared_ptr<SparseCSFIndex> MakeSparseCSFIndex(\n+      std::vector<typename IndexValueType::c_type>& indptr_values,\n+      std::vector<typename IndexValueType::c_type>& indices_values,\n+      const std::vector<int64_t>& indptr_offsets,\n+      const std::vector<int64_t>& indices_offsets,\n+      const std::vector<int64_t>& indptr_shape, const std::vector<int64_t>& indices_shape,\n+      const std::vector<int64_t>& axis_order) const {\n+    auto indptr_data = Buffer::Wrap(indptr_values);\n+    auto indices_data = Buffer::Wrap(indices_values);\n+    auto indptr =\n+        std::make_shared<NumericTensor<IndexValueType>>(indptr_data, indptr_shape);\n+    auto indices =\n+        std::make_shared<NumericTensor<IndexValueType>>(indices_data, indices_shape);\n+    return std::make_shared<SparseCSFIndex>(indptr, indices, indptr_offsets,\n+                                            indices_offsets, axis_order);\n+  }\n+\n+  template <typename CValueType>\n+  std::shared_ptr<SparseCSFTensor> MakeSparseTensor(\n+      const std::shared_ptr<SparseCSFIndex>& si,\n+      std::vector<CValueType>& sparse_values) const {\n+    auto data = Buffer::Wrap(sparse_values);\n+    return std::make_shared<SparseCSFTensor>(si,\n+                                             CTypeTraits<CValueType>::type_singleton(),\n+                                             data, this->shape_, this->dim_names_);\n+  }\n+};\n+\n+TYPED_TEST_CASE_P(TestSparseCSFTensorForIndexValueType);\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestBufferToSparseTensor) {\n+  using IndexValueType = TypeParam;\n+  using c_index_value_type = typename IndexValueType::c_type;\n+\n+  std::vector<std::vector<c_index_value_type>> indptr_values = {\n+      {0, 2, 3}, {0, 1, 3, 4}, {0, 2, 4, 5, 8}};\n+  std::vector<std::vector<c_index_value_type>> indices_values = {\n+      {1, 2}, {1, 2, 2}, {1, 1, 2, 2}, {2, 3, 1, 3, 1, 1, 2, 3}};\n+  std::vector<int64_t> indices_shapes = {2, 3, 4, 8};\n+  std::vector<int64_t> axis_order = {0, 1, 2, 3};\n+  std::vector<int64_t> sparse_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n+  std::vector<std::string> dim_names = {\"a\", \"b\", \"c\", \"d\"};\n+\n+  std::shared_ptr<Buffer> data_buffer = Buffer::Wrap(sparse_values);\n+  std::vector<std::shared_ptr<Buffer>> indptr_buffers;\n+  std::vector<std::shared_ptr<Buffer>> indices_buffers;\n+  for (auto& indptr : indptr_values) indptr_buffers.push_back(Buffer::Wrap(indptr));\n+  for (auto& indices : indices_values) indices_buffers.push_back(Buffer::Wrap(indices));\n+\n+  std::shared_ptr<SparseCSFIndex> si;\n+  ASSERT_OK_AND_ASSIGN(\n+      si,\n+      SparseCSFIndex::Make(TypeTraits<IndexValueType>::type_singleton(), indices_shapes,\n+                           axis_order, indptr_buffers, indices_buffers));\n+  std::shared_ptr<SparseCSFTensor> st =\n+      std::make_shared<SparseCSFTensor>(si, int64(), data_buffer, shape, dim_names);\n+\n+  ASSERT_TRUE(st->Equals(*this->sparse_tensor_from_dense_));\n+}\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestTensorToSparseTensor) {\n+  using IndexValueType = TypeParam;\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n+  std::vector<int64_t> values = {\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8};\n+\n+  std::shared_ptr<Buffer> buffer = Buffer::Wrap(values);\n+  Tensor tensor(int64(), buffer, shape, {}, this->dim_names_);\n+\n+  std::shared_ptr<SparseCSFTensor> sparse_tensor;\n+  ASSERT_OK_AND_ASSIGN(\n+      sparse_tensor,\n+      SparseCSFTensor::Make(tensor, TypeTraits<IndexValueType>::type_singleton()));\n+\n+  ASSERT_EQ(8, sparse_tensor->non_zero_length());\n+  ASSERT_TRUE(sparse_tensor->is_mutable());\n+  ASSERT_TRUE(sparse_tensor->Equals(*this->sparse_tensor_from_dense_));\n+}\n+\n+TYPED_TEST_P(TestSparseCSFTensorForIndexValueType, TestSparseTensorToTensor) {\n+  std::vector<int64_t> shape = {3, 3, 3, 4};\n \n Review comment:\n   Can you add a test with a non-ascending shape?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.299+0000",
                    "updated": "2020-01-28T15:21:24.299+0000",
                    "started": "2020-01-28T15:21:24.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378308",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371866421\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor.cc\n ##########\n @@ -419,6 +421,152 @@ class SparseTensorConverter<TYPE, SparseCSCIndex>\n   inline Status CheckMaximumValue(const uint64_t) const { return Status::OK(); }\n };\n \n+// ----------------------------------------------------------------------\n+// SparseTensorConverter for SparseCSFIndex\n+\n+template <typename TYPE>\n+class SparseTensorConverter<TYPE, SparseCSFIndex>\n+    : private SparseTensorConverterBase<TYPE> {\n+ public:\n+  using BaseClass = SparseTensorConverterBase<TYPE>;\n+  using typename BaseClass::NumericTensorType;\n+  using typename BaseClass::value_type;\n+\n+  SparseTensorConverter(const NumericTensorType& tensor,\n+                        const std::shared_ptr<DataType>& index_value_type,\n+                        MemoryPool* pool)\n+      : BaseClass(tensor, index_value_type, pool) {}\n+\n+  template <typename IndexValueType>\n+  Status Convert() {\n+    using c_index_value_type = typename IndexValueType::c_type;\n+    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+\n+    const int64_t ndim = tensor_.ndim();\n+    std::vector<int64_t> axis_order = internal::ArgSort(tensor_.shape());\n+    int64_t nonzero_count = -1;\n+    RETURN_NOT_OK(tensor_.CountNonZero(&nonzero_count));\n+\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(\n+        AllocateBuffer(pool_, sizeof(value_type) * nonzero_count, &values_buffer));\n+    value_type* values = reinterpret_cast<value_type*>(values_buffer->mutable_data());\n+\n+    std::vector<int64_t> counts(ndim, 0);\n+    std::vector<int64_t> coord(ndim, 0);\n+    std::vector<int64_t> previous_coord(ndim, -1);\n+    std::vector<TypedBufferBuilder<c_index_value_type>> indptr_buffer_builders(ndim - 1);\n+    std::vector<TypedBufferBuilder<c_index_value_type>> indices_buffer_builders(ndim);\n+\n+    if (ndim <= 1) {\n+      return Status::NotImplemented(\"TODO for ndim <= 1\");\n+    } else {\n+      const std::vector<int64_t>& shape = tensor_.shape();\n+      for (int64_t n = tensor_.size(); n > 0; n--) {\n+        const value_type x = tensor_.Value(coord);\n+\n+        if (tensor_.Value(coord) != 0) {\n+          bool tree_split = false;\n+          *values++ = x;\n+\n+          for (int64_t i = 0; i < ndim; ++i) {\n+            int64_t dimension = axis_order[i];\n+            bool change = coord[dimension] != previous_coord[dimension];\n+\n+            if (tree_split || change) {\n+              if (change) tree_split = true;\n+\n+              if (i < ndim - 1)\n+                RETURN_NOT_OK(indptr_buffer_builders[i].Append(\n+                    static_cast<c_index_value_type>(counts[dimension + 1])));\n+              RETURN_NOT_OK(indices_buffer_builders[i].Append(\n+                  static_cast<c_index_value_type>(coord[dimension])));\n+              ++counts[dimension];\n+            }\n+          }\n+          previous_coord = coord;\n+        }\n+\n+        // increment index\n+        ++coord[ndim - 1];\n+        if (n > 1 && coord[ndim - 1] == shape[ndim - 1]) {\n+          int64_t d = ndim - 1;\n+          while (d > 0 && coord[d] == shape[d]) {\n+            coord[d] = 0;\n+            ++coord[d - 1];\n+            --d;\n+          }\n+        }\n+      }\n+    }\n+\n+    for (int64_t column = 0; column < ndim - 1; ++column) {\n+      RETURN_NOT_OK(indptr_buffer_builders[column].Append(\n+          static_cast<c_index_value_type>(counts[column + 1])));\n+    }\n+\n+    // make results\n+    data = values_buffer;\n+\n+    std::vector<std::shared_ptr<Buffer>> indptr_buffers(ndim - 1);\n+    std::vector<std::shared_ptr<Buffer>> indices_buffers(ndim);\n+    std::vector<int64_t> indptr_shapes(counts.begin(), counts.end() - 1);\n+    std::vector<int64_t> indices_shapes = counts;\n+\n+    for (int64_t column = 0; column < ndim; ++column)\n \n Review comment:\n   Please use braces after `for`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.413+0000",
                    "updated": "2020-01-28T15:21:24.413+0000",
                    "started": "2020-01-28T15:21:24.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378309",
                    "issueId": "13208709"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/worklog/378310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5716: ARROW-4226: [C++] Add sparse CSF tensor support\nURL: https://github.com/apache/arrow/pull/5716#discussion_r371862151\n \n \n\n ##########\n File path: cpp/src/arrow/sparse_tensor.cc\n ##########\n @@ -419,6 +421,152 @@ class SparseTensorConverter<TYPE, SparseCSCIndex>\n   inline Status CheckMaximumValue(const uint64_t) const { return Status::OK(); }\n };\n \n+// ----------------------------------------------------------------------\n+// SparseTensorConverter for SparseCSFIndex\n+\n+template <typename TYPE>\n+class SparseTensorConverter<TYPE, SparseCSFIndex>\n+    : private SparseTensorConverterBase<TYPE> {\n+ public:\n+  using BaseClass = SparseTensorConverterBase<TYPE>;\n+  using typename BaseClass::NumericTensorType;\n+  using typename BaseClass::value_type;\n+\n+  SparseTensorConverter(const NumericTensorType& tensor,\n+                        const std::shared_ptr<DataType>& index_value_type,\n+                        MemoryPool* pool)\n+      : BaseClass(tensor, index_value_type, pool) {}\n+\n+  template <typename IndexValueType>\n+  Status Convert() {\n+    using c_index_value_type = typename IndexValueType::c_type;\n+    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+\n+    const int64_t ndim = tensor_.ndim();\n+    std::vector<int64_t> axis_order = internal::ArgSort(tensor_.shape());\n+    int64_t nonzero_count = -1;\n+    RETURN_NOT_OK(tensor_.CountNonZero(&nonzero_count));\n+\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(\n+        AllocateBuffer(pool_, sizeof(value_type) * nonzero_count, &values_buffer));\n+    value_type* values = reinterpret_cast<value_type*>(values_buffer->mutable_data());\n+\n+    std::vector<int64_t> counts(ndim, 0);\n+    std::vector<int64_t> coord(ndim, 0);\n+    std::vector<int64_t> previous_coord(ndim, -1);\n+    std::vector<TypedBufferBuilder<c_index_value_type>> indptr_buffer_builders(ndim - 1);\n+    std::vector<TypedBufferBuilder<c_index_value_type>> indices_buffer_builders(ndim);\n+\n+    if (ndim <= 1) {\n+      return Status::NotImplemented(\"TODO for ndim <= 1\");\n+    } else {\n+      const std::vector<int64_t>& shape = tensor_.shape();\n+      for (int64_t n = tensor_.size(); n > 0; n--) {\n+        const value_type x = tensor_.Value(coord);\n+\n+        if (tensor_.Value(coord) != 0) {\n+          bool tree_split = false;\n+          *values++ = x;\n+\n+          for (int64_t i = 0; i < ndim; ++i) {\n+            int64_t dimension = axis_order[i];\n+            bool change = coord[dimension] != previous_coord[dimension];\n+\n+            if (tree_split || change) {\n+              if (change) tree_split = true;\n+\n+              if (i < ndim - 1)\n \n Review comment:\n   Please use braces after `if`, to avoid mistakes.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T15:21:24.416+0000",
                    "updated": "2020-01-28T15:21:24.416+0000",
                    "started": "2020-01-28T15:21:24.416+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378310",
                    "issueId": "13208709"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 36600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4335c0d1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4172a423[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@592c4b87[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@dabaf3d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61bf3012[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@445cdc83[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f17d7fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2f154d64[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37b2c734[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@15a8bd85[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54c130fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@51ba296a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 36600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 05 14:45:41 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-05T14:45:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4226/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-01-10T06:57:27.000+0000",
        "updated": "2020-02-06T01:00:54.000+0000",
        "timeoriginalestimate": null,
        "description": "[https://github.com/apache/arrow/pull/2546#pullrequestreview-156064172]\r\n{quote}Perhaps in the future, if zero-copy and future-proof-ness is really what we want, we might want to add the CSF (compressed sparse fiber) format, a generalisation of CSR/CSC. I'm currently working on adding it to PyData/Sparse, and I plan to make it the preferred format (COO will still be around though).\r\n{quote}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 36600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Format][C++] Add CSF sparse tensor support",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/comment/16942602",
                    "id": "16942602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
                        "name": "mrkn",
                        "key": "mrkn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Kenta Murata",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~rokm] Did you check the issue [pydata/sparse#125|https://github.com/pydata/sparse/issues/125]?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
                        "name": "mrkn",
                        "key": "mrkn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Kenta Murata",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-10-02T08:41:26.979+0000",
                    "updated": "2019-10-02T08:41:26.979+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/comment/16942607",
                    "id": "16942607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I was just reading it :)\r\nI'll start working on this sometime this week.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2019-10-02T08:50:18.782+0000",
                    "updated": "2019-10-02T08:50:18.782+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208709/comment/17030706",
                    "id": "17030706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5716\n[https://github.com/apache/arrow/pull/5716]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-02-05T14:45:41.317+0000",
                    "updated": "2020-02-05T14:45:41.317+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|u00p1k:",
        "customfield_12314139": null
    }
}