{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13362735",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735",
    "key": "ARROW-11887",
    "fields": {
        "parent": {
            "id": "13360743",
            "key": "ARROW-11770",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13360743",
            "fields": {
                "summary": "[C++] Add asynchronous read to readers",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11887/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/561708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace opened a new pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644\n\n\n   This moves the read to the IO context and runs continuations on the CPU thread pool.  It does not add any parallelism.  The resulting reader is not reentrant or async-reentrant and it does not do any fan-out parallelism for converting/etc.  That follow-up can be addressed in ARROW-11889.\r\n   \r\n   This is needed by ARROW-7001 to enable nested parallelism in the datasets API.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-06T04:01:00.425+0000",
                    "updated": "2021-03-06T04:01:00.425+0000",
                    "started": "2021-03-06T04:01:00.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561708",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/561709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-791862179\n\n\n   https://issues.apache.org/jira/browse/ARROW-11887\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-06T04:01:24.992+0000",
                    "updated": "2021-03-06T04:01:24.992+0000",
                    "started": "2021-03-06T04:01:24.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561709",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/568949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r597663681\n\n\n\n##########\nFile path: cpp/src/arrow/record_batch.h\n##########\n@@ -207,6 +208,14 @@ class ARROW_EXPORT RecordBatchReader {\n   /// \\return Status\n   virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch) = 0;\n \n+  // Fallback to sync implementation until all other readers are converted(ARROW-11770)\n+  // and then this could become pure virtual with ReadNext falling back to async impl.\n+  virtual Future<std::shared_ptr<RecordBatch>> ReadNextAsync() {\n+    std::shared_ptr<RecordBatch> batch;\n+    ARROW_RETURN_NOT_OK(ReadNext(&batch));\n+    return Future<std::shared_ptr<RecordBatch>>::MakeFinished(std::move(batch));\n+  }\n+\n\nReview comment:\n       It looks like across CSV, Parquet, and Feather, we now have two distinct approaches to async reading: here we add a method to asynchronously read the next batch, while in Parquet/Feather we add a method to convert a reader to a generator of batches. We should probably pick one for consistency's sake.\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -102,16 +102,34 @@ class ARROW_EXPORT Executor {\n   // CPU heavy work off the I/O thread pool.  So the I/O task should transfer\n   // the future to the CPU executor before returning.\n   template <typename T>\n-  Future<T> Transfer(Future<T> future) {\n+  Future<T> Transfer(Future<T> future, bool force_spawn = false) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    auto callback_added = future.TryAddCallback(callback_factory);\n+    if (!callback_added) {\n+      if (force_spawn) {\n+        auto spawn_status = Spawn([future, transferred]() mutable {\n+          transferred.MarkFinished(future.result());\n+        });\n+        if (!spawn_status.ok()) {\n+          transferred.MarkFinished(spawn_status);\n+        }\n+        return transferred;\n\nReview comment:\n       I'm a little confused what the new parameter accomplishes. Since the new future essentially completes immediately anyways, there's still no guarantee that future callers of transferred.AddCallback won't just have their callbacks synchronously executed as soon as they add them on the current thread.\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -679,101 +687,141 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto transferred_it = MakeTransferredGenerator(bg_it, cpu_executor_, true);\n \n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(transferred_it), 2);\n\nReview comment:\n       The readahead here probably needs to be configurable eventually.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-19T13:32:33.342+0000",
                    "updated": "2021-03-19T13:32:33.342+0000",
                    "started": "2021-03-19T13:32:33.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "568949",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r597951679\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -102,16 +102,34 @@ class ARROW_EXPORT Executor {\n   // CPU heavy work off the I/O thread pool.  So the I/O task should transfer\n   // the future to the CPU executor before returning.\n   template <typename T>\n-  Future<T> Transfer(Future<T> future) {\n+  Future<T> Transfer(Future<T> future, bool force_spawn = false) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    auto callback_added = future.TryAddCallback(callback_factory);\n+    if (!callback_added) {\n+      if (force_spawn) {\n+        auto spawn_status = Spawn([future, transferred]() mutable {\n+          transferred.MarkFinished(future.result());\n+        });\n+        if (!spawn_status.ok()) {\n+          transferred.MarkFinished(spawn_status);\n+        }\n+        return transferred;\n\nReview comment:\n       Haha, it made sense in my head but you're right, this isn't the right approach.  I'm confused as to how it worked but I guess it helped inject a little bit of opportunity in the system because it would take a little while for the spwaned thread to mark the callback finished so it slowed it down a little.  Ok, I'm going to try something different.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-19T20:18:26.274+0000",
                    "updated": "2021-03-19T20:18:26.274+0000",
                    "started": "2021-03-19T20:18:26.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569101",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r598045583\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -102,16 +102,34 @@ class ARROW_EXPORT Executor {\n   // CPU heavy work off the I/O thread pool.  So the I/O task should transfer\n   // the future to the CPU executor before returning.\n   template <typename T>\n-  Future<T> Transfer(Future<T> future) {\n+  Future<T> Transfer(Future<T> future, bool force_spawn = false) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    auto callback_added = future.TryAddCallback(callback_factory);\n+    if (!callback_added) {\n+      if (force_spawn) {\n+        auto spawn_status = Spawn([future, transferred]() mutable {\n+          transferred.MarkFinished(future.result());\n+        });\n+        if (!spawn_status.ok()) {\n+          transferred.MarkFinished(spawn_status);\n+        }\n+        return transferred;\n\nReview comment:\n       Ok.  The \"force_spawn\" has been removed.  Using the instrumentation I worked on yesterday I tracked the issue down to a few other spots that didn't really have anything to do with needing to transfer.  On the bright side, this actually eliminated the 2-5% slowdown I was seeing so the performance now matches the synchronous version.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T01:54:02.652+0000",
                    "updated": "2021-03-20T01:54:02.652+0000",
                    "started": "2021-03-20T01:54:02.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569210",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r598045677\n\n\n\n##########\nFile path: cpp/src/arrow/record_batch.h\n##########\n@@ -207,6 +208,14 @@ class ARROW_EXPORT RecordBatchReader {\n   /// \\return Status\n   virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch) = 0;\n \n+  // Fallback to sync implementation until all other readers are converted(ARROW-11770)\n+  // and then this could become pure virtual with ReadNext falling back to async impl.\n+  virtual Future<std::shared_ptr<RecordBatch>> ReadNextAsync() {\n+    std::shared_ptr<RecordBatch> batch;\n+    ARROW_RETURN_NOT_OK(ReadNext(&batch));\n+    return Future<std::shared_ptr<RecordBatch>>::MakeFinished(std::move(batch));\n+  }\n+\n\nReview comment:\n       It was already different.  The streaming CSV reader has a `ReadBatch` method and it was used to create an iterator of batches.  I think keeping the generator logic out of the readers would be ideal.\n\n##########\nFile path: cpp/src/arrow/record_batch.h\n##########\n@@ -207,6 +208,14 @@ class ARROW_EXPORT RecordBatchReader {\n   /// \\return Status\n   virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch) = 0;\n \n+  // Fallback to sync implementation until all other readers are converted(ARROW-11770)\n+  // and then this could become pure virtual with ReadNext falling back to async impl.\n+  virtual Future<std::shared_ptr<RecordBatch>> ReadNextAsync() {\n+    std::shared_ptr<RecordBatch> batch;\n+    ARROW_RETURN_NOT_OK(ReadNext(&batch));\n+    return Future<std::shared_ptr<RecordBatch>>::MakeFinished(std::move(batch));\n+  }\n+\n\nReview comment:\n       It was already different.  The streaming CSV reader has a \"read batch\" method and it was used to create an iterator of batches.  I think keeping the generator logic out of the readers would be ideal.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T01:55:26.789+0000",
                    "updated": "2021-03-20T01:55:26.789+0000",
                    "started": "2021-03-20T01:55:26.788+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569211",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r598046231\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -679,101 +687,141 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto transferred_it = MakeTransferredGenerator(bg_it, cpu_executor_, true);\n \n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(transferred_it), 2);\n\nReview comment:\n       I ended up needing to bump it up to 8 from some profiling.  In the other CSV reader it was based on the parallelism of the executor.  This isn't necessarily right.\r\n   \r\n   I don't think it will end up being configurable though, at least not here.  In the future I would like to convert readahead from a bunch of fixed constants (or arguments) to a decision based on the amount of available RAM (with an option to limit the RAM usage of the operation).  Although perhaps then there is the risk that too much RAM is put into a quick spot so there may still need to be a max limit.  I think this is something that can be tackled later.  I'll make a follow up JIRA and tag these spots.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T01:59:31.630+0000",
                    "updated": "2021-03-20T01:59:31.630+0000",
                    "started": "2021-03-20T01:59:31.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569212",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-803273688\n\n\n   There is one failing check https://github.com/apache/arrow/pull/9644/checks?check_run_id=2153389817 which I've been unable to reproduce locally.  However, I'm not sure why this would be expected to pass in the first place.  The failing check is here: https://github.com/westonpace/arrow/blob/feature/arrow-11887/python/pyarrow/tests/test_csv.py#L1247\r\n   \r\n   I'm not sure what would be cleaning up the reader.  The batches themselves should have been transferred but the parsing & inferring allocates some number of resizable buffers.  Also, the failure is overshooting by far more than one block.  @pitrou could I get your thoughts on this?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T08:45:49.869+0000",
                    "updated": "2021-03-20T08:45:49.869+0000",
                    "started": "2021-03-20T08:45:49.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569241",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-803369652\n\n\n   Here is the error:\r\n   ```\r\n   >       assert pa.total_allocated_bytes() == old_allocated\r\n   E       AssertionError: assert 253120 == 257792\r\n   ```\r\n   It looks like the CSV reader released _more_ memory than expected. Intuitively, that may be a heisenbug due to CPython's garbage collector. I'll restart the job just in case.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T14:53:27.570+0000",
                    "updated": "2021-03-20T14:53:27.570+0000",
                    "started": "2021-03-20T14:53:27.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569254",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-803432496\n\n\n   The new Python build on macOS has succeeded. I've also restarted the cancelled R builds.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-20T17:42:43.591+0000",
                    "updated": "2021-03-20T17:42:43.591+0000",
                    "started": "2021-03-20T17:42:43.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569271",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/569472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-803662351\n\n\n   Looks like they may have cancelled again (or maybe I'm reading this wrong).  It's also happening on other PRs (https://github.com/apache/arrow/runs/2155226233?check_suite_focus=true) so I don't think it's related to my change.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T21:23:43.508+0000",
                    "updated": "2021-03-21T21:23:43.508+0000",
                    "started": "2021-03-21T21:23:43.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569472",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-805758537\n\n\n   This now needs to be rebased.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-24T11:50:26.350+0000",
                    "updated": "2021-03-24T11:50:26.350+0000",
                    "started": "2021-03-24T11:50:26.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571092",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#issuecomment-806482270\n\n\n   Failing tests appear to be unrleated.  Rebasing to get rust build fix.  Consider merging if all CI passes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T09:03:12.908+0000",
                    "updated": "2021-03-25T09:03:12.908+0000",
                    "started": "2021-03-25T09:03:12.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571729",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601281174\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -672,101 +687,142 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(bg_it), 8);\n\nReview comment:\n       Is there a reason for 8? \n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -104,15 +104,22 @@ class ARROW_EXPORT Executor {\n   template <typename T>\n   Future<T> Transfer(Future<T> future) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n-    return transferred;\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    if (future.TryAddCallback(callback_factory)) {\n+      return transferred;\n+    }\n+    // If the future is already finished and we aren't going to force spawn a thread\n+    // then we don't need to add another layer of callback and can return the original\n+    // future\n\nReview comment:\n       Doesn't this change the semantics? I may want `Transfer` to always call the returned future's callbacks on the thread pool. It seems this breaks the guarantee. Perhaps you want to add a `TransferIfNotFinished` instead.\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -199,6 +199,19 @@ class SerialBlockReader : public BlockReader {\n     return MakeTransformedIterator(std::move(buffer_iterator), block_reader_fn);\n   }\n \n+  static AsyncGenerator<CSVBlock> MakeAsyncIterator(\n+      AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator,\n+      std::unique_ptr<Chunker> chunker, std::shared_ptr<Buffer> first_buffer) {\n+    auto block_reader =\n+        std::make_shared<SerialBlockReader>(std::move(chunker), first_buffer);\n+    // Wrap shared pointer in callable\n+    Transformer<std::shared_ptr<Buffer>, CSVBlock> block_reader_fn =\n+        [block_reader](std::shared_ptr<Buffer> next) {\n+          return (*block_reader)(std::move(next));\n+        };\n+    return MakeAsyncGenerator(std::move(buffer_generator), block_reader_fn);\n\nReview comment:\n       Hmm, why didn't we call this `MakeTransformedGenerator`?\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -574,37 +585,41 @@ class BaseTableReader : public ReaderMixin, public csv::TableReader {\n \n class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n  public:\n-  using ReaderMixin::ReaderMixin;\n+  BaseStreamingReader(io::IOContext io_context, Executor* cpu_executor,\n+                      std::shared_ptr<io::InputStream> input,\n+                      const ReadOptions& read_options, const ParseOptions& parse_options,\n+                      const ConvertOptions& convert_options)\n+      : ReaderMixin(io_context, std::move(input), read_options, parse_options,\n+                    convert_options),\n+        cpu_executor_(cpu_executor) {}\n \n-  virtual Status Init() = 0;\n+  virtual Future<std::shared_ptr<csv::StreamingReader>> Init() = 0;\n \n   std::shared_ptr<Schema> schema() const override { return schema_; }\n \n   Status ReadNext(std::shared_ptr<RecordBatch>* batch) override {\n-    do {\n-      RETURN_NOT_OK(ReadNext().Value(batch));\n-    } while (*batch != nullptr && (*batch)->num_rows() == 0);\n+    auto next_fut = ReadNextAsync();\n+    auto next_result = next_fut.result();\n+    ARROW_ASSIGN_OR_RAISE(*batch, next_result);\n     return Status::OK();\n\nReview comment:\n       Or simply `return next_result.Value(&batch);`\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -672,101 +687,142 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(bg_it), 8);\n+\n+    auto transferred_it = MakeTransferredGenerator(rh_it, cpu_executor_);\n \n+    buffer_generator_ = CSVBufferIterator::MakeAsync(std::move(transferred_it));\n+    task_group_ = internal::TaskGroup::MakeSerial(io_context_.stop_token());\n+\n+    auto self = shared_from_this();\n     // Read schema from first batch\n-    ARROW_ASSIGN_OR_RAISE(pending_batch_, ReadNext());\n-    DCHECK_NE(schema_, nullptr);\n-    return Status::OK();\n+    return ReadNextAsync().Then([self](const std::shared_ptr<RecordBatch>& first_batch)\n+                                    -> Result<std::shared_ptr<csv::StreamingReader>> {\n+      self->pending_batch_ = first_batch;\n+      DCHECK_NE(self->schema_, nullptr);\n+      return self;\n+    });\n   }\n \n- protected:\n-  Result<std::shared_ptr<RecordBatch>> ReadNext() override {\n-    if (eof_) {\n-      return nullptr;\n-    }\n-    if (stop_token_.IsStopRequested()) {\n-      eof_ = true;\n-      return stop_token_.Poll();\n-    }\n-    if (!block_iterator_) {\n-      Status st = SetupReader();\n-      if (!st.ok()) {\n-        // Can't setup reader => bail out\n-        eof_ = true;\n-        return st;\n-      }\n+  Result<std::shared_ptr<RecordBatch>> DecodeBatchAndUpdateSchema() {\n+    auto maybe_batch = DecodeNextBatch();\n\nReview comment:\n       This call will block until the next CSV block is parsed and appended to the column decoders.\r\n   I think you have to make `ColumnDecoder` async instead...\r\n   (see `ColumnDecoder::NextChunk`)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T10:04:46.899+0000",
                    "updated": "2021-03-25T10:04:46.899+0000",
                    "started": "2021-03-25T10:04:46.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571779",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601451364\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -104,15 +104,22 @@ class ARROW_EXPORT Executor {\n   template <typename T>\n   Future<T> Transfer(Future<T> future) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n-    return transferred;\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    if (future.TryAddCallback(callback_factory)) {\n+      return transferred;\n+    }\n+    // If the future is already finished and we aren't going to force spawn a thread\n+    // then we don't need to add another layer of callback and can return the original\n+    // future\n\nReview comment:\n       In this case the future is already finished.  There is nothing we can do.  The old implementation suffered from the same problem.  `Transfer(finished_fut).AddCallback(...)` will run the callback synchronously on the calling thread regardless of what you do inside of `Transfer(finished_fut)`.\r\n   \r\n   So far this isn't a problem, the only place we call transfer is from the CPU thread pool to take something off the I/O thread pool.  If the future is finished then the callback will run synchronously on the CPU thread pool anyways.  The only place it could really be an issue I suppose is if you were trying to transfer it onto a different thread pool than the calling thread pool.\r\n   \r\n   That being said I could revert all the changes to this method.  They were leftover from an earlier misunderstanding and they don't change the behavior of `Transfer` at all.  I simply left it this way because I felt it was clearer about the effects.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T12:44:57.296+0000",
                    "updated": "2021-03-25T12:44:57.296+0000",
                    "started": "2021-03-25T12:44:57.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571861",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601455438\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -672,101 +687,142 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(bg_it), 8);\n+\n+    auto transferred_it = MakeTransferredGenerator(rh_it, cpu_executor_);\n \n+    buffer_generator_ = CSVBufferIterator::MakeAsync(std::move(transferred_it));\n+    task_group_ = internal::TaskGroup::MakeSerial(io_context_.stop_token());\n+\n+    auto self = shared_from_this();\n     // Read schema from first batch\n-    ARROW_ASSIGN_OR_RAISE(pending_batch_, ReadNext());\n-    DCHECK_NE(schema_, nullptr);\n-    return Status::OK();\n+    return ReadNextAsync().Then([self](const std::shared_ptr<RecordBatch>& first_batch)\n+                                    -> Result<std::shared_ptr<csv::StreamingReader>> {\n+      self->pending_batch_ = first_batch;\n+      DCHECK_NE(self->schema_, nullptr);\n+      return self;\n+    });\n   }\n \n- protected:\n-  Result<std::shared_ptr<RecordBatch>> ReadNext() override {\n-    if (eof_) {\n-      return nullptr;\n-    }\n-    if (stop_token_.IsStopRequested()) {\n-      eof_ = true;\n-      return stop_token_.Poll();\n-    }\n-    if (!block_iterator_) {\n-      Status st = SetupReader();\n-      if (!st.ok()) {\n-        // Can't setup reader => bail out\n-        eof_ = true;\n-        return st;\n-      }\n+  Result<std::shared_ptr<RecordBatch>> DecodeBatchAndUpdateSchema() {\n+    auto maybe_batch = DecodeNextBatch();\n\nReview comment:\n       Hmm, I thought that was only for the parallel CSV reader (the streaming reader is exclusively serial).  I'm not sure how it could work otherwise.  It seems this would block indefinitely.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T12:50:19.136+0000",
                    "updated": "2021-03-25T12:50:19.136+0000",
                    "started": "2021-03-25T12:50:19.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571862",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601471402\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -104,15 +104,22 @@ class ARROW_EXPORT Executor {\n   template <typename T>\n   Future<T> Transfer(Future<T> future) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n-    return transferred;\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    if (future.TryAddCallback(callback_factory)) {\n+      return transferred;\n+    }\n+    // If the future is already finished and we aren't going to force spawn a thread\n+    // then we don't need to add another layer of callback and can return the original\n+    // future\n\nReview comment:\n       > `Transfer(finished_fut).AddCallback(...)` will run the callback synchronously on the calling thread \r\n   \r\n   Are you sure it does? `transferred.MarkFinished` is called on the thread pool, so it would depend on whether it executes because the caller calls `AddCallback`. In a way, it's even more underterministic than the current version, though, so arguably worse.\r\n   \r\n   That said, I do think it's a problem that this doesn't reliably transfer the callbacks to the thread pool. Perhaps this isn't the right API after all: instead of `ThreadPool::Transfer(future)`, do we instead want  `Future::AddCallback(Executor*, Callback&&)` and/or `Future::Then(Executor*, Callback&&)`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T13:12:34.583+0000",
                    "updated": "2021-03-25T13:12:34.583+0000",
                    "started": "2021-03-25T13:12:34.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571870",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/571872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601474004\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -672,101 +687,142 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(bg_it), 8);\n+\n+    auto transferred_it = MakeTransferredGenerator(rh_it, cpu_executor_);\n \n+    buffer_generator_ = CSVBufferIterator::MakeAsync(std::move(transferred_it));\n+    task_group_ = internal::TaskGroup::MakeSerial(io_context_.stop_token());\n+\n+    auto self = shared_from_this();\n     // Read schema from first batch\n-    ARROW_ASSIGN_OR_RAISE(pending_batch_, ReadNext());\n-    DCHECK_NE(schema_, nullptr);\n-    return Status::OK();\n+    return ReadNextAsync().Then([self](const std::shared_ptr<RecordBatch>& first_batch)\n+                                    -> Result<std::shared_ptr<csv::StreamingReader>> {\n+      self->pending_batch_ = first_batch;\n+      DCHECK_NE(self->schema_, nullptr);\n+      return self;\n+    });\n   }\n \n- protected:\n-  Result<std::shared_ptr<RecordBatch>> ReadNext() override {\n-    if (eof_) {\n-      return nullptr;\n-    }\n-    if (stop_token_.IsStopRequested()) {\n-      eof_ = true;\n-      return stop_token_.Poll();\n-    }\n-    if (!block_iterator_) {\n-      Status st = SetupReader();\n-      if (!st.ok()) {\n-        // Can't setup reader => bail out\n-        eof_ = true;\n-        return st;\n-      }\n+  Result<std::shared_ptr<RecordBatch>> DecodeBatchAndUpdateSchema() {\n+    auto maybe_batch = DecodeNextBatch();\n\nReview comment:\n       `ColumnDecoder` is used only by the streaming reader. In the current behaviour, the blocks are appended before they are waited on, so the waiting in `ColumnDecoder::NextChunk` returns immediately. But by switching to async execution, the blocks can be appended after the waiting starts.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T13:15:52.985+0000",
                    "updated": "2021-03-25T13:15:52.985+0000",
                    "started": "2021-03-25T13:15:52.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571872",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/572176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601733537\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -104,15 +104,22 @@ class ARROW_EXPORT Executor {\n   template <typename T>\n   Future<T> Transfer(Future<T> future) {\n     auto transferred = Future<T>::Make();\n-    future.AddCallback([this, transferred](const Result<T>& result) mutable {\n+    auto callback = [this, transferred](const Result<T>& result) mutable {\n       auto spawn_status = Spawn([transferred, result]() mutable {\n         transferred.MarkFinished(std::move(result));\n       });\n       if (!spawn_status.ok()) {\n         transferred.MarkFinished(spawn_status);\n       }\n-    });\n-    return transferred;\n+    };\n+    auto callback_factory = [&callback]() { return callback; };\n+    if (future.TryAddCallback(callback_factory)) {\n+      return transferred;\n+    }\n+    // If the future is already finished and we aren't going to force spawn a thread\n+    // then we don't need to add another layer of callback and can return the original\n+    // future\n\nReview comment:\n       I agree with the new API.  C# has that API as well (Task::ContinueWith can take a scheduler) so there is some precedence.  I'll add a follow-up PR.  I don't believe it is necessary for the current work though.\r\n   \r\n   You are correct, the old method could possible introduce a new thread task spawned in some situations where this doesn't (e.g. if the callback is added very quickly after calling transfer before the TP has a chance to schedule the \"mark finished\" task).  I don't really see any reason this is desirable as it can only mean more thread pool tasks without any benefit.  So I will leave this as is for now.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T18:14:14.558+0000",
                    "updated": "2021-03-25T18:14:14.558+0000",
                    "started": "2021-03-25T18:14:14.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572176",
                    "issueId": "13362735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/worklog/572183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9644:\nURL: https://github.com/apache/arrow/pull/9644#discussion_r601736168\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -672,101 +687,142 @@ class BaseStreamingReader : public ReaderMixin, public csv::StreamingReader {\n   std::vector<std::shared_ptr<ColumnDecoder>> column_decoders_;\n   std::shared_ptr<Schema> schema_;\n   std::shared_ptr<RecordBatch> pending_batch_;\n-  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;\n+  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;\n+  Executor* cpu_executor_;\n   bool eof_ = false;\n };\n \n /////////////////////////////////////////////////////////////////////////\n // Serial StreamingReader implementation\n \n-class SerialStreamingReader : public BaseStreamingReader {\n+class SerialStreamingReader : public BaseStreamingReader,\n+                              public std::enable_shared_from_this<SerialStreamingReader> {\n  public:\n   using BaseStreamingReader::BaseStreamingReader;\n \n-  Status Init() override {\n+  Future<std::shared_ptr<csv::StreamingReader>> Init() override {\n     ARROW_ASSIGN_OR_RAISE(auto istream_it,\n                           io::MakeInputStreamIterator(input_, read_options_.block_size));\n \n-    // Since we're converting serially, no need to readahead more than one block\n-    int32_t block_queue_size = 1;\n-    ARROW_ASSIGN_OR_RAISE(auto rh_it,\n-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));\n-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));\n-    task_group_ = internal::TaskGroup::MakeSerial(stop_token_);\n+    ARROW_ASSIGN_OR_RAISE(auto bg_it, MakeBackgroundGenerator(std::move(istream_it),\n+                                                              io_context_.executor()));\n+\n+    auto rh_it = MakeSerialReadaheadGenerator(std::move(bg_it), 8);\n+\n+    auto transferred_it = MakeTransferredGenerator(rh_it, cpu_executor_);\n \n+    buffer_generator_ = CSVBufferIterator::MakeAsync(std::move(transferred_it));\n+    task_group_ = internal::TaskGroup::MakeSerial(io_context_.stop_token());\n+\n+    auto self = shared_from_this();\n     // Read schema from first batch\n-    ARROW_ASSIGN_OR_RAISE(pending_batch_, ReadNext());\n-    DCHECK_NE(schema_, nullptr);\n-    return Status::OK();\n+    return ReadNextAsync().Then([self](const std::shared_ptr<RecordBatch>& first_batch)\n+                                    -> Result<std::shared_ptr<csv::StreamingReader>> {\n+      self->pending_batch_ = first_batch;\n+      DCHECK_NE(self->schema_, nullptr);\n+      return self;\n+    });\n   }\n \n- protected:\n-  Result<std::shared_ptr<RecordBatch>> ReadNext() override {\n-    if (eof_) {\n-      return nullptr;\n-    }\n-    if (stop_token_.IsStopRequested()) {\n-      eof_ = true;\n-      return stop_token_.Poll();\n-    }\n-    if (!block_iterator_) {\n-      Status st = SetupReader();\n-      if (!st.ok()) {\n-        // Can't setup reader => bail out\n-        eof_ = true;\n-        return st;\n-      }\n+  Result<std::shared_ptr<RecordBatch>> DecodeBatchAndUpdateSchema() {\n+    auto maybe_batch = DecodeNextBatch();\n\nReview comment:\n       Ah, this reader is not pulled reentrantly so there is no actual pipelining of the CSV read.  So I think we are ok.  That would be ARROW-11889 which I'm not planning on tackling for the moment.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T18:18:02.215+0000",
                    "updated": "2021-03-25T18:18:02.215+0000",
                    "started": "2021-03-25T18:18:02.215+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572183",
                    "issueId": "13362735"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@39643cf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1377f0bb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ec2ba58[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29c7513[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@410208a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@66c3b49[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3dc741a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5c129fe0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d048b82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6a555f18[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d98e985[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@253d9649[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 29 15:52:29 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-29T15:52:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11887/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-06T00:54:16.000+0000",
        "updated": "2021-04-06T21:52:57.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add asynchronous read to streaming CSV reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362735/comment/17310740",
                    "id": "17310740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9644\n[https://github.com/apache/arrow/pull/9644]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-29T15:52:29.051+0000",
                    "updated": "2021-03-29T15:52:29.051+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0od4g:",
        "customfield_12314139": null
    }
}