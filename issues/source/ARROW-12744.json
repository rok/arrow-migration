{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377954",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954",
    "key": "ARROW-12744",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615429",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615429",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13377986",
                    "key": "ARROW-12748",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377986",
                    "fields": {
                        "summary": "[C++] Arithmetic kernels for numeric arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12615417",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615417",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13377955",
                    "key": "ARROW-12745",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377955",
                    "fields": {
                        "summary": "[C++][Compute] Add floor, ceiling, and truncate kernels",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12622852",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12622852",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13400499",
                    "key": "ARROW-13975",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400499",
                    "fields": {
                        "summary": "[C++][Compute] Add decimal support to round functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 84000,
            "total": 84000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 84000,
            "total": 84000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12744/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 140,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349\n\n\n   This PR adds a rounding compute function registered as \"round\" and \"round_checked\". The rounding function supports integral and floating-point types and returns a value of the same type.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-17T19:12:37.806+0000",
                    "updated": "2021-05-17T19:12:37.806+0000",
                    "started": "2021-05-17T19:12:37.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598212",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#issuecomment-842568791\n\n\n   https://issues.apache.org/jira/browse/ARROW-12744\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-17T19:16:45.991+0000",
                    "updated": "2021-05-17T19:16:45.991+0000",
                    "started": "2021-05-17T19:16:45.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598214",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#issuecomment-842580763\n\n\n   There is an unresolved discussion on rounding modes and probably providing options to specify, refer to https://issues.apache.org/jira/browse/ARROW-12744\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-17T19:38:11.225+0000",
                    "updated": "2021-05-17T19:38:11.225+0000",
                    "started": "2021-05-17T19:38:11.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598225",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r633838367\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -933,22 +933,23 @@ TEST(TestBinaryArithmetic, AddWithImplicitCastsUint64EdgeCase) {\n }\n \n TEST(TestUnaryArithmetic, DispatchBest) {\n-  for (std::string name : {\"negate\"}) {\n+  for (std::string name : {\"negate\", \"round\", \"round_checked\"}) {\n     for (const auto& ty : {int8(), int16(), int32(), int64(), uint8(), uint16(), uint32(),\n\nReview comment:\n       It seems more than a little odd to support rounding for integer types. I suppose the noop kernels aren't taking up much space, but I'd really expect that rounding would only support floating point or decimal inputs (and would either raise an error or require an implicit cast for integral inputs)\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -238,6 +238,17 @@ Result<Datum> Power(const Datum& left, const Datum& right,\n                     ArithmeticOptions options = ArithmeticOptions(),\n                     ExecContext* ctx = NULLPTR);\n \n+/// \\brief Round a value. Array values can be of arbitrary length. If argument\n+/// is null the result will be null.\n+///\n+/// \\param[in] arg the value rounded\n+/// \\param[in] options arithmetic options (rounding precision, round-to-nearest method,\n+/// overflow handling), optional \\param[in] ctx the function execution context, optional\n+/// \\return the elementwise rounded value\n+ARROW_EXPORT\n+Result<Datum> Round(const Datum& arg, ArithmeticOptions options = ArithmeticOptions(),\n\nReview comment:\n       Round will require separate options including the number of digits which should remain in the rounded output\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -238,6 +238,17 @@ Result<Datum> Power(const Datum& left, const Datum& right,\n                     ArithmeticOptions options = ArithmeticOptions(),\n                     ExecContext* ctx = NULLPTR);\n \n+/// \\brief Round a value. Array values can be of arbitrary length. If argument\n+/// is null the result will be null.\n+///\n+/// \\param[in] arg the value rounded\n+/// \\param[in] options arithmetic options (rounding precision, round-to-nearest method,\n+/// overflow handling), optional \\param[in] ctx the function execution context, optional\n+/// \\return the elementwise rounded value\n+ARROW_EXPORT\n+Result<Datum> Round(const Datum& arg, ArithmeticOptions options = ArithmeticOptions(),\n\nReview comment:\n       Since overflow doesn't pertain to rounding, I think it doesn't make sense to provide ArithmeticOptions (which only contains `bool check_overflow` here)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -355,6 +355,32 @@ struct PowerChecked {\n   }\n };\n \n+struct Round {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return std::round(arg);\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+};\n+\n+struct RoundChecked {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n\nReview comment:\n       It's not worthwhile to have a _checked version of this function if there is no difference in runtime behavior between the two functions.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-17T20:17:25.396+0000",
                    "updated": "2021-05-17T20:17:25.396+0000",
                    "started": "2021-05-17T20:17:25.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598234",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r633845512\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -355,6 +355,32 @@ struct PowerChecked {\n   }\n };\n \n+struct Round {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return std::round(arg);\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+};\n+\n+struct RoundChecked {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n\nReview comment:\n       I knew this comment was coming with PR as is. This is currently a placeholder for the cases where if the rounding options suggest to round to nearest integer and output will be of integral type, then overflow/underflow can occur.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-17T20:25:03.063+0000",
                    "updated": "2021-05-17T20:25:03.063+0000",
                    "started": "2021-05-17T20:25:03.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598239",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r634139326\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -355,6 +355,32 @@ struct PowerChecked {\n   }\n };\n \n+struct Round {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return std::round(arg);\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+};\n+\n+struct RoundChecked {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n\nReview comment:\n       But should a `round` kernel ever change the type? IMO when rounding floats, the result can still be floats, regardless of the number of decimals to round\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-18T08:00:52.018+0000",
                    "updated": "2021-05-18T08:00:52.018+0000",
                    "started": "2021-05-18T08:00:52.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598477",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r634139326\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -355,6 +355,32 @@ struct PowerChecked {\n   }\n };\n \n+struct Round {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return std::round(arg);\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+};\n+\n+struct RoundChecked {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n\nReview comment:\n       But should a `round` kernel ever change the type? IMO when rounding floats, the result can still be floats, regardless of the number of decimals to round (in which case overflow will never be a problem?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-18T08:01:07.491+0000",
                    "updated": "2021-05-18T08:01:07.491+0000",
                    "started": "2021-05-18T08:01:07.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598478",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/598970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r634865428\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -355,6 +355,32 @@ struct PowerChecked {\n   }\n };\n \n+struct Round {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return std::round(arg);\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+};\n+\n+struct RoundChecked {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n\nReview comment:\n       I agree, but I was not sure if there was interest in mimicking C++ [lround](https://en.cppreference.com/w/cpp/numeric/math/round) variants. For now, it seems reasonable to only support floats and return result with same type.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-19T02:10:41.554+0000",
                    "updated": "2021-05-19T02:10:41.554+0000",
                    "started": "2021-05-19T02:10:41.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "598970",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/599041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r634972664\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -355,6 +355,32 @@ struct PowerChecked {\n   }\n };\n \n+struct Round {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return std::round(arg);\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+};\n+\n+struct RoundChecked {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n\nReview comment:\n       Ah, that might also be interesting, but I would indeed start with the type preserving round for now (there are also already enough complexities regarding round mode, whether we want ceil/floor/trunc etc)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-19T07:15:56.895+0000",
                    "updated": "2021-05-19T07:15:56.895+0000",
                    "started": "2021-05-19T07:15:56.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599041",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/614936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#issuecomment-868420891\n\n\n   @bkietz @jorisvandenbossche Need feedback on this PR. Specifically, the rounding options provided and kernel implementations.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-25T11:06:17.631+0000",
                    "updated": "2021-06-25T11:06:17.631+0000",
                    "started": "2021-06-25T11:06:17.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614936",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/614941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r658690788\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       @bkietz @lidavidm How do you pass FunctionOptions to scalar arithmetic kernels? This currently segfaults when tests are ran. I am passing [`RoundOptions::Defaults()`](https://github.com/edponce/arrow/blob/ARROW-12744-Add-rounding-kernel/cpp/src/arrow/compute/kernels/scalar_arithmetic.cc#L1117-L1119) to [`ArithmeticFunction constructor`](https://github.com/edponce/arrow/blob/ARROW-12744-Add-rounding-kernel/cpp/src/arrow/compute/kernels/scalar_arithmetic.cc#L911-L915), but it seems options are not set properly in `KernelContext` and `RoundState::Get(ctx)` does not works properly.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-25T11:22:49.456+0000",
                    "updated": "2021-06-25T11:22:49.456+0000",
                    "started": "2021-06-25T11:22:49.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614941",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/614969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r658733299\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       The default options instance needs to be declared static, e.g. see JoinOptions: https://github.com/apache/arrow/blob/c4a20e98a3294b32e51c879e927878e9fb6e799b/cpp/src/arrow/compute/kernels/scalar_string.cc#L3566\r\n   \r\n   Currently, the default options are allocated on the stack in RegisterScalarArithmetic and will go away when the function returns. Then when you call the function, it references the already-deallocated options and crashes.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-25T12:42:09.503+0000",
                    "updated": "2021-06-25T12:42:09.503+0000",
                    "started": "2021-06-25T12:42:09.502+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614969",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/614970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r658733636\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       You could even do `static auto kRoundOptions = RoundOptions::Defaults()` inside the function.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-25T12:42:42.935+0000",
                    "updated": "2021-06-25T12:42:42.935+0000",
                    "started": "2021-06-25T12:42:42.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614970",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r659082281\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       I tried placing the `kRoundOptions` outside of function and inside with `static` and still get segfault. I was missing `ARROW_EXPORT` in `RoundOptions` but this did not fix the issue. Still looking...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-25T23:31:47.915+0000",
                    "updated": "2021-06-25T23:31:47.915+0000",
                    "started": "2021-06-25T23:31:47.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615244",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r659133597\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       I was able to found the issues triggering a segfault when `RoundState::Get(ctx)` in kernels. The first issue was resolved by @lidavidm fix, `kRoundOptions` needs to be defined in global space. The second issue occurred because no `KernelInit` parameter (in this case (`RoundOptions::Init`) was passed to `AddKernel` and the [default value is null](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/function.h#L267-L268) which [prevented options from being set in the `KernelState`](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/function.cc#L181-L184).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-26T07:28:28.564+0000",
                    "updated": "2021-06-26T07:28:28.564+0000",
                    "started": "2021-06-26T07:28:28.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615290",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r659133597\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       I was able to found the issues triggering a segfault when `RoundState::Get(ctx)` in kernels. The first issue was resolved by @lidavidm fix, `kRoundOptions` needs to be defined in global space. The second issue occurred because no `KernelInit` parameter (in this case `RoundOptions::Init`) was passed to `AddKernel` and the [default value is null](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/function.h#L267-L268) which [prevented options from being set in the `KernelState`](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/function.cc#L181-L184).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-27T00:00:12.980+0000",
                    "updated": "2021-06-27T00:00:12.980+0000",
                    "started": "2021-06-27T00:00:12.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615326",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r659706688\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,159 @@ struct PowerChecked {\n   }\n };\n \n+using RoundState = internal::OptionsWrapper<RoundOptions>;\n+\n+struct Round {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool ApproxEqual(T x, T y, int ulp = 8) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    return (std::fabs(x - y) <=\n+            (std::numeric_limits<T>::epsilon() * std::fabs(x + y) * ulp))\n+           // unless the result is subnormal\n+           || (std::fabs(x - y) < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static constexpr bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> RoundWithMultiple(T val, T mult) {\n+    return (val / mult) * mult;\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_integral<Arg>::value, bool> = true>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg,\n+                                                    Status* st) {\n+    return Call<T, T>(ctx, T(arg), st);\n+  }\n+\n+  template <typename T, typename Arg,\n+            enable_if_t<std::is_floating_point<Arg>::value, bool> = true>\n+  static enable_if_floating_point<T> Call(KernelContext* ctx, Arg arg, Status* st) {\n+    const RoundOptions& options = RoundState::Get(ctx);\n\nReview comment:\n       Ah, glad you got it figured out!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T11:34:00.858+0000",
                    "updated": "2021-06-28T11:34:00.858+0000",
                    "started": "2021-06-28T11:34:00.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615565",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#issuecomment-869762925\n\n\n   This PR is missing an implementation of `pow(10, x)` using a LUT (precomputed), instead of `std::pow`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T15:05:29.796+0000",
                    "updated": "2021-06-28T15:05:29.796+0000",
                    "started": "2021-06-28T15:05:29.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615646",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r659917735\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n++===============+============+=============+=============+==================================+\n+| mround        | Unary      | Numeric     | Float32/64  | (1)(2) | :struct:`MRoundOptions` |\n++---------------+------------+-------------+-------------+----------------------------------+\n+| round         | Unary      | Numeric     | Float32/64  | (1)(3) | :struct:`RoundOptions`  |\n++---------------+------------+-------------+-------------+----------------------------------+\n+\n+* \\(1) Output value is a 64-bit floating-point for integral inputs and the\n+  retains the same type for floating-point inputs.  By default rounding functions\n+  displace a value to the nearest integer with a round to even for breaking ties.\n+  Options are available to control the rounding behavior.\n+* \\(2) The ``multiple`` option specifies the rounding\n+  scale and precision.  Only the magnitude of the ``rounding multiple`` is used,\n+  its sign is ignored.\n+* \\(3) The ``ndigits`` option specifies the rounding precision in\n+  terms of number of digits.  A negative value corresponds to digits in the\n+  non-decimal part.\n+\n++-------------------------+---------------------------------+\n+| Round mode              | Description/Examples            |\n++=========================+=================================+\n+| DOWNWARD                | Equivalent to ``floor(x)``      |\n+| TOWARDS_NEG_INFINITY    | 3.7 = 3, -3.2 = -4              |\n\nReview comment:\n       Nit: using `=` like this is confusing\r\n   ```suggestion\r\n   | TOWARDS_NEG_INFINITY    | 3.7 -> 3, -3.2 -> -4            |\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +456,166 @@ struct PowerChecked {\n   }\n };\n \n+struct RoundUtils {\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static bool ApproxEqual(const T x, const T y, const int ulp = 7) {\n+    // https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon\n+    // The machine epsilon has to be scaled to the magnitude of the values used\n+    // and multiplied by the desired precision in ULPs (units in the last place)\n+    const auto eps_ulp = std::numeric_limits<T>::epsilon() * ulp;\n+    const auto xy_diff = std::fabs(x - y);\n+    const auto xy_sum = std::fabs(x + y);\n+    return (xy_diff <= (xy_sum * eps_ulp))\n+           // unless the result is subnormal\n+           || (xy_diff < std::numeric_limits<T>::min());\n+  }\n+\n+  template <typename T, enable_if_t<std::is_floating_point<T>::value, bool> = true>\n+  static bool IsHalf(T val) {\n+    // |frac| == 0.5?\n+    return ApproxEqual(std::fabs(std::fmod(val, T(1))), T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Floor(T val) {\n+    return std::floor(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Ceiling(T val) {\n+    return std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Truncate(T val) {\n+    return std::trunc(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> TowardsInfinity(T val) {\n+    return std::signbit(val) ? std::floor(val) : std::ceil(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfDown(T val) {\n+    return std::ceil(val - T(0.5));\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfUp(T val) {\n+    return std::floor(val + T(0.5));\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToEven(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 1, Even + 0\n+      return floor + (std::fmod(std::fabs(floor), T(2)) >= T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> HalfToOdd(T val) {\n+    if (IsHalf(val)) {\n+      auto floor = std::floor(val);\n+      // Odd + 0, Even + 1\n+      return floor + (std::fmod(std::fabs(floor), T(2)) < T(1));\n+    }\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> Nearest(T val) {\n+    return std::round(val);\n+  }\n+\n+  template <typename T>\n+  static constexpr enable_if_floating_point<T> HalfTowardsZero(T val) {\n+    return std::copysign(std::ceil(std::fabs(val) - T(0.5)), val);\n+  }\n+\n+  template <typename T>\n+  static enable_if_floating_point<T> Round(T val, T mult, RoundMode round_mode,\n+                                           Status* st) {\n+    val /= mult;\n+\n+    T result;\n+    switch (round_mode) {\n\nReview comment:\n       Let's ensure this switch is outside the hot loop. In this case, that would probably entail: make `round_mode` a template parameter of `RoundUtils::Round`, `struct Round`, and `struct MRound`. Then you can produce a vector of `ArrayKernelExec` which can be selected from outside the loop, something like:\r\n   \r\n   ```c++\r\n     auto func =\r\n         std::make_shared<ArithmeticUnaryFloatOnlyFunction>(name, Arity::Unary(), doc, default_options);\r\n     for (const auto& ty : {float32(), float64()}) {\r\n       std::vector<ArrayKernelExec> execs = {\r\n         Round<RoundMode::DOWNWARD>,\r\n         Round<RoundMode::UPWARD>,\r\n         //...\r\n       };\r\n       auto exec = [execs](KernelContext* ctx, const ExecBatch& batch, Datum* out) {\r\n         RoundMode round_mode = OptionsWrapper<RoundOptions>::Get(ctx).round_mode;\r\n         return execs[round_mode](ctx, batch, out);\r\n       };\r\n       DCHECK_OK(func->AddKernel({ty}, out_ty, exec, init));\r\n     }\r\n     return func;\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n++===============+============+=============+=============+==================================+\n+| mround        | Unary      | Numeric     | Float32/64  | (1)(2) | :struct:`MRoundOptions` |\n++---------------+------------+-------------+-------------+----------------------------------+\n+| round         | Unary      | Numeric     | Float32/64  | (1)(3) | :struct:`RoundOptions`  |\n++---------------+------------+-------------+-------------+----------------------------------+\n+\n+* \\(1) Output value is a 64-bit floating-point for integral inputs and the\n+  retains the same type for floating-point inputs.  By default rounding functions\n+  displace a value to the nearest integer with a round to even for breaking ties.\n+  Options are available to control the rounding behavior.\n+* \\(2) The ``multiple`` option specifies the rounding\n+  scale and precision.  Only the magnitude of the ``rounding multiple`` is used,\n\nReview comment:\n       ```suggestion\r\n     scale and precision.  Only the absolute value of the ``rounding multiple`` is used,\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -485,6 +647,36 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class KernelGenerator, typename Op>\n+ArrayKernelExec GenerateArithmeticWithFloatOutType(detail::GetTypeId get_id) {\n\nReview comment:\n       Instead, wouldn't it make more sense to just insert an implicit cast to floating point?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n\nReview comment:\n       ```suggestion\r\n   | Function name | Arity      | Input types | Output type | Notes  | Options class           |\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -42,6 +42,55 @@ struct ArithmeticOptions : public FunctionOptions {\n   bool check_overflow;\n };\n \n+enum class RoundMode {\n+  // floor (towards negative infinity)\n+  DOWNWARD,\n+  TOWARDS_NEG_INFINITY,\n\nReview comment:\n       If these are equivalent, shouldn't they have the same value?\r\n   ```suggestion\r\n     DOWNWARD,\r\n     TOWARDS_NEG_INFINITY = DOWNWARD,\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -286,7 +287,7 @@ an ``Invalid`` :class:`Status` when overflow is detected.\n +--------------------------+------------+--------------------+---------------------+\n | power_checked            | Binary     | Numeric            | Numeric             |\n +--------------------------+------------+--------------------+---------------------+\n-| subtract                 | Binary     | Numeric            | Numeric (1)         |\n+| subtract                 | Binary     | Numeric            | Numeric             |\n\nReview comment:\n       Was this intentional?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n++===============+============+=============+=============+==================================+\n+| mround        | Unary      | Numeric     | Float32/64  | (1)(2) | :struct:`MRoundOptions` |\n++---------------+------------+-------------+-------------+----------------------------------+\n+| round         | Unary      | Numeric     | Float32/64  | (1)(3) | :struct:`RoundOptions`  |\n++---------------+------------+-------------+-------------+----------------------------------+\n+\n+* \\(1) Output value is a 64-bit floating-point for integral inputs and the\n+  retains the same type for floating-point inputs.  By default rounding functions\n+  displace a value to the nearest integer with a round to even for breaking ties.\n+  Options are available to control the rounding behavior.\n+* \\(2) The ``multiple`` option specifies the rounding\n+  scale and precision.  Only the magnitude of the ``rounding multiple`` is used,\n+  its sign is ignored.\n+* \\(3) The ``ndigits`` option specifies the rounding precision in\n+  terms of number of digits.  A negative value corresponds to digits in the\n+  non-decimal part.\n+\n++-------------------------+---------------------------------+\n+| Round mode              | Description/Examples            |\n++=========================+=================================+\n+| DOWNWARD                | Equivalent to ``floor(x)``      |\n+| TOWARDS_NEG_INFINITY    | 3.7 = 3, -3.2 = -4              |\n++-------------------------+---------------------------------+\n+| UPWARD                  | Equivalent to ``ceil(x)``       |\n+| TOWARDS_POS_INFINITY    | 3.2 = 4, -3.7 = -3              |\n++-------------------------+---------------------------------+\n+| TOWARDS_ZERO            | Equivalent to ``trunc(x)``      |\n+| AWAY_FROM_INFINITY      | 3.7 = 3, -3.7 = -3              |\n++-------------------------+---------------------------------+\n+| TOWARDS_INFINITY        | 3.2 = 4, -3.2 = -4              |\n+| AWAY_FROM_ZERO          |                                 |\n++-------------------------+---------------------------------+\n+| HALF_UP                 | 3.5 = 4, 4.5 = 5, -3.5 = -3     |\n+| HALF_POS_INFINITY       |                                 |\n++-------------------------+---------------------------------+\n+| HALF_DOWN               | 3.5 = 3, 4.5 = 4, -3.5 = -4     |\n+| HALF_NEG_INFINITY       |                                 |\n++-------------------------+---------------------------------+\n+| HALF_TO_EVEN            | 3.5 = 4, 4.5 = 4, -3.5 = -4     |\n++-------------------------+---------------------------------+\n+| HALF_TO_ODD             | 3.5 = 3, 4.5 = 5, -3.5 = -3     |\n++-------------------------+---------------------------------+\n+| HALF_TOWARDS_ZERO       | 3.5 = 3, 4.5 = 4, -3.5 = -3     |\n+| HALF_AWAY_FROM_INFINITY |                                 |\n++-------------------------+---------------------------------+\n+| HALF_TOWARDS_INFINITY   | Round nearest integer           |\n+| HALF_AWAY_FROM_ZERO     | 3.5 = 4, 4.5 = 5, -3.5 = -4     |\n+| NEAREST                 |                                 |\n++-------------------------+---------------------------------+\n+\n++----------------+---------------+----------------------------+\n+| Round multiple | Round ndigits | Description                |\n++================================+============================+\n+| 1.0            | 0             | Round to integer           |\n\nReview comment:\n       Could you add some examples here too? Additionally, could you break this into two tables (one for `mround` and one for `round`)? From this table it looks like one might specify both `multiple` and `ndigits` to a single function call\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -20,6 +20,8 @@\n #include <limits>\n #include <utility>\n \n+#include \"arrow/compute/api_scalar.h\"\n+// #include \"arrow/compute/kernels/codegen_internal.h\"\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n++===============+============+=============+=============+==================================+\n+| mround        | Unary      | Numeric     | Float32/64  | (1)(2) | :struct:`MRoundOptions` |\n++---------------+------------+-------------+-------------+----------------------------------+\n+| round         | Unary      | Numeric     | Float32/64  | (1)(3) | :struct:`RoundOptions`  |\n++---------------+------------+-------------+-------------+----------------------------------+\n+\n+* \\(1) Output value is a 64-bit floating-point for integral inputs and the\n+  retains the same type for floating-point inputs.  By default rounding functions\n+  displace a value to the nearest integer with a round to even for breaking ties.\n+  Options are available to control the rounding behavior.\n+* \\(2) The ``multiple`` option specifies the rounding\n+  scale and precision.  Only the magnitude of the ``rounding multiple`` is used,\n+  its sign is ignored.\n+* \\(3) The ``ndigits`` option specifies the rounding precision in\n+  terms of number of digits.  A negative value corresponds to digits in the\n+  non-decimal part.\n+\n++-------------------------+---------------------------------+\n+| Round mode              | Description/Examples            |\n++=========================+=================================+\n+| DOWNWARD                | Equivalent to ``floor(x)``      |\n+| TOWARDS_NEG_INFINITY    | 3.7 = 3, -3.2 = -4              |\n++-------------------------+---------------------------------+\n+| UPWARD                  | Equivalent to ``ceil(x)``       |\n+| TOWARDS_POS_INFINITY    | 3.2 = 4, -3.7 = -3              |\n++-------------------------+---------------------------------+\n+| TOWARDS_ZERO            | Equivalent to ``trunc(x)``      |\n+| AWAY_FROM_INFINITY      | 3.7 = 3, -3.7 = -3              |\n++-------------------------+---------------------------------+\n+| TOWARDS_INFINITY        | 3.2 = 4, -3.2 = -4              |\n+| AWAY_FROM_ZERO          |                                 |\n++-------------------------+---------------------------------+\n+| HALF_UP                 | 3.5 = 4, 4.5 = 5, -3.5 = -3     |\n+| HALF_POS_INFINITY       |                                 |\n++-------------------------+---------------------------------+\n+| HALF_DOWN               | 3.5 = 3, 4.5 = 4, -3.5 = -4     |\n+| HALF_NEG_INFINITY       |                                 |\n++-------------------------+---------------------------------+\n+| HALF_TO_EVEN            | 3.5 = 4, 4.5 = 4, -3.5 = -4     |\n++-------------------------+---------------------------------+\n+| HALF_TO_ODD             | 3.5 = 3, 4.5 = 5, -3.5 = -3     |\n++-------------------------+---------------------------------+\n+| HALF_TOWARDS_ZERO       | 3.5 = 3, 4.5 = 4, -3.5 = -3     |\n+| HALF_AWAY_FROM_INFINITY |                                 |\n++-------------------------+---------------------------------+\n+| HALF_TOWARDS_INFINITY   | Round nearest integer           |\n+| HALF_AWAY_FROM_ZERO     | 3.5 = 4, 4.5 = 5, -3.5 = -4     |\n+| NEAREST                 |                                 |\n++-------------------------+---------------------------------+\n+\n++----------------+---------------+----------------------------+\n+| Round multiple | Round ndigits | Description                |\n++================================+============================+\n+| 1.0            | 0             | Round to integer           |\n++----------------+--------------------------------------------+\n+| 0.001          | 3             | Round to 3 decimal places  |\n++----------------+--------------------------------------------+\n+| 10             | -2            | Round to multiple of 10    |\n\nReview comment:\n       ```suggestion\r\n   | 10             | -2            | Round to multiple of 100   |\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n++===============+============+=============+=============+==================================+\n+| mround        | Unary      | Numeric     | Float32/64  | (1)(2) | :struct:`MRoundOptions` |\n++---------------+------------+-------------+-------------+----------------------------------+\n+| round         | Unary      | Numeric     | Float32/64  | (1)(3) | :struct:`RoundOptions`  |\n++---------------+------------+-------------+-------------+----------------------------------+\n+\n+* \\(1) Output value is a 64-bit floating-point for integral inputs and the\n+  retains the same type for floating-point inputs.  By default rounding functions\n+  displace a value to the nearest integer with a round to even for breaking ties.\n+  Options are available to control the rounding behavior.\n+* \\(2) The ``multiple`` option specifies the rounding\n+  scale and precision.  Only the magnitude of the ``rounding multiple`` is used,\n+  its sign is ignored.\n+* \\(3) The ``ndigits`` option specifies the rounding precision in\n+  terms of number of digits.  A negative value corresponds to digits in the\n+  non-decimal part.\n\nReview comment:\n       ```suggestion\r\n     non-fractional part. For example -2 corresponds to rounding to the nearest multiple of 100\r\n     (zeroing the ones and tens digits).\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T16:38:58.204+0000",
                    "updated": "2021-06-28T16:38:58.204+0000",
                    "started": "2021-06-28T16:38:58.204+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615675",
                    "issueId": "13377954"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/worklog/615683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10349:\nURL: https://github.com/apache/arrow/pull/10349#discussion_r659957016\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -312,6 +313,79 @@ precision of `divide` is at least the sum of precisions of both operands with\n enough scale kept. Error is returned if the result precision is beyond the\n decimal value range.\n \n+Rounding functions\n+~~~~~~~~~~~~~~~~~~\n+\n+These functions displace numeric input(s) to approximate and shorter numeric\n+representation(s).  Integral input(s) produce floating-point output(s) of same value.\n+If any of the input element(s) is null, the corresponding output element is null.\n+\n++---------------+------------+-------------+-------------+----------------------------------+\n+| Function name | Arity      | Input types | Output type | Notes | Options class            |\n++===============+============+=============+=============+==================================+\n+| mround        | Unary      | Numeric     | Float32/64  | (1)(2) | :struct:`MRoundOptions` |\n++---------------+------------+-------------+-------------+----------------------------------+\n+| round         | Unary      | Numeric     | Float32/64  | (1)(3) | :struct:`RoundOptions`  |\n++---------------+------------+-------------+-------------+----------------------------------+\n+\n+* \\(1) Output value is a 64-bit floating-point for integral inputs and the\n+  retains the same type for floating-point inputs.  By default rounding functions\n+  displace a value to the nearest integer with a round to even for breaking ties.\n+  Options are available to control the rounding behavior.\n+* \\(2) The ``multiple`` option specifies the rounding\n+  scale and precision.  Only the magnitude of the ``rounding multiple`` is used,\n+  its sign is ignored.\n+* \\(3) The ``ndigits`` option specifies the rounding precision in\n+  terms of number of digits.  A negative value corresponds to digits in the\n+  non-decimal part.\n+\n++-------------------------+---------------------------------+\n+| Round mode              | Description/Examples            |\n++=========================+=================================+\n+| DOWNWARD                | Equivalent to ``floor(x)``      |\n+| TOWARDS_NEG_INFINITY    | 3.7 = 3, -3.2 = -4              |\n\nReview comment:\n       Agree, good observation.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T16:55:57.373+0000",
                    "updated": "2021-06-28T16:55:57.373+0000",
                    "started": "2021-06-28T16:55:57.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615683",
                    "issueId": "13377954"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 84000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@427b94ba[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@173eb752[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c39a296[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5e5f0664[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@411e5fbb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2aedcb2b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b31e1f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7d7ba0d6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e2bcb45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@a5bf538[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5eb1bbf0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7e6ccde0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 84000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 13 17:26:51 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-13T17:26:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12744/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2021-05-11T21:25:06.000+0000",
        "updated": "2021-09-17T21:52:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Kernel to round an array of floating point numbers. Should return an array of the same type as the input. Should have an option to control how many digits after the decimal point (default value 0 meaning round to the nearest integer).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "23h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 84000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add rounding kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17344671",
                    "id": "17344671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "For the midpoint values, [Python's round()|https://docs.python.org/3/library/functions.html#round] and numpy use the \"round half to nearest even value\" approach (https://en.wikipedia.org/wiki/Rounding#Round_half_to_even). ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-05-14T15:35:08.218+0000",
                    "updated": "2021-05-14T15:35:08.218+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17346314",
                    "id": "17346314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "C++ provides a\u00a0[std::round()|https://en.cppreference.com/w/cpp/numeric/math/round] function where the [rounding mode|https://en.cppreference.com/w/cpp/numeric/fenv/FE_round] can be set at runtime. Note that library implementations can provide additional rounding modes or support a subset. It seems there is no *round-half-to-even/odd* defined in spec.\r\n\r\n1. Should the Arrow *round* kernel make use of *std::round* and extend the rounding modes to support *round-half-to-even/odd* and only in these cases implement them explicitly?\r\n\r\n2. Also, *std::round()* provides versions where it outputs integral data instead of floating-point. Are these variants desirable in Arrow?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-17T17:55:52.093+0000",
                    "updated": "2021-05-17T17:55:52.093+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17346417",
                    "id": "17346417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "1. IMHO, compute kernels should not rely on (or be affected in any way by) the floating point environment. Users may have a need to adjust this for their own applications and arrow's kernels should produce correct output regardless\r\n\r\n2. Output should be of the same floating point type as the input since the extent of rounding is configurable (probably via a function option like {{RoundOptions::ndigits}}) whereas integral output is only well formed if we're rounding to the nearest one.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-17T20:03:26.838+0000",
                    "updated": "2021-05-17T20:03:26.838+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17350529",
                    "id": "17350529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I understand this issue requests rounding to the nearest integer, but a more general rounding function is able to round based on any factor. For example:\r\n * Rounding 113 to the nearest multiple of 10 is 110\r\n * Rounding 1.13 to the nearest multiple of 0.1 is 1.1",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-24T16:56:40.294+0000",
                    "updated": "2021-05-24T16:56:40.294+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17369415",
                    "id": "17369415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "A draft PR is available that implements *round* function as a unary scalar function. It outputs float64 for integral inputs and matching type for floating-point inputs.\r\n\r\nRounding behavior is controlled via 2 option controls, a rounding mode (specifies displacement behavior) and a multiple (scale and precision).\r\n\r\nFeedback is welcomed w.r.t. to implementation, rounding options and names, and documentation.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-25T11:30:11.813+0000",
                    "updated": "2021-06-25T11:30:11.813+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17370408",
                    "id": "17370408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The current implementation follows a *rounding with multiple* approach which is more general/flexible than *ndigits* parameter in\u00a0[Python round|https://docs.python.org/3.7/library/functions.html#round] and *decimals* parameter in [NumPy|https://numpy.org/doc/stable/reference/generated/numpy.around.html#numpy.around], [pandas round|https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.round.html], and [MySQL|https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html#function_round].\r\n\r\nThe following are comments on round APIs:\r\n * The *decimals* parameter name in NumPy and pandas seems counter-intuitive in that when it is a negative value it corresponds to the non-decimal part of the value. IMHO *ndigits* is a more suitable name.\r\n * *rounding with multiple* bypasses the need to calculate pow(10, decimals). Although, I expect the other software use a LUT table for power(10, x) which is better. For example, MySQL limits *|decimals| < 30*.\r\n * The *decimals* parameter only supports rounding to powers of 10.\r\n\r\nWe can also include two variants of rounding functions (similar to Excel)\r\n * *round(x, ndigits)*\r\n * *mround(x, multiple)*\r\n\r\nI am inclined to support the two variants to both support current APIs as-is and provide a more general rounding function.\r\n\r\nAny comments or suggestions are welcomed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-28T04:17:21.250+0000",
                    "updated": "2021-06-28T04:22:35.048+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17370645",
                    "id": "17370645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The current PR includes both variants, *round(x, ndigits)* and *round(x, multiple)*.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-28T14:57:17.395+0000",
                    "updated": "2021-06-28T14:57:17.395+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17383637",
                    "id": "17383637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Postponing to 6.0.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2021-07-19T22:27:50.344+0000",
                    "updated": "2021-07-19T22:27:50.344+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377954/comment/17414430",
                    "id": "17414430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10349\n[https://github.com/apache/arrow/pull/10349]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-09-13T17:26:51.621+0000",
                    "updated": "2021-09-13T17:26:51.621+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qy4w:",
        "customfield_12314139": null
    }
}