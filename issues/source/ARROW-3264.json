{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13185872",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872",
    "key": "ARROW-3264",
    "fields": {
        "parent": {
            "id": "13110540",
            "key": "ARROW-1688",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13110540",
            "fields": {
                "summary": "[Java] Fail build on checkstyle warnings",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3264/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler opened a new pull request #2582: [WIP] ARROW-3264: [Java] Java checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582\n \n \n   Enabled remaining whitespace checks\r\n   ```\r\n   OperatorWrapCheck|SeparatorWrapCheck|NewlineAtEndOfFileCheck|WhitespaceAroundCheck|EmptyLineSeparatorCheck\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T18:59:29.811+0000",
                    "updated": "2018-09-18T18:59:29.811+0000",
                    "started": "2018-09-18T18:59:29.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145436",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2582: [WIP] ARROW-3264: [Java] Java checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#discussion_r218556157\n \n \n\n ##########\n File path: java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n ##########\n @@ -109,8 +109,8 @@ public ArrowBuf reallocIfNeeded(final int size) {\n     if (bufManager != null) {\n       return bufManager.replace(this, size);\n     } else {\n-      throw new UnsupportedOperationException(\"Realloc is only available in the context of an \" +\n-          \"operator's UDFs\");\n+      throw new UnsupportedOperationException(\"Realloc is only available in the context of an \"\n+          + \"operator's UDFs\");\n \n Review comment:\n   Our current checkstyle rule for `OperatorWrapCheck` wants the operator on a new line like this. Doesn't matter to me, but I am more used to having it at the end of the line, which seems to be how it mostly is already. Thoughts @jacques-n or @icexelloss ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T19:02:40.429+0000",
                    "updated": "2018-09-18T19:02:40.429+0000",
                    "started": "2018-09-18T19:02:40.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145437",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2582: [WIP] ARROW-3264: [Java] Java checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#discussion_r218556333\n \n \n\n ##########\n File path: java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n ##########\n @@ -58,8 +58,8 @@\n   private final BufferManager bufManager;\n   private final ArrowByteBufAllocator alloc;\n   private final boolean isEmpty;\n-  private final HistoricalLog historicalLog = BaseAllocator.DEBUG ?\n-      new HistoricalLog(BaseAllocator.DEBUG_LOG_LENGTH, \"ArrowBuf[%d]\", id) : null;\n+  private final HistoricalLog historicalLog = BaseAllocator.DEBUG\n+      ? new HistoricalLog(BaseAllocator.DEBUG_LOG_LENGTH, \"ArrowBuf[%d]\", id) : null;\n \n Review comment:\n   Does the style require \"?\" to be on the second line?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T19:03:15.607+0000",
                    "updated": "2018-09-18T19:03:15.607+0000",
                    "started": "2018-09-18T19:03:15.607+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145439",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2582: [WIP] ARROW-3264: [Java] Java checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#discussion_r218557362\n \n \n\n ##########\n File path: java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n ##########\n @@ -58,8 +58,8 @@\n   private final BufferManager bufManager;\n   private final ArrowByteBufAllocator alloc;\n   private final boolean isEmpty;\n-  private final HistoricalLog historicalLog = BaseAllocator.DEBUG ?\n-      new HistoricalLog(BaseAllocator.DEBUG_LOG_LENGTH, \"ArrowBuf[%d]\", id) : null;\n+  private final HistoricalLog historicalLog = BaseAllocator.DEBUG\n+      ? new HistoricalLog(BaseAllocator.DEBUG_LOG_LENGTH, \"ArrowBuf[%d]\", id) : null;\n \n Review comment:\n   yup, see the above comment\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T19:06:51.089+0000",
                    "updated": "2018-09-18T19:06:51.089+0000",
                    "started": "2018-09-18T19:06:51.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145441",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2582: [WIP] ARROW-3264: [Java] Java checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#discussion_r218558943\n \n \n\n ##########\n File path: java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n ##########\n @@ -109,8 +109,8 @@ public ArrowBuf reallocIfNeeded(final int size) {\n     if (bufManager != null) {\n       return bufManager.replace(this, size);\n     } else {\n-      throw new UnsupportedOperationException(\"Realloc is only available in the context of an \" +\n-          \"operator's UDFs\");\n+      throw new UnsupportedOperationException(\"Realloc is only available in the context of an \"\n+          + \"operator's UDFs\");\n \n Review comment:\n   I am used to having it at end of line as well. So light +1 on that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T19:11:38.671+0000",
                    "updated": "2018-09-18T19:11:38.671+0000",
                    "started": "2018-09-18T19:11:38.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145442",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2582: [WIP] ARROW-3264: [Java] Java checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#discussion_r218909225\n \n \n\n ##########\n File path: java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n ##########\n @@ -109,8 +109,8 @@ public ArrowBuf reallocIfNeeded(final int size) {\n     if (bufManager != null) {\n       return bufManager.replace(this, size);\n     } else {\n-      throw new UnsupportedOperationException(\"Realloc is only available in the context of an \" +\n-          \"operator's UDFs\");\n+      throw new UnsupportedOperationException(\"Realloc is only available in the context of an \"\n+          + \"operator's UDFs\");\n \n Review comment:\n   slight +1 for me too, so I will proceed with having operators on the end of the line\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-19T18:12:06.224+0000",
                    "updated": "2018-09-19T18:12:06.224+0000",
                    "started": "2018-09-19T18:12:06.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145750",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/145788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2582: ARROW-3264: [Java] Checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#issuecomment-422941858\n \n \n   @icexelloss @jacques-n this is ready, please take a final look, thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-19T20:11:39.581+0000",
                    "updated": "2018-09-19T20:11:39.581+0000",
                    "started": "2018-09-19T20:11:39.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145788",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/146560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2582: ARROW-3264: [Java] Checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#issuecomment-423643658\n \n \n   This looks good to me, others?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-21T19:16:34.819+0000",
                    "updated": "2018-09-21T19:16:34.819+0000",
                    "started": "2018-09-21T19:16:34.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146560",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/146562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on issue #2582: ARROW-3264: [Java] Checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582#issuecomment-423645519\n \n \n   LGTM too\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-21T19:23:54.220+0000",
                    "updated": "2018-09-21T19:23:54.220+0000",
                    "started": "2018-09-21T19:23:54.220+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146562",
                    "issueId": "13185872"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/worklog/146563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2582: ARROW-3264: [Java] Checkstyle fix whitespace\nURL: https://github.com/apache/arrow/pull/2582\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowTestHelper.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowTestHelper.java\nindex 711eaf434b..92a5c1eba6 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowTestHelper.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowTestHelper.java\n@@ -171,8 +171,8 @@ public static void assertNullValues(BaseValueVector vector, int rowCount) {\n     int len = s.length();\n     byte[] data = new byte[len / 2];\n     for (int i = 0; i < len; i += 2) {\n-      data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n-              + Character.digit(s.charAt(i + 1), 16));\n+      data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) +\n+              Character.digit(s.charAt(i + 1), 16));\n     }\n     return data;\n   }\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/Table.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/Table.java\nindex 5bfdf75640..ecce29830c 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/Table.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/Table.java\n@@ -227,9 +227,9 @@ public void setRowCount(int rowCount) {\n     int len = s.length();\n     byte[] data = new byte[len / 2];\n     for (int i = 0; i < len; i += 2) {\n-      data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n-              + Character.digit(s.charAt(i + 1), 16));\n+      data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) +\n+              Character.digit(s.charAt(i + 1), 16));\n     }\n     return data;\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java\nindex 404daff7a1..df51619eec 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.adapter.jdbc.h2;\n \n import static org.apache.arrow.adapter.jdbc.JdbcToArrowTestHelper.assertVarcharVectorValues;\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\nindex 9a54305848..a4fbc23027 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.adapter.jdbc.h2;\n \n import static org.apache.arrow.adapter.jdbc.JdbcToArrowTestHelper.assertBigIntVectorValues;\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\nindex 96939875a2..ce5374651d 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.adapter.jdbc.h2;\n \n import static org.apache.arrow.adapter.jdbc.JdbcToArrowTestHelper.assertNullValues;\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\nindex 559288ee1a..8a4b71f6b9 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.adapter.jdbc.h2;\n \n import static org.apache.arrow.adapter.jdbc.JdbcToArrowTestHelper.assertDateVectorValues;\ndiff --git a/java/dev/checkstyle/checkstyle.xml b/java/dev/checkstyle/checkstyle.xml\nindex 1efd4d39de..5e509ba9ef 100644\n--- a/java/dev/checkstyle/checkstyle.xml\n+++ b/java/dev/checkstyle/checkstyle.xml\n@@ -213,7 +213,7 @@\n         </module>\n         <module name=\"MethodParamPad\"/>\n         <module name=\"OperatorWrap\">\n-            <property name=\"option\" value=\"NL\"/>\n+            <property name=\"option\" value=\"eol\"/>\n             <property name=\"tokens\" value=\"BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR \"/>\n         </module>\n         <module name=\"AnnotationLocation\">\ndiff --git a/java/dev/checkstyle/suppressions.xml b/java/dev/checkstyle/suppressions.xml\nindex cda80921bb..13ffd0e169 100644\n--- a/java/dev/checkstyle/suppressions.xml\n+++ b/java/dev/checkstyle/suppressions.xml\n@@ -34,6 +34,6 @@\n \n   <!-- TODO: Temporarily suppress all but certain checks to fix in increments -->\n   <suppress\n-    checks=\"^(?!.*(ImportOrder|LineLength|Indentation)).*\"\n+    checks=\"^(?!.*(ImportOrder|LineLength|Indentation|OperatorWrapCheck|SeparatorWrapCheck|NewlineAtEndOfFileCheck|WhitespaceAroundCheck|EmptyLineSeparatorCheck)).*\"\n     files=\".*\" />\n </suppressions>\ndiff --git a/java/memory/src/main/java/io/netty/buffer/ArrowBuf.java b/java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\nindex 23f5d65fbb..5d5d22e62a 100644\n--- a/java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n+++ b/java/memory/src/main/java/io/netty/buffer/ArrowBuf.java\n@@ -267,8 +267,7 @@ public boolean release(int decrement) {\n     }\n \n     if (decrement < 1) {\n-      throw new IllegalStateException(String.format(\"release(%d) argument is not positive. Buffer\" +\n-              \" Info: %s\",\n+      throw new IllegalStateException(String.format(\"release(%d) argument is not positive. Buffer Info: %s\",\n           decrement, toVerboseString()));\n     }\n \n@@ -307,8 +306,7 @@ public synchronized ArrowBuf capacity(int newCapacity) {\n       return this;\n     }\n \n-    throw new UnsupportedOperationException(\"Buffers don't support resizing that increases the \" +\n-        \"size.\");\n+    throw new UnsupportedOperationException(\"Buffers don't support resizing that increases the size.\");\n   }\n \n   @Override\n@@ -442,8 +440,7 @@ public long memoryAddress() {\n \n   @Override\n   public String toString() {\n-    return String.format(\"ArrowBuf[%d], udle: [%d %d..%d]\", id, udle.id, offset, offset +\n-        capacity());\n+    return String.format(\"ArrowBuf[%d], udle: [%d %d..%d]\", id, udle.id, offset, offset + capacity());\n   }\n \n   @Override\ndiff --git a/java/memory/src/main/java/io/netty/buffer/PooledByteBufAllocatorL.java b/java/memory/src/main/java/io/netty/buffer/PooledByteBufAllocatorL.java\nindex a8df008f2a..cab92a9dec 100644\n--- a/java/memory/src/main/java/io/netty/buffer/PooledByteBufAllocatorL.java\n+++ b/java/memory/src/main/java/io/netty/buffer/PooledByteBufAllocatorL.java\n@@ -34,8 +34,7 @@\n  */\n public class PooledByteBufAllocatorL {\n \n-  private static final org.slf4j.Logger memoryLogger = org.slf4j.LoggerFactory.getLogger(\"arrow\" +\n-      \".allocator\");\n+  private static final org.slf4j.Logger memoryLogger = org.slf4j.LoggerFactory.getLogger(\"arrow.allocator\");\n \n   private static final int MEMORY_LOGGER_FREQUENCY_SECONDS = 60;\n   public final UnsafeDirectLittleEndian empty;\n@@ -136,8 +135,7 @@ public InnerAllocator() {\n         f.setAccessible(true);\n         this.directArenas = (PoolArena<ByteBuffer>[]) f.get(this);\n       } catch (Exception e) {\n-        throw new RuntimeException(\"Failure while initializing allocator.  Unable to retrieve \" +\n-            \"direct arenas field.\", e);\n+        throw new RuntimeException(\"Failure while initializing allocator.  Unable to retrieve direct arenas field.\", e);\n       }\n \n       this.chunkSize = directArenas[0].chunkSize;\n@@ -212,8 +210,7 @@ public ByteBuf heapBuffer(int initialCapacity, int maxCapacity) {\n \n     private void validate(int initialCapacity, int maxCapacity) {\n       if (initialCapacity < 0) {\n-        throw new IllegalArgumentException(\"initialCapacity: \" + initialCapacity + \" (expectd: \" +\n-            \"0+)\");\n+        throw new IllegalArgumentException(\"initialCapacity: \" + initialCapacity + \" (expected: 0+)\");\n       }\n       if (initialCapacity > maxCapacity) {\n         throw new IllegalArgumentException(String.format(\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java b/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java\nindex d926b30974..97f8370b00 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java\n@@ -77,8 +77,8 @@ public Accountant(Accountant parent, long reservation, long maxAllocation) {\n       final AllocationOutcome outcome = parent.allocateBytes(reservation);\n       if (!outcome.isOk()) {\n         throw new OutOfMemoryException(String.format(\n-            \"Failure trying to allocate initial reservation for Allocator. \"\n-                + \"Attempted to allocate %d bytes and received an outcome of %s.\", reservation,\n+            \"Failure trying to allocate initial reservation for Allocator. \" +\n+                \"Attempted to allocate %d bytes and received an outcome of %s.\", reservation,\n             outcome.name()));\n       }\n     }\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java b/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\nindex 6c2c25dee5..d3320bddab 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n@@ -404,8 +404,8 @@ public ArrowBuf newArrowBuf(int offset, int length, BufferManager manager) {\n       if (BaseAllocator.DEBUG) {\n         historicalLog.recordEvent(\n             \"ArrowBuf(BufferLedger, BufferAllocator[%s], \" +\n-                \"UnsafeDirectLittleEndian[identityHashCode == \"\n-                + \"%d](%s)) => ledger hc == %d\",\n+                \"UnsafeDirectLittleEndian[identityHashCode == \" +\n+                \"%d](%s)) => ledger hc == %d\",\n             allocator.name, System.identityHashCode(buf), buf.toString(),\n             System.identityHashCode(this));\n \ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\nindex c5efb269d0..5003a4e51a 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n@@ -37,8 +37,8 @@\n \n   public static final String DEBUG_ALLOCATOR = \"arrow.memory.debug.allocator\";\n   public static final int DEBUG_LOG_LENGTH = 6;\n-  public static final boolean DEBUG = AssertionUtil.isAssertionsEnabled()\n-      || Boolean.parseBoolean(System.getProperty(DEBUG_ALLOCATOR, \"false\"));\n+  public static final boolean DEBUG = AssertionUtil.isAssertionsEnabled() ||\n+      Boolean.parseBoolean(System.getProperty(DEBUG_ALLOCATOR, \"false\"));\n   private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(BaseAllocator\n       .class);\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n@@ -170,9 +170,8 @@ public static boolean isDebug() {\n   public void assertOpen() {\n     if (AssertionUtil.ASSERT_ENABLED) {\n       if (isClosed) {\n-        throw new IllegalStateException(\"Attempting operation on allocator when allocator is \" +\n-            \"closed.\\n\"\n-            + toVerboseString());\n+        throw new IllegalStateException(\"Attempting operation on allocator when allocator is closed.\\n\" +\n+          toVerboseString());\n       }\n     }\n   }\n@@ -233,8 +232,8 @@ private void childClosed(final BaseAllocator childAllocator) {\n         final Object object = childAllocators.remove(childAllocator);\n         if (object == null) {\n           childAllocator.historicalLog.logHistory(logger);\n-          throw new IllegalStateException(\"Child allocator[\" + childAllocator.name\n-              + \"] not found in parent allocator[\" + name + \"]'s childAllocators\");\n+          throw new IllegalStateException(\"Child allocator[\" + childAllocator.name +\n+            \"] not found in parent allocator[\" + name + \"]'s childAllocators\");\n         }\n       }\n     }\n@@ -525,8 +524,8 @@ private void verifyAllocator(final IdentityHashMap<UnsafeDirectLittleEndian, Bas\n         }\n         logger.debug(\"allocator[\" + name + \"] child event logs END\");\n         throw new IllegalStateException(\n-            \"Child allocators own more memory (\" + childTotal + \") than their parent (name = \"\n-                + name + \" ) has allocated (\" + getAllocatedMemory() + ')');\n+            \"Child allocators own more memory (\" + childTotal + \") than their parent (name = \" +\n+                name + \" ) has allocated (\" + getAllocatedMemory() + ')');\n       }\n \n       // Furthermore, the amount I've allocated should be that plus buffers I've allocated.\n@@ -607,14 +606,12 @@ private void verifyAllocator(final IdentityHashMap<UnsafeDirectLittleEndian, Bas\n \n         if (allocated2 != allocated) {\n           throw new IllegalStateException(String.format(\n-              \"allocator[%s]: allocated t1 (%d) + allocated t2 (%d). Someone released memory \" +\n-                  \"while in verification.\",\n+              \"allocator[%s]: allocated t1 (%d) + allocated t2 (%d). Someone released memory while in verification.\",\n               name, allocated, allocated2));\n \n         }\n         throw new IllegalStateException(String.format(\n-            \"allocator[%s]: buffer space (%d) + prealloc space (%d) + child space (%d) != \" +\n-                \"allocated (%d)\",\n+            \"allocator[%s]: buffer space (%d) + prealloc space (%d) + child space (%d) != allocated (%d)\",\n             name, bufferTotal, reservedTotal, childTotal, allocated));\n       }\n     }\n@@ -713,10 +710,8 @@ public boolean add(final int nBytes) {\n       assertOpen();\n \n       Preconditions.checkArgument(nBytes >= 0, \"nBytes(%d) < 0\", nBytes);\n-      Preconditions.checkState(!closed, \"Attempt to increase reservation after reservation has \" +\n-          \"been closed\");\n-      Preconditions.checkState(!used, \"Attempt to increase reservation after reservation has been\" +\n-          \" used\");\n+      Preconditions.checkState(!closed, \"Attempt to increase reservation after reservation has been closed\");\n+      Preconditions.checkState(!used, \"Attempt to increase reservation after reservation has been used\");\n \n       // we round up to next power of two since all reservations are done in powers of two. This\n       // may overestimate the\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java b/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java\nindex b0e9cd8c1a..5a237c1642 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java\n@@ -26,8 +26,8 @@\n   static {\n     boolean isAssertEnabled = false;\n     assert isAssertEnabled = true;\n-    BOUNDS_CHECKING_ENABLED = isAssertEnabled\n-        || !\"true\".equals(System.getProperty(\"drill.enable_unsafe_memory_access\"));\n+    BOUNDS_CHECKING_ENABLED = isAssertEnabled ||\n+      !\"true\".equals(System.getProperty(\"drill.enable_unsafe_memory_access\"));\n   }\n \n   private BoundsChecking() {\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java b/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\nindex fb7033815d..311922a739 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\n@@ -177,7 +177,7 @@ int findIndex(Object key, Object[] array) {\n          */\n         break;\n       }\n-      index = (index+1) % length;\n+      index = (index + 1) % length;\n     }\n     return index;\n   }\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java b/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java\nindex 7a91be3243..d75c1c9773 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.memory;\n \n /**\ndiff --git a/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java b/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java\nindex 766407ee46..613da9a57f 100644\n--- a/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java\n+++ b/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.memory;\n \n import static junit.framework.TestCase.assertNotNull;\n@@ -92,15 +93,15 @@ public void testLargeMap() throws Exception {\n \n     String [] keys = new String[200];\n     for (int i = 0; i < 200; i++) {\n-      keys[i] = \"s\"+i+\"key\";\n+      keys[i] = \"s\" + i + \"key\";\n     }\n \n     for (int i = 0; i < 100; i++) {\n       if (i % 5 == 0 && i != 0) {\n-        StringWithKey obj = new StringWithKey(keys[i-5], \"s\" + i + \"value\");\n+        StringWithKey obj = new StringWithKey(keys[i - 5], \"s\" + i + \"value\");\n         StringWithKey retObj = hashMap.put(obj);\n         assertNotNull(retObj);\n-        StringWithKey obj1 = new StringWithKey(keys[i], \"s\" + 2*i + \"value\");\n+        StringWithKey obj1 = new StringWithKey(keys[i], \"s\" + 2 * i + \"value\");\n         StringWithKey retObj1 = hashMap.put(obj1);\n         assertNull(retObj1);\n       } else {\n@@ -118,7 +119,7 @@ public void testLargeMap() throws Exception {\n         continue;\n       }\n       if (i % 5 == 0) {\n-        assertEquals(\"s\" + (i+5) + \"value\", returnObj.getValue());\n+        assertEquals(\"s\" + (i + 5) + \"value\", returnObj.getValue());\n       } else {\n         assertEquals(\"s\" + i + \"value\", returnObj.getValue());\n       }\n@@ -130,10 +131,10 @@ public void testLargeMap() throws Exception {\n         assertNotNull(returnObj);\n         assertTrue(!hashMap.containsKey(keys[i]));\n       }\n-      StringWithKey obj = new StringWithKey(keys[100+i], \"s\" + (100+i) + \"value\");\n+      StringWithKey obj = new StringWithKey(keys[100 + i], \"s\" + (100 + i) + \"value\");\n       StringWithKey retObj = hashMap.put(obj);\n       assertNull(retObj);\n-      assertTrue(hashMap.containsKey(keys[100+i]));\n+      assertTrue(hashMap.containsKey(keys[100 + i]));\n     }\n     assertEquals(175, hashMap.size());\n     for (int i = 0; i < 100; i++) {\ndiff --git a/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClient.java b/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClient.java\nindex 33e4e7d9b6..f645f910c0 100644\n--- a/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClient.java\n+++ b/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClient.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.plasma;\n \n import java.nio.ByteBuffer;\ndiff --git a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\nindex c6df572267..eb771faed9 100644\n--- a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n+++ b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n@@ -35,10 +35,10 @@\n   private ObjectStoreLink pLink;\n \n \n-  public PlasmaClientTest() throws Exception{\n+  public PlasmaClientTest() throws Exception {\n     try {\n       String plasmaStorePath = System.getenv(\"PLASMA_STORE\");\n-      if(plasmaStorePath == null) {\n+      if (plasmaStorePath == null) {\n         throw new Exception(\"Please set plasma store path in env PLASMA_STORE\");\n       }\n \n@@ -161,8 +161,9 @@ public void doTest() {\n   }\n \n   public String getStoreAddress() {\n-    return storeSuffix+storePort;\n+    return storeSuffix + storePort;\n   }\n+\n   public static void main(String[] args) throws Exception {\n \n     PlasmaClientTest plasmaClientTest = new PlasmaClientTest();\ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/Integration.java b/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\nindex e492bcc2b0..dc7c813103 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\n@@ -118,8 +118,8 @@ private Command toCommand(String commandName) {\n     try {\n       return Command.valueOf(commandName);\n     } catch (IllegalArgumentException e) {\n-      throw new IllegalArgumentException(\"Unknown command: \" + commandName + \" expected one of \"\n-          + Arrays.toString(Command.values()));\n+      throw new IllegalArgumentException(\"Unknown command: \" + commandName + \" expected one of \" +\n+          Arrays.toString(Command.values()));\n     }\n   }\n \n@@ -213,9 +213,9 @@ public void execute(File arrowFile, File jsonFile) throws IOException {\n           boolean hasMoreJSON = jsonRoot != null;\n           boolean hasMoreArrow = iterator.hasNext();\n           if (hasMoreJSON || hasMoreArrow) {\n-            throw new IllegalArgumentException(\"Unexpected RecordBatches. Total: \" + totalBatches\n-                + \" J:\" + hasMoreJSON + \" \"\n-                + \"A:\" + hasMoreArrow);\n+            throw new IllegalArgumentException(\"Unexpected RecordBatches. Total: \" + totalBatches +\n+                \" J:\" + hasMoreJSON + \" \" +\n+                \"A:\" + hasMoreArrow);\n           }\n         }\n       }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\nindex 3eb315beaf..f5ddf22520 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n@@ -200,7 +200,7 @@ public double getDensity() {\n     final int startOffset = offsetBuffer.getInt(0);\n     final int endOffset = offsetBuffer.getInt(valueCount * OFFSET_WIDTH);\n     final double totalListSize = endOffset - startOffset;\n-    return totalListSize/valueCount;\n+    return totalListSize / valueCount;\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java\nindex fa9db5360f..2d7bb82d64 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java\n@@ -362,4 +362,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, BigIntVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\nindex 822041c35f..a89ee26c48 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\n@@ -574,4 +574,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, BitVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java\nindex ce541a33e3..f4dbe7f995 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java\n@@ -363,4 +363,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, DateDayVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java\nindex 19753652ab..170bc11a90 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java\n@@ -367,4 +367,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, DateMilliVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java b/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java\nindex 1678027654..b682d888b1 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java\n@@ -217,11 +217,11 @@ public void setBigEndian(int index, byte[] value) {\n     final int length = value.length;\n     int startIndex = index * TYPE_WIDTH;\n     if (length == TYPE_WIDTH) {\n-      for (int i = TYPE_WIDTH - 1; i >= 3; i-=4) {\n+      for (int i = TYPE_WIDTH - 1; i >= 3; i -= 4) {\n         valueBuffer.setByte(startIndex, value[i]);\n-        valueBuffer.setByte(startIndex + 1, value[i-1]);\n-        valueBuffer.setByte(startIndex + 2, value[i-2]);\n-        valueBuffer.setByte(startIndex + 3, value[i-3]);\n+        valueBuffer.setByte(startIndex + 1, value[i - 1]);\n+        valueBuffer.setByte(startIndex + 2, value[i - 2]);\n+        valueBuffer.setByte(startIndex + 3, value[i - 3]);\n         startIndex += 4;\n       }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java\nindex 138ea3378e..2abd0cd2dc 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java\n@@ -363,4 +363,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, Float4Vector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java\nindex 6d9c20efe0..2b07a6f7f5 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java\n@@ -363,4 +363,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, Float8Vector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java\nindex fb1ce60a05..cca5ed960a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java\n@@ -373,4 +373,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, IntVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java\nindex 583c18fa91..b33935a3a9 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java\n@@ -170,12 +170,12 @@ private StringBuilder getAsStringBuilderHelper(int index) {\n \n     final String dayString = (Math.abs(days) == 1) ? \" day \" : \" days \";\n \n-    return (new StringBuilder().\n-            append(days).append(dayString).\n-            append(hours).append(\":\").\n-            append(minutes).append(\":\").\n-            append(seconds).append(\".\").\n-            append(millis));\n+    return (new StringBuilder()\n+            .append(days).append(dayString)\n+            .append(hours).append(\":\")\n+            .append(minutes).append(\":\")\n+            .append(seconds).append(\".\")\n+            .append(millis));\n   }\n \n   /**\n@@ -421,4 +421,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, IntervalDayVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java b/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java\nindex db97748205..9dc1bfaa01 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java\n@@ -156,9 +156,11 @@ private StringBuilder getAsStringBuilderHelper(int index) {\n     final String yearString = (Math.abs(years) == 1) ? \" year \" : \" years \";\n     final String monthString = (Math.abs(months) == 1) ? \" month \" : \" months \";\n \n-    return (new StringBuilder().\n-            append(years).append(yearString).\n-            append(months).append(monthString));\n+    return (new StringBuilder()\n+      .append(years)\n+      .append(yearString)\n+      .append(months)\n+      .append(monthString));\n   }\n \n   /**\n@@ -380,4 +382,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, IntervalYearVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java\nindex a66025266f..e41d063fff 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java\n@@ -390,4 +390,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, SmallIntVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java\nindex ae9f26cd62..6302866819 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java\n@@ -363,4 +363,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, TimeMicroVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java\nindex 4ea23a302a..ec2c5bdb8c 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java\n@@ -364,4 +364,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, TimeMilliVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java\nindex aeeff00c31..0fe803f7ec 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java\n@@ -362,4 +362,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, TimeNanoVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java\nindex 81669f00b3..1cd6df8082 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java\n@@ -363,4 +363,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, TimeSecVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\nindex b3b0a32a29..890d7335ae 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\n@@ -214,4 +214,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampMicroTZVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\nindex 7821910236..83c8df3f15 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\n@@ -215,4 +215,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampMicroVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\nindex 665bfb3743..1295543ec4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\n@@ -213,4 +213,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampMilliTZVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java\nindex 8ad84f7c34..7c1240d932 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java\n@@ -213,4 +213,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampMilliVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\nindex 0c6b0a409f..1bc9c0c649 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\n@@ -216,4 +216,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampNanoTZVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java\nindex 7c97772043..1f9c18b710 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java\n@@ -214,4 +214,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampNanoVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\nindex ec514e8a64..522804253e 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\n@@ -213,4 +213,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampSecTZVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java\nindex 90f9c5b3d4..afcc71904e 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java\n@@ -214,4 +214,4 @@ public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n   public TransferPair makeTransferPair(ValueVector to) {\n     return new TransferImpl((TimeStampSecVector) to);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\nindex 680812ec1f..55a2b8cbcc 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\n@@ -214,4 +214,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, TimeStampVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java\nindex e10a63c41a..b557a6b41b 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java\n@@ -390,4 +390,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, TinyIntVector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java\nindex c83f8309fb..ffd20281a9 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java\n@@ -311,4 +311,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, UInt1Vector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java\nindex 9c6dbcb99a..8bdc1463f1 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java\n@@ -311,4 +311,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, UInt2Vector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java\nindex cf2ad8c6e8..88bba463d2 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java\n@@ -283,4 +283,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, UInt4Vector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java\nindex ea5bd20cd4..67828aa0ca 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java\n@@ -283,4 +283,4 @@ public void copyValueSafe(int fromIndex, int toIndex) {\n       to.copyFromSafe(fromIndex, toIndex, UInt8Vector.this);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java b/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\nindex 06f3ec649d..2ba1adc86c 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\n@@ -99,4 +99,4 @@ private void loadBuffers(\n     }\n   }\n \n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java b/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java\nindex 5a32da5a75..c9266ea303 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java\n@@ -67,4 +67,4 @@ private void appendNodes(FieldVector vector, List<ArrowFieldNode> nodes, List<Ar\n     }\n   }\n \n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java\nindex b9d0dc75a6..4ad7f5a24d 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java\n@@ -113,4 +113,4 @@ public ListVector addOrGetList(String name) {\n   public UnionVector addOrGetUnion(String name) {\n     return addOrGet(name, FieldType.nullable(MinorType.UNION.getType()), UnionVector.class);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\nindex be53a4a1b4..cc96edb6e9 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n@@ -149,7 +149,7 @@ public double getDensity() {\n     final int startOffset = offsetBuffer.getInt(0);\n     final int endOffset = offsetBuffer.getInt(valueCount * OFFSET_WIDTH);\n     final double totalListSize = endOffset - startOffset;\n-    return totalListSize/valueCount;\n+    return totalListSize / valueCount;\n   }\n \n   @Override\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java\nindex cef51ebdae..258f4a1687 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java\n@@ -347,8 +347,8 @@ public int getBufferSizeFor(final int valueCount) {\n     if (valueCount == 0) {\n       return 0;\n     }\n-    return super.getBufferSizeFor(valueCount)\n-            + BitVectorHelper.getValidityBufferSize(valueCount);\n+    return super.getBufferSizeFor(valueCount) +\n+            BitVectorHelper.getValidityBufferSize(valueCount);\n   }\n \n   @Override\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/VectorWithOrdinal.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/VectorWithOrdinal.java\nindex 1633b3ad09..2e28db2e98 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/VectorWithOrdinal.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/VectorWithOrdinal.java\n@@ -28,4 +28,4 @@ public VectorWithOrdinal(ValueVector v, int ordinal) {\n     this.vector = v;\n     this.ordinal = ordinal;\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\nindex 603178f738..b2465992cd 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\n@@ -38,7 +38,7 @@\n   private final boolean unionEnabled;\n   private final NullableStructWriterFactory nullableStructWriterFactory;\n \n-  private enum Mode {INIT, STRUCT, LIST}\n+  private enum Mode { INIT, STRUCT, LIST }\n \n   public ComplexWriterImpl(\n       String name,\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/reader/FieldReader.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/reader/FieldReader.java\nindex 94239794ef..eb149565f9 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/reader/FieldReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/reader/FieldReader.java\n@@ -26,4 +26,4 @@\n \n \n public interface FieldReader extends StructReader, ListReader, ScalarReader, RepeatedStructReader, RepeatedListReader {\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\nindex e6f12753d8..d29427786b 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n@@ -175,7 +175,7 @@ private void writeFromVectorIntoJson(Field field, FieldVector vector) throws IOE\n         for (int i = 0; i < bufferValueCount; i++) {\n           if (bufferType.equals(DATA) && (vector.getMinorType() == MinorType.VARCHAR ||\n                   vector.getMinorType() == MinorType.VARBINARY)) {\n-            writeValueToGenerator(bufferType, vectorBuffer, vectorBuffers.get(v-1), vector, i);\n+            writeValueToGenerator(bufferType, vectorBuffer, vectorBuffers.get(v - 1), vector, i);\n           } else {\n             writeValueToGenerator(bufferType, vectorBuffer, null, vector, i);\n           }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java\nindex 31f55bd522..ccac12a4dd 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java\n@@ -22,4 +22,4 @@\n \n public interface FBSerializable {\n   int writeTo(FlatBufferBuilder builder);\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\nindex 355ac025d2..78f20d4349 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n@@ -137,8 +137,8 @@ public static Field convertField(org.apache.arrow.flatbuf.Field field) {\n    * @return original or mutated field\n    */\n   private static Field mutateOriginalNameIfNeeded(org.apache.arrow.flatbuf.Field field, Field originalChildField) {\n-    if ((field.typeType() == Type.List || field.typeType() == Type.FixedSizeList)\n-        && originalChildField.getName().equals(\"[DEFAULT]\")) {\n+    if ((field.typeType() == Type.List || field.typeType() == Type.FixedSizeList) &&\n+        originalChildField.getName().equals(\"[DEFAULT]\")) {\n       return\n         new Field(DATA_VECTOR_NAME,\n           originalChildField.isNullable(),\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java b/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\nindex 7821435b72..f9050b9beb 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\n@@ -49,9 +49,9 @@\n       new ThreadLocal<CharsetEncoder>() {\n         @Override\n         protected CharsetEncoder initialValue() {\n-          return Charset.forName(\"UTF-8\").newEncoder().\n-              onMalformedInput(CodingErrorAction.REPORT).\n-              onUnmappableCharacter(CodingErrorAction.REPORT);\n+          return Charset.forName(\"UTF-8\").newEncoder()\n+              .onMalformedInput(CodingErrorAction.REPORT)\n+              .onUnmappableCharacter(CodingErrorAction.REPORT);\n         }\n       };\n \n@@ -59,9 +59,9 @@ protected CharsetEncoder initialValue() {\n       new ThreadLocal<CharsetDecoder>() {\n         @Override\n         protected CharsetDecoder initialValue() {\n-          return Charset.forName(\"UTF-8\").newDecoder().\n-              onMalformedInput(CodingErrorAction.REPORT).\n-              onUnmappableCharacter(CodingErrorAction.REPORT);\n+          return Charset.forName(\"UTF-8\").newDecoder()\n+              .onMalformedInput(CodingErrorAction.REPORT)\n+              .onUnmappableCharacter(CodingErrorAction.REPORT);\n         }\n       };\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\nindex 2c03bfa997..866fef3505 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\n@@ -248,13 +248,13 @@ public void testReallocAfterVectorTransfer1() {\n       vector.setSafeToOne(valueCapacity);\n       assertEquals(valueCapacity * 2, vector.getValueCapacity());\n \n-      for (int i = valueCapacity; i < valueCapacity*2; i++) {\n+      for (int i = valueCapacity; i < valueCapacity * 2; i++) {\n         if ((i & 1) == 1) {\n           vector.setToOne(i);\n         }\n       }\n \n-      for (int i = 0; i < valueCapacity*2; i++) {\n+      for (int i = 0; i < valueCapacity * 2; i++) {\n         if (((i & 1) == 1) || (i == valueCapacity)) {\n           assertEquals(\"unexpected cleared bit at index: \" + i, 1, vector.get(i));\n         }\n@@ -264,17 +264,17 @@ public void testReallocAfterVectorTransfer1() {\n       }\n \n       /* trigger second realloc */\n-      vector.setSafeToOne(valueCapacity*2);\n+      vector.setSafeToOne(valueCapacity * 2);\n       assertEquals(valueCapacity * 4, vector.getValueCapacity());\n \n-      for (int i = valueCapacity*2; i < valueCapacity*4; i++) {\n+      for (int i = valueCapacity * 2; i < valueCapacity * 4; i++) {\n         if ((i & 1) == 1) {\n           vector.setToOne(i);\n         }\n       }\n \n-      for (int i = 0; i < valueCapacity*4; i++) {\n-        if (((i & 1) == 1) || (i == valueCapacity) || (i == valueCapacity*2)) {\n+      for (int i = 0; i < valueCapacity * 4; i++) {\n+        if (((i & 1) == 1) || (i == valueCapacity) || (i == valueCapacity * 2)) {\n           assertEquals(\"unexpected cleared bit at index: \" + i, 1, vector.get(i));\n         }\n         else {\n@@ -295,7 +295,7 @@ public void testReallocAfterVectorTransfer1() {\n       for (int i = 0; i < toVector.getValueCapacity(); i++) {\n         if (i <= valueCapacity * 4) {\n           if (((i & 1) == 1) || (i == valueCapacity) ||\n-                  (i == valueCapacity*2) || (i == valueCapacity*4)) {\n+                  (i == valueCapacity * 2) || (i == valueCapacity * 4)) {\n             assertEquals(\"unexpected cleared bit at index: \" + i, 1, toVector.get(i));\n           }\n           else {\n@@ -337,13 +337,13 @@ public void testReallocAfterVectorTransfer2() {\n       vector.setSafe(valueCapacity, 1, 1);\n       assertEquals(valueCapacity * 2, vector.getValueCapacity());\n \n-      for (int i = valueCapacity; i < valueCapacity*2; i++) {\n+      for (int i = valueCapacity; i < valueCapacity * 2; i++) {\n         if ((i & 1) == 1) {\n           vector.set(i, 1);\n         }\n       }\n \n-      for (int i = 0; i < valueCapacity*2; i++) {\n+      for (int i = 0; i < valueCapacity * 2; i++) {\n         if (((i & 1) == 1) || (i == valueCapacity)) {\n           assertFalse(\"unexpected cleared bit at index: \" + i, vector.isNull(i));\n         }\n@@ -353,17 +353,17 @@ public void testReallocAfterVectorTransfer2() {\n       }\n \n       /* trigger second realloc */\n-      vector.setSafe(valueCapacity*2, 1, 1);\n+      vector.setSafe(valueCapacity * 2, 1, 1);\n       assertEquals(valueCapacity * 4, vector.getValueCapacity());\n \n-      for (int i = valueCapacity*2; i < valueCapacity*4; i++) {\n+      for (int i = valueCapacity * 2; i < valueCapacity * 4; i++) {\n         if ((i & 1) == 1) {\n           vector.set(i, 1);\n         }\n       }\n \n-      for (int i = 0; i < valueCapacity*4; i++) {\n-        if (((i & 1) == 1) || (i == valueCapacity) || (i == valueCapacity*2)) {\n+      for (int i = 0; i < valueCapacity * 4; i++) {\n+        if (((i & 1) == 1) || (i == valueCapacity) || (i == valueCapacity * 2)) {\n           assertFalse(\"unexpected cleared bit at index: \" + i, vector.isNull(i));\n         }\n         else {\n@@ -384,7 +384,7 @@ public void testReallocAfterVectorTransfer2() {\n       for (int i = 0; i < toVector.getValueCapacity(); i++) {\n         if (i <= valueCapacity * 4) {\n           if (((i & 1) == 1) || (i == valueCapacity) ||\n-                  (i == valueCapacity*2) || (i == valueCapacity*4)) {\n+                  (i == valueCapacity * 2) || (i == valueCapacity * 4)) {\n             assertFalse(\"unexpected cleared bit at index: \" + i, toVector.isNull(i));\n           }\n           else {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java b/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java\nindex 20f6754be2..fea6c4a19e 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestBufferOwnershipTransfer.java\n@@ -48,7 +48,7 @@ public void testTransferFixedWidth() {\n \n     assertEquals(0, childAllocator1.getAllocatedMemory());\n     int expectedBitVector = 512;\n-    int expectedValueVector = 4096*4;\n+    int expectedValueVector = 4096 * 4;\n     assertEquals(expectedBitVector + expectedValueVector, childAllocator2.getAllocatedMemory());\n   }\n \n@@ -68,8 +68,8 @@ public void testTransferVariableidth() {\n     v1.makeTransferPair(v2).transfer();\n \n     assertEquals(0, childAllocator1.getAllocatedMemory());\n-    int expectedValueVector = 4096*8;\n-    int expectedOffsetVector = 4096*4;\n+    int expectedValueVector = 4096 * 8;\n+    int expectedOffsetVector = 4096 * 4;\n     int expectedBitVector = 512;\n     int expected = expectedBitVector + expectedOffsetVector + expectedValueVector;\n     assertEquals(expected, childAllocator2.getAllocatedMemory());\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\nindex db920f812e..92b6e5db79 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n@@ -202,7 +202,7 @@ public void testCopyFromWithNulls2() {\n       assertEquals(0, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, 1000 + i);\n@@ -217,7 +217,7 @@ public void testCopyFromWithNulls2() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i, 1000 + i, vector1.get(i));\n@@ -243,7 +243,7 @@ public void testCopyFromWithNulls2() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i, 1000 + i, vector2.get(i));\n@@ -262,7 +262,7 @@ public void testCopyFromWithNulls3() {\n       assertEquals(0, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, 10000000000L + (long)i);\n@@ -277,7 +277,7 @@ public void testCopyFromWithNulls3() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -304,7 +304,7 @@ public void testCopyFromWithNulls3() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -325,10 +325,10 @@ public void testCopyFromWithNulls4() {\n \n       int counter = 0;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n-        if ((counter&1) == 0) {\n+        if ((counter & 1) == 0) {\n           vector1.setSafe(i, 1);\n         } else {\n           vector1.setSafe(i, 0);\n@@ -346,10 +346,10 @@ public void testCopyFromWithNulls4() {\n \n       counter = 0;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n-          if ((counter&1) == 0) {\n+          if ((counter & 1) == 0) {\n             assertTrue(vector1.getObject(i));\n           } else {\n             assertFalse(vector1.getObject(i));\n@@ -378,10 +378,10 @@ public void testCopyFromWithNulls4() {\n       /* check vector data after copy and realloc */\n       counter = 0;\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n-          if ((counter&1) == 0) {\n+          if ((counter & 1) == 0) {\n             assertTrue(vector2.getObject(i));\n           } else {\n             assertFalse(vector2.getObject(i));\n@@ -402,7 +402,7 @@ public void testCopyFromWithNulls5() {\n       assertEquals(0, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, 100.25f + (float)i);\n@@ -417,7 +417,7 @@ public void testCopyFromWithNulls5() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -444,11 +444,11 @@ public void testCopyFromWithNulls5() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n-                  100.25f + i*1.0f, vector2.get(i), 0);\n+                  100.25f + i * 1.0f, vector2.get(i), 0);\n         }\n       }\n     }\n@@ -464,7 +464,7 @@ public void testCopyFromWithNulls6() {\n       assertEquals(0, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, 123456.7865 + (double) i);\n@@ -479,7 +479,7 @@ public void testCopyFromWithNulls6() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -506,7 +506,7 @@ public void testCopyFromWithNulls6() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -528,7 +528,7 @@ public void testCopyFromWithNulls7() {\n       final int days = 10;\n       final int milliseconds = 10000;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, days + i, milliseconds + i);\n@@ -543,7 +543,7 @@ public void testCopyFromWithNulls7() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           final Period p = vector1.getObject(i);\n@@ -571,7 +571,7 @@ public void testCopyFromWithNulls7() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           final Period p = vector2.getObject(i);\n@@ -594,7 +594,7 @@ public void testCopyFromWithNulls8() {\n       final int interval = 30; /* 2 years 6 months */\n       final Period[]  periods = new Period[4096];\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, interval + i);\n@@ -613,7 +613,7 @@ public void testCopyFromWithNulls8() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           final Period p = vector1.getObject(i);\n@@ -641,7 +641,7 @@ public void testCopyFromWithNulls8() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           final Period p = vector2.getObject(i);\n@@ -662,7 +662,7 @@ public void testCopyFromWithNulls9() {\n \n       final short val = 1000;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, val + (short)i);\n@@ -677,7 +677,7 @@ public void testCopyFromWithNulls9() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -704,7 +704,7 @@ public void testCopyFromWithNulls9() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -725,7 +725,7 @@ public void testCopyFromWithNulls10() {\n \n       final long val = 100485765432L;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, val + (long)i);\n@@ -740,7 +740,7 @@ public void testCopyFromWithNulls10() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -767,7 +767,7 @@ public void testCopyFromWithNulls10() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -788,7 +788,7 @@ public void testCopyFromWithNulls11() {\n \n       final int val = 1000;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, val + i);\n@@ -803,7 +803,7 @@ public void testCopyFromWithNulls11() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -830,7 +830,7 @@ public void testCopyFromWithNulls11() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -851,7 +851,7 @@ public void testCopyFromWithNulls12() {\n \n       byte val = -128;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, val);\n@@ -868,7 +868,7 @@ public void testCopyFromWithNulls12() {\n \n       val = -128;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i, val, vector1.get(i));\n@@ -896,7 +896,7 @@ public void testCopyFromWithNulls12() {\n       /* check vector data after copy and realloc */\n       val = -128;\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i, val, vector2.get(i));\n@@ -918,7 +918,7 @@ public void testCopyFromWithNulls13() {\n       final double baseValue = 104567897654.876543654;\n       final BigDecimal[] decimals = new BigDecimal[4096];\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         BigDecimal decimal = new BigDecimal(baseValue + (double)i);\n@@ -935,7 +935,7 @@ public void testCopyFromWithNulls13() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           final BigDecimal decimal = vector1.getObject(i);\n@@ -962,7 +962,7 @@ public void testCopyFromWithNulls13() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           final BigDecimal decimal = vector2.getObject(i);\n@@ -983,7 +983,7 @@ public void testCopyFromWithNulls14() {\n \n       final long val = 20145678912L;\n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           continue;\n         }\n         vector1.setSafe(i, val + (long)i);\n@@ -998,7 +998,7 @@ public void testCopyFromWithNulls14() {\n       assertEquals(4096, vector1.getValueCount());\n \n       for (int i = 0; i < 4096; i++) {\n-        if ((i&1) == 0) {\n+        if ((i & 1) == 0) {\n           assertNull(vector1.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\n@@ -1025,7 +1025,7 @@ public void testCopyFromWithNulls14() {\n \n       /* check vector data after copy and realloc */\n       for (int i = 0; i < 8192; i++) {\n-        if (((i&1) == 0) || (i >= 4096)) {\n+        if (((i & 1) == 0) || (i >= 4096)) {\n           assertNull(vector2.getObject(i));\n         } else {\n           assertEquals(\"unexpected value at index: \" + i,\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeBinaryVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeBinaryVector.java\nindex 6dae01ff85..a8ad3af684 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeBinaryVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeBinaryVector.java\n@@ -129,7 +129,7 @@ public void init() throws Exception {\n \n   @After\n   public void terminate() throws Exception {\n-    for (int i=0; i<numValues; i++) {\n+    for (int i = 0; i < numValues; i++) {\n       bufs[i].close();\n     }\n     smallBuf.close();\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\nindex 82c417086d..7eb791a8c9 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n@@ -427,8 +427,8 @@ public void testSplitAndTransfer() throws Exception {\n           for (int i = 0; i < splitLength; i++) {\n             dataLength1 = offsetBuffer.getInt((start + i + 1) * ListVector.OFFSET_WIDTH) -\n                     offsetBuffer.getInt((start + i) * ListVector.OFFSET_WIDTH);\n-            dataLength2 = toOffsetBuffer.getInt((i + 1) * ListVector.OFFSET_WIDTH)\n-                    - toOffsetBuffer.getInt(i * ListVector.OFFSET_WIDTH);\n+            dataLength2 = toOffsetBuffer.getInt((i + 1) * ListVector.OFFSET_WIDTH) -\n+                    toOffsetBuffer.getInt(i * ListVector.OFFSET_WIDTH);\n \n             assertEquals(\"Different data lengths at index: \" + i + \" and start: \" + start,\n                     dataLength1, dataLength2);\n@@ -781,7 +781,7 @@ public void testSetInitialCapacity() {\n       vector.setInitialCapacity(512, 4);\n       vector.allocateNew();\n       assertEquals(512, vector.getValueCapacity());\n-      assertEquals(512*4, vector.getDataVector().getValueCapacity());\n+      assertEquals(512 * 4, vector.getDataVector().getValueCapacity());\n \n       /**\n        * inner value capacity we pass to data vector is 512 * 0.1 => 51\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java\nindex 84c0fc33d9..d769488a8b 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java\n@@ -15,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.arrow.vector;\n \n import org.apache.arrow.memory.BufferAllocator;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java b/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java\nindex dc8abfa605..1eaaa2d297 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java\n@@ -17,6 +17,7 @@\n  */\n \n package org.apache.arrow.vector;\n+\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -46,7 +47,7 @@ public void terminate() throws Exception {\n   \n   @Test /* VarCharVector */\n   public void test() throws Exception {\n-    try(final VarCharVector varCharVector = new VarCharVector(\"myvector\", allocator)) {\n+    try (final VarCharVector varCharVector = new VarCharVector(\"myvector\", allocator)) {\n       varCharVector.allocateNew(10000, 1000);\n   \n       final int valueCount = 500;\n@@ -82,4 +83,4 @@ public void test() throws Exception {\n       }\n     }\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex 9550aa5695..0f5909304f 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -69,8 +69,8 @@ public void init() {\n   private final static byte[] STR5 = \"EEE5\".getBytes(utf8Charset);\n   private final static byte[] STR6 = \"FFFFF6\".getBytes(utf8Charset);\n   private final static int MAX_VALUE_COUNT =\n-            Integer.getInteger(\"arrow.vector.max_allocation_bytes\", Integer.MAX_VALUE)/4;\n-  private final static int MAX_VALUE_COUNT_8BYTE = MAX_VALUE_COUNT/2;\n+            Integer.getInteger(\"arrow.vector.max_allocation_bytes\", Integer.MAX_VALUE) / 4;\n+  private final static int MAX_VALUE_COUNT_8BYTE = MAX_VALUE_COUNT / 2;\n \n   @After\n   public void terminate() throws Exception {\n@@ -167,7 +167,7 @@ public void testFixedType1() {\n       assertEquals(initialCapacity * 2, vector.getValueCapacity());\n \n       /* vector data should have been zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         // TODO: test vector.get(i) is 0 after unsafe get added\n         assertEquals(\"non-zero data not expected at index: \" + i, true, vector.isNull(i));\n       }\n@@ -206,7 +206,7 @@ public void testFixedType2() {\n \n       /* populate the vector */\n       int j = 1;\n-      for(int i = 0; i < 16; i += 2) {\n+      for (int i = 0; i < 16; i += 2) {\n         intVector.set(i, j);\n         j++;\n       }\n@@ -224,7 +224,7 @@ public void testFixedType2() {\n \n       /* check vector contents */\n       j = 1;\n-      for(int i = 0; i < 16; i += 2) {\n+      for (int i = 0; i < 16; i += 2) {\n         assertEquals(\"unexpected value at index: \" + i, j, intVector.get(i));\n         j++;\n       }\n@@ -248,7 +248,7 @@ public void testFixedType2() {\n \n       /* vector data should still be intact after realloc */\n       j = 1;\n-      for(int i = 0; i <= 16; i += 2) {\n+      for (int i = 0; i <= 16; i += 2) {\n         assertEquals(\"unexpected value at index: \" + i, j, intVector.get(i));\n         j++;\n       }\n@@ -260,7 +260,7 @@ public void testFixedType2() {\n       assertEquals(initialCapacity * 2, intVector.getValueCapacity());\n \n       /* vector data should have been zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         assertEquals(\"non-zero data not expected at index: \" + i, true, intVector.isNull(i));\n       }\n     }\n@@ -364,7 +364,7 @@ public void testFixedType3() {\n       assertEquals(initialCapacity * 2, floatVector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         assertEquals(\"non-zero data not expected at index: \" + i, true, floatVector.isNull(i));\n       }\n     }\n@@ -466,7 +466,7 @@ public void testFixedType4() {\n       assertEquals(initialCapacity * 2, floatVector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         assertEquals(\"non-zero data not expected at index: \" + i, true, floatVector.isNull(i));\n       }\n     }\n@@ -509,7 +509,7 @@ public void testNullableFixedType1() {\n         if (i <= 99) {\n           assertTrue(vector.isNull(i));\n         }\n-        if(j <= 1021) {\n+        if (j <= 1021) {\n           assertTrue(vector.isNull(j));\n         }\n       }\n@@ -557,7 +557,7 @@ public void testNullableFixedType1() {\n         if (i <= 99) {\n           assertTrue(vector.isNull(i));\n         }\n-        if(j <= 1021) {\n+        if (j <= 1021) {\n           assertTrue(vector.isNull(j));\n         }\n       }\n@@ -569,7 +569,7 @@ public void testNullableFixedType1() {\n       assertEquals(initialCapacity * 2, vector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n       }\n     }\n@@ -670,7 +670,7 @@ public void testNullableFixedType2() {\n       assertEquals(initialCapacity * 2, vector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n       }\n     }\n@@ -698,8 +698,8 @@ public void testNullableFixedType3() {\n \n       /* check vector contents */\n       int j = 1;\n-      for(int i = 0; i <= 1023; i++) {\n-        if((i >= 2 && i <= 99) || (i >= 101 && i <= 1021)) {\n+      for (int i = 0; i <= 1023; i++) {\n+        if ((i >= 2 && i <= 99) || (i >= 101 && i <= 1021)) {\n           assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n         }\n         else {\n@@ -738,8 +738,8 @@ public void testNullableFixedType3() {\n \n       /* vector data should still be intact after realloc */\n       j = 1;\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n-        if((i > 1024) || (i >= 2 && i <= 99) || (i >= 101 && i <= 1021)) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n+        if ((i > 1024) || (i >= 2 && i <= 99) || (i >= 101 && i <= 1021)) {\n           assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n         }\n         else {\n@@ -756,13 +756,13 @@ public void testNullableFixedType3() {\n       assertEquals(initialCapacity * 2, vector.getValueCapacity());\n \n       /* vector data should have been zeroed out */\n-      for(int i = 0; i < (initialCapacity * 2); i++) {\n+      for (int i = 0; i < (initialCapacity * 2); i++) {\n         assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n       }\n \n       vector.allocateNew(4096);\n       // vector has been erased\n-      for(int i = 0; i < 4096; i++) {\n+      for (int i = 0; i < 4096; i++) {\n         assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n       }\n     }\n@@ -815,12 +815,12 @@ public void testNullableFixedType4() {\n \n       vector.zeroVector();\n \n-      for (int i = 0; i < vector.getValueCapacity(); i+=2) {\n+      for (int i = 0; i < vector.getValueCapacity(); i += 2) {\n         vector.set(i, baseValue + i);\n       }\n \n       for (int i = 0; i < vector.getValueCapacity(); i++) {\n-        if (i%2 == 0) {\n+        if (i % 2 == 0) {\n           assertFalse(\"unexpected null value at index: \" + i, vector.isNull(i));\n           assertEquals(\"unexpected value at index: \" + i, (baseValue + i), vector.get(i));\n         } else {\n@@ -832,10 +832,10 @@ public void testNullableFixedType4() {\n       assertEquals(valueCapacity * 4, vector.getValueCapacity());\n \n       for (int i = 0; i < vector.getValueCapacity(); i++) {\n-        if (i == (valueCapacity*2 + 1000)) {\n+        if (i == (valueCapacity * 2 + 1000)) {\n           assertFalse(\"unexpected null value at index: \" + i, vector.isNull(i));\n           assertEquals(\"unexpected value at index: \" + i, 400000000, vector.get(i));\n-        } else if (i < valueCapacity*2 && (i%2) == 0) {\n+        } else if (i < valueCapacity * 2 && (i % 2) == 0) {\n           assertFalse(\"unexpected null value at index: \" + i, vector.isNull(i));\n           assertEquals(\"unexpected value at index: \" + i, baseValue + i, vector.get(i));\n         } else {\n@@ -850,7 +850,7 @@ public void testNullableFixedType4() {\n       assertEquals(valueCapacity * 4, vector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n-      for(int i = 0; i < (valueCapacity * 4); i++) {\n+      for (int i = 0; i < (valueCapacity * 4); i++) {\n         assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n       }\n     }\n@@ -1868,13 +1868,13 @@ public void testGetBufferAddress2() {\n       vector.allocateNew(16);\n \n       /* populate the vector */\n-      for(int i = 0; i < 16; i += 2) {\n-        vector.set(i, i+10);\n+      for (int i = 0; i < 16; i += 2) {\n+        vector.set(i, i + 10);\n       }\n \n       /* check the vector output */\n-      for(int i = 0; i < 16; i += 2) {\n-        assertEquals(i+10, vector.get(i));\n+      for (int i = 0; i < 16; i += 2) {\n+        assertEquals(i + 10, vector.get(i));\n       }\n \n       List<ArrowBuf> buffers = vector.getFieldBuffers();\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\nindex 5d5f52ba71..ab59f5e669 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n@@ -202,13 +202,13 @@ public void testLoadValidityBuffer() throws IOException {\n     ));\n     int count = 10;\n     ArrowBuf[] values = new ArrowBuf[4];\n-    for (int i = 0; i < 4; i+=2) {\n+    for (int i = 0; i < 4; i += 2) {\n       ArrowBuf buf1 = allocator.buffer(BitVectorHelper.getValidityBufferSize(count));\n       ArrowBuf buf2 = allocator.buffer(count * 4); // integers\n       buf1.setZero(0, buf1.capacity());\n       buf2.setZero(0, buf2.capacity());\n       values[i] = buf1;\n-      values[i+1] = buf2;\n+      values[i + 1] = buf2;\n       for (int j = 0; j < count; j++) {\n         if (i == 2) {\n           BitVectorHelper.setValidityBit(buf1, j, 0);\n@@ -328,4 +328,4 @@ public static VectorUnloader newVectorUnloader(FieldVector root) {\n     VectorSchemaRoot vsr = new VectorSchemaRoot(schema.getFields(), fields, valueCount);\n     return new VectorUnloader(vsr);\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\nindex ec4aadbdd8..950976cfc7 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\n@@ -569,8 +569,8 @@ public void testWriteReadFixedSizeBinary() throws IOException {\n     final int numValues = 10;\n     final int typeWidth = 11;\n     byte[][] byteValues = new byte[numValues][typeWidth];\n-    for (int i=0; i<numValues; i++) {\n-      for (int j=0; j<typeWidth; j++) {\n+    for (int i = 0; i < numValues; i++) {\n+      for (int j = 0; j < typeWidth; j++) {\n         byteValues[i][j] = ((byte) i);\n       }\n     }\n@@ -582,7 +582,7 @@ public void testWriteReadFixedSizeBinary() throws IOException {\n       FixedSizeBinaryVector fixedSizeBinaryVector = parent.addOrGet(\"fixed-binary\",\n           FieldType.nullable(new FixedSizeBinary(typeWidth)), FixedSizeBinaryVector.class);\n       parent.allocateNew();\n-      for (int i=0; i<numValues; i++) {\n+      for (int i = 0; i < numValues; i++) {\n         fixedSizeBinaryVector.set(i, byteValues[i]);\n       }\n       parent.setValueCount(numValues);\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-21T19:26:08.236+0000",
                    "updated": "2018-09-21T19:26:08.236+0000",
                    "started": "2018-09-21T19:26:08.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146563",
                    "issueId": "13185872"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@741791af[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27933792[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@706643f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4e77d5cd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@721e7ed9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6b8eee39[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2935695f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@599c0809[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58755d55[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@44168f44[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46eb7908[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7f8eed9c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 21 19:25:59 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-21T19:25:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3264/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-18T18:43:14.000+0000",
        "updated": "2018-09-21T19:26:08.000+0000",
        "timeoriginalestimate": null,
        "description": "Fix remaining whitespace issues",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] checkstyle - fix whitespace",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185872/comment/16624070",
                    "id": "16624070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2582\n[https://github.com/apache/arrow/pull/2582]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-21T19:25:59.129+0000",
                    "updated": "2018-09-21T19:25:59.129+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3y82n:",
        "customfield_12314139": null
    }
}