{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13333695",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695",
    "key": "ARROW-10173",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12601902",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12601902",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306950",
                    "key": "ARROW-8907",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306950",
                    "fields": {
                        "summary": "[Rust] implement scalar comparison operations",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12601903",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12601903",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306952",
                    "key": "ARROW-8908",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306952",
                    "fields": {
                        "summary": "[Rust][DataFusion] improve performance of building literal arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yordan-pavlov",
            "name": "yordan-pavlov",
            "key": "yordan-pavlov",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Yordan Pavlov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10173/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov opened a new pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660\n\n\n   This PR addresses the inefficient comparison to scalar values, where an array is built with the scalar value repeated, by \r\n   changing the return value of expressions from `Result<ArrayRef>` to `Result<ColumnarValue>`  where `ColumnarValue` is defined as:\r\n   ```\r\n   pub enum ColumnarValue {\r\n       /// Array of values\r\n       Array(ArrayRef),\r\n       /// A single value \r\n       Scalar(ScalarValue)\r\n   }\r\n   ```\r\n   \r\n   This enables scalar values to be used in comparison operators directly, and for the simple query used in the benchmark (\"select f32, f64 from t where f32 >= 250 and f64 > 250\") shows approximately 10x performance improvement:\r\n   \r\n   before:\r\n   filter_scalar time: [35.733 ms 36.613 ms 37.924 ms]\r\n   \r\n   after:\r\n   filter_scalar time: [3.5938 ms 3.6450 ms 3.7035 ms]\r\n   change: [-90.048% -89.846% -89.625%] (p = 0.00 < 0.05)\r\n   \r\n   \r\n   I have also added a benchmark to compare the change in performance when comparing two arrays (using query \"select f32, f64 from t where f32 >= f64\") and it is negligible:\r\n   \r\n   before:\r\n   filter_array time: [11.601 ms 11.656 ms 11.718 ms]\r\n   \r\n   after:\r\n   filter_array time: [11.854 ms 11.957 ms 12.070 ms]\r\n   change: [+1.8032% +3.6391% +5.5671%] (p = 0.00 < 0.05)\r\n   \r\n   @andygrove @alamb let me know what you think\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T19:54:19.646+0000",
                    "updated": "2020-11-13T19:54:19.646+0000",
                    "started": "2020-11-13T19:54:19.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511516",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#issuecomment-727004972\n\n\n   https://issues.apache.org/jira/browse/ARROW-10173\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T20:05:09.952+0000",
                    "updated": "2020-11-13T20:05:09.952+0000",
                    "started": "2020-11-13T20:05:09.951+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511517",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523237229\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1288,18 +1363,84 @@ impl PhysicalExpr for BinaryExpr {\n         Ok(self.left.nullable(input_schema)? || self.right.nullable(input_schema)?)\n     }\n \n-    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        let left = self.left.evaluate(batch)?;\n-        let right = self.right.evaluate(batch)?;\n-        if left.data_type() != right.data_type() {\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ColumnarValue> {\n+        let left_value = self.left.evaluate(batch)?;\n+        let right_value = self.right.evaluate(batch)?;\n+        let left_data_type = left_value.data_type();\n+        let right_data_type = right_value.data_type();\n+\n+        if left_data_type != right_data_type {\n             return Err(ExecutionError::General(format!(\n                 \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n-                self.op,\n-                left.data_type(),\n-                right.data_type()\n+                self.op, left_data_type, right_data_type\n             )));\n         }\n-        match &self.op {\n+\n+        let scalar_result = match (&left_value, &right_value) {\n+            (ColumnarValue::Array(array), ColumnarValue::Scalar(scalar)) => {\n+                // if left is array and right is literal - use scalar operations\n+                let result: Result<ArrayRef> = match &self.op {\n+                    Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), lt),\n+                    Operator::LtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), lt_eq)\n+                    }\n+                    Operator::Gt => binary_array_op_scalar!(array, scalar.clone(), gt),\n+                    Operator::GtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), gt_eq)\n+                    }\n+                    Operator::Eq => binary_array_op_scalar!(array, scalar.clone(), eq),\n+                    Operator::NotEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), neq)\n+                    }\n+                    _ => Err(ExecutionError::General(format!(\n+                        \"Scalar values on right side of operator {} are not supported\",\n+                        self.op\n+                    ))),\n+                };\n+                Some(result)\n+            }\n+            (ColumnarValue::Scalar(scalar), ColumnarValue::Array(array)) => {\n+                // if right is literal and left is array - reverse operator and parameters\n+                let result: Result<ArrayRef> = match &self.op {\n\nReview comment:\n       It looks like this block is duplicated for the two match arms and could be moved into a function\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:18:22.761+0000",
                    "updated": "2020-11-13T21:18:22.761+0000",
                    "started": "2020-11-13T21:18:22.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511542",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523237664\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -969,6 +975,42 @@ macro_rules! compute_utf8_op {\n     }};\n }\n \n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_utf8_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        if let ScalarValue::Utf8(Some(string_value)) = $RIGHT {\n+            Ok(Arc::new(paste::expr! {[<$OP _utf8_scalar>]}(\n+                &ll,\n+                &string_value,\n+            )?))\n+        } else {\n+            Err(ExecutionError::General(format!(\n+                \"compute_utf8_op_scalar failed to cast literal value {}\",\n+                $RIGHT\n+            )))\n+        }\n+    }};\n+}\n+\n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        use std::convert::TryInto;\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        Ok(Arc::new(paste::expr! {[<$OP _scalar>]}(\n\nReview comment:\n       Could you add a comment explaining what is happening here? I am not familiar with this syntax\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:19:27.697+0000",
                    "updated": "2020-11-13T21:19:27.697+0000",
                    "started": "2020-11-13T21:19:27.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511543",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523238084\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       Perhaps we could push the new `ColumnarValue` enum down to the core arrow crate since it isn't specific to DataFusion?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:20:16.664+0000",
                    "updated": "2020-11-13T21:20:16.664+0000",
                    "started": "2020-11-13T21:20:16.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511546",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#issuecomment-727041322\n\n\n   @yordan-pavlov I took a quick skim through and this is looking really good! Could you rebase? \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:21:09.886+0000",
                    "updated": "2020-11-13T21:21:09.886+0000",
                    "started": "2020-11-13T21:21:09.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511547",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523241911\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1288,18 +1363,84 @@ impl PhysicalExpr for BinaryExpr {\n         Ok(self.left.nullable(input_schema)? || self.right.nullable(input_schema)?)\n     }\n \n-    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        let left = self.left.evaluate(batch)?;\n-        let right = self.right.evaluate(batch)?;\n-        if left.data_type() != right.data_type() {\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ColumnarValue> {\n+        let left_value = self.left.evaluate(batch)?;\n+        let right_value = self.right.evaluate(batch)?;\n+        let left_data_type = left_value.data_type();\n+        let right_data_type = right_value.data_type();\n+\n+        if left_data_type != right_data_type {\n             return Err(ExecutionError::General(format!(\n                 \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n-                self.op,\n-                left.data_type(),\n-                right.data_type()\n+                self.op, left_data_type, right_data_type\n             )));\n         }\n-        match &self.op {\n+\n+        let scalar_result = match (&left_value, &right_value) {\n+            (ColumnarValue::Array(array), ColumnarValue::Scalar(scalar)) => {\n+                // if left is array and right is literal - use scalar operations\n+                let result: Result<ArrayRef> = match &self.op {\n+                    Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), lt),\n+                    Operator::LtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), lt_eq)\n+                    }\n+                    Operator::Gt => binary_array_op_scalar!(array, scalar.clone(), gt),\n+                    Operator::GtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), gt_eq)\n+                    }\n+                    Operator::Eq => binary_array_op_scalar!(array, scalar.clone(), eq),\n+                    Operator::NotEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), neq)\n+                    }\n+                    _ => Err(ExecutionError::General(format!(\n+                        \"Scalar values on right side of operator {} are not supported\",\n+                        self.op\n+                    ))),\n+                };\n+                Some(result)\n+            }\n+            (ColumnarValue::Scalar(scalar), ColumnarValue::Array(array)) => {\n+                // if right is literal and left is array - reverse operator and parameters\n+                let result: Result<ArrayRef> = match &self.op {\n\nReview comment:\n       good question; the code blocks are not exactly the same, there is a small difference; notice how in `(ColumnarValue::Array(array), ColumnarValue::Scalar(scalar))` we have `Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), lt)`, but under `(ColumnarValue::Scalar(scalar), ColumnarValue::Array(array))` we have `Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), gt)`;\r\n   this is because there is only one version of arrow comparison kernel functions for scalar comparison where the scalar value can only be on one side of the comparison, for example `pub fn lt_scalar<T>(left: &PrimitiveArray<T>, right: T::Native) -> Result<BooleanArray>`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:28:56.859+0000",
                    "updated": "2020-11-13T21:28:56.859+0000",
                    "started": "2020-11-13T21:28:56.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511552",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523243341\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       possibly; where / how could you see the `ColumnarValue` enum used in core arrow? also wouldn't `ScalarValue` need to move as well?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:32:08.275+0000",
                    "updated": "2020-11-13T21:32:08.275+0000",
                    "started": "2020-11-13T21:32:08.275+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511557",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523245452\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -969,6 +975,42 @@ macro_rules! compute_utf8_op {\n     }};\n }\n \n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_utf8_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        if let ScalarValue::Utf8(Some(string_value)) = $RIGHT {\n+            Ok(Arc::new(paste::expr! {[<$OP _utf8_scalar>]}(\n+                &ll,\n+                &string_value,\n+            )?))\n+        } else {\n+            Err(ExecutionError::General(format!(\n+                \"compute_utf8_op_scalar failed to cast literal value {}\",\n+                $RIGHT\n+            )))\n+        }\n+    }};\n+}\n+\n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        use std::convert::TryInto;\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        Ok(Arc::new(paste::expr! {[<$OP _scalar>]}(\n\nReview comment:\n       this code uses the `paste::expr!` macro, similar to how it's used in the existing `macro_rules! compute_utf8_op` to generate the scalar function name, such as `lt_scalar`, from the `$OP` parameter (which could have a value of `lt`) and the suffix `_scalar`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T21:37:42.772+0000",
                    "updated": "2020-11-13T21:37:42.772+0000",
                    "started": "2020-11-13T21:37:42.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511559",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523264105\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1288,18 +1363,84 @@ impl PhysicalExpr for BinaryExpr {\n         Ok(self.left.nullable(input_schema)? || self.right.nullable(input_schema)?)\n     }\n \n-    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        let left = self.left.evaluate(batch)?;\n-        let right = self.right.evaluate(batch)?;\n-        if left.data_type() != right.data_type() {\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ColumnarValue> {\n+        let left_value = self.left.evaluate(batch)?;\n+        let right_value = self.right.evaluate(batch)?;\n+        let left_data_type = left_value.data_type();\n+        let right_data_type = right_value.data_type();\n+\n+        if left_data_type != right_data_type {\n             return Err(ExecutionError::General(format!(\n                 \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n-                self.op,\n-                left.data_type(),\n-                right.data_type()\n+                self.op, left_data_type, right_data_type\n             )));\n         }\n-        match &self.op {\n+\n+        let scalar_result = match (&left_value, &right_value) {\n+            (ColumnarValue::Array(array), ColumnarValue::Scalar(scalar)) => {\n+                // if left is array and right is literal - use scalar operations\n+                let result: Result<ArrayRef> = match &self.op {\n+                    Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), lt),\n+                    Operator::LtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), lt_eq)\n+                    }\n+                    Operator::Gt => binary_array_op_scalar!(array, scalar.clone(), gt),\n+                    Operator::GtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), gt_eq)\n+                    }\n+                    Operator::Eq => binary_array_op_scalar!(array, scalar.clone(), eq),\n+                    Operator::NotEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), neq)\n+                    }\n+                    _ => Err(ExecutionError::General(format!(\n+                        \"Scalar values on right side of operator {} are not supported\",\n+                        self.op\n+                    ))),\n+                };\n+                Some(result)\n+            }\n+            (ColumnarValue::Scalar(scalar), ColumnarValue::Array(array)) => {\n+                // if right is literal and left is array - reverse operator and parameters\n+                let result: Result<ArrayRef> = match &self.op {\n\nReview comment:\n       Ok, that makes sense. I hadn't looked closely enough to see the differences.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T22:22:25.129+0000",
                    "updated": "2020-11-13T22:22:25.129+0000",
                    "started": "2020-11-13T22:22:25.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511593",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523368564\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       C++ uses a `Datum`, which is also an enum over Scalar, Array, and a few other things.\r\n   We could have a separate module called `arrow::scalar`, then in the long run we could convert the compute kernels to take `Datum`, and push the optimisations of \"array vs scalar\" there\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T03:27:10.817+0000",
                    "updated": "2020-11-14T03:27:10.817+0000",
                    "started": "2020-11-14T03:27:10.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511663",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523374604\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       I agree.\r\n   \r\n   It would also simplify the API of many vertical operations (e.g. aggregates), as their input and result would have a common type. I have a branch on which I am doing that, but I have not finish it yet.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T04:33:30.994+0000",
                    "updated": "2020-11-14T04:33:30.994+0000",
                    "started": "2020-11-14T04:33:30.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511664",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523374868\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/filter.rs\n##########\n@@ -24,7 +24,7 @@ use std::sync::{Arc, Mutex};\n use crate::error::{ExecutionError, Result};\n use crate::physical_plan::{ExecutionPlan, Partitioning, PhysicalExpr};\n use arrow::array::BooleanArray;\n-use arrow::compute::filter;\n+use arrow::compute::filter_record_batch;\n\nReview comment:\n       This also improves performance because it avoids computing a `FilterContext` per column.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T04:36:38.252+0000",
                    "updated": "2020-11-14T04:36:38.252+0000",
                    "started": "2020-11-14T04:36:38.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511665",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523374604\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       I agree.\r\n   \r\n   It would also simplify the API of many vertical operations (e.g. aggregates), as their input and result would have a common type. I have a branch on which I am doing that, but I have not finish it yet.\r\n   \r\n   (spoiler alert: it is not so easy ^_^)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T06:21:40.773+0000",
                    "updated": "2020-11-14T06:21:40.773+0000",
                    "started": "2020-11-14T06:21:40.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511682",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523374868\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/filter.rs\n##########\n@@ -24,7 +24,7 @@ use std::sync::{Arc, Mutex};\n use crate::error::{ExecutionError, Result};\n use crate::physical_plan::{ExecutionPlan, Partitioning, PhysicalExpr};\n use arrow::array::BooleanArray;\n-use arrow::compute::filter;\n+use arrow::compute::filter_record_batch;\n\nReview comment:\n       This also improves performance over the other filters because it avoids computing a `FilterContext` per column, right?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T06:22:43.895+0000",
                    "updated": "2020-11-14T06:22:43.895+0000",
                    "started": "2020-11-14T06:22:43.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511683",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523384710\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       I also went down that rabbit hole over a year ago, yeah it's not easy\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T06:34:59.998+0000",
                    "updated": "2020-11-14T06:34:59.998+0000",
                    "started": "2020-11-14T06:34:59.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511689",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#discussion_r523416360\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -969,6 +975,42 @@ macro_rules! compute_utf8_op {\n     }};\n }\n \n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_utf8_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        if let ScalarValue::Utf8(Some(string_value)) = $RIGHT {\n+            Ok(Arc::new(paste::expr! {[<$OP _utf8_scalar>]}(\n+                &ll,\n+                &string_value,\n+            )?))\n+        } else {\n+            Err(ExecutionError::General(format!(\n+                \"compute_utf8_op_scalar failed to cast literal value {}\",\n\nReview comment:\n       ```suggestion\r\n                   \"internal error: compute_utf8_op_scalar failed to cast literal value {}\",\r\n   ```\r\n   The point being that if this code is hit it isn't likely a bug in how someone is using datafusion, it is a bug in datafusion itself.\r\n   \n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1571,24 +1754,6 @@ impl Literal {\n     }\n }\n \n-/// Build array containing the same literal value repeated. This is necessary because the Arrow\n\nReview comment:\n       \u2764\ufe0f \n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -100,6 +100,30 @@ pub enum Distribution {\n     SinglePartition,\n }\n \n+/// Represents the result from an expression\n+pub enum ColumnarValue {\n\nReview comment:\n       I think starting with `ColumnValue` in DataFusion and then hoisting it out into `arrow` makes a lot of sense\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1664,8 +1791,18 @@ pub struct PhysicalSortExpr {\n impl PhysicalSortExpr {\n     /// evaluate the sort expression into SortColumn that can be passed into arrow sort kernel\n     pub fn evaluate_to_sort_column(&self, batch: &RecordBatch) -> Result<SortColumn> {\n+        let values_to_sort = self.expr.evaluate(batch)?;\n+        let array_to_sort = match values_to_sort {\n+            ColumnarValue::Array(array) => array,\n+            ColumnarValue::Scalar(scalar) => {\n+                return Err(ExecutionError::General(format!(\n\nReview comment:\n       again, I like this approach -- we should be removing scalar values out of Sort exprs in the planner, not during execution\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1288,18 +1363,84 @@ impl PhysicalExpr for BinaryExpr {\n         Ok(self.left.nullable(input_schema)? || self.right.nullable(input_schema)?)\n     }\n \n-    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        let left = self.left.evaluate(batch)?;\n-        let right = self.right.evaluate(batch)?;\n-        if left.data_type() != right.data_type() {\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ColumnarValue> {\n+        let left_value = self.left.evaluate(batch)?;\n+        let right_value = self.right.evaluate(batch)?;\n+        let left_data_type = left_value.data_type();\n+        let right_data_type = right_value.data_type();\n+\n+        if left_data_type != right_data_type {\n             return Err(ExecutionError::General(format!(\n                 \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n-                self.op,\n-                left.data_type(),\n-                right.data_type()\n+                self.op, left_data_type, right_data_type\n             )));\n         }\n-        match &self.op {\n+\n+        let scalar_result = match (&left_value, &right_value) {\n+            (ColumnarValue::Array(array), ColumnarValue::Scalar(scalar)) => {\n+                // if left is array and right is literal - use scalar operations\n+                let result: Result<ArrayRef> = match &self.op {\n+                    Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), lt),\n+                    Operator::LtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), lt_eq)\n+                    }\n+                    Operator::Gt => binary_array_op_scalar!(array, scalar.clone(), gt),\n+                    Operator::GtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), gt_eq)\n+                    }\n+                    Operator::Eq => binary_array_op_scalar!(array, scalar.clone(), eq),\n+                    Operator::NotEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), neq)\n+                    }\n+                    _ => Err(ExecutionError::General(format!(\n+                        \"Scalar values on right side of operator {} are not supported\",\n+                        self.op\n+                    ))),\n+                };\n+                Some(result)\n+            }\n+            (ColumnarValue::Scalar(scalar), ColumnarValue::Array(array)) => {\n+                // if right is literal and left is array - reverse operator and parameters\n+                let result: Result<ArrayRef> = match &self.op {\n+                    Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), gt),\n+                    Operator::LtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), gt_eq)\n+                    }\n+                    Operator::Gt => binary_array_op_scalar!(array, scalar.clone(), lt),\n+                    Operator::GtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), lt_eq)\n+                    }\n+                    Operator::Eq => binary_array_op_scalar!(array, scalar.clone(), eq),\n+                    Operator::NotEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), neq)\n+                    }\n+                    _ => Err(ExecutionError::General(format!(\n+                        \"Scalar values on left side of operator {} are not supported\",\n+                        self.op\n+                    ))),\n+                };\n+                Some(result)\n+            }\n+            (_, _) => None,\n+        };\n+\n+        if let Some(result) = scalar_result {\n+            return result.map(|a| ColumnarValue::Array(a));\n+        }\n+\n+        let (left, right) = match (left_value, right_value) {\n+            // if both arrays - extract and continue execution\n+            (ColumnarValue::Array(left), ColumnarValue::Array(right)) => (left, right),\n+            // if both literals - not supported\n\nReview comment:\n       I think this is fine -- we should handle such `scalar` op `scalar` things in the planner / optimizer, in my opinion\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1288,18 +1363,84 @@ impl PhysicalExpr for BinaryExpr {\n         Ok(self.left.nullable(input_schema)? || self.right.nullable(input_schema)?)\n     }\n \n-    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        let left = self.left.evaluate(batch)?;\n-        let right = self.right.evaluate(batch)?;\n-        if left.data_type() != right.data_type() {\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ColumnarValue> {\n+        let left_value = self.left.evaluate(batch)?;\n+        let right_value = self.right.evaluate(batch)?;\n+        let left_data_type = left_value.data_type();\n+        let right_data_type = right_value.data_type();\n+\n+        if left_data_type != right_data_type {\n             return Err(ExecutionError::General(format!(\n                 \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n-                self.op,\n-                left.data_type(),\n-                right.data_type()\n+                self.op, left_data_type, right_data_type\n             )));\n         }\n-        match &self.op {\n+\n+        let scalar_result = match (&left_value, &right_value) {\n+            (ColumnarValue::Array(array), ColumnarValue::Scalar(scalar)) => {\n+                // if left is array and right is literal - use scalar operations\n+                let result: Result<ArrayRef> = match &self.op {\n+                    Operator::Lt => binary_array_op_scalar!(array, scalar.clone(), lt),\n+                    Operator::LtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), lt_eq)\n+                    }\n+                    Operator::Gt => binary_array_op_scalar!(array, scalar.clone(), gt),\n+                    Operator::GtEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), gt_eq)\n+                    }\n+                    Operator::Eq => binary_array_op_scalar!(array, scalar.clone(), eq),\n+                    Operator::NotEq => {\n+                        binary_array_op_scalar!(array, scalar.clone(), neq)\n+                    }\n+                    _ => Err(ExecutionError::General(format!(\n+                        \"Scalar values on right side of operator {} are not supported\",\n+                        self.op\n+                    ))),\n+                };\n+                Some(result)\n+            }\n+            (ColumnarValue::Scalar(scalar), ColumnarValue::Array(array)) => {\n+                // if right is literal and left is array - reverse operator and parameters\n+                let result: Result<ArrayRef> = match &self.op {\n\nReview comment:\n       Another structure would be to normalize the invocations by finding the array, and the literal and then have a single call site for invoking the comparison\r\n   \r\n   Like turning both `array` > `lit_1` and `lit_1` < `array` into \r\n   \r\n   A = `array`\r\n   lit = `lit_`\r\n   op = `>`\r\n   \r\n   However this involves changing the comparison ops and I am not sure I can claim the code would be any simpler / potentially less bug prone.\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -969,6 +975,42 @@ macro_rules! compute_utf8_op {\n     }};\n }\n \n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_utf8_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        if let ScalarValue::Utf8(Some(string_value)) = $RIGHT {\n+            Ok(Arc::new(paste::expr! {[<$OP _utf8_scalar>]}(\n+                &ll,\n+                &string_value,\n+            )?))\n+        } else {\n+            Err(ExecutionError::General(format!(\n+                \"compute_utf8_op_scalar failed to cast literal value {}\",\n+                $RIGHT\n+            )))\n+        }\n+    }};\n+}\n+\n+/// Invoke a compute kernel on a data array and a scalar value\n+macro_rules! compute_op_scalar {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        use std::convert::TryInto;\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        Ok(Arc::new(paste::expr! {[<$OP _scalar>]}(\n\nReview comment:\n       ```suggestion\r\n           // generate the scalar function name, such as lt_scalar, from the $OP parameter \r\n           // (which could have a value of lt) and the suffix _scalar\r\n           Ok(Arc::new(paste::expr! {[<$OP _scalar>]}(\r\n   ```\n\n##########\nFile path: rust/datafusion/src/scalar.rs\n##########\n@@ -115,22 +121,32 @@ impl ScalarValue {\n \n     /// Converts a scalar value into an 1-row array.\n     pub fn to_array(&self) -> ArrayRef {\n+        self.to_array_of_size(1)\n+    }\n+\n+    /// Converts a scalar value into an 1-row array.\n\nReview comment:\n       ```suggestion\r\n       /// Converts a scalar value into an array of `size` rows.\r\n   ```\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T13:00:57.392+0000",
                    "updated": "2020-11-14T13:00:57.392+0000",
                    "started": "2020-11-14T13:00:57.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511737",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#issuecomment-727205230\n\n\n   I tried to run this code against our simple TPCH Q1 implementation (which is dominated by evaluating expressions against constants), and sadly it hit an error\r\n   \r\n   ```\r\n   cd arrow/rust/benchmarks\r\n   cargo run --release --bin tpch -- --iterations 3 --path /Users/alamb/Software/tpch_data/SF10-parquet-64 --format parquet --query 1 --batch-size 4096\r\n       Finished release [optimized] target(s) in 0.13s\r\n        Running `/Users/alamb/Software/arrow2/rust/target/release/tpch --iterations 3 --path /Users/alamb/Software/tpch_data/SF10-parquet-64 --format parquet --query 1 --batch-size 4096`\r\n   Running benchmarks with the following options: TpchOpt { query: 1, debug: false, iterations: 3, concurrency: 2, batch_size: 4096, path: \"/Users/alamb/Software/tpch_data/SF10-parquet-64\", file_format: \"parquet\" }\r\n   \r\n   Error: ArrowError(ExternalError(General(\"Scalar values on left side of operator - are not supported\")))\r\n   ```\r\n   \r\n   I plan to figure out what is going on and try and fix it tomorrow morning, US Eastern time. As I said this I think this PR is a major step forward and I want to see it merged!\r\n   \r\n   Andrew\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T13:10:28.440+0000",
                    "updated": "2020-11-14T13:10:28.440+0000",
                    "started": "2020-11-14T13:10:28.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511739",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#issuecomment-727225442\n\n\n   I would recommend that we implement an optimizer rule to \"swap\" the order of expressions when we see an unsupported combination such as a scalar on the left. The logic for this rule already exists in this PR. The benefit of having it as an optimizer rule is that it would handle invalid plans created from both the SQL and DataFrame APIs.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T15:44:55.773+0000",
                    "updated": "2020-11-14T15:44:55.773+0000",
                    "started": "2020-11-14T15:44:55.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511759",
                    "issueId": "13333695"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/worklog/511784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #8660:\nURL: https://github.com/apache/arrow/pull/8660#issuecomment-727239477\n\n\n   thanks for all the comments, I will try to rebase this evening\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-14T17:31:37.023+0000",
                    "updated": "2020-11-14T17:31:37.023+0000",
                    "started": "2020-11-14T17:31:37.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511784",
                    "issueId": "13333695"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3cdcf019[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e1d6f53[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36769612[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@13341078[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1591e12c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@777e6984[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75baa77f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@463ece60[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5cbcdf0a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@580aaf50[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@782b6a71[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@48d6e6da[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 18 04:48:22 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-18T04:48:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10173/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-10-05T11:13:53.000+0000",
        "updated": "2020-12-24T19:09:08.000+0000",
        "timeoriginalestimate": null,
        "description": "I noticed this behavior while working on support for DictionaryArrays and wanted to capture it in a ticket in case someone has time to work on it. \r\n\r\nIn order to implement an equality predicate to a constant such as {{d1 = 'three'}}, DataFusion effectively creates an array with the same value {{'three'}} repeated over and over again and uses the equality compute kernel. This is ... suboptimal.\r\n\r\nHere is what the predicate looks like:\r\n{code}\r\n        predicate: BinaryExpr {\r\n            left: CastExpr {\r\n                expr: Column {\r\n                    name: \"d1\",\r\n                },\r\n                cast_type: Utf8,\r\n            },\r\n            op: Eq,\r\n            right: Literal {\r\n                value: Utf8(\"three\"),\r\n            },\r\n        },\r\n{code}\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Improve performance of equality to a constant predicate support",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/comment/17219936",
                    "id": "17219936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yordan-pavlov",
                        "name": "yordan-pavlov",
                        "key": "yordan-pavlov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Yordan Pavlov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "this issue is related to:\r\n\r\nhttps://issues.apache.org/jira/browse/ARROW-8908\u00a0\r\n\r\nwhich proposes an optimization to creating literal arrays;\u00a0\r\n\r\nthis, however, is still sub-optimal; ideally comparison to literal values should be performed directly as proposed here:\r\n\r\nhttps://issues.apache.org/jira/browse/ARROW-8907\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yordan-pavlov",
                        "name": "yordan-pavlov",
                        "key": "yordan-pavlov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Yordan Pavlov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-10-23T21:16:19.655+0000",
                    "updated": "2020-10-23T21:16:19.655+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/comment/17220041",
                    "id": "17220041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I agree that implementing direct comparison of array to scalar is the fastest way to make such predicates fast",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-10-24T09:53:31.656+0000",
                    "updated": "2020-10-24T09:53:31.656+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/comment/17230223",
                    "id": "17230223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yordan-pavlov",
                        "name": "yordan-pavlov",
                        "key": "yordan-pavlov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Yordan Pavlov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I have an initial implementation of direct comparison operations to scalar values in datafusion which, for the simple query used in the benchmark (\"select f32, f64 from t where f32 >= 250 and f64 > 250\")\u00a0shows approximately 10x performance improvement:\r\n\r\nbefore:\r\nfilter_scalar time: [35.733 ms 36.613 ms 37.924 ms]\r\n\r\nafter:\r\nfilter_scalar time: [3.5938 ms 3.6450 ms 3.7035 ms]\r\n change: [-90.048% -89.846% -89.625%] (p = 0.00 < 0.05)\r\n\r\n\u00a0\r\n\r\nI have also added a benchmark to compare the change in performance when comparing two arrays (using query\u00a0\"select\u00a0f32,\u00a0f64\u00a0from\u00a0t\u00a0where\u00a0f32\u00a0>=\u00a0f64\")\u00a0and it is negligible:\r\n\r\nbefore:\r\nfilter_array time: [11.601 ms 11.656 ms 11.718 ms]\r\n\r\nafter:\r\nfilter_array time: [11.854 ms 11.957 ms 12.070 ms]\r\n change: [+1.8032% +3.6391% +5.5671%] (p = 0.00 < 0.05)\r\n\r\n\r\n\r\nI will be submitting a PR for this change soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yordan-pavlov",
                        "name": "yordan-pavlov",
                        "key": "yordan-pavlov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Yordan Pavlov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-11-11T21:09:24.681+0000",
                    "updated": "2020-11-12T21:42:55.422+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/comment/17230671",
                    "id": "17230671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~yordan-pavlov] this sounds like great news. I can't wait to see it",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-12T14:41:44.345+0000",
                    "updated": "2020-11-12T14:41:44.345+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333695/comment/17234233",
                    "id": "17234233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8660\n[https://github.com/apache/arrow/pull/8660]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-11-18T04:48:22.218+0000",
                    "updated": "2020-11-18T04:48:22.218+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jezs:",
        "customfield_12314139": null
    }
}