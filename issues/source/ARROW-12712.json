{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377643",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643",
    "key": "ARROW-12712",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615316",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615316",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13042654",
                    "key": "ARROW-555",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042654",
                    "fields": {
                        "summary": "[C++] String algorithm library for StringArray/BinaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12629254",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629254",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13419236",
                    "key": "ARROW-15197",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419236",
                    "fields": {
                        "summary": "[C++] UTF-8 string repeat kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 78600,
            "total": 78600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 78600,
            "total": 78600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12712/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 131,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023\n\n\n   This PR adds the string repeat compute function named as \"str_repeat\". This function works on any type of string input (ASCII, UTF8).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T22:38:36.842+0000",
                    "updated": "2021-08-27T22:38:36.842+0000",
                    "started": "2021-08-27T22:38:36.842+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643032",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907510752\n\n\n   https://issues.apache.org/jira/browse/ARROW-12712\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T22:38:51.216+0000",
                    "updated": "2021-08-27T22:38:51.216+0000",
                    "started": "2021-08-27T22:38:51.215+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643033",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907569782\n\n\n   Related to a replicate operation, there was a [previous discussion in Zulip chat](https://ursalabs.zulipchat.com/#narrow/stream/271283-help.2Fc.2B.2B/topic/util.20to.20copy.20arrays.20to.20an.20existing.20buffer) of having a general replicate functionality where string repeat is a particular case.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T04:53:43.411+0000",
                    "updated": "2021-08-28T04:53:43.411+0000",
                    "started": "2021-08-28T04:53:43.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643060",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907569782\n\n\n   Related to a replicate operation, there was a [previous discussion in Zulip chat](https://ursalabs.zulipchat.com/#narrow/stream/271283-help.2Fc.2B.2B/topic/util.20to.20copy.20arrays.20to.20an.20existing.20buffer) of having a general replicate functionality where string repeat is a particular case.\r\n   \r\n   Arrow already has [`MakeArrayFromScalar`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L742) and [`RepeatedArrayFactory`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L493). Can this be used in this PR?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T05:00:17.641+0000",
                    "updated": "2021-08-28T05:00:17.641+0000",
                    "started": "2021-08-28T05:00:17.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643061",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907569782\n\n\n   Related to a replicate operation, there was a [previous discussion in Zulip chat](https://ursalabs.zulipchat.com/#narrow/stream/271283-help.2Fc.2B.2B/topic/util.20to.20copy.20arrays.20to.20an.20existing.20buffer) of having a general replicate functionality where string repeat is a particular case.\r\n   \r\n   Arrow already has [`MakeArrayFromScalar`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L742) and [`RepeatedArrayFactory`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L493) which use [concatenate implementation](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/concatenate.cc) internally. Can this be used in this PR?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T05:11:10.051+0000",
                    "updated": "2021-08-28T05:11:10.051+0000",
                    "started": "2021-08-28T05:11:10.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643062",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907569782\n\n\n   Related to a replicate operation, there was a [previous discussion in Zulip chat](https://ursalabs.zulipchat.com/#narrow/stream/271283-help.2Fc.2B.2B/topic/util.20to.20copy.20arrays.20to.20an.20existing.20buffer) of having a general replicate functionality where string repeat is a particular case.\r\n   \r\n   Arrow already has [`MakeArrayFromScalar`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L742) and [`RepeatedArrayFactory`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L493) which use [concatenate implementation](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/concatenate.cc) internally. Can this be used in this PR? These are specifically for Array types and in kernel transform method uses raw pointers.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T05:34:33.041+0000",
                    "updated": "2021-08-28T05:34:33.041+0000",
                    "started": "2021-08-28T05:34:33.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643066",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907569782\n\n\n   Related to a replicate operation, there was a previous discussion in Zulip chat of having a general replicate functionality where string repeat is a particular case.\r\n   \r\n   Arrow already has [`MakeArrayFromScalar`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L742) and [`RepeatedArrayFactory`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/util.cc#L493) which use [concatenate implementation](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/concatenate.cc) internally. Can this be used in this PR? These are specifically for Array types and in kernel transform method uses raw pointers.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T07:02:18.857+0000",
                    "updated": "2021-08-28T07:02:18.857+0000",
                    "started": "2021-08-28T07:02:18.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643079",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907624892\n\n\n   You may instead be interested in two things I added recently: [ArrayBuilder::AppendScalar(const Scalar&, int64_t)](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/builder_base.h#L123) and [ArrayBuilder::AppendArraySlice](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/builder_base.h#L129). This would let you implement a generalized repeat without allocating and concatenating lots of intermediate arrays, and would let you preallocate the final array as well. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T13:14:07.087+0000",
                    "updated": "2021-08-28T13:14:07.087+0000",
                    "started": "2021-08-28T13:14:07.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643094",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907701399\n\n\n   @lidavidm Those `ArrayBuilder` methods do work to perform this operation but will require not following the common approach used for string kernels based on the already provided [`StringTransformXXX` infrastructure](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L314). Specifically, it would require overriding [`ExecArray()`](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L327) (while duplicating most of it). For how things currently are, I think using the `ArrayBuilder/MakeScalar` methods for `StrRepeat` is not preferable.\r\n   \r\n   The current `StrRepeat` implementation only allocates once the entire array for all repeated strings via [`ExecArray()`](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L335-L343). `StrRepeat` overrides `MaxCodeunits()` to return `input_ncodeunits * n_repeats`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T23:14:22.686+0000",
                    "updated": "2021-08-28T23:14:22.686+0000",
                    "started": "2021-08-28T23:14:22.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643138",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907701399\n\n\n   @lidavidm Those `ArrayBuilder` methods do work to perform this operation but will require not following the common approach used for string kernels based on the already provided [`StringTransformXXX` infrastructure](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L314). Specifically, it would require overriding [`ExecArray()`](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L327) (while duplicating most of it). For how things currently are, I think using the `ArrayBuilder/MakeScalar` methods for `StrRepeat` is not preferable.\r\n   \r\n   Also, note that the current `StrRepeat` implementation only allocates once the entire array for all repeated strings via [`ExecArray()`](https://github.com/edponce/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L335-L343). `StrRepeat` overrides `MaxCodeunits()` to return `input_ncodeunits * n_repeats`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T23:14:56.031+0000",
                    "updated": "2021-08-28T23:14:56.031+0000",
                    "started": "2021-08-28T23:14:56.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643139",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-907701537\n\n\n   Sure, I'm talking about more general repeat methods, though I guess now I question what you might want to repeat other than binary-like types and I suppose lists.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T23:15:49.521+0000",
                    "updated": "2021-08-28T23:15:49.521+0000",
                    "started": "2021-08-28T23:15:49.520+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643140",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-908250449\n\n\n   The current `StringTransformXXX` classes do not easily support non-scalar options. In this PR, we want to be able to do the following:\r\n   ```python\r\n   str_repeat(['a', 'b', 'c'], repeats=[1,2,3])  # ['a', 'bb', 'ccc']\r\n   ```\r\n   \r\n   *Possible solution:* Override the [`ExecArray` of `StringTransformExecBase`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L327) and specialize for kernels that require the current index of the input string. This is done by passing the string index to the [`transform->Transform(..., i)` call](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_string.cc#L355-L356). We need to keep in mind that these indexes are relative to the current `ExecBatch` so we need to offset accordingly.\r\n   \r\n   cc @pitrou @lidavidm \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T11:05:50.831+0000",
                    "updated": "2021-08-30T11:05:50.831+0000",
                    "started": "2021-08-30T11:05:50.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643409",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-908251629\n\n\n   > The current `StringTransformXXX` classes do not easily support non-scalar options. In this PR, we want to be able to do the following:\r\n   > \r\n   > ```python\r\n   > str_repeat(['a', 'b', 'c'], repeats=[1,2,3])  # ['a', 'bb', 'ccc']\r\n   > ```\r\n   \r\n   To me, this means that the kernel is simply a binary kernel.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T11:07:30.657+0000",
                    "updated": "2021-08-30T11:07:30.657+0000",
                    "started": "2021-08-30T11:07:30.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643411",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/643414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-908253348\n\n\n   I agree that this is a binary kernel because the number of repeats is required.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T11:10:03.937+0000",
                    "updated": "2021-08-30T11:10:03.937+0000",
                    "started": "2021-08-30T11:10:03.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643414",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/646559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-912904767\n\n\n   This PR depends on https://github.com/apache/arrow/pull/11082 (ARROW-13898) which adds supports for string binary compute functions.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-04T04:25:27.563+0000",
                    "updated": "2021-09-04T04:25:27.563+0000",
                    "started": "2021-09-04T04:25:27.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "646559",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/648460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-915892022\n\n\n   @edponce Please ping when this is ready for review. Thanks!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-09T08:52:06.172+0000",
                    "updated": "2021-09-09T08:52:06.172+0000",
                    "started": "2021-09-09T08:52:06.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648460",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/648462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#issuecomment-915893930\n\n\n   Ready for review cc @pitrou \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-09T08:54:55.023+0000",
                    "updated": "2021-09-09T08:54:55.023+0000",
                    "started": "2021-09-09T08:54:55.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648462",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/648625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#discussion_r705355207\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto value_buffer, ctx->Allocate(output_ncodeunits_max));\n+    auto result = checked_cast<BaseBinaryScalar*>(out->scalar().get());\n+    result->is_valid = true;\n+    result->value = value_buffer;\n+    auto output_str = value_buffer->mutable_data();\n+\n+    auto input1_string = input1.value->data();\n+    auto encoded_nbytes = static_cast<offset_type>(\n+        transform->Transform(input1_string, input_ncodeunits, scalar2, output_str));\n+    if (encoded_nbytes < 0) {\n+      return transform->InvalidStatus();\n+    }\n+    DCHECK_LE(encoded_nbytes, output_ncodeunits_max);\n+    return value_buffer->Resize(encoded_nbytes, /*shrink_to_fit=*/true);\n+  }\n+\n+  static Status ExecArrayScalar(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<ArrayData>& data1,\n+                                const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    ArrayType1 input1(data1);\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto encoded_nbytes = static_cast<offset_type>(\n+            transform->Transform(input1_string, input1_string_ncodeunits, scalar2,\n+                                 output_str + output_ncodeunits));\n+        if (encoded_nbytes < 0) {\n+          return transform->InvalidStatus();\n+        }\n+        output_ncodeunits += encoded_nbytes;\n+      }\n+      output_string_offsets[i + 1] = output_ncodeunits;\n+    }\n+    DCHECK_LE(output_ncodeunits, output_ncodeunits_max);\n+\n+    // Trim the codepoint buffer, since we allocated too much\n+    return values_buffer->Resize(output_ncodeunits, /*shrink_to_fit=*/true);\n+    return Status::OK();\n\nReview comment:\n       This line is dead code.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto value_buffer, ctx->Allocate(output_ncodeunits_max));\n+    auto result = checked_cast<BaseBinaryScalar*>(out->scalar().get());\n+    result->is_valid = true;\n+    result->value = value_buffer;\n+    auto output_str = value_buffer->mutable_data();\n+\n+    auto input1_string = input1.value->data();\n+    auto encoded_nbytes = static_cast<offset_type>(\n+        transform->Transform(input1_string, input_ncodeunits, scalar2, output_str));\n+    if (encoded_nbytes < 0) {\n+      return transform->InvalidStatus();\n+    }\n+    DCHECK_LE(encoded_nbytes, output_ncodeunits_max);\n+    return value_buffer->Resize(encoded_nbytes, /*shrink_to_fit=*/true);\n+  }\n+\n+  static Status ExecArrayScalar(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<ArrayData>& data1,\n+                                const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    ArrayType1 input1(data1);\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto encoded_nbytes = static_cast<offset_type>(\n+            transform->Transform(input1_string, input1_string_ncodeunits, scalar2,\n+                                 output_str + output_ncodeunits));\n+        if (encoded_nbytes < 0) {\n+          return transform->InvalidStatus();\n+        }\n+        output_ncodeunits += encoded_nbytes;\n+      }\n+      output_string_offsets[i + 1] = output_ncodeunits;\n+    }\n+    DCHECK_LE(output_ncodeunits, output_ncodeunits_max);\n+\n+    // Trim the codepoint buffer, since we allocated too much\n+    return values_buffer->Resize(output_ncodeunits, /*shrink_to_fit=*/true);\n+    return Status::OK();\n+  }\n+\n+  static Status ExecScalarArray(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<Scalar>& scalar1,\n+                                const std::shared_ptr<ArrayData>& data2, Datum* out) {\n+    return Status::NotImplemented(\n+        \"Binary string transforms with (scalar, array) inputs are not supported for the \"\n+        \"general case\");\n+  }\n+\n+  static Status ExecArrayArray(KernelContext* ctx, StringTransform* transform,\n+                               const std::shared_ptr<ArrayData>& data1,\n+                               const std::shared_ptr<ArrayData>& data2, Datum* out) {\n+    ArrayType1 input1(data1);\n+    ArrayType2 input2(data2);\n+\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, data2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i) || !input2.IsNull(i)) {\n\nReview comment:\n       You could perhaps use `VisitTwoBitBlocksVoid` to make this slightly faster.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto value_buffer, ctx->Allocate(output_ncodeunits_max));\n+    auto result = checked_cast<BaseBinaryScalar*>(out->scalar().get());\n+    result->is_valid = true;\n+    result->value = value_buffer;\n+    auto output_str = value_buffer->mutable_data();\n+\n+    auto input1_string = input1.value->data();\n+    auto encoded_nbytes = static_cast<offset_type>(\n+        transform->Transform(input1_string, input_ncodeunits, scalar2, output_str));\n+    if (encoded_nbytes < 0) {\n+      return transform->InvalidStatus();\n+    }\n+    DCHECK_LE(encoded_nbytes, output_ncodeunits_max);\n+    return value_buffer->Resize(encoded_nbytes, /*shrink_to_fit=*/true);\n+  }\n+\n+  static Status ExecArrayScalar(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<ArrayData>& data1,\n+                                const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    ArrayType1 input1(data1);\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto encoded_nbytes = static_cast<offset_type>(\n+            transform->Transform(input1_string, input1_string_ncodeunits, scalar2,\n+                                 output_str + output_ncodeunits));\n+        if (encoded_nbytes < 0) {\n+          return transform->InvalidStatus();\n+        }\n+        output_ncodeunits += encoded_nbytes;\n+      }\n+      output_string_offsets[i + 1] = output_ncodeunits;\n+    }\n+    DCHECK_LE(output_ncodeunits, output_ncodeunits_max);\n+\n+    // Trim the codepoint buffer, since we allocated too much\n+    return values_buffer->Resize(output_ncodeunits, /*shrink_to_fit=*/true);\n+    return Status::OK();\n+  }\n+\n+  static Status ExecScalarArray(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<Scalar>& scalar1,\n+                                const std::shared_ptr<ArrayData>& data2, Datum* out) {\n+    return Status::NotImplemented(\n+        \"Binary string transforms with (scalar, array) inputs are not supported for the \"\n+        \"general case\");\n+  }\n+\n+  static Status ExecArrayArray(KernelContext* ctx, StringTransform* transform,\n+                               const std::shared_ptr<ArrayData>& data1,\n+                               const std::shared_ptr<ArrayData>& data2, Datum* out) {\n+    ArrayType1 input1(data1);\n+    ArrayType2 input2(data2);\n+\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, data2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i) || !input2.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto scalar2 = *input2.GetScalar(i);\n\nReview comment:\n       Hmm, that will be very inefficient :-( I hope we can find a better way of doing this. Perhaps use `input2.GetView(i)`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2357,6 +2584,79 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+template <typename Type1, typename Type2>\n+struct StrRepeatTransform : public StringBinaryTransformBase {\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<Scalar>& input2) override {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    return std::max(input_ncodeunits * nrepeats, int64_t(0));\n+  }\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<ArrayData>& data2) override {\n+    ArrayType2 array2(data2);\n+    // Ideally, we would like to calculate the exact output size by iterating over\n+    // all strings offsets and summing each length multiplied by the corresponding repeat\n+    // value, but this requires traversing the data twice (now and during transform).\n+    // The upper limit is to assume that all strings are repeated the max number of\n+    // times knowing that a resize operation is performed at end of execution.\n+    auto max_nrepeats =\n+        static_cast<int64_t>(**std::max_element(array2.begin(), array2.end()));\n+    return std::max(input_ncodeunits * max_nrepeats, int64_t(0));\n+  }\n+\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    const std::shared_ptr<Scalar>& input2, uint8_t* output) {\n\nReview comment:\n       This could take a `int64_t` instead of a `std::shared_ptr<Scalar>` for the second input...\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -694,45 +694,47 @@ The third set of functions examines string elements on a byte-per-byte basis:\n String transforms\n ~~~~~~~~~~~~~~~~~\n \n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| Function name           | Arity | Input types            | Output type            | Options class                     | Notes |\n-+=========================+=======+========================+========================+===================================+=======+\n-| ascii_capitalize        | Unary | String-like            | String-like            |                                   | \\(1)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| ascii_lower             | Unary | String-like            | String-like            |                                   | \\(1)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| ascii_reverse           | Unary | String-like            | String-like            |                                   | \\(2)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| ascii_swapcase          | Unary | String-like            | String-like            |                                   | \\(1)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| ascii_title             | Unary | String-like            | String-like            |                                   | \\(1)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| ascii_upper             | Unary | String-like            | String-like            |                                   | \\(1)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| binary_length           | Unary | Binary- or String-like | Int32 or Int64         |                                   | \\(3)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| binary_replace_slice    | Unary | String-like            | Binary- or String-like | :struct:`ReplaceSliceOptions`     | \\(4)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| replace_substring       | Unary | String-like            | String-like            | :struct:`ReplaceSubstringOptions` | \\(5)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| replace_substring_regex | Unary | String-like            | String-like            | :struct:`ReplaceSubstringOptions` | \\(6)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_capitalize         | Unary | String-like            | String-like            |                                   | \\(8)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_length             | Unary | String-like            | Int32 or Int64         |                                   | \\(7)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_lower              | Unary | String-like            | String-like            |                                   | \\(8)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_replace_slice      | Unary | String-like            | String-like            | :struct:`ReplaceSliceOptions`     | \\(4)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_reverse            | Unary | String-like            | String-like            |                                   | \\(9)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_swapcase           | Unary | String-like            | String-like            |                                   | \\(8)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_title              | Unary | String-like            | String-like            |                                   | \\(8)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n-| utf8_upper              | Unary | String-like            | String-like            |                                   | \\(8)  |\n-+-------------------------+-------+------------------------+------------------------+-----------------------------------+-------+\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| Function name           | Arity  | Input types            | Output type            | Options class                     | Notes |\n++=========================+========+========================+========================+===================================+=======+\n+| ascii_capitalize        | Unary  | String-like            | String-like            |                                   | \\(1)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| ascii_lower             | Unary  | String-like            | String-like            |                                   | \\(1)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| ascii_reverse           | Unary  | String-like            | String-like            |                                   | \\(2)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| ascii_swapcase          | Unary  | String-like            | String-like            |                                   | \\(1)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| ascii_title             | Unary  | String-like            | String-like            |                                   | \\(1)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| ascii_upper             | Unary  | String-like            | String-like            |                                   | \\(1)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| binary_length           | Unary  | Binary- or String-like | Int32 or Int64         |                                   | \\(3)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| binary_replace_slice    | Unary  | String-like            | Binary- or String-like | :struct:`ReplaceSliceOptions`     | \\(4)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| replace_substring       | Unary  | String-like            | String-like            | :struct:`ReplaceSubstringOptions` | \\(5)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| replace_substring_regex | Unary  | String-like            | String-like            | :struct:`ReplaceSubstringOptions` | \\(6)  |\n++-------------------------+--------+------------------------+------------------------+-----------------------------------+-------+\n+| str_repeat              | Binary | String-like            | String-like            |                                   |       |\n\nReview comment:\n       The second input type should be \"Integer\".\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2357,6 +2584,79 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+template <typename Type1, typename Type2>\n+struct StrRepeatTransform : public StringBinaryTransformBase {\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<Scalar>& input2) override {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    return std::max(input_ncodeunits * nrepeats, int64_t(0));\n+  }\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<ArrayData>& data2) override {\n+    ArrayType2 array2(data2);\n+    // Ideally, we would like to calculate the exact output size by iterating over\n+    // all strings offsets and summing each length multiplied by the corresponding repeat\n+    // value, but this requires traversing the data twice (now and during transform).\n+    // The upper limit is to assume that all strings are repeated the max number of\n+    // times knowing that a resize operation is performed at end of execution.\n+    auto max_nrepeats =\n+        static_cast<int64_t>(**std::max_element(array2.begin(), array2.end()));\n+    return std::max(input_ncodeunits * max_nrepeats, int64_t(0));\n+  }\n+\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    const std::shared_ptr<Scalar>& input2, uint8_t* output) {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    uint8_t* output_start = output;\n+    if (nrepeats > 0) {\n+      // log2(k) approach\n\nReview comment:\n       This comment is a bit misleading (memcpy is not a O(1) operation), though I understand the underlying idea.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n\nReview comment:\n       \"scalar\" rather than \"array\"?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto value_buffer, ctx->Allocate(output_ncodeunits_max));\n+    auto result = checked_cast<BaseBinaryScalar*>(out->scalar().get());\n+    result->is_valid = true;\n+    result->value = value_buffer;\n+    auto output_str = value_buffer->mutable_data();\n+\n+    auto input1_string = input1.value->data();\n+    auto encoded_nbytes = static_cast<offset_type>(\n+        transform->Transform(input1_string, input_ncodeunits, scalar2, output_str));\n+    if (encoded_nbytes < 0) {\n+      return transform->InvalidStatus();\n+    }\n+    DCHECK_LE(encoded_nbytes, output_ncodeunits_max);\n+    return value_buffer->Resize(encoded_nbytes, /*shrink_to_fit=*/true);\n+  }\n+\n+  static Status ExecArrayScalar(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<ArrayData>& data1,\n+                                const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    ArrayType1 input1(data1);\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto encoded_nbytes = static_cast<offset_type>(\n+            transform->Transform(input1_string, input1_string_ncodeunits, scalar2,\n+                                 output_str + output_ncodeunits));\n+        if (encoded_nbytes < 0) {\n+          return transform->InvalidStatus();\n+        }\n+        output_ncodeunits += encoded_nbytes;\n+      }\n+      output_string_offsets[i + 1] = output_ncodeunits;\n+    }\n+    DCHECK_LE(output_ncodeunits, output_ncodeunits_max);\n+\n+    // Trim the codepoint buffer, since we allocated too much\n+    return values_buffer->Resize(output_ncodeunits, /*shrink_to_fit=*/true);\n+    return Status::OK();\n+  }\n+\n+  static Status ExecScalarArray(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<Scalar>& scalar1,\n+                                const std::shared_ptr<ArrayData>& data2, Datum* out) {\n+    return Status::NotImplemented(\n+        \"Binary string transforms with (scalar, array) inputs are not supported for the \"\n+        \"general case\");\n\nReview comment:\n       This wouldn't be too difficult to implement, would it?\r\n   (note: perhaps some repetition can be avoided by factoring out common pieces of code between the four `ExecXXX` variants, though I'm not sure how easy that is)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n\nReview comment:\n       This default implementation looks arbitrary. IMHO it would be safer to make it pure virtual.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2357,6 +2584,79 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+template <typename Type1, typename Type2>\n+struct StrRepeatTransform : public StringBinaryTransformBase {\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<Scalar>& input2) override {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    return std::max(input_ncodeunits * nrepeats, int64_t(0));\n+  }\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<ArrayData>& data2) override {\n+    ArrayType2 array2(data2);\n+    // Ideally, we would like to calculate the exact output size by iterating over\n+    // all strings offsets and summing each length multiplied by the corresponding repeat\n+    // value, but this requires traversing the data twice (now and during transform).\n+    // The upper limit is to assume that all strings are repeated the max number of\n+    // times knowing that a resize operation is performed at end of execution.\n+    auto max_nrepeats =\n+        static_cast<int64_t>(**std::max_element(array2.begin(), array2.end()));\n+    return std::max(input_ncodeunits * max_nrepeats, int64_t(0));\n+  }\n+\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    const std::shared_ptr<Scalar>& input2, uint8_t* output) {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    uint8_t* output_start = output;\n+    if (nrepeats > 0) {\n+      // log2(k) approach\n\nReview comment:\n       The irony is that for small nrepeats, this may be slower than the more straightforward approach, of course :-)\r\n   That said, I'm not sure this kernel is really performance-critical.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2357,6 +2584,79 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+template <typename Type1, typename Type2>\n+struct StrRepeatTransform : public StringBinaryTransformBase {\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<Scalar>& input2) override {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    return std::max(input_ncodeunits * nrepeats, int64_t(0));\n+  }\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<ArrayData>& data2) override {\n+    ArrayType2 array2(data2);\n+    // Ideally, we would like to calculate the exact output size by iterating over\n+    // all strings offsets and summing each length multiplied by the corresponding repeat\n+    // value, but this requires traversing the data twice (now and during transform).\n+    // The upper limit is to assume that all strings are repeated the max number of\n+    // times knowing that a resize operation is performed at end of execution.\n\nReview comment:\n       The problem is that the upper limit may end up huge if there is a single large repeat count in the array.\r\n   \r\n   It seems to me that traversing twice is actually better here (or you can bit the bullet and allow some resizing while building up the output, but that's not compatible with `StringBinaryTransformBase`).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2357,6 +2584,79 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+template <typename Type1, typename Type2>\n+struct StrRepeatTransform : public StringBinaryTransformBase {\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<Scalar>& input2) override {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    return std::max(input_ncodeunits * nrepeats, int64_t(0));\n+  }\n+\n+  int64_t MaxCodeunits(int64_t inputs, int64_t input_ncodeunits,\n+                       const std::shared_ptr<ArrayData>& data2) override {\n+    ArrayType2 array2(data2);\n+    // Ideally, we would like to calculate the exact output size by iterating over\n+    // all strings offsets and summing each length multiplied by the corresponding repeat\n+    // value, but this requires traversing the data twice (now and during transform).\n+    // The upper limit is to assume that all strings are repeated the max number of\n+    // times knowing that a resize operation is performed at end of execution.\n+    auto max_nrepeats =\n+        static_cast<int64_t>(**std::max_element(array2.begin(), array2.end()));\n+    return std::max(input_ncodeunits * max_nrepeats, int64_t(0));\n+  }\n+\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    const std::shared_ptr<Scalar>& input2, uint8_t* output) {\n+    auto nrepeats = static_cast<int64_t>(UnboxScalar<Type2>::Unbox(*input2));\n+    uint8_t* output_start = output;\n+    if (nrepeats > 0) {\n+      // log2(k) approach\n+      std::memcpy(output, input, input_string_ncodeunits);\n+      output += input_string_ncodeunits;\n+      int64_t i = 1;\n+      for (int64_t ilen = input_string_ncodeunits; i <= (nrepeats / 2);\n+           i *= 2, ilen *= 2) {\n+        std::memcpy(output, output_start, ilen);\n+        output += ilen;\n+      }\n+\n+      // Epilogue remainder\n+      int64_t rem = (nrepeats ^ i) * input_string_ncodeunits;\n+      std::memcpy(output, output_start, rem);\n+      output += rem;\n+    }\n+    return output - output_start;\n+  }\n+};\n+\n+template <typename Type1, typename Type2>\n+using StrRepeat =\n+    StringBinaryTransformExec<Type1, Type2, StrRepeatTransform<Type1, Type2>>;\n+\n+template <template <typename...> class ExecFunctor>\n\nReview comment:\n       I'm curious why `ExecFunction` is declared as a template class here, while below `ExecFunctor` is used without parametrization.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -557,6 +558,36 @@ TYPED_TEST(TestStringKernels, Utf8Title) {\n       R\"([null, \"\", \"B\", \"Aaaz;Z\u00e6\u00e6&\", \"\u2c6d\u027d\u027dow\", \"Ii\", \"\u023a.\u023a.\u023a..\u023a\", \"Hello, World!\", \"Foo   Bar;H\u00e9h\u00e90Zop\", \"!%$^.,;\"])\");\n }\n \n+TYPED_TEST(TestStringKernels, StrRepeat) {\n+  auto values = ArrayFromJSON(\n+      this->type(),\n+      R\"([\"aAazZ\u00e6\u00c6&\", null, \"\", \"b\", \"\u0251\u027d\u2c64oW\", \"\u0131I\", \"\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!\", \"$. A3\", \"!\u0251\u2c64\u2c64ow\"])\");\n+  std::vector<std::pair<int, std::string>> repeats_and_expected{{\n+      {-1, R\"([\"\", null, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\"},\n+      {0, R\"([\"\", null, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\"},\n+      {1,\n+       R\"([\"aAazZ\u00e6\u00c6&\", null, \"\", \"b\", \"\u0251\u027d\u2c64oW\", \"\u0131I\", \"\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!\", \"$. A3\", \"!\u0251\u2c64\u2c64ow\"])\"},\n+      {3,\n+       R\"([\"aAazZ\u00e6\u00c6&aAazZ\u00e6\u00c6&aAazZ\u00e6\u00c6&\", null, \"\", \"bbb\", \"\u0251\u027d\u2c64oW\u0251\u027d\u2c64oW\u0251\u027d\u2c64oW\", \"\u0131I\u0131I\u0131I\", \"\u2c65\u2c65\u2c65\u023a\u2c65\u2c65\u2c65\u023a\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!hEllO, WoRld!hEllO, WoRld!\", \"$. A3$. A3$. A3\", \"!\u0251\u2c64\u2c64ow!\u0251\u2c64\u2c64ow!\u0251\u2c64\u2c64ow\"])\"},\n+  }};\n+\n+  for (const auto& pair : repeats_and_expected) {\n+    auto repeat = pair.first;\n+    auto expected = pair.second;\n+    this->CheckVarArgs(\"str_repeat\", {values, Datum(repeat)}, this->type(), expected);\n\nReview comment:\n       I'm curious: are we sure `Datum(repeat)` instantiates an integer scalar?\r\n   For the sake of clarity, I would call something like `MakeScalar(repeat, int64())`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -50,13 +50,14 @@ class BaseTestStringKernels : public ::testing::Test {\n     CheckScalarUnary(func_name, type(), json_input, out_ty, json_expected, options);\n   }\n \n-  void CheckBinaryScalar(std::string func_name, std::string json_left_input,\n-                         std::string json_right_scalar, std::shared_ptr<DataType> out_ty,\n-                         std::string json_expected,\n-                         const FunctionOptions* options = nullptr) {\n-    CheckScalarBinaryScalar(func_name, type(), json_left_input, json_right_scalar, out_ty,\n-                            json_expected, options);\n-  }\n+  // void CheckBinaryScalar(std::string func_name, std::string json_left_input,\n+  //                        std::string json_right_scalar, std::shared_ptr<DataType>\n+  //                        out_ty, std::string json_expected, const FunctionOptions*\n+  //                        options = nullptr) {\n+  //   CheckScalarBinaryScalar(func_name, type(), json_left_input, json_right_scalar,\n+  //   out_ty,\n+  //                           json_expected, options);\n+  // }\n\nReview comment:\n       Why is this commented out?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -557,6 +558,36 @@ TYPED_TEST(TestStringKernels, Utf8Title) {\n       R\"([null, \"\", \"B\", \"Aaaz;Z\u00e6\u00e6&\", \"\u2c6d\u027d\u027dow\", \"Ii\", \"\u023a.\u023a.\u023a..\u023a\", \"Hello, World!\", \"Foo   Bar;H\u00e9h\u00e90Zop\", \"!%$^.,;\"])\");\n }\n \n+TYPED_TEST(TestStringKernels, StrRepeat) {\n+  auto values = ArrayFromJSON(\n+      this->type(),\n+      R\"([\"aAazZ\u00e6\u00c6&\", null, \"\", \"b\", \"\u0251\u027d\u2c64oW\", \"\u0131I\", \"\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!\", \"$. A3\", \"!\u0251\u2c64\u2c64ow\"])\");\n+  std::vector<std::pair<int, std::string>> repeats_and_expected{{\n+      {-1, R\"([\"\", null, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\"},\n+      {0, R\"([\"\", null, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\"},\n+      {1,\n+       R\"([\"aAazZ\u00e6\u00c6&\", null, \"\", \"b\", \"\u0251\u027d\u2c64oW\", \"\u0131I\", \"\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!\", \"$. A3\", \"!\u0251\u2c64\u2c64ow\"])\"},\n+      {3,\n+       R\"([\"aAazZ\u00e6\u00c6&aAazZ\u00e6\u00c6&aAazZ\u00e6\u00c6&\", null, \"\", \"bbb\", \"\u0251\u027d\u2c64oW\u0251\u027d\u2c64oW\u0251\u027d\u2c64oW\", \"\u0131I\u0131I\u0131I\", \"\u2c65\u2c65\u2c65\u023a\u2c65\u2c65\u2c65\u023a\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!hEllO, WoRld!hEllO, WoRld!\", \"$. A3$. A3$. A3\", \"!\u0251\u2c64\u2c64ow!\u0251\u2c64\u2c64ow!\u0251\u2c64\u2c64ow\"])\"},\n+  }};\n+\n+  for (const auto& pair : repeats_and_expected) {\n+    auto repeat = pair.first;\n+    auto expected = pair.second;\n+    this->CheckVarArgs(\"str_repeat\", {values, Datum(repeat)}, this->type(), expected);\n+  }\n+}\n+\n+TYPED_TEST(TestStringKernels, StrRepeats) {\n+  auto repeats = ArrayFromJSON(int64(), R\"([1, 2, 4, 2, 0, 1, 3, 2, 3, -1])\");\n+  auto values = ArrayFromJSON(\n+      this->type(),\n+      R\"([\"aAazZ\u00e6\u00c6&\", \"\", \"b\", \"\u0251\u027d\u2c64oW\", \"\u0131I\", \"\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!\", \"$. A3\", \"!\u0251\u2c64\u2c64ow\", \"one\"])\");\n+  std::string expected =\n+      R\"([\"aAazZ\u00e6\u00c6&\", \"\", \"bbbb\", \"\u0251\u027d\u2c64oW\u0251\u027d\u2c64oW\", \"\", \"\u2c65\u2c65\u2c65\u023a\", \"hEllO, WoRld!hEllO, WoRld!hEllO, WoRld!\", \"$. A3$. A3\", \"!\u0251\u2c64\u2c64ow!\u0251\u2c64\u2c64ow!\u0251\u2c64\u2c64ow\", \"\"])\";\n+  this->CheckVarArgs(\"str_repeat\", {values, repeats}, this->type(), expected);\n\nReview comment:\n       Nulls should be tested too...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-09T14:07:57.536+0000",
                    "updated": "2021-09-09T14:07:57.536+0000",
                    "started": "2021-09-09T14:07:57.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648625",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/649310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#discussion_r706327065\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto value_buffer, ctx->Allocate(output_ncodeunits_max));\n+    auto result = checked_cast<BaseBinaryScalar*>(out->scalar().get());\n+    result->is_valid = true;\n+    result->value = value_buffer;\n+    auto output_str = value_buffer->mutable_data();\n+\n+    auto input1_string = input1.value->data();\n+    auto encoded_nbytes = static_cast<offset_type>(\n+        transform->Transform(input1_string, input_ncodeunits, scalar2, output_str));\n+    if (encoded_nbytes < 0) {\n+      return transform->InvalidStatus();\n+    }\n+    DCHECK_LE(encoded_nbytes, output_ncodeunits_max);\n+    return value_buffer->Resize(encoded_nbytes, /*shrink_to_fit=*/true);\n+  }\n+\n+  static Status ExecArrayScalar(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<ArrayData>& data1,\n+                                const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    ArrayType1 input1(data1);\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto encoded_nbytes = static_cast<offset_type>(\n+            transform->Transform(input1_string, input1_string_ncodeunits, scalar2,\n+                                 output_str + output_ncodeunits));\n+        if (encoded_nbytes < 0) {\n+          return transform->InvalidStatus();\n+        }\n+        output_ncodeunits += encoded_nbytes;\n+      }\n+      output_string_offsets[i + 1] = output_ncodeunits;\n+    }\n+    DCHECK_LE(output_ncodeunits, output_ncodeunits_max);\n+\n+    // Trim the codepoint buffer, since we allocated too much\n+    return values_buffer->Resize(output_ncodeunits, /*shrink_to_fit=*/true);\n+    return Status::OK();\n\nReview comment:\n       Copy-paste side-effects.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T16:46:33.130+0000",
                    "updated": "2021-09-10T16:46:33.130+0000",
                    "started": "2021-09-10T16:46:33.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649310",
                    "issueId": "13377643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/worklog/649313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11023:\nURL: https://github.com/apache/arrow/pull/11023#discussion_r706327671\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -417,6 +419,231 @@ struct StringTransformExecWithState\n   }\n };\n \n+struct StringBinaryTransformBase {\n+  virtual Status PreExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return Status::OK();\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<Scalar>& input2) {\n+    return input_ncodeunits;\n+  }\n+\n+  // Return the maximum total size of the output in codeunits (i.e. bytes)\n+  // given input characteristics.\n+  virtual int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits,\n+                               const std::shared_ptr<ArrayData>& data2) {\n+    return input_ncodeunits;\n+  }\n+\n+  virtual Status InvalidStatus() {\n+    return Status::Invalid(\"Invalid UTF8 sequence in input\");\n+  }\n+};\n+\n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar1->is_valid || !scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto value_buffer, ctx->Allocate(output_ncodeunits_max));\n+    auto result = checked_cast<BaseBinaryScalar*>(out->scalar().get());\n+    result->is_valid = true;\n+    result->value = value_buffer;\n+    auto output_str = value_buffer->mutable_data();\n+\n+    auto input1_string = input1.value->data();\n+    auto encoded_nbytes = static_cast<offset_type>(\n+        transform->Transform(input1_string, input_ncodeunits, scalar2, output_str));\n+    if (encoded_nbytes < 0) {\n+      return transform->InvalidStatus();\n+    }\n+    DCHECK_LE(encoded_nbytes, output_ncodeunits_max);\n+    return value_buffer->Resize(encoded_nbytes, /*shrink_to_fit=*/true);\n+  }\n+\n+  static Status ExecArrayScalar(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<ArrayData>& data1,\n+                                const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    if (!scalar2->is_valid) {\n+      return Status::OK();\n+    }\n+\n+    ArrayType1 input1(data1);\n+    auto input1_ncodeunits = input1.total_values_length();\n+    auto input1_nstrings = input1.length();\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input1_nstrings, input1_ncodeunits, scalar2);\n+    if (output_ncodeunits_max > std::numeric_limits<offset_type>::max()) {\n+      return Status::CapacityError(\n+          \"Result might not fit in a 32bit utf8 array, convert to large_utf8\");\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+    ARROW_ASSIGN_OR_RAISE(auto values_buffer, ctx->Allocate(output_ncodeunits_max));\n+    output->buffers[2] = values_buffer;\n+\n+    // String offsets are preallocated\n+    auto output_string_offsets = output->GetMutableValues<offset_type>(1);\n+    auto output_str = output->buffers[2]->mutable_data();\n+    output_string_offsets[0] = 0;\n+\n+    offset_type output_ncodeunits = 0;\n+    for (int64_t i = 0; i < input1_nstrings; ++i) {\n+      if (!input1.IsNull(i)) {\n+        offset_type input1_string_ncodeunits;\n+        auto input1_string = input1.GetValue(i, &input1_string_ncodeunits);\n+        auto encoded_nbytes = static_cast<offset_type>(\n+            transform->Transform(input1_string, input1_string_ncodeunits, scalar2,\n+                                 output_str + output_ncodeunits));\n+        if (encoded_nbytes < 0) {\n+          return transform->InvalidStatus();\n+        }\n+        output_ncodeunits += encoded_nbytes;\n+      }\n+      output_string_offsets[i + 1] = output_ncodeunits;\n+    }\n+    DCHECK_LE(output_ncodeunits, output_ncodeunits_max);\n+\n+    // Trim the codepoint buffer, since we allocated too much\n+    return values_buffer->Resize(output_ncodeunits, /*shrink_to_fit=*/true);\n+    return Status::OK();\n+  }\n+\n+  static Status ExecScalarArray(KernelContext* ctx, StringTransform* transform,\n+                                const std::shared_ptr<Scalar>& scalar1,\n+                                const std::shared_ptr<ArrayData>& data2, Datum* out) {\n+    return Status::NotImplemented(\n+        \"Binary string transforms with (scalar, array) inputs are not supported for the \"\n+        \"general case\");\n\nReview comment:\n       Ok, I will implement the missing case and factor out common code.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T16:47:26.478+0000",
                    "updated": "2021-09-10T16:47:26.478+0000",
                    "started": "2021-09-10T16:47:26.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649313",
                    "issueId": "13377643"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 78600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1d77ce90[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ffd3f6d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@243ef110[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@21eb4ad[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@473bf1ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@353642e1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66d38326[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@111fe88d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@933d7c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@e95ad45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74a5d502[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1a10109b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 78600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 04 14:43:30 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-04T14:43:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12712/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-05-10T14:47:12.000+0000",
        "updated": "2021-12-23T14:39:35.000+0000",
        "timeoriginalestimate": null,
        "description": "Like SQL {{replicate}} or Python {{'string' * n}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "21h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 78600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] String repeat kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/comment/17342428",
                    "id": "17342428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Pandas also has this as a {{repeat}} method (https://pandas.pydata.org/docs/reference/api/pandas.Series.str.repeat.html)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-05-11T08:58:49.451+0000",
                    "updated": "2021-05-11T08:58:49.451+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/comment/17406451",
                    "id": "17406451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "There are several variants of string repeats across languages:\r\n 1. Python, SQL - support a single integer value for *number of repeats*. All strings are replicated the same number of times.\r\n 2. Support a sequence of integers where each value is the *number of repeats* for the string corresponding to that same index. This may have its complexities in Arrow if operating on unordered batches of data.\r\n 3. Pandas, R - support (1) and (2).\r\n 4. R - allow different number of input strings and repeat values.\r\n\r\nBelow are examples of each languages API and supported variants for string repeat.\r\n\r\nBased on this, I consider having the string repeat in Arrow C++ support case (3) and for the case (2) consider invalid if number of strings and number of repeats differ in length.\r\n\r\nPython:\r\n{code:python}\r\n>>> 'a' * 2  # 'aa'\r\n>>> 'b' * 3  # 'bbb'\r\n{code}\r\n[Pandas has str.repeat function|https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.repeat.html]:\r\n{code:python}\r\n>>> s =pd.Series(['a', 'b'])\r\n>>> s.str.repeat(2)          # ['aa', 'bb']\r\n>>> s.str.repeat([2, 3])     # ['aa', 'bbb']\r\n>>> s.str.repeat([2, 3, 4])  # Error: different length arrays\r\n>>> s.str.repeat([2])        # Error: different length arrays\r\n{code}\r\n[SQL has replicate function|https://www.w3schools.com/sqL/func_sqlserver_replicate.asp]:\r\n{code:sql}\r\nSELECT REPLICATE('a', 2);  -- 'aa'\r\nSELECT REPLICATE('b', 3);  -- 'bbb'\r\n{code}\r\n[R has strrep function|https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strrep]:\r\n{code:java}\r\n> strrep(c('a', 'b'), 2)             # 'aa', 'bb'\r\n> strrep(c('a', 'b'), c(2, 3))       # 'aa', 'bbb'\r\n# R cycles strings/repeats if length of sequences differ\r\n> strrep(c('a', 'b'), c(2, 3, 4))    # 'aa', 'bbb', 'aaaa'\r\n> strrep(c('a', 'b', 'c'), c(2, 3))  # 'aa', 'bbb', 'cc'\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-08-29T18:15:07.683+0000",
                    "updated": "2021-08-29T18:17:44.936+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377643/comment/17438765",
                    "id": "17438765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11023\n[https://github.com/apache/arrow/pull/11023]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-11-04T14:43:30.578+0000",
                    "updated": "2021-11-04T14:43:30.578+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qw80:",
        "customfield_12314139": null
    }
}