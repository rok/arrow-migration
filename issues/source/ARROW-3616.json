{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13194313",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313",
    "key": "ARROW-3616",
    "fields": {
        "parent": {
            "id": "13110540",
            "key": "ARROW-1688",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13110540",
            "fields": {
                "summary": "[Java] Fail build on checkstyle warnings",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3616/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler opened a new pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842\n \n \n   Enable and fix remaining checkstyle rules except for NoFinalizer, OverloadMethodsDeclarationOrder, VariableDeclarationUsageDistance due to large code changes or possibly having an adverse effect.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T06:31:26.382+0000",
                    "updated": "2018-10-26T06:31:26.382+0000",
                    "started": "2018-10-26T06:31:26.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159001",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r228418290\n \n \n\n ##########\n File path: java/dev/checkstyle/suppressions.xml\n ##########\n @@ -33,10 +33,9 @@\n   <suppress checks=\"Header\" files=\"AutoCloseables.java|Collections2.java\" />\n \n   <!-- TODO: Temporarily suppress Javadoc checks -->\n-  <suppress checks=\"Javadoc.*\" files=\".*\" />\n+  <suppress checks=\"javadoc.*\" files=\".*\" />\n+\n+  <!-- TODO: Temporarily suppress certain check requiring many code changes -->\n+  <suppress checks=\"NoFinalizer|OverloadMethodsDeclarationOrder|VariableDeclarationUsageDistance\" files=\".*\" />\n \n Review comment:\n   These are the only 2 checks being suppressed:\r\n   \r\n   * `NoFinalizer` is because PlasmaClient is using a `finalize` method, that should not be changed here\r\n   * `OverloadMethodsDeclarationOrder` would require a lot of code moving around. This is mostly because the vector classes have many different setXXX, setSafeXXX, getXXX methods that aren't always together, mostly because `set` and similar `setSafe` methods are placed together. Anyway, I think most of the current ordering is fine and this could be supressed for now.\r\n   * `VariableDeclarationUsageDistance` this came up quite a few times and is usually when there are many variables declared, but then used just a little further. I don't think this is a big deal, so suppressing for now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T06:36:24.177+0000",
                    "updated": "2018-10-26T06:36:24.177+0000",
                    "started": "2018-10-26T06:36:24.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159003",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r228418698\n \n \n\n ##########\n File path: java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/BaseEvaluatorTest.java\n ##########\n @@ -40,138 +40,138 @@\n \n import io.netty.buffer.ArrowBuf;\n \n-interface BaseEvaluator {\n+class BaseEvaluatorTest {\n \n-  void evaluate(ArrowRecordBatch recordBatch, BufferAllocator allocator) throws GandivaException;\n \n Review comment:\n   @pravindra these changes are to move support classes to be inner, so that the outer class matches the filename. So I just moved them as block, it's just the diff here looks like a lot of changes. Let me know if this is not ok. Thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T06:38:32.313+0000",
                    "updated": "2018-10-26T06:38:32.313+0000",
                    "started": "2018-10-26T06:38:32.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159004",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#issuecomment-433303210\n \n \n   Other than the above comments, most of the changes are pretty straightforward I think. Ping @jacques-n @icexelloss also to please have a look. Thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T06:40:04.834+0000",
                    "updated": "2018-10-26T06:40:04.834+0000",
                    "started": "2018-10-26T06:40:04.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159005",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r228453501\n \n \n\n ##########\n File path: java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/BaseEvaluatorTest.java\n ##########\n @@ -40,138 +40,138 @@\n \n import io.netty.buffer.ArrowBuf;\n \n-interface BaseEvaluator {\n+class BaseEvaluatorTest {\n \n-  void evaluate(ArrowRecordBatch recordBatch, BufferAllocator allocator) throws GandivaException;\n \n Review comment:\n   lgtm. thanks for fixing this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:00:22.491+0000",
                    "updated": "2018-10-26T09:00:22.491+0000",
                    "started": "2018-10-26T09:00:22.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159039",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#issuecomment-433553355\n \n \n   just rebased this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T21:52:20.132+0000",
                    "updated": "2018-10-26T21:52:20.132+0000",
                    "started": "2018-10-26T21:52:20.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159424",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/159426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r228418290\n \n \n\n ##########\n File path: java/dev/checkstyle/suppressions.xml\n ##########\n @@ -33,10 +33,9 @@\n   <suppress checks=\"Header\" files=\"AutoCloseables.java|Collections2.java\" />\n \n   <!-- TODO: Temporarily suppress Javadoc checks -->\n-  <suppress checks=\"Javadoc.*\" files=\".*\" />\n+  <suppress checks=\"javadoc.*\" files=\".*\" />\n+\n+  <!-- TODO: Temporarily suppress certain check requiring many code changes -->\n+  <suppress checks=\"NoFinalizer|OverloadMethodsDeclarationOrder|VariableDeclarationUsageDistance\" files=\".*\" />\n \n Review comment:\n   These are the only 3 checks being suppressed:\r\n   \r\n   * `NoFinalizer` is because PlasmaClient is using a `finalize` method, that should not be changed here\r\n   * `OverloadMethodsDeclarationOrder` would require a lot of code moving around. This is mostly because the vector classes have many different setXXX, setSafeXXX, getXXX methods that aren't always together, mostly because `set` and similar `setSafe` methods are placed together. Anyway, I think most of the current ordering is fine and this could be supressed for now.\r\n   * `VariableDeclarationUsageDistance` this came up quite a few times and is usually when there are many variables declared, but then used just a little further. I don't think this is a big deal, so suppressing for now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T21:53:43.002+0000",
                    "updated": "2018-10-26T21:53:43.002+0000",
                    "started": "2018-10-26T21:53:43.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159426",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#issuecomment-434258544\n \n \n   @siddharthteotia or @jacques-n, is this OK?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T11:05:09.441+0000",
                    "updated": "2018-10-30T11:05:09.441+0000",
                    "started": "2018-10-30T11:05:09.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160538",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r229320030\n \n \n\n ##########\n File path: java/dev/checkstyle/checkstyle.xml\n ##########\n @@ -247,7 +247,7 @@\n             <property name=\"ignoreInlineTags\" value=\"false\"/>\n         </module>\n         <module name=\"EmptyCatchBlock\">\n-            <property name=\"exceptionVariableName\" value=\"expected\"/>\n+            <property name=\"exceptionVariableName\" value=\"expected|ignore\"/>\n \n Review comment:\n   Is it more consistent to name it \"expected\" and \"ignored\"?  Or maybe remove this rule? Personally, doesn't seem too useful to me...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T14:07:44.314+0000",
                    "updated": "2018-10-30T14:07:44.314+0000",
                    "started": "2018-10-30T14:07:44.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160634",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r229322760\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n ##########\n @@ -44,8 +44,9 @@ public void testEmptyStream() throws IOException {\n \n     // Write the stream.\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\n-    try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\n-    }\n+    ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out);\n+    writer.close();\n+    Assert.assertTrue(out.size() > 0);\n \n Review comment:\n   Just curious, what prevents:\r\n   \r\n   ```\r\n   try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\r\n   }\r\n   ```\r\n   ?\r\n   \r\n   Not a big deal but I think the code before prevents `writer` from leaking to outer scope.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T14:14:01.910+0000",
                    "updated": "2018-10-30T14:14:01.910+0000",
                    "started": "2018-10-30T14:14:01.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160641",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r229442579\n \n \n\n ##########\n File path: java/dev/checkstyle/checkstyle.xml\n ##########\n @@ -247,7 +247,7 @@\n             <property name=\"ignoreInlineTags\" value=\"false\"/>\n         </module>\n         <module name=\"EmptyCatchBlock\">\n-            <property name=\"exceptionVariableName\" value=\"expected\"/>\n+            <property name=\"exceptionVariableName\" value=\"expected|ignore\"/>\n \n Review comment:\n   I think it's somewhat useful to convey that there is an empty catch on purpose. We actually had an instance or two of using `ignore` plus both were given as an example in the docs http://checkstyle.sourceforge.net/config_blocks.html#EmptyCatchBlock.  Either sound fine to me, which is why I added it. Are you suggesting to only use `except`?  There are not too many instances, so not a big deal.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T18:55:51.195+0000",
                    "updated": "2018-10-30T18:55:51.195+0000",
                    "started": "2018-10-30T18:55:51.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160776",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r229442579\n \n \n\n ##########\n File path: java/dev/checkstyle/checkstyle.xml\n ##########\n @@ -247,7 +247,7 @@\n             <property name=\"ignoreInlineTags\" value=\"false\"/>\n         </module>\n         <module name=\"EmptyCatchBlock\">\n-            <property name=\"exceptionVariableName\" value=\"expected\"/>\n+            <property name=\"exceptionVariableName\" value=\"expected|ignore\"/>\n \n Review comment:\n   I think it's somewhat useful to convey that there is an empty catch block on purpose. We actually had an instance or two of using `ignore` plus both were given as an example in the docs http://checkstyle.sourceforge.net/config_blocks.html#EmptyCatchBlock.  Either sound fine to me, which is why I added it. Are you suggesting to only use `except`?  There are not too many instances, so not a big deal to change it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T18:57:44.406+0000",
                    "updated": "2018-10-30T18:57:44.406+0000",
                    "started": "2018-10-30T18:57:44.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160778",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r229443296\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n ##########\n @@ -44,8 +44,9 @@ public void testEmptyStream() throws IOException {\n \n     // Write the stream.\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\n-    try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\n-    }\n+    ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out);\n+    writer.close();\n+    Assert.assertTrue(out.size() > 0);\n \n Review comment:\n   It's from `EmptyBlock` with `LITERAL_TRY`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T18:57:52.327+0000",
                    "updated": "2018-10-30T18:57:52.327+0000",
                    "started": "2018-10-30T18:57:52.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160779",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#discussion_r229443497\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n ##########\n @@ -44,8 +44,9 @@ public void testEmptyStream() throws IOException {\n \n     // Write the stream.\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\n-    try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\n-    }\n+    ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out);\n+    writer.close();\n+    Assert.assertTrue(out.size() > 0);\n \n Review comment:\n   http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T18:58:22.320+0000",
                    "updated": "2018-10-30T18:58:22.320+0000",
                    "started": "2018-10-30T18:58:22.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160780",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/160877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#issuecomment-434480193\n \n \n   Thanks @icexelloss for the review, are you ok with keeping the `EmptyCatchBlock` rule as it is here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T21:40:23.081+0000",
                    "updated": "2018-10-30T21:40:23.081+0000",
                    "started": "2018-10-30T21:40:23.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160877",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/161175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on issue #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#issuecomment-434727795\n \n \n   LGTM. +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T15:18:36.074+0000",
                    "updated": "2018-10-31T15:18:36.074+0000",
                    "started": "2018-10-31T15:18:36.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161175",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/161219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler closed pull request #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\nindex a4629a99c5..f99509651b 100644\n--- a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\n+++ b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\n@@ -37,8 +37,8 @@\n  * <p>\n  * This utility uses following data mapping to map JDBC/SQL datatype to Arrow data types.\n  * <p>\n- * CHAR\t--> ArrowType.Utf8\n- * NCHAR\t--> ArrowType.Utf8\n+ * CHAR --> ArrowType.Utf8\n+ * NCHAR --> ArrowType.Utf8\n  * VARCHAR --> ArrowType.Utf8\n  * NVARCHAR --> ArrowType.Utf8\n  * LONGVARCHAR --> ArrowType.Utf8\ndiff --git a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\nindex 9940a3da9e..3fcded5b1c 100644\n--- a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n+++ b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n@@ -95,8 +95,8 @@\n    * <p>\n    * This method currently performs following type mapping for JDBC SQL data types to corresponding Arrow data types.\n    * <p>\n-   * CHAR\t--> ArrowType.Utf8\n-   * NCHAR\t--> ArrowType.Utf8\n+   * CHAR --> ArrowType.Utf8\n+   * NCHAR --> ArrowType.Utf8\n    * VARCHAR --> ArrowType.Utf8\n    * NVARCHAR --> ArrowType.Utf8\n    * LONGVARCHAR --> ArrowType.Utf8\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\nindex 875615ad04..e391056cbe 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\n@@ -210,6 +210,9 @@ public void testDataSets(VectorSchemaRoot root) {\n         assertFloat4VectorValues((Float4Vector) root.getVector(table.getVector()), table.getValues().length,\n             table.getFloatValues());\n         break;\n+      default:\n+        // do nothing\n+        break;\n     }\n   }\n }\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\nindex 7784b8ad57..07d313cf9b 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\n@@ -115,6 +115,9 @@ public void testDataSets(VectorSchemaRoot root) {\n       case SELECTED_NULL_COLUMN:\n         sqlToArrowTestSelectedNullColumnsValues(table.getVectors(), root, table.getRowCount());\n         break;\n+      default:\n+        // do nothing\n+        break;\n     }\n   }\n \ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\nindex c27e4d33b0..780b65c93b 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\n@@ -132,6 +132,9 @@ public void testDataSets(VectorSchemaRoot root) {\n         assertTimeStampVectorValues((TimeStampVector) root.getVector(table.getVector()), table.getValues().length,\n             table.getLongValues());\n         break;\n+      default:\n+        // do nothing\n+        break;\n     }\n   }\n \ndiff --git a/java/dev/checkstyle/checkstyle.xml b/java/dev/checkstyle/checkstyle.xml\nindex 9ed5e3cc19..9fdf8e2171 100644\n--- a/java/dev/checkstyle/checkstyle.xml\n+++ b/java/dev/checkstyle/checkstyle.xml\n@@ -247,7 +247,7 @@\n             <property name=\"ignoreInlineTags\" value=\"false\"/>\n         </module>\n         <module name=\"EmptyCatchBlock\">\n-            <property name=\"exceptionVariableName\" value=\"expected\"/>\n+            <property name=\"exceptionVariableName\" value=\"expected|ignore\"/>\n         </module>\n         <module name=\"CommentsIndentation\"/>\n     </module>\ndiff --git a/java/dev/checkstyle/suppressions.xml b/java/dev/checkstyle/suppressions.xml\nindex e4cb520192..46189a8fa4 100644\n--- a/java/dev/checkstyle/suppressions.xml\n+++ b/java/dev/checkstyle/suppressions.xml\n@@ -33,10 +33,9 @@\n   <suppress checks=\"Header\" files=\"AutoCloseables.java|Collections2.java\" />\n \n   <!-- TODO: Temporarily suppress Javadoc checks -->\n-  <suppress checks=\"Javadoc.*\" files=\".*\" />\n+  <suppress checks=\"javadoc.*\" files=\".*\" />\n+\n+  <!-- TODO: Temporarily suppress certain check requiring many code changes -->\n+  <suppress checks=\"NoFinalizer|OverloadMethodsDeclarationOrder|VariableDeclarationUsageDistance\" files=\".*\" />\n \n-  <!-- TODO: Temporarily suppress all but certain checks to fix in increments -->\n-  <suppress\n-    checks=\"^(?!.*(Header|ImportOrder|LineLength|Indentation|OperatorWrapCheck|SeparatorWrapCheck|NewlineAtEndOfFileCheck|WhitespaceAroundCheck|EmptyLineSeparatorCheck|LocalVariableNameCheck|CatchParameterNameCheck|ParameterNameCheck|MemberNameCheck|ClassTypeParameterName|MethodTypeParameterName|InterfaceTypeParameterName)).*\"\n-    files=\".*\" />\n </suppressions>\ndiff --git a/java/flight/src/main/java/org/apache/arrow/flight/FlightClient.java b/java/flight/src/main/java/org/apache/arrow/flight/FlightClient.java\nindex 7993938a0c..7f3daa4316 100644\n--- a/java/flight/src/main/java/org/apache/arrow/flight/FlightClient.java\n+++ b/java/flight/src/main/java/org/apache/arrow/flight/FlightClient.java\n@@ -55,7 +55,7 @@\n import io.grpc.stub.StreamObserver;\n \n public class FlightClient implements AutoCloseable {\n-  private final static int PENDING_REQUESTS = 5;\n+  private static final int PENDING_REQUESTS = 5;\n   private final BufferAllocator allocator;\n   private final ManagedChannel channel;\n   private final FlightServiceBlockingStub blockingStub;\ndiff --git a/java/flight/src/main/java/org/apache/arrow/flight/FlightService.java b/java/flight/src/main/java/org/apache/arrow/flight/FlightService.java\nindex 0ffda6ee00..9149912313 100644\n--- a/java/flight/src/main/java/org/apache/arrow/flight/FlightService.java\n+++ b/java/flight/src/main/java/org/apache/arrow/flight/FlightService.java\n@@ -46,7 +46,7 @@\n class FlightService extends FlightServiceImplBase {\n \n   private static final Logger logger = LoggerFactory.getLogger(FlightService.class);\n-  private final static int PENDING_REQUESTS = 5;\n+  private static final int PENDING_REQUESTS = 5;\n \n   private final BufferAllocator allocator;\n   private final FlightProducer producer;\ndiff --git a/java/flight/src/main/java/org/apache/arrow/flight/auth/AuthConstants.java b/java/flight/src/main/java/org/apache/arrow/flight/auth/AuthConstants.java\nindex 4493bac43f..26b6f5004a 100644\n--- a/java/flight/src/main/java/org/apache/arrow/flight/auth/AuthConstants.java\n+++ b/java/flight/src/main/java/org/apache/arrow/flight/auth/AuthConstants.java\n@@ -25,7 +25,7 @@\n \n public final class AuthConstants {\n \n-  public final static String HANDSHAKE_DESCRIPTOR_NAME = MethodDescriptor\n+  public static final String HANDSHAKE_DESCRIPTOR_NAME = MethodDescriptor\n       .generateFullMethodName(FlightConstants.SERVICE, \"Handshake\");\n   public static final String TOKEN_NAME = \"Auth-Token-bin\";\n   public static final Key<byte[]> TOKEN_KEY = Key.of(TOKEN_NAME, new BinaryMarshaller<byte[]>() {\ndiff --git a/java/flight/src/main/java/org/apache/arrow/flight/example/InMemoryStore.java b/java/flight/src/main/java/org/apache/arrow/flight/example/InMemoryStore.java\nindex 289db61b0a..af7445fb41 100644\n--- a/java/flight/src/main/java/org/apache/arrow/flight/example/InMemoryStore.java\n+++ b/java/flight/src/main/java/org/apache/arrow/flight/example/InMemoryStore.java\n@@ -135,9 +135,9 @@ public Result doAction(Action action) {\n       case \"drop\":\n         return new Result(new byte[0]);\n         // not implemented.\n+      default:\n+        throw new UnsupportedOperationException();\n     }\n-\n-    throw new UnsupportedOperationException();\n   }\n \n   @Override\ndiff --git a/java/flight/src/test/java/org/apache/arrow/flight/TestBackPressure.java b/java/flight/src/test/java/org/apache/arrow/flight/TestBackPressure.java\nindex e010dcde3c..6b23a40f29 100644\n--- a/java/flight/src/test/java/org/apache/arrow/flight/TestBackPressure.java\n+++ b/java/flight/src/test/java/org/apache/arrow/flight/TestBackPressure.java\n@@ -53,13 +53,13 @@ public void ensureIndependentSteams() throws Exception {\n       server.start();\n \n       FlightStream fs1 = client.getStream(client.getInfo(\n-          TestPerf.getPerfFlightDescriptor(110l * BATCH_SIZE, BATCH_SIZE, 1))\n+          TestPerf.getPerfFlightDescriptor(110L * BATCH_SIZE, BATCH_SIZE, 1))\n           .getEndpoints().get(0).getTicket());\n       consume(fs1, 10);\n \n       // stop consuming fs1 but make sure we can consume a large amount of fs2.\n       FlightStream fs2 = client.getStream(client.getInfo(\n-          TestPerf.getPerfFlightDescriptor(200l * BATCH_SIZE, BATCH_SIZE, 1))\n+          TestPerf.getPerfFlightDescriptor(200L * BATCH_SIZE, BATCH_SIZE, 1))\n           .getEndpoints().get(0).getTicket());\n       consume(fs2, 100);\n \n@@ -100,8 +100,8 @@ public void getStream(Ticket ticket, ServerStreamListener listener) {\n             while (!listener.isReady()) {\n               try {\n                 Thread.sleep(1);\n-                sleepTime.addAndGet(1l);\n-              } catch (InterruptedException e) {\n+                sleepTime.addAndGet(1L);\n+              } catch (InterruptedException ignore) {\n               }\n             }\n \ndiff --git a/java/flight/src/test/java/org/apache/arrow/flight/perf/TestPerf.java b/java/flight/src/test/java/org/apache/arrow/flight/perf/TestPerf.java\nindex 9ada28ad02..220f4bbe68 100644\n--- a/java/flight/src/test/java/org/apache/arrow/flight/perf/TestPerf.java\n+++ b/java/flight/src/test/java/org/apache/arrow/flight/perf/TestPerf.java\n@@ -86,7 +86,7 @@ public void throughput() throws Exception {\n \n         server.start();\n \n-        final FlightInfo info = client.getInfo(getPerfFlightDescriptor(50_000_000l, 4095, 2));\n+        final FlightInfo info = client.getInfo(getPerfFlightDescriptor(50_000_000L, 4095, 2));\n         ListeningExecutorService pool = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(4));\n         List<ListenableFuture<Result>> results = info.getEndpoints()\n             .stream()\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/BaseEvaluatorTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/BaseEvaluatorTest.java\nindex b3fcbd92e3..aeb3d418a7 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/BaseEvaluatorTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/BaseEvaluatorTest.java\n@@ -40,138 +40,138 @@\n \n import io.netty.buffer.ArrowBuf;\n \n-interface BaseEvaluator {\n+class BaseEvaluatorTest {\n \n-  void evaluate(ArrowRecordBatch recordBatch, BufferAllocator allocator) throws GandivaException;\n+  interface BaseEvaluator {\n \n-  long getElapsedMillis();\n-}\n+    void evaluate(ArrowRecordBatch recordBatch, BufferAllocator allocator) throws GandivaException;\n \n-class ProjectEvaluator implements BaseEvaluator {\n-\n-  private Projector projector;\n-  private DataAndVectorGenerator generator;\n-  private int numExprs;\n-  private int maxRowsInBatch;\n-  private long elapsedTime = 0;\n-  private List<ValueVector> outputVectors = new ArrayList<>();\n-\n-  public ProjectEvaluator(Projector projector,\n-      DataAndVectorGenerator generator,\n-      int numExprs,\n-      int maxRowsInBatch) {\n-    this.projector = projector;\n-    this.generator = generator;\n-    this.numExprs = numExprs;\n-    this.maxRowsInBatch = maxRowsInBatch;\n+    long getElapsedMillis();\n   }\n \n-  @Override\n-  public void evaluate(ArrowRecordBatch recordBatch,\n-      BufferAllocator allocator) throws GandivaException {\n-    // set up output vectors\n-    // for each expression, generate the output vector\n-    for (int i = 0; i < numExprs; i++) {\n-      ValueVector valueVector = generator.generateOutputVector(maxRowsInBatch);\n-      outputVectors.add(valueVector);\n+  class ProjectEvaluator implements BaseEvaluator {\n+\n+    private Projector projector;\n+    private DataAndVectorGenerator generator;\n+    private int numExprs;\n+    private int maxRowsInBatch;\n+    private long elapsedTime = 0;\n+    private List<ValueVector> outputVectors = new ArrayList<>();\n+\n+    public ProjectEvaluator(Projector projector,\n+                            DataAndVectorGenerator generator,\n+                            int numExprs,\n+                            int maxRowsInBatch) {\n+      this.projector = projector;\n+      this.generator = generator;\n+      this.numExprs = numExprs;\n+      this.maxRowsInBatch = maxRowsInBatch;\n     }\n \n-    try {\n-      long start = System.nanoTime();\n-      projector.evaluate(recordBatch, outputVectors);\n-      long finish = System.nanoTime();\n-      elapsedTime += (finish - start);\n-    } finally {\n-      for (ValueVector valueVector : outputVectors) {\n-        valueVector.close();\n+    @Override\n+    public void evaluate(ArrowRecordBatch recordBatch,\n+                         BufferAllocator allocator) throws GandivaException {\n+      // set up output vectors\n+      // for each expression, generate the output vector\n+      for (int i = 0; i < numExprs; i++) {\n+        ValueVector valueVector = generator.generateOutputVector(maxRowsInBatch);\n+        outputVectors.add(valueVector);\n       }\n+\n+      try {\n+        long start = System.nanoTime();\n+        projector.evaluate(recordBatch, outputVectors);\n+        long finish = System.nanoTime();\n+        elapsedTime += (finish - start);\n+      } finally {\n+        for (ValueVector valueVector : outputVectors) {\n+          valueVector.close();\n+        }\n+      }\n+      outputVectors.clear();\n     }\n-    outputVectors.clear();\n-  }\n \n-  @Override\n-  public long getElapsedMillis() {\n-    return TimeUnit.NANOSECONDS.toMillis(elapsedTime);\n+    @Override\n+    public long getElapsedMillis() {\n+      return TimeUnit.NANOSECONDS.toMillis(elapsedTime);\n+    }\n   }\n-}\n-\n-class FilterEvaluator implements BaseEvaluator {\n \n-  private Filter filter;\n-  private long elapsedTime = 0;\n+  class FilterEvaluator implements BaseEvaluator {\n \n-  public FilterEvaluator(Filter filter) {\n-    this.filter = filter;\n-  }\n+    private Filter filter;\n+    private long elapsedTime = 0;\n \n-  @Override\n-  public void evaluate(ArrowRecordBatch recordBatch,\n-      BufferAllocator allocator) throws GandivaException {\n-    ArrowBuf selectionBuffer = allocator.buffer(recordBatch.getLength() * 2);\n-    SelectionVectorInt16 selectionVector = new SelectionVectorInt16(selectionBuffer);\n+    public FilterEvaluator(Filter filter) {\n+      this.filter = filter;\n+    }\n \n-    try {\n-      long start = System.nanoTime();\n-      filter.evaluate(recordBatch, selectionVector);\n-      long finish = System.nanoTime();\n-      elapsedTime += (finish - start);\n-    } finally {\n-      selectionBuffer.close();\n+    @Override\n+    public void evaluate(ArrowRecordBatch recordBatch,\n+                         BufferAllocator allocator) throws GandivaException {\n+      ArrowBuf selectionBuffer = allocator.buffer(recordBatch.getLength() * 2);\n+      SelectionVectorInt16 selectionVector = new SelectionVectorInt16(selectionBuffer);\n+\n+      try {\n+        long start = System.nanoTime();\n+        filter.evaluate(recordBatch, selectionVector);\n+        long finish = System.nanoTime();\n+        elapsedTime += (finish - start);\n+      } finally {\n+        selectionBuffer.close();\n+      }\n     }\n-  }\n \n-  @Override\n-  public long getElapsedMillis() {\n-    return TimeUnit.NANOSECONDS.toMillis(elapsedTime);\n+    @Override\n+    public long getElapsedMillis() {\n+      return TimeUnit.NANOSECONDS.toMillis(elapsedTime);\n+    }\n   }\n-}\n \n-interface DataAndVectorGenerator {\n+  interface DataAndVectorGenerator {\n \n-  public void writeData(ArrowBuf buffer);\n+    public void writeData(ArrowBuf buffer);\n \n-  public ValueVector generateOutputVector(int numRowsInBatch);\n-}\n+    public ValueVector generateOutputVector(int numRowsInBatch);\n+  }\n \n-class Int32DataAndVectorGenerator implements DataAndVectorGenerator {\n+  class Int32DataAndVectorGenerator implements DataAndVectorGenerator {\n \n-  protected final BufferAllocator allocator;\n-  protected final Random rand;\n+    protected final BufferAllocator allocator;\n+    protected final Random rand;\n \n-  Int32DataAndVectorGenerator(BufferAllocator allocator) {\n-    this.allocator = allocator;\n-    this.rand = new Random();\n-  }\n+    Int32DataAndVectorGenerator(BufferAllocator allocator) {\n+      this.allocator = allocator;\n+      this.rand = new Random();\n+    }\n \n-  @Override\n-  public void writeData(ArrowBuf buffer) {\n-    buffer.writeInt(rand.nextInt());\n-  }\n+    @Override\n+    public void writeData(ArrowBuf buffer) {\n+      buffer.writeInt(rand.nextInt());\n+    }\n \n-  @Override\n-  public ValueVector generateOutputVector(int numRowsInBatch) {\n-    IntVector intVector = new IntVector(BaseEvaluatorTest.EMPTY_SCHEMA_PATH, allocator);\n-    intVector.allocateNew(numRowsInBatch);\n-    return intVector;\n+    @Override\n+    public ValueVector generateOutputVector(int numRowsInBatch) {\n+      IntVector intVector = new IntVector(BaseEvaluatorTest.EMPTY_SCHEMA_PATH, allocator);\n+      intVector.allocateNew(numRowsInBatch);\n+      return intVector;\n+    }\n   }\n-}\n \n-class BoundedInt32DataAndVectorGenerator extends Int32DataAndVectorGenerator {\n+  class BoundedInt32DataAndVectorGenerator extends Int32DataAndVectorGenerator {\n \n-  private final int upperBound;\n+    private final int upperBound;\n \n-  BoundedInt32DataAndVectorGenerator(BufferAllocator allocator, int upperBound) {\n-    super(allocator);\n-    this.upperBound = upperBound;\n-  }\n+    BoundedInt32DataAndVectorGenerator(BufferAllocator allocator, int upperBound) {\n+      super(allocator);\n+      this.upperBound = upperBound;\n+    }\n \n-  @Override\n-  public void writeData(ArrowBuf buffer) {\n-    buffer.writeInt(rand.nextInt(upperBound));\n+    @Override\n+    public void writeData(ArrowBuf buffer) {\n+      buffer.writeInt(rand.nextInt(upperBound));\n+    }\n   }\n-}\n-\n-class BaseEvaluatorTest {\n \n   protected static final int THOUSAND = 1000;\n   protected static final int MILLION = THOUSAND * THOUSAND;\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\nindex ec4f271b44..7c56f21741 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\n@@ -365,7 +365,7 @@ public void testDivZeroParallel() throws GandivaException, InterruptedException\n           releaseRecordBatch(batch);\n           releaseValueVectors(output);\n           evaluator.close();\n-        } catch (GandivaException e) {\n+        } catch (GandivaException ignore) {\n         }\n       });\n     });\ndiff --git a/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java b/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java\nindex 11f109ea59..94e07bee08 100644\n--- a/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java\n+++ b/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java\n@@ -135,21 +135,21 @@ public short getShort(int index) {\n   @Override\n   public ByteBuf setShort(int index, int value) {\n     wrapped.checkIndex(index, 2);\n-    _setShort(index, value);\n+    setShort_(index, value);\n     return this;\n   }\n \n   @Override\n   public ByteBuf setInt(int index, int value) {\n     wrapped.checkIndex(index, 4);\n-    _setInt(index, value);\n+    setInt_(index, value);\n     return this;\n   }\n \n   @Override\n   public ByteBuf setLong(int index, long value) {\n     wrapped.checkIndex(index, 8);\n-    _setLong(index, value);\n+    setLong_(index, value);\n     return this;\n   }\n \n@@ -174,7 +174,7 @@ public ByteBuf setDouble(int index, double value) {\n   @Override\n   public ByteBuf writeShort(int value) {\n     wrapped.ensureWritable(2);\n-    _setShort(wrapped.writerIndex, value);\n+    setShort_(wrapped.writerIndex, value);\n     wrapped.writerIndex += 2;\n     return this;\n   }\n@@ -182,7 +182,7 @@ public ByteBuf writeShort(int value) {\n   @Override\n   public ByteBuf writeInt(int value) {\n     wrapped.ensureWritable(4);\n-    _setInt(wrapped.writerIndex, value);\n+    setInt_(wrapped.writerIndex, value);\n     wrapped.writerIndex += 4;\n     return this;\n   }\n@@ -190,7 +190,7 @@ public ByteBuf writeInt(int value) {\n   @Override\n   public ByteBuf writeLong(long value) {\n     wrapped.ensureWritable(8);\n-    _setLong(wrapped.writerIndex, value);\n+    setLong_(wrapped.writerIndex, value);\n     wrapped.writerIndex += 8;\n     return this;\n   }\n@@ -213,15 +213,15 @@ public ByteBuf writeDouble(double value) {\n     return this;\n   }\n \n-  private void _setShort(int index, int value) {\n+  private void setShort_(int index, int value) {\n     PlatformDependent.putShort(addr(index), (short) value);\n   }\n \n-  private void _setInt(int index, int value) {\n+  private void setInt_(int index, int value) {\n     PlatformDependent.putInt(addr(index), value);\n   }\n \n-  private void _setLong(int index, long value) {\n+  private void setLong_(int index, long value) {\n     PlatformDependent.putLong(addr(index), value);\n   }\n \ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\nindex 597977e60e..ce74690459 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n@@ -775,9 +775,8 @@ public void close() {\n             final StringBuilder sb = new StringBuilder();\n             print(sb, 0, Verbosity.LOG_WITH_STACKTRACE);\n             logger.debug(sb.toString());\n-            throw new IllegalStateException(\n-                String.format(\"Didn't find closing reservation[%d]\", System.identityHashCode\n-                    (this)));\n+            throw new IllegalStateException(String.format(\"Didn't find closing reservation[%d]\",\n+                System.identityHashCode(this)));\n           }\n \n           historicalLog.recordEvent(\"closed\");\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java b/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\nindex 26f42441c5..c59e28e6c6 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\n@@ -255,8 +255,11 @@ public V remove(K key) {\n     Preconditions.checkNotNull(key);\n \n     boolean hashedOk;\n-    int index, next, hash;\n-    Object result, object;\n+    int index;\n+    int next;\n+    int hash;\n+    Object result;\n+    Object object;\n     index = next = findIndex(key, elementData);\n \n     if (elementData[index] == null || ((V)elementData[index]).getKey() != key) {\ndiff --git a/java/memory/src/test/java/io/netty/buffer/TestArrowBuf.java b/java/memory/src/test/java/io/netty/buffer/TestArrowBuf.java\nindex ddee00bf85..3171a228ce 100644\n--- a/java/memory/src/test/java/io/netty/buffer/TestArrowBuf.java\n+++ b/java/memory/src/test/java/io/netty/buffer/TestArrowBuf.java\n@@ -29,7 +29,7 @@\n \n public class TestArrowBuf {\n \n-  private final static int MAX_ALLOCATION = 8 * 1024;\n+  private static final int MAX_ALLOCATION = 8 * 1024;\n   private static RootAllocator allocator;\n   \n   @BeforeClass\ndiff --git a/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java b/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\nindex 7ea695ace0..56e85e4e51 100644\n--- a/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n+++ b/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n@@ -31,7 +31,7 @@\n \n public class TestBaseAllocator {\n \n-  private final static int MAX_ALLOCATION = 8 * 1024;\n+  private static final int MAX_ALLOCATION = 8 * 1024;\n \n   /*\n   // ---------------------------------------- DEBUG -----------------------------------\ndiff --git a/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java b/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java\nindex 5dbccbdf85..36a5ceac68 100644\n--- a/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java\n+++ b/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java\n@@ -24,27 +24,27 @@\n  */\n public class PlasmaClientJNI {\n \n-  native public static long connect(String storeSocketName, String managerSocketName, int releaseDelay);\n+  public static native long connect(String storeSocketName, String managerSocketName, int releaseDelay);\n \n-  native public static void disconnect(long conn);\n+  public static native void disconnect(long conn);\n \n-  native public static ByteBuffer create(long conn, byte[] objectId, int size, byte[] metadata);\n+  public static native ByteBuffer create(long conn, byte[] objectId, int size, byte[] metadata);\n \n-  native public static byte[] hash(long conn, byte[] objectId);\n+  public static native byte[] hash(long conn, byte[] objectId);\n \n-  native public static void seal(long conn, byte[] objectId);\n+  public static native void seal(long conn, byte[] objectId);\n \n-  native public static void release(long conn, byte[] objectId);\n+  public static native void release(long conn, byte[] objectId);\n \n-  native public static ByteBuffer[][] get(long conn, byte[][] objectIds, int timeoutMs);\n+  public static native ByteBuffer[][] get(long conn, byte[][] objectIds, int timeoutMs);\n \n-  native public static boolean contains(long conn, byte[] objectId);\n+  public static native boolean contains(long conn, byte[] objectId);\n \n-  native public static void fetch(long conn, byte[][] objectIds);\n+  public static native void fetch(long conn, byte[][] objectIds);\n \n-  native public static byte[][] wait(long conn, byte[][] objectIds, int timeoutMs,\n+  public static native byte[][] wait(long conn, byte[][] objectIds, int timeoutMs,\n       int numReturns);\n \n-  native public static long evict(long conn, long numBytes);\n+  public static native long evict(long conn, long numBytes);\n \n }\ndiff --git a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\nindex 8b42952f62..a6e4982fc7 100644\n--- a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n+++ b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n@@ -44,8 +44,7 @@ public PlasmaClientTest() throws Exception {\n       this.startObjectStore(plasmaStorePath);\n       System.loadLibrary(\"plasma_java\");\n       pLink = new PlasmaClient(this.getStoreAddress(), \"\", 0);\n-    }\n-    catch (Throwable t) {\n+    } catch (Throwable t) {\n       cleanup();\n       throw t;\n     }\ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/Integration.java b/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\nindex 38a7a5dd94..501276e628 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\n@@ -227,7 +227,7 @@ public void execute(File arrowFile, File jsonFile) throws IOException {\n       this.jsonExists = jsonExists;\n     }\n \n-    abstract public void execute(File arrowFile, File jsonFile) throws IOException;\n+    public abstract void execute(File arrowFile, File jsonFile) throws IOException;\n \n   }\n \ndiff --git a/java/tools/src/test/java/org/apache/arrow/tools/TestIntegration.java b/java/tools/src/test/java/org/apache/arrow/tools/TestIntegration.java\nindex 6ffc84a63a..774a485348 100644\n--- a/java/tools/src/test/java/org/apache/arrow/tools/TestIntegration.java\n+++ b/java/tools/src/test/java/org/apache/arrow/tools/TestIntegration.java\n@@ -172,7 +172,8 @@ public void testJSONRoundTripWithVariableWidth() throws Exception {\n \n     BufferedReader orig = readNormalized(testJSONFile);\n     BufferedReader rt = readNormalized(testRoundTripJSONFile);\n-    String i, o;\n+    String i;\n+    String o;\n     int j = 0;\n     while ((i = orig.readLine()) != null && (o = rt.readLine()) != null) {\n       assertEquals(\"line: \" + j, i, o);\n@@ -202,7 +203,8 @@ public void testJSONRoundTripWithStruct() throws Exception {\n \n     BufferedReader orig = readNormalized(testJSONFile);\n     BufferedReader rt = readNormalized(testRoundTripJSONFile);\n-    String i, o;\n+    String i;\n+    String o;\n     int j = 0;\n     while ((i = orig.readLine()) != null && (o = rt.readLine()) != null) {\n       assertEquals(\"line: \" + j, i, o);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BufferLayout.java b/java/vector/src/main/java/org/apache/arrow/vector/BufferLayout.java\nindex f2d11b4efc..5b45989a57 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BufferLayout.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BufferLayout.java\n@@ -27,7 +27,7 @@\n     VALIDITY(\"VALIDITY\"),\n     TYPE(\"TYPE\");\n \n-    final private String name;\n+    private final String name;\n \n     BufferType(String name) {\n       this.name = name;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java\nindex 52f8edfebb..aad7080f00 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java\n@@ -38,7 +38,7 @@\n import io.netty.buffer.ArrowBuf;\n \n public class ZeroVector implements FieldVector {\n-  public final static ZeroVector INSTANCE = new ZeroVector();\n+  public static final ZeroVector INSTANCE = new ZeroVector();\n \n   private final TransferPair defaultPair = new TransferPair() {\n     @Override\n@@ -219,17 +219,26 @@ public ArrowBuf getOffsetBuffer() {\n   }\n \n   @Override\n-  public int getValueCount() { return 0; }\n+  public int getValueCount() {\n+    return 0;\n+  }\n \n   @Override\n-  public void setValueCount(int valueCount) { }\n+  public void setValueCount(int valueCount) {\n+  }\n \n   @Override\n-  public Object getObject(int index) { return null; }\n+  public Object getObject(int index) {\n+    return null;\n+  }\n \n   @Override\n-  public int getNullCount() { return 0; }\n+  public int getNullCount() {\n+    return 0;\n+  }\n \n   @Override\n-  public boolean isNull(int index) { return false; }\n+  public boolean isNull(int index) {\n+    return false;\n+  }\n }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\nindex fcd9b96d2a..7aff2abbec 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/BaseRepeatedValueVector.java\n@@ -45,10 +45,10 @@\n \n public abstract class BaseRepeatedValueVector extends BaseValueVector implements RepeatedValueVector {\n \n-  public final static FieldVector DEFAULT_DATA_VECTOR = ZeroVector.INSTANCE;\n-  public final static String DATA_VECTOR_NAME = \"$data$\";\n+  public static final FieldVector DEFAULT_DATA_VECTOR = ZeroVector.INSTANCE;\n+  public static final String DATA_VECTOR_NAME = \"$data$\";\n \n-  public final static byte OFFSET_WIDTH = 4;\n+  public static final byte OFFSET_WIDTH = 4;\n   protected ArrowBuf offsetBuffer;\n   protected FieldVector vector;\n   protected final CallBack callBack;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java\nindex 560bf400ae..fd8b766177 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java\n@@ -26,7 +26,9 @@\n import java.util.Map;\n \n import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.*;\n+import org.apache.arrow.vector.DensityAwareVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ValueVector;\n import org.apache.arrow.vector.complex.impl.SingleStructReaderImpl;\n import org.apache.arrow.vector.complex.reader.FieldReader;\n import org.apache.arrow.vector.holders.ComplexHolder;\n@@ -68,7 +70,7 @@ public FieldReader getReader() {\n     return reader;\n   }\n \n-  transient private StructTransferPair ephPair;\n+  private transient StructTransferPair ephPair;\n \n   public void copyFromSafe(int fromIndex, int thisIndex, NonNullableStructVector from) {\n     if (ephPair == null || ephPair.from != from) {\n@@ -264,10 +266,14 @@ public Object getObject(int index) {\n   }\n \n   @Override\n-  public boolean isNull(int index) { return false; }\n+  public boolean isNull(int index) {\n+    return false;\n+  }\n \n   @Override\n-  public int getNullCount() { return 0; }\n+  public int getNullCount() {\n+    return 0;\n+  }\n \n   public void get(int index, ComplexHolder holder) {\n     reader.setPosition(index);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java\nindex 059280f3e7..d6f0942250 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java\n@@ -30,7 +30,7 @@\n  */\n public interface RepeatedValueVector extends ValueVector, DensityAwareVector {\n \n-  final static int DEFAULT_REPEAT_PER_RECORD = 5;\n+  static final int DEFAULT_REPEAT_PER_RECORD = 5;\n \n   /**\n    * @return the underlying offset vector or null if none exists.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\nindex 980b9242ae..96e0be825c 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\n@@ -96,6 +96,8 @@ public void clear() {\n       case LIST:\n         listRoot.clear();\n         break;\n+      default:\n+        throw new RuntimeException(\"Unexpected mode:\" + mode);\n     }\n   }\n \n@@ -108,6 +110,8 @@ public void setValueCount(int count) {\n       case LIST:\n         listRoot.setValueCount(count);\n         break;\n+      default:\n+        throw new RuntimeException(\"Unexpected mode:\" + mode);\n     }\n   }\n \n@@ -121,6 +125,8 @@ public void setPosition(int index) {\n       case LIST:\n         listRoot.setPosition(index);\n         break;\n+      default:\n+        throw new RuntimeException(\"Unexpected mode:\" + mode);\n     }\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\nindex 539649f206..ece11a3f6f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n@@ -48,7 +48,7 @@\n   private final ListVector listVector;\n   private final NullableStructWriterFactory nullableStructWriterFactory;\n   private int position;\n-  private final static int MAX_DECIMAL_PRECISION = 38;\n+  private static final int MAX_DECIMAL_PRECISION = 38;\n \n   private enum State {\n     UNTYPED, SINGLE, UNION\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\nindex 56dfb376bd..f5948777cd 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n@@ -204,7 +204,7 @@ public VectorSchemaRoot read() throws IOException {\n   }\n \n   private abstract class BufferReader {\n-    abstract protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException;\n+    protected abstract ArrowBuf read(BufferAllocator allocator, int count) throws IOException;\n \n     ArrowBuf readBuffer(BufferAllocator allocator, int count) throws IOException {\n       readToken(START_ARRAY);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\nindex c36a128685..92a63dc64b 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n@@ -122,7 +122,8 @@ public static Field convertField(org.apache.arrow.flatbuf.Field field) {\n     Map<String, String> metadata = new HashMap<>();\n     for (int i = 0; i < field.customMetadataLength(); i++) {\n       KeyValue kv = field.customMetadata(i);\n-      String key = kv.key(), value = kv.value();\n+      String key = kv.key();\n+      String value = kv.value();\n       metadata.put(key == null ? \"\" : key, value == null ? \"\" : value);\n     }\n     metadata = Collections.unmodifiableMap(metadata);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Schema.java b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Schema.java\nindex c5ecdb5a16..7f6c7f36f0 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Schema.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Schema.java\n@@ -85,7 +85,8 @@ public static Schema convertSchema(org.apache.arrow.flatbuf.Schema schema) {\n     Map<String, String> metadata = new HashMap<>();\n     for (int i = 0; i < schema.customMetadataLength(); i++) {\n       KeyValue kv = schema.customMetadata(i);\n-      String key = kv.key(), value = kv.value();\n+      String key = kv.key();\n+      String value = kv.value();\n       metadata.put(key == null ? \"\" : key, value == null ? \"\" : value);\n     }\n     return new Schema(Collections2.immutableListCopy(fields), Collections2.immutableMapCopy(metadata));\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java b/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java\nindex f6b5133cd7..e5c72ecefb 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java\n@@ -25,12 +25,12 @@\n \n public class DecimalUtility {\n \n-  public final static int MAX_DIGITS = 9;\n-  public final static int DIGITS_BASE = 1000000000;\n-  public final static int DIGITS_MAX = 999999999;\n-  public final static int INTEGER_SIZE = (Integer.SIZE / 8);\n+  public static final int MAX_DIGITS = 9;\n+  public static final int DIGITS_BASE = 1000000000;\n+  public static final int DIGITS_MAX = 999999999;\n+  public static final int INTEGER_SIZE = (Integer.SIZE / 8);\n \n-  public final static String[] decimalToString = {\"\",\n+  public static final String[] decimalToString = {\"\",\n       \"0\",\n       \"00\",\n       \"000\",\n@@ -41,7 +41,7 @@\n       \"00000000\",\n       \"000000000\"};\n \n-  public final static long[] scale_long_constants = {\n+  public static final long[] scale_long_constants = {\n       1,\n       10,\n       100,\n@@ -52,15 +52,15 @@\n       10000000,\n       100000000,\n       1000000000,\n-      10000000000l,\n-      100000000000l,\n-      1000000000000l,\n-      10000000000000l,\n-      100000000000000l,\n-      1000000000000000l,\n-      10000000000000000l,\n-      100000000000000000l,\n-      1000000000000000000l};\n+      10000000000L,\n+      100000000000L,\n+      1000000000000L,\n+      10000000000000L,\n+      100000000000000L,\n+      1000000000000000L,\n+      10000000000000000L,\n+      100000000000000000L,\n+      1000000000000000000L};\n \n   public static final int DECIMAL_BYTE_LENGTH = 16;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java b/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java\nindex 9cef3a6870..d4fbc41d82 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java\n@@ -53,7 +53,7 @@\n  */\n \n public class MapWithOrdinal<K, V> implements Map<K, V> {\n-  private final static Logger logger = LoggerFactory.getLogger(MapWithOrdinal.class);\n+  private static final Logger logger = LoggerFactory.getLogger(MapWithOrdinal.class);\n \n   private final Map<K, Entry<Integer, V>> primary = new HashMap<>();\n   private final IntObjectHashMap<V> secondary = new IntObjectHashMap<>();\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java b/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\nindex 42211f03d7..65c1ddf0cb 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\n@@ -454,7 +454,7 @@ public static ByteBuffer encode(String string, boolean replace)\n     return bytes;\n   }\n \n-  static final public int DEFAULT_MAX_LEN = 1024 * 1024;\n+  public static final int DEFAULT_MAX_LEN = 1024 * 1024;\n \n   // //// states for validateUTF8\n \n@@ -601,29 +601,35 @@ public static int bytesToCodePoint(ByteBuffer bytes) {\n       case 5:\n         ch += (bytes.get() & 0xFF);\n         ch <<= 6; /* remember, illegal UTF-8 */\n+        // fall through\n       case 4:\n         ch += (bytes.get() & 0xFF);\n         ch <<= 6; /* remember, illegal UTF-8 */\n+        // fall through\n       case 3:\n         ch += (bytes.get() & 0xFF);\n         ch <<= 6;\n+        // fall through\n       case 2:\n         ch += (bytes.get() & 0xFF);\n         ch <<= 6;\n+        // fall through\n       case 1:\n         ch += (bytes.get() & 0xFF);\n         ch <<= 6;\n+        // fall through\n       case 0:\n         ch += (bytes.get() & 0xFF);\n+        break;\n+      default:  // do nothing\n     }\n     ch -= offsetsFromUTF8[extraBytesToRead];\n \n     return ch;\n   }\n \n-  static final int offsetsFromUTF8[] =\n-      {0x00000000, 0x00003080,\n-          0x000E2080, 0x03C82080, 0xFA082080, 0x82082080};\n+  static final int[] offsetsFromUTF8 =\n+      {0x00000000, 0x00003080, 0x000E2080, 0x03C82080, 0xFA082080, 0x82082080};\n \n   /**\n    * For the given string, returns the number of UTF-8 bytes required to encode the string.\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\nindex 273e682faf..fa96ac00f4 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\n@@ -30,7 +30,7 @@\n import org.junit.Test;\n \n public class TestBitVector {\n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \n@@ -237,8 +237,7 @@ public void testReallocAfterVectorTransfer1() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           assertEquals(\"unexpected cleared bit at index: \" + i, 1, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, vector.isNull(i));\n         }\n       }\n@@ -256,8 +255,7 @@ public void testReallocAfterVectorTransfer1() {\n       for (int i = 0; i < valueCapacity * 2; i++) {\n         if (((i & 1) == 1) || (i == valueCapacity)) {\n           assertEquals(\"unexpected cleared bit at index: \" + i, 1, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, vector.isNull(i));\n         }\n       }\n@@ -275,8 +273,7 @@ public void testReallocAfterVectorTransfer1() {\n       for (int i = 0; i < valueCapacity * 4; i++) {\n         if (((i & 1) == 1) || (i == valueCapacity) || (i == valueCapacity * 2)) {\n           assertEquals(\"unexpected cleared bit at index: \" + i, 1, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, vector.isNull(i));\n         }\n       }\n@@ -296,12 +293,10 @@ public void testReallocAfterVectorTransfer1() {\n           if (((i & 1) == 1) || (i == valueCapacity) ||\n                   (i == valueCapacity * 2) || (i == valueCapacity * 4)) {\n             assertEquals(\"unexpected cleared bit at index: \" + i, 1, toVector.get(i));\n-          }\n-          else {\n+          } else {\n             assertTrue(\"unexpected set bit at index: \" + i, toVector.isNull(i));\n           }\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, toVector.isNull(i));\n         }\n       }\n@@ -326,8 +321,7 @@ public void testReallocAfterVectorTransfer2() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           assertFalse(\"unexpected cleared bit at index: \" + i, vector.isNull(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, vector.isNull(i));\n         }\n       }\n@@ -345,8 +339,7 @@ public void testReallocAfterVectorTransfer2() {\n       for (int i = 0; i < valueCapacity * 2; i++) {\n         if (((i & 1) == 1) || (i == valueCapacity)) {\n           assertFalse(\"unexpected cleared bit at index: \" + i, vector.isNull(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, vector.isNull(i));\n         }\n       }\n@@ -364,8 +357,7 @@ public void testReallocAfterVectorTransfer2() {\n       for (int i = 0; i < valueCapacity * 4; i++) {\n         if (((i & 1) == 1) || (i == valueCapacity) || (i == valueCapacity * 2)) {\n           assertFalse(\"unexpected cleared bit at index: \" + i, vector.isNull(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, vector.isNull(i));\n         }\n       }\n@@ -385,12 +377,10 @@ public void testReallocAfterVectorTransfer2() {\n           if (((i & 1) == 1) || (i == valueCapacity) ||\n                   (i == valueCapacity * 2) || (i == valueCapacity * 4)) {\n             assertFalse(\"unexpected cleared bit at index: \" + i, toVector.isNull(i));\n-          }\n-          else {\n+          } else {\n             assertTrue(\"unexpected set bit at index: \" + i, toVector.isNull(i));\n           }\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected set bit at index: \" + i, toVector.isNull(i));\n         }\n       }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\nindex 6d2dd59d62..07d64b3841 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n@@ -53,7 +53,7 @@\n \n public class TestCopyFrom {\n \n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \n@@ -70,8 +70,8 @@ public void terminate() throws Exception {\n   @Test /* NullableVarChar */\n   public void testCopyFromWithNulls() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n-    {\n+         final VarCharVector vector2 =\n+             newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n       assertEquals(4095, capacity);\n@@ -130,8 +130,8 @@ public void testCopyFromWithNulls() {\n   @Test /* NullableVarChar */\n   public void testCopyFromWithNulls1() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n-    {\n+         final VarCharVector vector2 =\n+             newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n       assertEquals(4095, capacity);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java\nindex 3c5b7ca2c1..7f26b5c1b7 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestOutOfMemoryForValueVector.java\n@@ -29,7 +29,7 @@\n  */\n public class TestOutOfMemoryForValueVector {\n \n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestOversizedAllocationForValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestOversizedAllocationForValueVector.java\nindex 501e0c1b6d..14b65f2dfe 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestOversizedAllocationForValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestOversizedAllocationForValueVector.java\n@@ -34,7 +34,7 @@\n  */\n public class TestOversizedAllocationForValueVector {\n \n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java\nindex 5e865e5c6c..74c3765b89 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java\n@@ -38,7 +38,7 @@\n import io.netty.buffer.ArrowBuf;\n \n public class TestUnionVector {\n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \n@@ -339,22 +339,18 @@ public void testGetBufferAddress() throws Exception {\n \n       try {\n         long offsetAddress = vector.getOffsetBufferAddress();\n-      }\n-      catch (UnsupportedOperationException ue) {\n+      } catch (UnsupportedOperationException ue) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n \n       try {\n         long dataAddress = vector.getDataBufferAddress();\n-      }\n-      catch (UnsupportedOperationException ue) {\n+      } catch (UnsupportedOperationException ue) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n       }\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex 8bc0d28661..4772a86356 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -51,7 +51,7 @@\n \n public class TestValueVector {\n \n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \n@@ -60,16 +60,16 @@ public void init() {\n     allocator = new RootAllocator(Long.MAX_VALUE);\n   }\n \n-  private final static Charset utf8Charset = Charset.forName(\"UTF-8\");\n-  private final static byte[] STR1 = \"AAAAA1\".getBytes(utf8Charset);\n-  private final static byte[] STR2 = \"BBBBBBBBB2\".getBytes(utf8Charset);\n-  private final static byte[] STR3 = \"CCCC3\".getBytes(utf8Charset);\n-  private final static byte[] STR4 = \"DDDDDDDD4\".getBytes(utf8Charset);\n-  private final static byte[] STR5 = \"EEE5\".getBytes(utf8Charset);\n-  private final static byte[] STR6 = \"FFFFF6\".getBytes(utf8Charset);\n-  private final static int MAX_VALUE_COUNT =\n+  private static final Charset utf8Charset = Charset.forName(\"UTF-8\");\n+  private static final byte[] STR1 = \"AAAAA1\".getBytes(utf8Charset);\n+  private static final byte[] STR2 = \"BBBBBBBBB2\".getBytes(utf8Charset);\n+  private static final byte[] STR3 = \"CCCC3\".getBytes(utf8Charset);\n+  private static final byte[] STR4 = \"DDDDDDDD4\".getBytes(utf8Charset);\n+  private static final byte[] STR5 = \"EEE5\".getBytes(utf8Charset);\n+  private static final byte[] STR6 = \"FFFFF6\".getBytes(utf8Charset);\n+  private static final int MAX_VALUE_COUNT =\n             Integer.getInteger(\"arrow.vector.max_allocation_bytes\", Integer.MAX_VALUE) / 4;\n-  private final static int MAX_VALUE_COUNT_8BYTE = MAX_VALUE_COUNT / 2;\n+  private static final int MAX_VALUE_COUNT_8BYTE = MAX_VALUE_COUNT / 2;\n \n   @After\n   public void terminate() throws Exception {\n@@ -125,22 +125,18 @@ public void testFixedType1() {\n \n       try {\n         vector.set(1024, 10000);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n \n       try {\n         vector.get(1024);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -185,11 +181,9 @@ public void testFixedType2() {\n \n       try {\n         intVector.setInitialCapacity(MAX_VALUE_COUNT + 1);\n-      }\n-      catch (OversizedAllocationException oe) {\n+      } catch (OversizedAllocationException oe) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -212,11 +206,9 @@ public void testFixedType2() {\n \n       try {\n         intVector.set(16, 9);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -230,11 +222,9 @@ public void testFixedType2() {\n \n       try {\n         intVector.get(16);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -277,11 +267,9 @@ public void testFixedType3() {\n \n       try {\n         floatVector.setInitialCapacity(MAX_VALUE_COUNT + 1);\n-      }\n-      catch (OversizedAllocationException oe) {\n+      } catch (OversizedAllocationException oe) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -309,11 +297,9 @@ public void testFixedType3() {\n \n       try {\n         floatVector.set(16, 9.5f);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -330,11 +316,9 @@ public void testFixedType3() {\n \n       try {\n         floatVector.get(16);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -381,11 +365,9 @@ public void testFixedType4() {\n \n       try {\n         floatVector.setInitialCapacity(MAX_VALUE_COUNT_8BYTE + 1);\n-      }\n-      catch (OversizedAllocationException oe) {\n+      } catch (OversizedAllocationException oe) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -411,11 +393,9 @@ public void testFixedType4() {\n \n       try {\n         floatVector.set(16, 9.53);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -432,11 +412,9 @@ public void testFixedType4() {\n \n       try {\n         floatVector.get(16);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -515,22 +493,18 @@ public void testNullableFixedType1() {\n \n       try {\n         vector.set(1024, 10000);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n \n       try {\n         vector.get(1024);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -600,11 +574,9 @@ public void testNullableFixedType2() {\n \n       try {\n         vector.set(16, 90.5f);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -629,11 +601,9 @@ public void testNullableFixedType2() {\n \n       try {\n         vector.get(16);\n-      }\n-      catch (IndexOutOfBoundsException ie) {\n+      } catch (IndexOutOfBoundsException ie) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n         error = false;\n       }\n@@ -700,8 +670,7 @@ public void testNullableFixedType3() {\n       for (int i = 0; i <= 1023; i++) {\n         if ((i >= 2 && i <= 99) || (i >= 101 && i <= 1021)) {\n           assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n-        }\n-        else {\n+        } else {\n           assertFalse(\"null data not expected at index: \" + i, vector.isNull(i));\n           assertEquals(\"unexpected value at index: \" + i, j, vector.get(i));\n           j++;\n@@ -740,8 +709,7 @@ public void testNullableFixedType3() {\n       for (int i = 0; i < (initialCapacity * 2); i++) {\n         if ((i > 1024) || (i >= 2 && i <= 99) || (i >= 101 && i <= 1021)) {\n           assertTrue(\"non-null data not expected at index: \" + i, vector.isNull(i));\n-        }\n-        else {\n+        } else {\n           assertFalse(\"null data not expected at index: \" + i, vector.isNull(i));\n           assertEquals(\"unexpected value at index: \" + i, j, vector.get(i));\n           j++;\n@@ -1034,8 +1002,7 @@ public void testReallocAfterVectorTransfer1() {\n       for (int i = 0; i < (initialDefaultCapacity * 8); i++) {\n         if (i < (initialDefaultCapacity * 4)) {\n           assertEquals(baseValue + (double)i, toVector.get(i), 0);\n-        }\n-        else {\n+        } else {\n           assertTrue(toVector.isNull(i));\n         }\n       }\n@@ -1121,8 +1088,7 @@ public void testReallocAfterVectorTransfer2() {\n           assertFalse(\"unexpected null value at index: \" + i, toVector.isNull(i));\n           double value = toVector.get(i);\n           assertEquals(\"unexpected value at index: \" + i, baseValue + (double)i, value, 0);\n-        }\n-        else {\n+        } else {\n           assertTrue(\"unexpected non-null value at index: \" + i, toVector.isNull(i));\n         }\n       }\n@@ -1143,8 +1109,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           vector.set(i, STR1);\n-        }\n-        else {\n+        } else {\n           vector.set(i, STR2);\n         }\n       }\n@@ -1153,8 +1118,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           assertArrayEquals(STR1, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertArrayEquals(STR2, vector.get(i));\n         }\n       }\n@@ -1167,8 +1131,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = valueCapacity; i < vector.getValueCapacity(); i++) {\n         if ((i & 1) == 1) {\n           vector.set(i, STR1);\n-        }\n-        else {\n+        } else {\n           vector.set(i, STR2);\n         }\n       }\n@@ -1178,8 +1141,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           assertArrayEquals(STR1, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertArrayEquals(STR2, vector.get(i));\n         }\n       }\n@@ -1192,8 +1154,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = valueCapacity; i < vector.getValueCapacity(); i++) {\n         if ((i & 1) == 1) {\n           vector.set(i, STR1);\n-        }\n-        else {\n+        } else {\n           vector.set(i, STR2);\n         }\n       }\n@@ -1203,8 +1164,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           assertArrayEquals(STR1, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertArrayEquals(STR2, vector.get(i));\n         }\n       }\n@@ -1221,8 +1181,7 @@ public void testReallocAfterVectorTransfer3() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 1) {\n           assertArrayEquals(STR1, toVector.get(i));\n-        }\n-        else {\n+        } else {\n           assertArrayEquals(STR2, toVector.get(i));\n         }\n       }\n@@ -1252,8 +1211,7 @@ public void testReallocAfterVectorTransfer4() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 0) {\n           assertEquals(1000 + i, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(vector.isNull(i));\n         }\n       }\n@@ -1274,8 +1232,7 @@ public void testReallocAfterVectorTransfer4() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 0) {\n           assertEquals(1000 + i, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(vector.isNull(i));\n         }\n       }\n@@ -1296,8 +1253,7 @@ public void testReallocAfterVectorTransfer4() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 0) {\n           assertEquals(1000 + i, vector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(vector.isNull(i));\n         }\n       }\n@@ -1317,8 +1273,7 @@ public void testReallocAfterVectorTransfer4() {\n       for (int i = 0; i < valueCapacity; i++) {\n         if ((i & 1) == 0) {\n           assertEquals(1000 + i, toVector.get(i));\n-        }\n-        else {\n+        } else {\n           assertTrue(toVector.isNull(i));\n         }\n       }\n@@ -1413,8 +1368,8 @@ public void testFillEmptiesNotOverfill() {\n   @Test\n   public void testCopyFromWithNulls() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n-    {\n+         final VarCharVector vector2 =\n+             newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n \n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n@@ -1474,8 +1429,8 @@ public void testCopyFromWithNulls() {\n   @Test\n   public void testCopyFromWithNulls1() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n-    {\n+         final VarCharVector vector2 =\n+             newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n \n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n@@ -1882,11 +1837,9 @@ public void testGetBufferAddress2() {\n \n       try {\n         long offsetAddress = vector.getOffsetBufferAddress();\n-      }\n-      catch (UnsupportedOperationException ue) {\n+      } catch (UnsupportedOperationException ue) {\n         error = true;\n-      }\n-      finally {\n+      } finally {\n         assertTrue(error);\n       }\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java\nindex 8ddd325827..f8643b8af7 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java\n@@ -24,7 +24,11 @@\n \n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n-import org.apache.arrow.vector.complex.*;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.ArrowType.FixedSizeList;\n import org.apache.arrow.vector.types.pojo.ArrowType.Int;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\nindex 6ae361a498..075c2655a7 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n@@ -43,7 +43,10 @@\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.types.pojo.Schema;\n-import org.junit.*;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n \n import io.netty.buffer.ArrowBuf;\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java\nindex 412d1a1d73..bee9dd4ae9 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java\n@@ -34,7 +34,7 @@\n import org.junit.Test;\n \n public class TestPromotableWriter {\n-  private final static String EMPTY_SCHEMA_PATH = \"\";\n+  private static final String EMPTY_SCHEMA_PATH = \"\";\n \n   private BufferAllocator allocator;\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\nindex 9934bf154c..0576ef02dc 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n@@ -498,6 +498,8 @@ public void validateUnionData(int count, VectorSchemaRoot root) {\n           unionReader.reader(\"timestamp\").read(h);\n           Assert.assertEquals(i, h.value);\n           break;\n+        default:\n+          assert false : \"Unexpected value in switch statement: \" + i;\n       }\n     }\n   }\n@@ -539,6 +541,8 @@ public void writeUnionData(int count, StructVector parent) {\n           structWriter.timeStampMilli(\"timestamp\").writeTimeStampMilli(i);\n           structWriter.end();\n           break;\n+        default:\n+          assert false : \"Unexpected value in switch statement: \" + i;\n       }\n     }\n     writer.setValueCount(count);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\nindex fd7eee37f7..c487a60edb 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n@@ -44,8 +44,9 @@ public void testEmptyStream() throws IOException {\n \n     // Write the stream.\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\n-    try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\n-    }\n+    ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out);\n+    writer.close();\n+    Assert.assertTrue(out.size() > 0);\n \n     ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n     try (ArrowStreamReader reader = new ArrowStreamReader(in, allocator)) {\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T16:50:16.939+0000",
                    "updated": "2018-10-31T16:50:16.939+0000",
                    "started": "2018-10-31T16:50:16.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161219",
                    "issueId": "13194313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/worklog/161221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2842: ARROW-3616: [Java] Fix remaining checkstyle issues\nURL: https://github.com/apache/arrow/pull/2842#issuecomment-434763424\n \n \n   merged to master, thanks @icexelloss and @pravindra \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T16:50:56.699+0000",
                    "updated": "2018-10-31T16:50:56.699+0000",
                    "started": "2018-10-31T16:50:56.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161221",
                    "issueId": "13194313"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@558d0604[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@497a7a46[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e57c268[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@34e535ae[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1035079d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3912d0e0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29460128[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@349319eb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c22f90b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2398adbf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a4eb7a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@16bead46[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 31 16:50:01 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-31T16:50:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3616/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-26T05:02:41.000+0000",
        "updated": "2018-10-31T16:50:56.000+0000",
        "timeoriginalestimate": null,
        "description": "enable the remaining style checks",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] checkstyle - fix remaining coding checks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194313/comment/16670378",
                    "id": "16670378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 2842\n[https://github.com/apache/arrow/pull/2842]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-10-31T16:50:01.546+0000",
                    "updated": "2018-10-31T16:50:01.546+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3znvz:",
        "customfield_12314139": null
    }
}