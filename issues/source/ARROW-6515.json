{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13255908",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908",
    "key": "ARROW-6515",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6515/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/348168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885\n \n \n   The goal of this PR is to uniformize the usage of type traits and pattern matching on static type information.\r\n   \r\n   - Introduce `arrow::enable_if_t` since we're still on C++11. This   removes a small amount of boilerplate, e.g. `typename (expr)::type`. Refactor most code to use this, except where type_traits was not included.\r\n   - Major overhaul of `type_traits.h` by exporting a uniformized (as much as I could) aliases, i.e. `is_X_type` and the accompanying `enable_if_X`.\r\n   - Removed old struct type traits, e.g. `IsSigned...`.\r\n   - Removed catch-all-visitor method and replaced them with explicits missing visitor. This will help the implementation of new types to error missing implementation at compile time instead of runtime.\r\n   - Uniformize usage of `enable_if` with methods, by using the return-place form instead of parameter-place (except when in the constructor).\r\n   - Fixed some missing implementation when trivial.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-22T14:58:56.296+0000",
                    "updated": "2019-11-22T14:58:56.296+0000",
                    "started": "2019-11-22T14:58:56.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348168",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/348170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#issuecomment-557565266\n \n \n   https://issues.apache.org/jira/browse/ARROW-6515\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-22T15:03:50.902+0000",
                    "updated": "2019-11-22T15:03:50.902+0000",
                    "started": "2019-11-22T15:03:50.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348170",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/348211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r349681996\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -250,17 +250,7 @@ struct IsInKernelTraits<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct IsInKernelTraits<Type, enable_if_boolean<Type>> {\n-  using IsInKernelImpl = IsInKernel<Type, bool>;\n-};\n-\n-template <typename Type>\n-struct IsInKernelTraits<Type, enable_if_binary<Type>> {\n-  using IsInKernelImpl = IsInKernel<Type, util::string_view>;\n-};\n-\n-template <typename Type>\n-struct IsInKernelTraits<Type, enable_if_fixed_size_binary<Type>> {\n+struct IsInKernelTraits<Type, enable_if_has_string_view<Type>> {\n \n Review comment:\n   Did you mean to delete the boolean specialization here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-22T16:40:58.627+0000",
                    "updated": "2019-11-22T16:40:58.627+0000",
                    "started": "2019-11-22T16:40:58.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348211",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/348212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r349678967\n \n \n\n ##########\n File path: cpp/src/arrow/array/diff.cc\n ##########\n @@ -664,7 +663,23 @@ class MakeFormatterImpl {\n     return Status::OK();\n   }\n \n-  Status Visit(const DataType& t) {\n+  Status Visit(const NullType& t) {\n \n Review comment:\n   Diff between null arrays is supported. I think there's a unit test too\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-22T16:40:58.633+0000",
                    "updated": "2019-11-22T16:40:58.633+0000",
                    "started": "2019-11-22T16:40:58.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348212",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/348213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r349681132\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -331,8 +328,7 @@ class RegularHashKernelImpl : public HashKernelImpl {\n   }\n \n   template <typename Enable = Status>\n-  auto VisitValue(const Scalar& value) ->\n-      typename std::enable_if<!with_error_status, Enable>::type {\n+  auto VisitValue(const Scalar& value) -> enable_if_t<!with_error_status, Enable> {\n \n Review comment:\n   The signature is poorly formed: The enabling condition does not depend on a deduced template parameter so SFINAE can't happen. It's probably not disabling what it was intended to disable\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-22T16:40:58.656+0000",
                    "updated": "2019-11-22T16:40:58.656+0000",
                    "started": "2019-11-22T16:40:58.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348213",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/348214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r349687971\n \n \n\n ##########\n File path: cpp/src/arrow/python/arrow_to_pandas.cc\n ##########\n @@ -2190,7 +2183,17 @@ class ArrowDeserializer {\n   }\n \n   // Default case\n-  Status Visit(const DataType& type) { return Status::NotImplemented(type.name()); }\n+  Status Visit(const FixedSizeListType& type) {\n+    return Status::NotImplemented(type.name());\n+  }\n+  Status Visit(const LargeListType& type) { return Status::NotImplemented(type.name()); }\n \n Review comment:\n   This message could be more informative than just the name\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-22T16:40:58.662+0000",
                    "updated": "2019-11-22T16:40:58.662+0000",
                    "started": "2019-11-22T16:40:58.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348214",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350336700\n \n \n\n ##########\n File path: cpp/src/arrow/array/diff.cc\n ##########\n @@ -664,7 +663,23 @@ class MakeFormatterImpl {\n     return Status::OK();\n   }\n \n-  Status Visit(const DataType& t) {\n+  Status Visit(const NullType& t) {\n \n Review comment:\n   I think it's supported, just not the Formatter.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T18:00:14.137+0000",
                    "updated": "2019-11-25T18:00:14.137+0000",
                    "started": "2019-11-25T18:00:14.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349234",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350337787\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -250,17 +250,7 @@ struct IsInKernelTraits<Type, enable_if_has_c_type<Type>> {\n };\n \n template <typename Type>\n-struct IsInKernelTraits<Type, enable_if_boolean<Type>> {\n-  using IsInKernelImpl = IsInKernel<Type, bool>;\n-};\n-\n-template <typename Type>\n-struct IsInKernelTraits<Type, enable_if_binary<Type>> {\n-  using IsInKernelImpl = IsInKernel<Type, util::string_view>;\n-};\n-\n-template <typename Type>\n-struct IsInKernelTraits<Type, enable_if_fixed_size_binary<Type>> {\n+struct IsInKernelTraits<Type, enable_if_has_string_view<Type>> {\n \n Review comment:\n   It's now caught by `enable_if_has_c_type`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T18:02:28.441+0000",
                    "updated": "2019-11-25T18:02:28.441+0000",
                    "started": "2019-11-25T18:02:28.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349235",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350381857\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -331,8 +328,7 @@ class RegularHashKernelImpl : public HashKernelImpl {\n   }\n \n   template <typename Enable = Status>\n-  auto VisitValue(const Scalar& value) ->\n-      typename std::enable_if<!with_error_status, Enable>::type {\n+  auto VisitValue(const Scalar& value) -> enable_if_t<!with_error_status, Enable> {\n \n Review comment:\n   Can you check the new version?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T19:36:32.862+0000",
                    "updated": "2019-11-25T19:36:32.862+0000",
                    "started": "2019-11-25T19:36:32.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349296",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350387096\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -389,193 +389,258 @@ using void_t = typename make_void<Ts...>::type;\n // Useful type predicates\n //\n \n-template <typename T>\n-using is_number_type = std::is_base_of<NumberType, T>;\n+// only in C++14\n+template <bool B, typename T = void>\n+using enable_if_t = typename std::enable_if<B, T>::type;\n \n template <typename T>\n-using is_integer_type = std::is_base_of<IntegerType, T>;\n+using is_null_type = std::is_same<NullType, T>;\n \n-template <typename T>\n-using is_floating_type = std::is_base_of<FloatingPointType, T>;\n+template <typename T, typename R = void>\n+using enable_if_null = enable_if_t<is_null_type<T>::value, R>;\n \n template <typename T>\n-using is_temporal_type = std::is_base_of<TemporalType, T>;\n+using is_boolean_type = std::is_same<BooleanType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_boolean = enable_if_t<is_boolean_type<T>::value, R>;\n \n template <typename T>\n-struct has_c_type {\n-  static constexpr bool value =\n-      (std::is_base_of<PrimitiveCType, T>::value || std::is_base_of<DateType, T>::value ||\n-       std::is_base_of<TimeType, T>::value || std::is_base_of<TimestampType, T>::value ||\n-       std::is_base_of<IntervalType, T>::value ||\n-       std::is_base_of<DurationType, T>::value);\n-};\n+using is_number_type = std::is_base_of<NumberType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_number = enable_if_t<is_number_type<T>::value, R>;\n \n template <typename T>\n-struct is_8bit_int {\n-  static constexpr bool value =\n-      (std::is_same<UInt8Type, T>::value || std::is_same<Int8Type, T>::value);\n-};\n+using is_integer_type = std::is_base_of<IntegerType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_integer = enable_if_t<is_integer_type<T>::value, R>;\n \n template <typename T>\n-struct is_any_string_type {\n-  static constexpr bool value =\n-      std::is_same<StringType, T>::value || std::is_same<LargeStringType, T>::value;\n-};\n+using is_signed_integer_type =\n+    std::integral_constant<bool, is_integer_type<T>::value &&\n+                                     std::is_signed<typename T::c_type>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_8bit_int = typename std::enable_if<is_8bit_int<T>::value, R>::type;\n+using enable_if_signed_integer = enable_if_t<is_signed_integer_type<T>::value, R>;\n+\n+template <typename T>\n+using is_unsigned_integer_type =\n+    std::integral_constant<bool, is_integer_type<T>::value &&\n+                                     std::is_unsigned<typename T::c_type>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_primitive_ctype =\n-    typename std::enable_if<std::is_base_of<PrimitiveCType, T>::value, R>::type;\n+using enable_if_unsigned_integer = enable_if_t<is_unsigned_integer_type<T>::value, R>;\n+\n+// Note this will also include HalfFloatType which is represented by a\n+// non-floating point primitive (uint16_t).\n+template <typename T>\n+using is_floating_type = std::is_base_of<FloatingPointType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_integer = typename std::enable_if<is_integer_type<T>::value, R>::type;\n+using enable_if_floating_point = enable_if_t<is_floating_type<T>::value, R>;\n \n+// Half floats are special in that they behave physically like an unsigned\n+// integer.\n template <typename T>\n-using is_signed_integer =\n-    std::integral_constant<bool, is_integer_type<T>::value &&\n-                                     std::is_signed<typename T::c_type>::value>;\n+using is_half_float_type = std::is_same<HalfFloatType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_signed_integer =\n-    typename std::enable_if<is_signed_integer<T>::value, R>::type;\n+using enable_if_half_float = enable_if_t<is_half_float_type<T>::value, R>;\n+\n+// Binary Types\n+\n+// Base binary refers to Binary/LargeBinary/String/LargeString\n+template <typename T>\n+using is_base_binary_type = std::is_base_of<BaseBinaryType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_unsigned_integer = typename std::enable_if<\n-    is_integer_type<T>::value && std::is_unsigned<typename T::c_type>::value, R>::type;\n+using enable_if_base_binary = enable_if_t<is_base_binary_type<T>::value, R>;\n+\n+// Any binary excludes string from Base binary\n+template <typename T>\n+using is_any_binary_type =\n+    std::integral_constant<bool, std::is_same<BinaryType, T>::value ||\n+                                     std::is_same<LargeBinaryType, T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_floating_point =\n-    typename std::enable_if<is_floating_type<T>::value, R>::type;\n+using enable_if_any_binary = enable_if_t<is_any_binary_type<T>::value, R>;\n \n template <typename T>\n-using is_date = std::is_base_of<DateType, T>;\n+using is_string_like_type =\n+    std::integral_constant<bool, is_base_binary_type<T>::value && T::is_utf8>;\n \n template <typename T, typename R = void>\n-using enable_if_date = typename std::enable_if<is_date<T>::value, R>::type;\n+using enable_if_string_like = enable_if_t<is_string_like_type<T>::value, R>;\n \n+// Note that this also includes DecimalType\n template <typename T>\n-using is_time = std::is_base_of<TimeType, T>;\n+using is_fixed_size_binary_type = std::is_base_of<FixedSizeBinaryType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_time = typename std::enable_if<is_time<T>::value, R>::type;\n+using enable_if_fixed_size_binary = enable_if_t<is_fixed_size_binary_type<T>::value, R>;\n \n template <typename T>\n-using is_timestamp = std::is_base_of<TimestampType, T>;\n+using is_binary_like_type =\n+    std::integral_constant<bool, (is_base_binary_type<T>::value &&\n+                                  !is_string_like_type<T>::value) ||\n+                                     is_fixed_size_binary_type<T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_timestamp = typename std::enable_if<is_timestamp<T>::value, R>::type;\n+using enable_if_binary_like = enable_if_t<is_binary_like_type<T>::value, R>;\n+\n+template <typename T>\n+using is_decimal_type = std::is_base_of<DecimalType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_has_c_type = typename std::enable_if<has_c_type<T>::value, R>::type;\n+using enable_if_decimal = enable_if_t<is_decimal_type<T>::value, R>;\n+\n+// Nested Types\n+\n+template <typename T>\n+using is_nested_type = std::is_base_of<NestedType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_null = typename std::enable_if<std::is_same<NullType, T>::value, R>::type;\n+using enable_if_nested = enable_if_t<is_nested_type<T>::value, R>;\n+\n+template <typename T>\n+using is_base_list_type = std::is_base_of<BaseListType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_base_binary =\n-    typename std::enable_if<std::is_base_of<BaseBinaryType, T>::value, R>::type;\n+using enable_if_base_list = enable_if_t<is_base_list_type<T>::value, R>;\n+\n+template <typename T>\n+using is_fixed_size_list_type = std::is_same<FixedSizeListType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_binary =\n-    typename std::enable_if<std::is_base_of<BinaryType, T>::value, R>::type;\n+using enable_if_fixed_size_list = enable_if_t<is_fixed_size_list_type<T>::value, R>;\n+\n+template <typename T>\n+using is_list_like_type =\n+    std::integral_constant<bool, is_base_list_type<T>::value ||\n+                                     is_fixed_size_list_type<T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_large_binary =\n-    typename std::enable_if<std::is_base_of<LargeBinaryType, T>::value, R>::type;\n+using enable_if_list_like = enable_if_t<is_list_like_type<T>::value, R>;\n+\n+template <typename T>\n+using is_struct_type = std::is_base_of<StructType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_boolean =\n-    typename std::enable_if<std::is_same<BooleanType, T>::value, R>::type;\n+using enable_if_struct = enable_if_t<is_struct_type<T>::value, R>;\n+\n+template <typename T>\n+using is_union_type = std::is_base_of<UnionType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_binary_like =\n-    typename std::enable_if<std::is_base_of<BaseBinaryType, T>::value ||\n-                                std::is_base_of<FixedSizeBinaryType, T>::value,\n-                            R>::type;\n+using enable_if_union = enable_if_t<is_union_type<T>::value, R>;\n+\n+// TemporalTypes\n+\n+template <typename T>\n+using is_temporal_type = std::is_base_of<TemporalType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_fixed_size_binary =\n-    typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value, R>::type;\n+using enable_if_temporal = enable_if_t<is_temporal_type<T>::value, R>;\n+\n+template <typename T>\n+using is_date_type = std::is_base_of<DateType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_base_list =\n-    typename std::enable_if<std::is_base_of<BaseListType, T>::value, R>::type;\n+using enable_if_date = enable_if_t<is_date_type<T>::value, R>;\n+\n+template <typename T>\n+using is_time_type = std::is_base_of<TimeType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_list =\n-    typename std::enable_if<std::is_base_of<ListType, T>::value, R>::type;\n+using enable_if_time = enable_if_t<is_time_type<T>::value, R>;\n+\n+template <typename T>\n+using is_timestamp_type = std::is_base_of<TimestampType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_large_list =\n-    typename std::enable_if<std::is_base_of<LargeListType, T>::value, R>::type;\n+using enable_if_timestamp = enable_if_t<is_timestamp_type<T>::value, R>;\n+\n+template <typename T>\n+using is_duration_type = std::is_base_of<DurationType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_fixed_size_list =\n-    typename std::enable_if<std::is_base_of<FixedSizeListType, T>::value, R>::type;\n+using enable_if_duration = enable_if_t<is_duration_type<T>::value, R>;\n+\n+// Attribute differentiation\n+\n+template <typename T>\n+using is_primitive_ctype = std::is_base_of<PrimitiveCType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_number = typename std::enable_if<is_number_type<T>::value, R>::type;\n+using enable_if_primitive_ctype = enable_if_t<is_primitive_ctype<T>::value, R>;\n \n-namespace internal {\n+template <typename T>\n+using has_c_type = std::integral_constant<bool, is_primitive_ctype<T>::value ||\n+                                                    is_temporal_type<T>::value>;\n \n-// The partial specialization will match if T has the ATTR_NAME member\n-#define GET_ATTR(ATTR_NAME, DEFAULT)                             \\\n-  template <typename T, typename Enable = void>                  \\\n-  struct GetAttr_##ATTR_NAME {                                   \\\n-    using type = DEFAULT;                                        \\\n-  };                                                             \\\n-                                                                 \\\n-  template <typename T>                                          \\\n-  struct GetAttr_##ATTR_NAME<T, void_t<typename T::ATTR_NAME>> { \\\n-    using type = typename T::ATTR_NAME;                          \\\n-  };\n+template <typename T, typename R = void>\n+using enable_if_has_c_type = enable_if_t<has_c_type<T>::value, R>;\n \n-GET_ATTR(c_type, void)\n-GET_ATTR(TypeClass, void)\n+template <typename T>\n+using has_string_view = std::integral_constant<bool, is_binary_like_type<T>::value ||\n+                                                         is_string_like_type<T>::value>;\n \n-#undef GET_ATTR\n+template <typename T, typename R = void>\n+using enable_if_has_string_view = enable_if_t<has_string_view<T>::value, R>;\n \n-}  // namespace internal\n+template <typename T>\n+using has_no_extra_meta = std::is_base_of<NoExtraMeta, T>;\n \n Review comment:\n   What does \"no extra meta\" mean? If we're refactoring, we might as well give this a readable name (for example \"is_parameterless\"?).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T19:51:45.833+0000",
                    "updated": "2019-11-25T19:51:45.833+0000",
                    "started": "2019-11-25T19:51:45.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349299",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350516152\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_dict.h\n ##########\n @@ -316,14 +309,14 @@ template <typename BuilderType>\n class DictionaryBuilderBase<BuilderType, NullType> : public ArrayBuilder {\n  public:\n   DictionaryBuilderBase(const std::shared_ptr<DataType>& value_type,\n-                        MemoryPool* pool = default_memory_pool())\n \n Review comment:\n   I thought we were talking about getting rid of this, but I opened https://issues.apache.org/jira/browse/ARROW-7256\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T02:42:53.939+0000",
                    "updated": "2019-11-26T02:42:53.939+0000",
                    "started": "2019-11-26T02:42:53.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349525",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350519653\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -389,193 +389,258 @@ using void_t = typename make_void<Ts...>::type;\n // Useful type predicates\n //\n \n-template <typename T>\n-using is_number_type = std::is_base_of<NumberType, T>;\n+// only in C++14\n \n Review comment:\n   Is there a conflict when compiling with `-std=c++14`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T02:42:54.038+0000",
                    "updated": "2019-11-26T02:42:54.038+0000",
                    "started": "2019-11-26T02:42:54.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349526",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/349745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r350715442\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -389,193 +389,258 @@ using void_t = typename make_void<Ts...>::type;\n // Useful type predicates\n //\n \n-template <typename T>\n-using is_number_type = std::is_base_of<NumberType, T>;\n+// only in C++14\n \n Review comment:\n   There shouldn't because it's in arrow namespace.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-26T12:38:41.060+0000",
                    "updated": "2019-11-26T12:38:41.060+0000",
                    "started": "2019-11-26T12:38:41.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "349745",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/350478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r351350432\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -389,193 +389,258 @@ using void_t = typename make_void<Ts...>::type;\n // Useful type predicates\n //\n \n-template <typename T>\n-using is_number_type = std::is_base_of<NumberType, T>;\n+// only in C++14\n+template <bool B, typename T = void>\n+using enable_if_t = typename std::enable_if<B, T>::type;\n \n template <typename T>\n-using is_integer_type = std::is_base_of<IntegerType, T>;\n+using is_null_type = std::is_same<NullType, T>;\n \n-template <typename T>\n-using is_floating_type = std::is_base_of<FloatingPointType, T>;\n+template <typename T, typename R = void>\n+using enable_if_null = enable_if_t<is_null_type<T>::value, R>;\n \n template <typename T>\n-using is_temporal_type = std::is_base_of<TemporalType, T>;\n+using is_boolean_type = std::is_same<BooleanType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_boolean = enable_if_t<is_boolean_type<T>::value, R>;\n \n template <typename T>\n-struct has_c_type {\n-  static constexpr bool value =\n-      (std::is_base_of<PrimitiveCType, T>::value || std::is_base_of<DateType, T>::value ||\n-       std::is_base_of<TimeType, T>::value || std::is_base_of<TimestampType, T>::value ||\n-       std::is_base_of<IntervalType, T>::value ||\n-       std::is_base_of<DurationType, T>::value);\n-};\n+using is_number_type = std::is_base_of<NumberType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_number = enable_if_t<is_number_type<T>::value, R>;\n \n template <typename T>\n-struct is_8bit_int {\n-  static constexpr bool value =\n-      (std::is_same<UInt8Type, T>::value || std::is_same<Int8Type, T>::value);\n-};\n+using is_integer_type = std::is_base_of<IntegerType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_integer = enable_if_t<is_integer_type<T>::value, R>;\n \n template <typename T>\n-struct is_any_string_type {\n-  static constexpr bool value =\n-      std::is_same<StringType, T>::value || std::is_same<LargeStringType, T>::value;\n-};\n+using is_signed_integer_type =\n+    std::integral_constant<bool, is_integer_type<T>::value &&\n+                                     std::is_signed<typename T::c_type>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_8bit_int = typename std::enable_if<is_8bit_int<T>::value, R>::type;\n+using enable_if_signed_integer = enable_if_t<is_signed_integer_type<T>::value, R>;\n+\n+template <typename T>\n+using is_unsigned_integer_type =\n+    std::integral_constant<bool, is_integer_type<T>::value &&\n+                                     std::is_unsigned<typename T::c_type>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_primitive_ctype =\n-    typename std::enable_if<std::is_base_of<PrimitiveCType, T>::value, R>::type;\n+using enable_if_unsigned_integer = enable_if_t<is_unsigned_integer_type<T>::value, R>;\n+\n+// Note this will also include HalfFloatType which is represented by a\n+// non-floating point primitive (uint16_t).\n+template <typename T>\n+using is_floating_type = std::is_base_of<FloatingPointType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_integer = typename std::enable_if<is_integer_type<T>::value, R>::type;\n+using enable_if_floating_point = enable_if_t<is_floating_type<T>::value, R>;\n \n+// Half floats are special in that they behave physically like an unsigned\n+// integer.\n template <typename T>\n-using is_signed_integer =\n-    std::integral_constant<bool, is_integer_type<T>::value &&\n-                                     std::is_signed<typename T::c_type>::value>;\n+using is_half_float_type = std::is_same<HalfFloatType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_signed_integer =\n-    typename std::enable_if<is_signed_integer<T>::value, R>::type;\n+using enable_if_half_float = enable_if_t<is_half_float_type<T>::value, R>;\n+\n+// Binary Types\n+\n+// Base binary refers to Binary/LargeBinary/String/LargeString\n+template <typename T>\n+using is_base_binary_type = std::is_base_of<BaseBinaryType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_unsigned_integer = typename std::enable_if<\n-    is_integer_type<T>::value && std::is_unsigned<typename T::c_type>::value, R>::type;\n+using enable_if_base_binary = enable_if_t<is_base_binary_type<T>::value, R>;\n+\n+// Any binary excludes string from Base binary\n+template <typename T>\n+using is_any_binary_type =\n+    std::integral_constant<bool, std::is_same<BinaryType, T>::value ||\n+                                     std::is_same<LargeBinaryType, T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_floating_point =\n-    typename std::enable_if<is_floating_type<T>::value, R>::type;\n+using enable_if_any_binary = enable_if_t<is_any_binary_type<T>::value, R>;\n \n template <typename T>\n-using is_date = std::is_base_of<DateType, T>;\n+using is_string_like_type =\n+    std::integral_constant<bool, is_base_binary_type<T>::value && T::is_utf8>;\n \n template <typename T, typename R = void>\n-using enable_if_date = typename std::enable_if<is_date<T>::value, R>::type;\n+using enable_if_string_like = enable_if_t<is_string_like_type<T>::value, R>;\n \n+// Note that this also includes DecimalType\n template <typename T>\n-using is_time = std::is_base_of<TimeType, T>;\n+using is_fixed_size_binary_type = std::is_base_of<FixedSizeBinaryType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_time = typename std::enable_if<is_time<T>::value, R>::type;\n+using enable_if_fixed_size_binary = enable_if_t<is_fixed_size_binary_type<T>::value, R>;\n \n template <typename T>\n-using is_timestamp = std::is_base_of<TimestampType, T>;\n+using is_binary_like_type =\n+    std::integral_constant<bool, (is_base_binary_type<T>::value &&\n+                                  !is_string_like_type<T>::value) ||\n+                                     is_fixed_size_binary_type<T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_timestamp = typename std::enable_if<is_timestamp<T>::value, R>::type;\n+using enable_if_binary_like = enable_if_t<is_binary_like_type<T>::value, R>;\n+\n+template <typename T>\n+using is_decimal_type = std::is_base_of<DecimalType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_has_c_type = typename std::enable_if<has_c_type<T>::value, R>::type;\n+using enable_if_decimal = enable_if_t<is_decimal_type<T>::value, R>;\n+\n+// Nested Types\n+\n+template <typename T>\n+using is_nested_type = std::is_base_of<NestedType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_null = typename std::enable_if<std::is_same<NullType, T>::value, R>::type;\n+using enable_if_nested = enable_if_t<is_nested_type<T>::value, R>;\n+\n+template <typename T>\n+using is_base_list_type = std::is_base_of<BaseListType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_base_binary =\n-    typename std::enable_if<std::is_base_of<BaseBinaryType, T>::value, R>::type;\n+using enable_if_base_list = enable_if_t<is_base_list_type<T>::value, R>;\n+\n+template <typename T>\n+using is_fixed_size_list_type = std::is_same<FixedSizeListType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_binary =\n-    typename std::enable_if<std::is_base_of<BinaryType, T>::value, R>::type;\n+using enable_if_fixed_size_list = enable_if_t<is_fixed_size_list_type<T>::value, R>;\n+\n+template <typename T>\n+using is_list_like_type =\n+    std::integral_constant<bool, is_base_list_type<T>::value ||\n+                                     is_fixed_size_list_type<T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_large_binary =\n-    typename std::enable_if<std::is_base_of<LargeBinaryType, T>::value, R>::type;\n+using enable_if_list_like = enable_if_t<is_list_like_type<T>::value, R>;\n+\n+template <typename T>\n+using is_struct_type = std::is_base_of<StructType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_boolean =\n-    typename std::enable_if<std::is_same<BooleanType, T>::value, R>::type;\n+using enable_if_struct = enable_if_t<is_struct_type<T>::value, R>;\n+\n+template <typename T>\n+using is_union_type = std::is_base_of<UnionType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_binary_like =\n-    typename std::enable_if<std::is_base_of<BaseBinaryType, T>::value ||\n-                                std::is_base_of<FixedSizeBinaryType, T>::value,\n-                            R>::type;\n+using enable_if_union = enable_if_t<is_union_type<T>::value, R>;\n+\n+// TemporalTypes\n+\n+template <typename T>\n+using is_temporal_type = std::is_base_of<TemporalType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_fixed_size_binary =\n-    typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value, R>::type;\n+using enable_if_temporal = enable_if_t<is_temporal_type<T>::value, R>;\n+\n+template <typename T>\n+using is_date_type = std::is_base_of<DateType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_base_list =\n-    typename std::enable_if<std::is_base_of<BaseListType, T>::value, R>::type;\n+using enable_if_date = enable_if_t<is_date_type<T>::value, R>;\n+\n+template <typename T>\n+using is_time_type = std::is_base_of<TimeType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_list =\n-    typename std::enable_if<std::is_base_of<ListType, T>::value, R>::type;\n+using enable_if_time = enable_if_t<is_time_type<T>::value, R>;\n+\n+template <typename T>\n+using is_timestamp_type = std::is_base_of<TimestampType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_large_list =\n-    typename std::enable_if<std::is_base_of<LargeListType, T>::value, R>::type;\n+using enable_if_timestamp = enable_if_t<is_timestamp_type<T>::value, R>;\n+\n+template <typename T>\n+using is_duration_type = std::is_base_of<DurationType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_fixed_size_list =\n-    typename std::enable_if<std::is_base_of<FixedSizeListType, T>::value, R>::type;\n+using enable_if_duration = enable_if_t<is_duration_type<T>::value, R>;\n+\n+// Attribute differentiation\n+\n+template <typename T>\n+using is_primitive_ctype = std::is_base_of<PrimitiveCType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_number = typename std::enable_if<is_number_type<T>::value, R>::type;\n+using enable_if_primitive_ctype = enable_if_t<is_primitive_ctype<T>::value, R>;\n \n-namespace internal {\n+template <typename T>\n+using has_c_type = std::integral_constant<bool, is_primitive_ctype<T>::value ||\n+                                                    is_temporal_type<T>::value>;\n \n-// The partial specialization will match if T has the ATTR_NAME member\n-#define GET_ATTR(ATTR_NAME, DEFAULT)                             \\\n-  template <typename T, typename Enable = void>                  \\\n-  struct GetAttr_##ATTR_NAME {                                   \\\n-    using type = DEFAULT;                                        \\\n-  };                                                             \\\n-                                                                 \\\n-  template <typename T>                                          \\\n-  struct GetAttr_##ATTR_NAME<T, void_t<typename T::ATTR_NAME>> { \\\n-    using type = typename T::ATTR_NAME;                          \\\n-  };\n+template <typename T, typename R = void>\n+using enable_if_has_c_type = enable_if_t<has_c_type<T>::value, R>;\n \n-GET_ATTR(c_type, void)\n-GET_ATTR(TypeClass, void)\n+template <typename T>\n+using has_string_view = std::integral_constant<bool, is_binary_like_type<T>::value ||\n+                                                         is_string_like_type<T>::value>;\n \n-#undef GET_ATTR\n+template <typename T, typename R = void>\n+using enable_if_has_string_view = enable_if_t<has_string_view<T>::value, R>;\n \n-}  // namespace internal\n+template <typename T>\n+using has_no_extra_meta = std::is_base_of<NoExtraMeta, T>;\n \n Review comment:\n   I'm not so sure, the place I've seen it referenced is https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/json_internal.cc#L132-L375, which is used for ipc serialization.\r\n   \r\n   We can probably remove this traits and use explicit visitor methods where required.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-27T15:25:37.815+0000",
                    "updated": "2019-11-27T15:25:37.815+0000",
                    "started": "2019-11-27T15:25:37.814+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "350478",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/350793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r351566977\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_dict.h\n ##########\n @@ -316,14 +309,14 @@ template <typename BuilderType>\n class DictionaryBuilderBase<BuilderType, NullType> : public ArrayBuilder {\n  public:\n   DictionaryBuilderBase(const std::shared_ptr<DataType>& value_type,\n-                        MemoryPool* pool = default_memory_pool())\n \n Review comment:\n   Reverted in this changeset.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-28T02:12:19.826+0000",
                    "updated": "2019-11-28T02:12:19.826+0000",
                    "started": "2019-11-28T02:12:19.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "350793",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/351026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r351822566\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -389,193 +389,258 @@ using void_t = typename make_void<Ts...>::type;\n // Useful type predicates\n //\n \n-template <typename T>\n-using is_number_type = std::is_base_of<NumberType, T>;\n+// only in C++14\n+template <bool B, typename T = void>\n+using enable_if_t = typename std::enable_if<B, T>::type;\n \n template <typename T>\n-using is_integer_type = std::is_base_of<IntegerType, T>;\n+using is_null_type = std::is_same<NullType, T>;\n \n-template <typename T>\n-using is_floating_type = std::is_base_of<FloatingPointType, T>;\n+template <typename T, typename R = void>\n+using enable_if_null = enable_if_t<is_null_type<T>::value, R>;\n \n template <typename T>\n-using is_temporal_type = std::is_base_of<TemporalType, T>;\n+using is_boolean_type = std::is_same<BooleanType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_boolean = enable_if_t<is_boolean_type<T>::value, R>;\n \n template <typename T>\n-struct has_c_type {\n-  static constexpr bool value =\n-      (std::is_base_of<PrimitiveCType, T>::value || std::is_base_of<DateType, T>::value ||\n-       std::is_base_of<TimeType, T>::value || std::is_base_of<TimestampType, T>::value ||\n-       std::is_base_of<IntervalType, T>::value ||\n-       std::is_base_of<DurationType, T>::value);\n-};\n+using is_number_type = std::is_base_of<NumberType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_number = enable_if_t<is_number_type<T>::value, R>;\n \n template <typename T>\n-struct is_8bit_int {\n-  static constexpr bool value =\n-      (std::is_same<UInt8Type, T>::value || std::is_same<Int8Type, T>::value);\n-};\n+using is_integer_type = std::is_base_of<IntegerType, T>;\n+\n+template <typename T, typename R = void>\n+using enable_if_integer = enable_if_t<is_integer_type<T>::value, R>;\n \n template <typename T>\n-struct is_any_string_type {\n-  static constexpr bool value =\n-      std::is_same<StringType, T>::value || std::is_same<LargeStringType, T>::value;\n-};\n+using is_signed_integer_type =\n+    std::integral_constant<bool, is_integer_type<T>::value &&\n+                                     std::is_signed<typename T::c_type>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_8bit_int = typename std::enable_if<is_8bit_int<T>::value, R>::type;\n+using enable_if_signed_integer = enable_if_t<is_signed_integer_type<T>::value, R>;\n+\n+template <typename T>\n+using is_unsigned_integer_type =\n+    std::integral_constant<bool, is_integer_type<T>::value &&\n+                                     std::is_unsigned<typename T::c_type>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_primitive_ctype =\n-    typename std::enable_if<std::is_base_of<PrimitiveCType, T>::value, R>::type;\n+using enable_if_unsigned_integer = enable_if_t<is_unsigned_integer_type<T>::value, R>;\n+\n+// Note this will also include HalfFloatType which is represented by a\n+// non-floating point primitive (uint16_t).\n+template <typename T>\n+using is_floating_type = std::is_base_of<FloatingPointType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_integer = typename std::enable_if<is_integer_type<T>::value, R>::type;\n+using enable_if_floating_point = enable_if_t<is_floating_type<T>::value, R>;\n \n+// Half floats are special in that they behave physically like an unsigned\n+// integer.\n template <typename T>\n-using is_signed_integer =\n-    std::integral_constant<bool, is_integer_type<T>::value &&\n-                                     std::is_signed<typename T::c_type>::value>;\n+using is_half_float_type = std::is_same<HalfFloatType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_signed_integer =\n-    typename std::enable_if<is_signed_integer<T>::value, R>::type;\n+using enable_if_half_float = enable_if_t<is_half_float_type<T>::value, R>;\n+\n+// Binary Types\n+\n+// Base binary refers to Binary/LargeBinary/String/LargeString\n+template <typename T>\n+using is_base_binary_type = std::is_base_of<BaseBinaryType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_unsigned_integer = typename std::enable_if<\n-    is_integer_type<T>::value && std::is_unsigned<typename T::c_type>::value, R>::type;\n+using enable_if_base_binary = enable_if_t<is_base_binary_type<T>::value, R>;\n+\n+// Any binary excludes string from Base binary\n+template <typename T>\n+using is_any_binary_type =\n+    std::integral_constant<bool, std::is_same<BinaryType, T>::value ||\n+                                     std::is_same<LargeBinaryType, T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_floating_point =\n-    typename std::enable_if<is_floating_type<T>::value, R>::type;\n+using enable_if_any_binary = enable_if_t<is_any_binary_type<T>::value, R>;\n \n template <typename T>\n-using is_date = std::is_base_of<DateType, T>;\n+using is_string_like_type =\n+    std::integral_constant<bool, is_base_binary_type<T>::value && T::is_utf8>;\n \n template <typename T, typename R = void>\n-using enable_if_date = typename std::enable_if<is_date<T>::value, R>::type;\n+using enable_if_string_like = enable_if_t<is_string_like_type<T>::value, R>;\n \n+// Note that this also includes DecimalType\n template <typename T>\n-using is_time = std::is_base_of<TimeType, T>;\n+using is_fixed_size_binary_type = std::is_base_of<FixedSizeBinaryType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_time = typename std::enable_if<is_time<T>::value, R>::type;\n+using enable_if_fixed_size_binary = enable_if_t<is_fixed_size_binary_type<T>::value, R>;\n \n template <typename T>\n-using is_timestamp = std::is_base_of<TimestampType, T>;\n+using is_binary_like_type =\n+    std::integral_constant<bool, (is_base_binary_type<T>::value &&\n+                                  !is_string_like_type<T>::value) ||\n+                                     is_fixed_size_binary_type<T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_timestamp = typename std::enable_if<is_timestamp<T>::value, R>::type;\n+using enable_if_binary_like = enable_if_t<is_binary_like_type<T>::value, R>;\n+\n+template <typename T>\n+using is_decimal_type = std::is_base_of<DecimalType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_has_c_type = typename std::enable_if<has_c_type<T>::value, R>::type;\n+using enable_if_decimal = enable_if_t<is_decimal_type<T>::value, R>;\n+\n+// Nested Types\n+\n+template <typename T>\n+using is_nested_type = std::is_base_of<NestedType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_null = typename std::enable_if<std::is_same<NullType, T>::value, R>::type;\n+using enable_if_nested = enable_if_t<is_nested_type<T>::value, R>;\n+\n+template <typename T>\n+using is_base_list_type = std::is_base_of<BaseListType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_base_binary =\n-    typename std::enable_if<std::is_base_of<BaseBinaryType, T>::value, R>::type;\n+using enable_if_base_list = enable_if_t<is_base_list_type<T>::value, R>;\n+\n+template <typename T>\n+using is_fixed_size_list_type = std::is_same<FixedSizeListType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_binary =\n-    typename std::enable_if<std::is_base_of<BinaryType, T>::value, R>::type;\n+using enable_if_fixed_size_list = enable_if_t<is_fixed_size_list_type<T>::value, R>;\n+\n+template <typename T>\n+using is_list_like_type =\n+    std::integral_constant<bool, is_base_list_type<T>::value ||\n+                                     is_fixed_size_list_type<T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_large_binary =\n-    typename std::enable_if<std::is_base_of<LargeBinaryType, T>::value, R>::type;\n+using enable_if_list_like = enable_if_t<is_list_like_type<T>::value, R>;\n+\n+template <typename T>\n+using is_struct_type = std::is_base_of<StructType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_boolean =\n-    typename std::enable_if<std::is_same<BooleanType, T>::value, R>::type;\n+using enable_if_struct = enable_if_t<is_struct_type<T>::value, R>;\n+\n+template <typename T>\n+using is_union_type = std::is_base_of<UnionType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_binary_like =\n-    typename std::enable_if<std::is_base_of<BaseBinaryType, T>::value ||\n-                                std::is_base_of<FixedSizeBinaryType, T>::value,\n-                            R>::type;\n+using enable_if_union = enable_if_t<is_union_type<T>::value, R>;\n+\n+// TemporalTypes\n+\n+template <typename T>\n+using is_temporal_type = std::is_base_of<TemporalType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_fixed_size_binary =\n-    typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value, R>::type;\n+using enable_if_temporal = enable_if_t<is_temporal_type<T>::value, R>;\n+\n+template <typename T>\n+using is_date_type = std::is_base_of<DateType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_base_list =\n-    typename std::enable_if<std::is_base_of<BaseListType, T>::value, R>::type;\n+using enable_if_date = enable_if_t<is_date_type<T>::value, R>;\n+\n+template <typename T>\n+using is_time_type = std::is_base_of<TimeType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_list =\n-    typename std::enable_if<std::is_base_of<ListType, T>::value, R>::type;\n+using enable_if_time = enable_if_t<is_time_type<T>::value, R>;\n+\n+template <typename T>\n+using is_timestamp_type = std::is_base_of<TimestampType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_large_list =\n-    typename std::enable_if<std::is_base_of<LargeListType, T>::value, R>::type;\n+using enable_if_timestamp = enable_if_t<is_timestamp_type<T>::value, R>;\n+\n+template <typename T>\n+using is_duration_type = std::is_base_of<DurationType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_fixed_size_list =\n-    typename std::enable_if<std::is_base_of<FixedSizeListType, T>::value, R>::type;\n+using enable_if_duration = enable_if_t<is_duration_type<T>::value, R>;\n+\n+// Attribute differentiation\n+\n+template <typename T>\n+using is_primitive_ctype = std::is_base_of<PrimitiveCType, T>;\n \n template <typename T, typename R = void>\n-using enable_if_number = typename std::enable_if<is_number_type<T>::value, R>::type;\n+using enable_if_primitive_ctype = enable_if_t<is_primitive_ctype<T>::value, R>;\n \n-namespace internal {\n+template <typename T>\n+using has_c_type = std::integral_constant<bool, is_primitive_ctype<T>::value ||\n+                                                    is_temporal_type<T>::value>;\n \n-// The partial specialization will match if T has the ATTR_NAME member\n-#define GET_ATTR(ATTR_NAME, DEFAULT)                             \\\n-  template <typename T, typename Enable = void>                  \\\n-  struct GetAttr_##ATTR_NAME {                                   \\\n-    using type = DEFAULT;                                        \\\n-  };                                                             \\\n-                                                                 \\\n-  template <typename T>                                          \\\n-  struct GetAttr_##ATTR_NAME<T, void_t<typename T::ATTR_NAME>> { \\\n-    using type = typename T::ATTR_NAME;                          \\\n-  };\n+template <typename T, typename R = void>\n+using enable_if_has_c_type = enable_if_t<has_c_type<T>::value, R>;\n \n-GET_ATTR(c_type, void)\n-GET_ATTR(TypeClass, void)\n+template <typename T>\n+using has_string_view = std::integral_constant<bool, is_binary_like_type<T>::value ||\n+                                                         is_string_like_type<T>::value>;\n \n-#undef GET_ATTR\n+template <typename T, typename R = void>\n+using enable_if_has_string_view = enable_if_t<has_string_view<T>::value, R>;\n \n-}  // namespace internal\n+template <typename T>\n+using has_no_extra_meta = std::is_base_of<NoExtraMeta, T>;\n \n Review comment:\n   Removed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-28T14:55:54.362+0000",
                    "updated": "2019-11-28T14:55:54.362+0000",
                    "started": "2019-11-28T14:55:54.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "351026",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/351027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885#discussion_r351822686\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_dict.h\n ##########\n @@ -316,14 +309,14 @@ template <typename BuilderType>\n class DictionaryBuilderBase<BuilderType, NullType> : public ArrayBuilder {\n  public:\n   DictionaryBuilderBase(const std::shared_ptr<DataType>& value_type,\n-                        MemoryPool* pool = default_memory_pool())\n \n Review comment:\n   Yanked it from the PR.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-28T14:56:07.716+0000",
                    "updated": "2019-11-28T14:56:07.716+0000",
                    "started": "2019-11-28T14:56:07.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "351027",
                    "issueId": "13255908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/worklog/351396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5885: ARROW-6515: [C++] Clean type_traits.h definitions\nURL: https://github.com/apache/arrow/pull/5885\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-29T15:55:42.483+0000",
                    "updated": "2019-11-29T15:55:42.483+0000",
                    "started": "2019-11-29T15:55:42.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "351396",
                    "issueId": "13255908"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@68b61438[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@aede0a6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5707790d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@328a5b9b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47187da9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@dc29ea9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61e1410d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1578829[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a6489f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1c88a954[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@778a6ae1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a21a2f9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 29 15:55:43 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-29T15:55:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6515/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-10T14:46:10.000+0000",
        "updated": "2019-11-29T15:55:43.000+0000",
        "timeoriginalestimate": null,
        "description": "{{IsSignedInt}} takes either an array or a type as a type argument, which is surprisingly atypical for traits. Furthermore whereas {{is_signed_integer}} returns false for date and other types which are represented by but not identical to integers {{IsSignedInt}} returns true by checking only the {{c_type}}, which leads to {{static_assert(IsSignedInt<HalfFloatType>::value, \"\")}}. Finally the declaration of {{IsSignedInt}} is far from readable due to nested macro usage.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Clean type_traits.h definitions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255908/comment/16985093",
                    "id": "16985093",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5885\n[https://github.com/apache/arrow/pull/5885]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-29T15:55:43.697+0000",
                    "updated": "2019-11-29T15:55:43.697+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06ie0:",
        "customfield_12314139": null
    }
}