{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13491248",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248",
    "key": "ARROW-18152",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18152/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF opened a new pull request, #14613:\nURL: https://github.com/apache/arrow/pull/14613\n\n   ### Produce a `__dataframe__` object\r\n   - [ ] Implement the `DataFrame`, `Column` and `Buffers` class\r\n   - [ ] Test `pa.Table` -> `pd.DataFrame`\r\n   \r\n   What should be added/corrected after the initial test:\r\n   - [ ] Data without missing values (produce a validity buffer in case of no missing values)\r\n   - [ ] Boolean values do not transfer correctly (only the first element is produced)\r\n   - [ ] Variable-length strings (the test currently fails due to, what seems, an error in pandas implementation)\r\n   \r\n   ---\r\n   \r\n   This code should work, currently it does for integers and floats with missing values:\r\n   ```python\r\n   import pyarrow as pa\r\n   import pandas as pd\r\n   \r\n   table = pa.table(\r\n       {\r\n           \"a\": [1, 2, None],  # dtype kind INT = 0\r\n           \"b\": [3, 4, None],  # dtype kind INT = 0\r\n           \"c\": [1.5, 2.5, None],  # dtype kind FLOAT = 2\r\n           \"d\": [9, 10, None],  # dtype kind INT = 0\r\n           # \"e\": [True, False, None],  # dtype kind BOOLEAN = 20\r\n           # \"f\": [\"a\", \"\", \"c\"],  # dtype kind STRING = 21\r\n       }\r\n   )\r\n   \r\n   exchange_df = table.__dataframe__()\r\n   exchange_df._df\r\n   # pyarrow.Table\r\n   # a: int64\r\n   # b: int64\r\n   # c: double\r\n   # d: int64\r\n   # ----\r\n   # a: [[1,2,null]]\r\n   # b: [[3,4,null]]\r\n   # c: [[1.5,2.5,null]]\r\n   # d: [[9,10,null]]\r\n   \r\n   from pandas.core.interchange.from_dataframe import from_dataframe\r\n   from_dataframe(exchange_df)\r\n   #    a  b    c   d\r\n   # 0  1  3  1.5   9\r\n   # 1  2  4  2.5  10\r\n   # 2  0  0  0.0   0\r\n   ```\r\n   \r\n   ---\r\n   \r\n   ### Consume a `__dataframe__` object\r\n   - [ ] Implement  `from_dataframe` method\n\n\n",
                    "created": "2022-11-09T08:19:30.658+0000",
                    "updated": "2022-11-09T08:19:30.658+0000",
                    "started": "2022-11-09T08:19:30.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824444",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#issuecomment-1308377876\n\n   https://issues.apache.org/jira/browse/ARROW-18152\n\n\n",
                    "created": "2022-11-09T08:19:51.061+0000",
                    "updated": "2022-11-09T08:19:51.061+0000",
                    "started": "2022-11-09T08:19:51.061+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824445",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#issuecomment-1308377901\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-11-09T08:19:52.788+0000",
                    "updated": "2022-11-09T08:19:52.788+0000",
                    "started": "2022-11-09T08:19:52.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824446",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017589932\n\n\n##########\npython/pyarrow/interchange/column.py:\n##########\n@@ -0,0 +1,358 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+\n+from typing import (\n+    Any,\n+    Dict,\n+    Iterable,\n+    Optional,\n+    Tuple,\n+)\n+\n+import pyarrow as pa\n+from pyarrow.interchange.buffer import PyArrowBuffer\n+from pyarrow.interchange.dataframe_protocol import (Column, ColumnBuffers,\n+                                                    ColumnNullType, DtypeKind,\n+                                                    CategoricalDescription)\n+\n+_PYARROW_KINDS = {\n+    pa.int8(): (DtypeKind.INT, \"c\"),\n+    pa.int16(): (DtypeKind.INT, \"s\"),\n+    pa.int32(): (DtypeKind.INT, \"i\"),\n+    pa.int64(): (DtypeKind.INT, \"l\"),\n+    pa.uint8(): (DtypeKind.UINT, \"C\"),\n+    pa.uint16(): (DtypeKind.UINT, \"S\"),\n+    pa.uint32(): (DtypeKind.UINT, \"I\"),\n+    pa.uint64(): (DtypeKind.UINT, \"L\"),\n+    pa.float16(): (DtypeKind.FLOAT, \"e\"),\n+    pa.float32(): (DtypeKind.FLOAT, \"f\"),\n+    pa.float64(): (DtypeKind.FLOAT, \"g\"),\n+    pa.bool_(): (DtypeKind.BOOL, \"b\"),\n+    pa.string(): (DtypeKind.STRING, \"u\"),  # utf-8\n+    pa.large_string(): (DtypeKind.STRING, \"U\"),\n+}\n+\n+\n+class Endianness:\n+    \"\"\"Enum indicating the byte-order of a data-type.\"\"\"\n+\n+    LITTLE = \"<\"\n+    BIG = \">\"\n+    NATIVE = \"=\"\n+    NA = \"|\"\n+\n+\n+class NoBufferPresent(Exception):\n+    \"\"\"Exception to signal that there is no requested buffer.\"\"\"\n+\n+\n+class PyArrowColumn(Column):\n+    \"\"\"\n+    A column object, with only the methods and properties required by the\n+    interchange protocol defined.\n+    A column can contain one or more chunks. Each chunk can contain up to three\n+    buffers - a data buffer, a mask buffer (depending on null representation),\n+    and an offsets buffer (if variable-size binary; e.g., variable-length\n+    strings).\n+    Note: this Column object can only be produced by ``__dataframe__``, so\n+          doesn't need its own version or ``__column__`` protocol.\n+    \"\"\"\n+\n+    def __init__(\n+        self, column: pa.Array | pa.ChunkedArray, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Handles PyArrow Arrays and ChunkedArrays.\n+        \"\"\"\n+        # Store the column as a private attribute\n+        self._col = column\n+        self._allow_copy = allow_copy\n+\n+    def size(self) -> int:\n+        \"\"\"\n+        Size of the column, in elements.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            len = self._col.to_numpy(zero_copy_only=False).size\n\nReview Comment:\n   There should be a better way to do this.\n\n\n\n",
                    "created": "2022-11-09T08:20:56.188+0000",
                    "updated": "2022-11-09T08:20:56.188+0000",
                    "started": "2022-11-09T08:20:56.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824447",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017589932\n\n\n##########\npython/pyarrow/interchange/column.py:\n##########\n@@ -0,0 +1,358 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+\n+from typing import (\n+    Any,\n+    Dict,\n+    Iterable,\n+    Optional,\n+    Tuple,\n+)\n+\n+import pyarrow as pa\n+from pyarrow.interchange.buffer import PyArrowBuffer\n+from pyarrow.interchange.dataframe_protocol import (Column, ColumnBuffers,\n+                                                    ColumnNullType, DtypeKind,\n+                                                    CategoricalDescription)\n+\n+_PYARROW_KINDS = {\n+    pa.int8(): (DtypeKind.INT, \"c\"),\n+    pa.int16(): (DtypeKind.INT, \"s\"),\n+    pa.int32(): (DtypeKind.INT, \"i\"),\n+    pa.int64(): (DtypeKind.INT, \"l\"),\n+    pa.uint8(): (DtypeKind.UINT, \"C\"),\n+    pa.uint16(): (DtypeKind.UINT, \"S\"),\n+    pa.uint32(): (DtypeKind.UINT, \"I\"),\n+    pa.uint64(): (DtypeKind.UINT, \"L\"),\n+    pa.float16(): (DtypeKind.FLOAT, \"e\"),\n+    pa.float32(): (DtypeKind.FLOAT, \"f\"),\n+    pa.float64(): (DtypeKind.FLOAT, \"g\"),\n+    pa.bool_(): (DtypeKind.BOOL, \"b\"),\n+    pa.string(): (DtypeKind.STRING, \"u\"),  # utf-8\n+    pa.large_string(): (DtypeKind.STRING, \"U\"),\n+}\n+\n+\n+class Endianness:\n+    \"\"\"Enum indicating the byte-order of a data-type.\"\"\"\n+\n+    LITTLE = \"<\"\n+    BIG = \">\"\n+    NATIVE = \"=\"\n+    NA = \"|\"\n+\n+\n+class NoBufferPresent(Exception):\n+    \"\"\"Exception to signal that there is no requested buffer.\"\"\"\n+\n+\n+class PyArrowColumn(Column):\n+    \"\"\"\n+    A column object, with only the methods and properties required by the\n+    interchange protocol defined.\n+    A column can contain one or more chunks. Each chunk can contain up to three\n+    buffers - a data buffer, a mask buffer (depending on null representation),\n+    and an offsets buffer (if variable-size binary; e.g., variable-length\n+    strings).\n+    Note: this Column object can only be produced by ``__dataframe__``, so\n+          doesn't need its own version or ``__column__`` protocol.\n+    \"\"\"\n+\n+    def __init__(\n+        self, column: pa.Array | pa.ChunkedArray, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Handles PyArrow Arrays and ChunkedArrays.\n+        \"\"\"\n+        # Store the column as a private attribute\n+        self._col = column\n+        self._allow_copy = allow_copy\n+\n+    def size(self) -> int:\n+        \"\"\"\n+        Size of the column, in elements.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            len = self._col.to_numpy(zero_copy_only=False).size\n\nReview Comment:\n   There should be a better way to get the length of a pyarrow array. Maybe turning it into a chunked array would already be a start.\n\n\n\n",
                    "created": "2022-11-09T08:22:16.342+0000",
                    "updated": "2022-11-09T08:22:16.342+0000",
                    "started": "2022-11-09T08:22:16.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824448",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824449",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017597452\n\n\n##########\npython/pyarrow/interchange/column.py:\n##########\n@@ -0,0 +1,362 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+\n+from typing import (\n+    Any,\n+    Dict,\n+    Iterable,\n+    Optional,\n+    Tuple,\n+)\n+\n+import pyarrow as pa\n+from pyarrow.interchange.buffer import PyArrowBuffer\n+from pyarrow.interchange.dataframe_protocol import (Column, ColumnBuffers,\n+                                                    ColumnNullType, DtypeKind,\n+                                                    CategoricalDescription)\n+\n+_PYARROW_KINDS = {\n+    pa.int8(): (DtypeKind.INT, \"c\"),\n+    pa.int16(): (DtypeKind.INT, \"s\"),\n+    pa.int32(): (DtypeKind.INT, \"i\"),\n+    pa.int64(): (DtypeKind.INT, \"l\"),\n+    pa.uint8(): (DtypeKind.UINT, \"C\"),\n+    pa.uint16(): (DtypeKind.UINT, \"S\"),\n+    pa.uint32(): (DtypeKind.UINT, \"I\"),\n+    pa.uint64(): (DtypeKind.UINT, \"L\"),\n+    pa.float16(): (DtypeKind.FLOAT, \"e\"),\n+    pa.float32(): (DtypeKind.FLOAT, \"f\"),\n+    pa.float64(): (DtypeKind.FLOAT, \"g\"),\n+    pa.bool_(): (DtypeKind.BOOL, \"b\"),\n+    pa.string(): (DtypeKind.STRING, \"u\"),  # utf-8\n+    pa.large_string(): (DtypeKind.STRING, \"U\"),\n+}\n+\n+\n+class Endianness:\n+    \"\"\"Enum indicating the byte-order of a data-type.\"\"\"\n+\n+    LITTLE = \"<\"\n+    BIG = \">\"\n+    NATIVE = \"=\"\n+    NA = \"|\"\n+\n+\n+class NoBufferPresent(Exception):\n+    \"\"\"Exception to signal that there is no requested buffer.\"\"\"\n+\n+\n+class PyArrowColumn(Column):\n+    \"\"\"\n+    A column object, with only the methods and properties required by the\n+    interchange protocol defined.\n+    A column can contain one or more chunks. Each chunk can contain up to three\n+    buffers - a data buffer, a mask buffer (depending on null representation),\n+    and an offsets buffer (if variable-size binary; e.g., variable-length\n+    strings).\n+    Note: this Column object can only be produced by ``__dataframe__``, so\n+          doesn't need its own version or ``__column__`` protocol.\n+    \"\"\"\n+\n+    def __init__(\n+        self, column: pa.Array | pa.ChunkedArray, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Handles PyArrow Arrays and ChunkedArrays.\n+        \"\"\"\n+        # Store the column as a private attribute\n+        self._col = column\n+        self._allow_copy = allow_copy\n+\n+    def size(self) -> int:\n+        \"\"\"\n+        Size of the column, in elements.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            len = self._col.to_numpy(zero_copy_only=False).size\n+        else:\n+            len = self._col.length()\n+        return len\n+\n+    @property\n+    def offset(self) -> int:\n+        \"\"\"\n+        Offset of first element.\n+        \"\"\"\n+        return 0\n+\n+    @property\n+    def dtype(self) -> Tuple[DtypeKind, int, str, str]:\n+        \"\"\"\n+        Dtype description as a tuple ``(kind, bit-width, format string,\n+        endianness)``.\n+        Bit-width : the number of bits as an integer\n+        Format string : data type description format string in Apache Arrow\n+                        C Data Interface format.\n+        Endianness : current only native endianness (``=``) is supported\n+        Notes:\n+            - Kind specifiers are aligned with DLPack where possible (hence\n+            the jump to 20, leave enough room for future extension)\n+            - Masks must be specified as boolean with either bit width 1\n+              (for bit masks) or 8 (for byte masks).\n+            - Dtype width in bits was preferred over bytes\n+            - Endianness isn't too useful, but included now in case in the\n+              future we need to support non-native endianness\n+            - Went with Apache Arrow format strings over NumPy format strings\n+              because they're more complete from a dataframe perspective\n+            - Format strings are mostly useful for datetime specification, and\n+              for categoricals.\n+            - For categoricals, the format string describes the type of the\n+              categorical in the data buffer. In case of a separate encoding of\n+              the categorical (e.g. an integer to string mapping), this can\n+              be derived from ``self.describe_categorical``.\n+            - Data types not included: complex, Arrow-style null, binary,\n+              decimal, and nested (list, struct, map, union) dtypes.\n+        \"\"\"\n+        dtype = self._col.type\n+        try:\n+            bit_width = dtype.bit_width\n+        except ValueError:  # in case of a variable-length strings\n+            bit_width = 8\n+        # In case of bool data type, bit_width is 1 and has to be multiplied\n+        # by 8 (why is that not the case for other dtypes?)\n+        if pa.types.is_boolean(dtype):\n+            bit_width *= 8\n\nReview Comment:\n   This is my initial idea of the `bit_width` definition but still needs to be tested and corrected.\n\n\n\n",
                    "created": "2022-11-09T08:26:01.742+0000",
                    "updated": "2022-11-09T08:26:01.742+0000",
                    "started": "2022-11-09T08:26:01.741+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824449",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017612723\n\n\n##########\npython/pyarrow/interchange/column.py:\n##########\n@@ -0,0 +1,362 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+\n+from typing import (\n+    Any,\n+    Dict,\n+    Iterable,\n+    Optional,\n+    Tuple,\n+)\n+\n+import pyarrow as pa\n+from pyarrow.interchange.buffer import PyArrowBuffer\n+from pyarrow.interchange.dataframe_protocol import (Column, ColumnBuffers,\n+                                                    ColumnNullType, DtypeKind,\n+                                                    CategoricalDescription)\n+\n+_PYARROW_KINDS = {\n+    pa.int8(): (DtypeKind.INT, \"c\"),\n+    pa.int16(): (DtypeKind.INT, \"s\"),\n+    pa.int32(): (DtypeKind.INT, \"i\"),\n+    pa.int64(): (DtypeKind.INT, \"l\"),\n+    pa.uint8(): (DtypeKind.UINT, \"C\"),\n+    pa.uint16(): (DtypeKind.UINT, \"S\"),\n+    pa.uint32(): (DtypeKind.UINT, \"I\"),\n+    pa.uint64(): (DtypeKind.UINT, \"L\"),\n+    pa.float16(): (DtypeKind.FLOAT, \"e\"),\n+    pa.float32(): (DtypeKind.FLOAT, \"f\"),\n+    pa.float64(): (DtypeKind.FLOAT, \"g\"),\n+    pa.bool_(): (DtypeKind.BOOL, \"b\"),\n+    pa.string(): (DtypeKind.STRING, \"u\"),  # utf-8\n+    pa.large_string(): (DtypeKind.STRING, \"U\"),\n+}\n+\n+\n+class Endianness:\n+    \"\"\"Enum indicating the byte-order of a data-type.\"\"\"\n+\n+    LITTLE = \"<\"\n+    BIG = \">\"\n+    NATIVE = \"=\"\n+    NA = \"|\"\n+\n+\n+class NoBufferPresent(Exception):\n+    \"\"\"Exception to signal that there is no requested buffer.\"\"\"\n+\n+\n+class PyArrowColumn(Column):\n+    \"\"\"\n+    A column object, with only the methods and properties required by the\n+    interchange protocol defined.\n+    A column can contain one or more chunks. Each chunk can contain up to three\n+    buffers - a data buffer, a mask buffer (depending on null representation),\n+    and an offsets buffer (if variable-size binary; e.g., variable-length\n+    strings).\n+    Note: this Column object can only be produced by ``__dataframe__``, so\n+          doesn't need its own version or ``__column__`` protocol.\n+    \"\"\"\n+\n+    def __init__(\n+        self, column: pa.Array | pa.ChunkedArray, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Handles PyArrow Arrays and ChunkedArrays.\n+        \"\"\"\n+        # Store the column as a private attribute\n+        self._col = column\n+        self._allow_copy = allow_copy\n+\n+    def size(self) -> int:\n+        \"\"\"\n+        Size of the column, in elements.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            len = self._col.to_numpy(zero_copy_only=False).size\n+        else:\n+            len = self._col.length()\n+        return len\n+\n+    @property\n+    def offset(self) -> int:\n+        \"\"\"\n+        Offset of first element.\n+        \"\"\"\n+        return 0\n+\n+    @property\n+    def dtype(self) -> Tuple[DtypeKind, int, str, str]:\n+        \"\"\"\n+        Dtype description as a tuple ``(kind, bit-width, format string,\n+        endianness)``.\n+        Bit-width : the number of bits as an integer\n+        Format string : data type description format string in Apache Arrow\n+                        C Data Interface format.\n+        Endianness : current only native endianness (``=``) is supported\n+        Notes:\n+            - Kind specifiers are aligned with DLPack where possible (hence\n+            the jump to 20, leave enough room for future extension)\n+            - Masks must be specified as boolean with either bit width 1\n+              (for bit masks) or 8 (for byte masks).\n+            - Dtype width in bits was preferred over bytes\n+            - Endianness isn't too useful, but included now in case in the\n+              future we need to support non-native endianness\n+            - Went with Apache Arrow format strings over NumPy format strings\n+              because they're more complete from a dataframe perspective\n+            - Format strings are mostly useful for datetime specification, and\n+              for categoricals.\n+            - For categoricals, the format string describes the type of the\n+              categorical in the data buffer. In case of a separate encoding of\n+              the categorical (e.g. an integer to string mapping), this can\n+              be derived from ``self.describe_categorical``.\n+            - Data types not included: complex, Arrow-style null, binary,\n+              decimal, and nested (list, struct, map, union) dtypes.\n+        \"\"\"\n+        dtype = self._col.type\n+        try:\n+            bit_width = dtype.bit_width\n+        except ValueError:  # in case of a variable-length strings\n+            bit_width = 8\n+        # In case of bool data type, bit_width is 1 and has to be multiplied\n+        # by 8 (why is that not the case for other dtypes?)\n+        if pa.types.is_boolean(dtype):\n+            bit_width *= 8\n+\n+        if pa.types.is_timestamp(dtype):\n+            kind = DtypeKind.DATETIME\n+            f_string = \"ts{dtype.unit}:{dtype.tz}\"\n+            return kind, bit_width, f_string, Endianness.NATIVE\n+        elif pa.types.is_dictionary(dtype):\n+            kind = DtypeKind.CATEGORICAL\n+            f_string = \"L\"\n+            return kind, bit_width, f_string, Endianness.NATIVE\n+        else:\n+            return self._dtype_from_arrowdtype(dtype, bit_width)\n+\n+    def _dtype_from_arrowdtype(\n+        self, dtype, bit_width\n+    ) -> Tuple[DtypeKind, int, str, str]:\n+        \"\"\"\n+        See `self.dtype` for details.\n+        \"\"\"\n+        # Note: 'c' (complex) not handled yet (not in array spec v1).\n+        #       'b', 'B' (bytes), 'S', 'a', (old-style string) 'V' (void)\n+        #       not handled datetime and timedelta both map to datetime\n+        #       (is timedelta handled?)\n+\n+        kind, f_string = _PYARROW_KINDS.get(dtype, (None, None))\n+        if kind is None:\n+            raise ValueError(\n+                f\"Data type {dtype} not supported by interchange protocol\")\n+\n+        return kind, bit_width, f_string, Endianness.NATIVE\n+\n+    @property\n+    def describe_categorical(self) -> CategoricalDescription:\n+        \"\"\"\n+        If the dtype is categorical, there are two options:\n+        - There are only values in the data buffer.\n+        - There is a separate non-categorical Column encoding for categorical\n+          values.\n+        Raises TypeError if the dtype is not categorical\n+        Content of returned dict:\n+            - \"is_ordered\" : bool, whether the ordering of dictionary indices\n+                             is semantically meaningful.\n+            - \"is_dictionary\" : bool, whether a dictionary-style mapping of\n+                                categorical values to other objects exists\n+            - \"categories\" : Column representing the (implicit) mapping of\n+                             indices to category values (e.g. an array of\n+                             cat1, cat2, ...). None if not a dictionary-style\n+                             categorical.\n+        \"\"\"\n+        if isinstance(self._col, pa.ChunkedArray):\n+            arr = self._col.combine_chunks()\n+        else:\n+            arr = self._col\n+\n+        if not pa.types.is_dictionary(arr.type):\n+            raise TypeError(\n+                \"describe_categorical only works on a column with \"\n+                \"categorical dtype!\"\n+            )\n+\n+        return {\n+            \"is_ordered\": self._col.type.ordered,\n+            \"is_dictionary\": True,\n+            \"categories\": PyArrowColumn(arr.dictionary),\n+        }\n+\n+    @property\n+    def describe_null(self) -> Tuple[ColumnNullType, Any]:\n+        return ColumnNullType.USE_BYTEMASK, 0\n+\n+    @property\n+    def null_count(self) -> int:\n+        \"\"\"\n+        Number of null elements. Should always be known.\n+        \"\"\"\n+        return self._col.null_count\n+\n+    @property\n+    def metadata(self) -> Dict[str, Any]:\n+        \"\"\"\n+        Store specific metadata of the column.\n+        \"\"\"\n+        pass\n+\n+    def num_chunks(self) -> int:\n+        \"\"\"\n+        Return the number of chunks the column consists of.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            n_chunks = 1\n+        else:\n+            n_chunks = self._col.num_chunks\n+        return n_chunks\n+\n+    def get_chunks(self, n_chunks: Optional[int] = None) -> Iterable[\"Column\"]:\n+        \"\"\"\n+        Return an iterator yielding the chunks.\n+        See `DataFrame.get_chunks` for details on ``n_chunks``.\n+        \"\"\"\n+        if n_chunks and n_chunks > 1:\n+            chunk_size = self.size() // n_chunks\n+            if self.size() % n_chunks != 0:\n+                chunk_size += 1\n+\n+            if isinstance(self._col, pa.ChunkedArray):\n+                array = self._col.combine_chunks()\n+            else:\n+                array = self._col\n+\n+            i = 0\n+            for start in range(0, chunk_size * n_chunks, chunk_size):\n+                yield PyArrowColumn(\n+                    array.slice(start, chunk_size), self._allow_copy\n+                )\n+                i += 1\n+            # In case when the size of the chunk is such that the resulting\n+            # list is one less chunk then n_chunks -> append an empty chunk\n+            if i == n_chunks - 1:\n+                yield PyArrowColumn(pa.array([]), self._allow_copy)\n\nReview Comment:\n   Example: selecting 5 chunks for an array of length 12. If `chunk_size=2`, we get 6 chunks, if `chunk_size=3`, we get 4 chunks =) So we end up producing 4 chunks with `chunk_size=3` plus an empty chunk.\n\n\n\n",
                    "created": "2022-11-09T08:34:22.565+0000",
                    "updated": "2022-11-09T08:34:22.565+0000",
                    "started": "2022-11-09T08:34:22.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824450",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017615984\n\n\n##########\npython/pyarrow/interchange/dataframe.py:\n##########\n@@ -0,0 +1,132 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+from typing import (\n+    Any,\n+    Iterable,\n+    Optional,\n+    Sequence,\n+)\n+\n+import pyarrow as pa\n+\n+from pyarrow.interchange.column import PyArrowColumn\n+from pyarrow.interchange.dataframe_protocol import DataFrame as DataFrameXchg\n+\n+\n+class TableXchg(DataFrameXchg):\n+    \"\"\"\n+    A data frame class, with only the methods required by the interchange\n+    protocol defined.\n+    Instances of this (private) class are returned from\n+    ``pd.DataFrame.__dataframe__`` as objects with the methods and\n+    attributes defined on this class.\n+    \"\"\"\n+\n+    def __init__(\n+        self, df: pa.Table, nan_as_null: bool = False, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Constructor - an instance of this (private) class is returned from\n+        `pa.Table.__dataframe__`.\n+        \"\"\"\n+        self._df = df\n+        # ``nan_as_null`` is a keyword intended for the consumer to tell the\n+        # producer to overwrite null values in the data with ``NaN`` (or\n+        # ``NaT``). This currently has no effect; once support for nullable\n+        # extension dtypes is added, this value should be propagated to\n+        # columns.\n+        self._nan_as_null = nan_as_null\n+        self._allow_copy = allow_copy\n+\n+    def __dataframe__(\n+        self, nan_as_null: bool = False, allow_copy: bool = True\n+    ) -> TableXchg:\n+        return TableXchg(self._df, nan_as_null, allow_copy)\n+\n+    @property\n+    def metadata(self) -> dict[str, Any]:\n+        # The metadata for the data frame, as a dictionary with string keys.\n+        # Add schema metadata here (pandas metadata, ot custom metadata)\n+        if self._df.schema.metadata:\n+            schema_metadata = {k.decode('utf8'): v.decode('utf8')\n+                           for k, v in self._df.schema.metadata.items()}\n+            return schema_metadata\n+        else:\n+            return {}\n\nReview Comment:\n   Added this part after testing `pa.Table -> pd.DataFrame` to not get an error for reading the metadata from a NoneType.\n\n\n\n",
                    "created": "2022-11-09T08:36:17.825+0000",
                    "updated": "2022-11-09T08:36:17.825+0000",
                    "started": "2022-11-09T08:36:17.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824451",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017658822\n\n\n##########\npython/pyarrow/interchange/column.py:\n##########\n@@ -0,0 +1,358 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+\n+from typing import (\n+    Any,\n+    Dict,\n+    Iterable,\n+    Optional,\n+    Tuple,\n+)\n+\n+import pyarrow as pa\n+from pyarrow.interchange.buffer import PyArrowBuffer\n+from pyarrow.interchange.dataframe_protocol import (Column, ColumnBuffers,\n+                                                    ColumnNullType, DtypeKind,\n+                                                    CategoricalDescription)\n+\n+_PYARROW_KINDS = {\n+    pa.int8(): (DtypeKind.INT, \"c\"),\n+    pa.int16(): (DtypeKind.INT, \"s\"),\n+    pa.int32(): (DtypeKind.INT, \"i\"),\n+    pa.int64(): (DtypeKind.INT, \"l\"),\n+    pa.uint8(): (DtypeKind.UINT, \"C\"),\n+    pa.uint16(): (DtypeKind.UINT, \"S\"),\n+    pa.uint32(): (DtypeKind.UINT, \"I\"),\n+    pa.uint64(): (DtypeKind.UINT, \"L\"),\n+    pa.float16(): (DtypeKind.FLOAT, \"e\"),\n+    pa.float32(): (DtypeKind.FLOAT, \"f\"),\n+    pa.float64(): (DtypeKind.FLOAT, \"g\"),\n+    pa.bool_(): (DtypeKind.BOOL, \"b\"),\n+    pa.string(): (DtypeKind.STRING, \"u\"),  # utf-8\n+    pa.large_string(): (DtypeKind.STRING, \"U\"),\n+}\n+\n+\n+class Endianness:\n+    \"\"\"Enum indicating the byte-order of a data-type.\"\"\"\n+\n+    LITTLE = \"<\"\n+    BIG = \">\"\n+    NATIVE = \"=\"\n+    NA = \"|\"\n+\n+\n+class NoBufferPresent(Exception):\n+    \"\"\"Exception to signal that there is no requested buffer.\"\"\"\n+\n+\n+class PyArrowColumn(Column):\n+    \"\"\"\n+    A column object, with only the methods and properties required by the\n+    interchange protocol defined.\n+    A column can contain one or more chunks. Each chunk can contain up to three\n+    buffers - a data buffer, a mask buffer (depending on null representation),\n+    and an offsets buffer (if variable-size binary; e.g., variable-length\n+    strings).\n+    Note: this Column object can only be produced by ``__dataframe__``, so\n+          doesn't need its own version or ``__column__`` protocol.\n+    \"\"\"\n+\n+    def __init__(\n+        self, column: pa.Array | pa.ChunkedArray, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Handles PyArrow Arrays and ChunkedArrays.\n+        \"\"\"\n+        # Store the column as a private attribute\n+        self._col = column\n+        self._allow_copy = allow_copy\n+\n+    def size(self) -> int:\n+        \"\"\"\n+        Size of the column, in elements.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            len = self._col.to_numpy(zero_copy_only=False).size\n\nReview Comment:\n   I think `len(self._col)` should work (in contrast to Table, the Array doesn't have a explicit attribute for it)\n\n\n\n",
                    "created": "2022-11-09T09:09:51.225+0000",
                    "updated": "2022-11-09T09:09:51.225+0000",
                    "started": "2022-11-09T09:09:51.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824463",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/824464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#discussion_r1017658822\n\n\n##########\npython/pyarrow/interchange/column.py:\n##########\n@@ -0,0 +1,358 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import annotations\n+\n+from typing import (\n+    Any,\n+    Dict,\n+    Iterable,\n+    Optional,\n+    Tuple,\n+)\n+\n+import pyarrow as pa\n+from pyarrow.interchange.buffer import PyArrowBuffer\n+from pyarrow.interchange.dataframe_protocol import (Column, ColumnBuffers,\n+                                                    ColumnNullType, DtypeKind,\n+                                                    CategoricalDescription)\n+\n+_PYARROW_KINDS = {\n+    pa.int8(): (DtypeKind.INT, \"c\"),\n+    pa.int16(): (DtypeKind.INT, \"s\"),\n+    pa.int32(): (DtypeKind.INT, \"i\"),\n+    pa.int64(): (DtypeKind.INT, \"l\"),\n+    pa.uint8(): (DtypeKind.UINT, \"C\"),\n+    pa.uint16(): (DtypeKind.UINT, \"S\"),\n+    pa.uint32(): (DtypeKind.UINT, \"I\"),\n+    pa.uint64(): (DtypeKind.UINT, \"L\"),\n+    pa.float16(): (DtypeKind.FLOAT, \"e\"),\n+    pa.float32(): (DtypeKind.FLOAT, \"f\"),\n+    pa.float64(): (DtypeKind.FLOAT, \"g\"),\n+    pa.bool_(): (DtypeKind.BOOL, \"b\"),\n+    pa.string(): (DtypeKind.STRING, \"u\"),  # utf-8\n+    pa.large_string(): (DtypeKind.STRING, \"U\"),\n+}\n+\n+\n+class Endianness:\n+    \"\"\"Enum indicating the byte-order of a data-type.\"\"\"\n+\n+    LITTLE = \"<\"\n+    BIG = \">\"\n+    NATIVE = \"=\"\n+    NA = \"|\"\n+\n+\n+class NoBufferPresent(Exception):\n+    \"\"\"Exception to signal that there is no requested buffer.\"\"\"\n+\n+\n+class PyArrowColumn(Column):\n+    \"\"\"\n+    A column object, with only the methods and properties required by the\n+    interchange protocol defined.\n+    A column can contain one or more chunks. Each chunk can contain up to three\n+    buffers - a data buffer, a mask buffer (depending on null representation),\n+    and an offsets buffer (if variable-size binary; e.g., variable-length\n+    strings).\n+    Note: this Column object can only be produced by ``__dataframe__``, so\n+          doesn't need its own version or ``__column__`` protocol.\n+    \"\"\"\n+\n+    def __init__(\n+        self, column: pa.Array | pa.ChunkedArray, allow_copy: bool = True\n+    ) -> None:\n+        \"\"\"\n+        Handles PyArrow Arrays and ChunkedArrays.\n+        \"\"\"\n+        # Store the column as a private attribute\n+        self._col = column\n+        self._allow_copy = allow_copy\n+\n+    def size(self) -> int:\n+        \"\"\"\n+        Size of the column, in elements.\n+        \"\"\"\n+        if isinstance(self._col, pa.Array):\n+            len = self._col.to_numpy(zero_copy_only=False).size\n\nReview Comment:\n   I think `len(self._col)` should work (in contrast to Table or ChunkedArray, the Array doesn't have a explicit attribute for it)\r\n   \r\n   And `len(..)` should probably also work for both Array and ChunkedArray\n\n\n\n",
                    "created": "2022-11-09T09:10:46.271+0000",
                    "updated": "2022-11-09T09:10:46.271+0000",
                    "started": "2022-11-09T09:10:46.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824464",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/825212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "honno commented on PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#issuecomment-1311462693\n\n   FWIW we have a compliance suite for interchange protocol adopters over at [data-apis/dataframe-interchange-tests](https://github.com/data-apis/dataframe-interchange-tests). It's a bit awkward to use as you'd have to write a compatibility layer in `wrappers.py`, but might be interesting. (Cool to see you're working on this!)\n\n\n",
                    "created": "2022-11-11T09:41:35.210+0000",
                    "updated": "2022-11-11T09:41:35.210+0000",
                    "started": "2022-11-11T09:41:35.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825212",
                    "issueId": "13491248"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13491248/worklog/825687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on PR #14613:\nURL: https://github.com/apache/arrow/pull/14613#issuecomment-1313404166\n\n   Thanks for the info @honno, the compliance suite is definitely something we have to use!\r\n   (Cool to see you continue working on the data API standards! \ud83d\ude09 )\n\n\n",
                    "created": "2022-11-14T10:00:23.569+0000",
                    "updated": "2022-11-14T10:00:23.569+0000",
                    "started": "2022-11-14T10:00:23.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825687",
                    "issueId": "13491248"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7cc1c71c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20f707e2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cd82318[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3488e976[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c0675e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5d23bc21[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@308e947e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@433e0840[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cb8ec84[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2c3a9786[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6853db1b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5b9ca259[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "2022-10-25 09:04:56.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18152/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-10-25T09:04:56.000+0000",
        "updated": "2022-11-14T10:00:23.000+0000",
        "timeoriginalestimate": null,
        "description": "For the documentation and spec: [https://data-apis.org/dataframe-protocol/latest/index.html]\r\nBlog post about it: [https://data-apis.org/blog/dataframe_protocol_rfc/]\r\n\u00a0\r\nSeveral DataFrame libraries now support this interchange protocol (pandas, modin, vaex, cudf).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] DataFrame Interchange Protocol for pyarrow Table",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z1a7ps:",
        "customfield_12314139": null
    }
}