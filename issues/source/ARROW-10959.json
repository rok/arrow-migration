{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13346799",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799",
    "key": "ARROW-10959",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615308",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615308",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13042654",
                    "key": "ARROW-555",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042654",
                    "fields": {
                        "summary": "[C++] String algorithm library for StringArray/BinaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12615310",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615310",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13377637",
                    "key": "ARROW-12709",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377637",
                    "fields": {
                        "summary": "[C++] Add variadic string join kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10959/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 35,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/527179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels opened a new pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990\n\n\n   @jorisvandenbossche I've implemented this kernel as a binary (arity) kernel, so the input list array *and* the separator input string array can both be an array (see python test).\r\n   \r\n   I did not implement the case where the input list is a scalar, and the separator an array, since I don't think that's very common.\r\n   \r\n   And note that the kernel is named `binary_join` because it takes string-like and binary-like inputs.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T12:54:41.988+0000",
                    "updated": "2020-12-22T12:54:41.988+0000",
                    "started": "2020-12-22T12:54:41.988+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527179",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/527184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-749537303\n\n\n   https://issues.apache.org/jira/browse/ARROW-10959\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T13:22:06.274+0000",
                    "updated": "2020-12-22T13:22:06.274+0000",
                    "started": "2020-12-22T13:22:06.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527184",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/530632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r551292722\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       Another option could also be to skip nulls from the list, instead of skipping the list entirely if there is a null present? \r\n   (so eg `[\"eee\", null]` could give `\"eee\"` instead of ``null``? \r\n   \r\n   (don't really know what is most sensible to do, but generally for aggregations (and you can see a single join as a kind of aggregation?) nulls get skipped instead of propagated)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T12:38:10.275+0000",
                    "updated": "2021-01-04T12:38:10.275+0000",
                    "started": "2021-01-04T12:38:10.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530632",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/530641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r551295838\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       My reasoning was that we can get that behavior using `fill_null`, while the current behavior would otherwise be difficult to get (we don't have any kernel that will replace list value with null if any of its list elements is null). I'm not sure if that's a good reason to have the current behavior though.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T12:44:43.497+0000",
                    "updated": "2021-01-04T12:44:43.497+0000",
                    "started": "2021-01-04T12:44:43.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530641",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/565307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r593172558\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       Do you agree with my reasoning Joris? this current behavior is a bit more flexible, since with fill_null we can get the behavior you want.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-12T13:30:55.972+0000",
                    "updated": "2021-03-12T13:30:55.972+0000",
                    "started": "2021-03-12T13:30:55.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "565307",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/571878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r601484145\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       Sorry for the late reply here. Using `fill_null` (with empty string I suppose) would not be *fully* equivalent compared to skipping nulls, I think (assuming `[\"a\", null, \"b\"]` with separator `\"-\"`, the result could be `\"a--b\"` vs `a-b`). \r\n   \r\n   That said, I am not sure myself what the best / most useful behaviour would be. So it's probably fine to pick whatever behaviour (not sure what's the easiest regarding implementation?) and potentially add an option for it later if there is demand for it (similar to how we are adding an option to the numeric reductions for skipping nulls or not).\r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T13:28:22.360+0000",
                    "updated": "2021-03-25T13:28:22.360+0000",
                    "started": "2021-03-25T13:28:22.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571878",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/571885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r601492842\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       Looking at how pandas / R does this right now:\r\n   \r\n   Pandas actually results in a missing value:\r\n   \r\n   ```\r\n   In [7]: s = pd.Series([[\"a\", None, \"b\"], [\"c\", \"d\", \"e\"]])\r\n   \r\n   In [8]: s.str.join(\"-\")\r\n   Out[8]: \r\n   0      NaN\r\n   1    c-d-e\r\n   dtype: object\r\n   ```\r\n   \r\n   but I doubt that this is necessarily intentional (when it comes to missing values). The docstring basically says that if there any non-string element in a list, the result is NaN for that list. And I assume this is just because in that case the stdlib `\"-\".join(..)` which is used under the hood fails.\r\n   \r\n   For R, I am not fully sure what's the most \"typical\" way to do this, but with the basic `paste`, you actually get the string representation of NA:\r\n   \r\n   ```\r\n   > paste(\"a\", NA, \"b\", sep=\"-\")\r\n   [1] \"a-NA-b\"\r\n   ```\r\n   \r\n   (but `paste` is more general in converting input to strings first). \r\n   Using a more specific string function from `stringr`, it actually results in NA:\r\n   \r\n   ```\r\n   > str_c(\"a\", \"b\", sep=\"-\")\r\n   [1] \"a-b\"\r\n   > str_c(\"a\", NA, \"b\", sep=\"-\")\r\n   [1] NA\r\n   ```\r\n   \r\n   where the docstring explicitly mentions this (*\"Like most other R functions, missing values are \"infectious\": whenever a missing value is combined with another string the result will always be missing\"*). So that could be an argument for returning null. But since in Arrow the default is that nulls are *not* infectious, it could also be an argument to skip it ;)\r\n   \r\n   cc @ianmcook \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T13:38:54.919+0000",
                    "updated": "2021-03-25T13:38:54.919+0000",
                    "started": "2021-03-25T13:38:54.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571885",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/572566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r602143253\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       > So it's probably fine to pick whatever behaviour (not sure what's the easiest regarding implementation?) and potentially add an option for it later if there is demand for it (similar to how we are adding an option to the numeric reductions for skipping nulls or not)\r\n   \r\n   Yes, although you could say you'd want a drop_null to implement the `[\"a\", null, \"b\"]` -> `\"a-b\"` behavior. So I still think the current behaviour gives the most flexibility (assuming the existence of a drop_null for lists)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T09:44:56.850+0000",
                    "updated": "2021-03-26T09:44:56.850+0000",
                    "started": "2021-03-26T09:44:56.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572566",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/572685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-808268875\n\n\n   Failures seem unrelated.\r\n   @pitrou this is ready for review assuming @jorisvandenbossche agrees with the current behavior\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T14:35:52.523+0000",
                    "updated": "2021-03-26T14:35:52.523+0000",
                    "started": "2021-03-26T14:35:52.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572685",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r603289347\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n\nReview comment:\n       For readability, can you split this function into different functions based on the various input kinds, e.g. `ExecArrayArray`, `ExecArrayScalar`, `ExecScalarArray`, `ExecScalarScalar`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i)) ||\n+              separator_array.IsNull(i)) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            const auto separator = separator_array.GetView(i);\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      } else if (batch[1].kind() == Datum::SCALAR) {\n+        const auto& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          KERNEL_ASSIGN_OR_RAISE(\n+              auto nulls, ctx,\n+              MakeArrayOfNull(list.value_type(), list.length(), ctx->memory_pool()));\n+          *output = *nulls->data();\n+          output->type = list.value_type();\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i))) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      }\n+      std::shared_ptr<Array> string_array;\n+\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_array));\n+      *output = *string_array->data();\n+      // correct the output type based on the input\n+      output->type = list.value_type();\n+    }\n+  }\n+};\n+\n+const FunctionDoc binary_join_doc(\n+    \"Join list of strings together with a `seperator` to form a single string\",\n+    (\"Insert `seperator` between each list element, and concatenate them.\"),\n+    {\"list\", \"separator\"});\n+\n+void AddJoin(FunctionRegistry* registry) {\n+  auto func =\n+      std::make_shared<ScalarFunction>(\"binary_join\", Arity::Binary(), &binary_join_doc);\n+  for (const std::shared_ptr<DataType>& ty : BaseBinaryTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinaryBase<Join>(*ty);\n+    DCHECK_OK(\n+        func->AddKernel({InputType::Array(list(ty)), InputType::Scalar(ty)}, ty, exec));\n+    DCHECK_OK(\n+        func->AddKernel({InputType::Array(list(ty)), InputType::Array(ty)}, ty, exec));\n+    // do we want to support scalar[list[str]] with array[str] ?\n\nReview comment:\n       It doesn't sound very useful. Either way, if it's not supported, then simply remove the commented out code.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i)) ||\n+              separator_array.IsNull(i)) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            const auto separator = separator_array.GetView(i);\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      } else if (batch[1].kind() == Datum::SCALAR) {\n+        const auto& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          KERNEL_ASSIGN_OR_RAISE(\n+              auto nulls, ctx,\n+              MakeArrayOfNull(list.value_type(), list.length(), ctx->memory_pool()));\n+          *output = *nulls->data();\n+          output->type = list.value_type();\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i))) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      }\n+      std::shared_ptr<Array> string_array;\n+\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_array));\n+      *output = *string_array->data();\n+      // correct the output type based on the input\n+      output->type = list.value_type();\n+    }\n+  }\n+};\n+\n+const FunctionDoc binary_join_doc(\n+    \"Join list of strings together with a `seperator` to form a single string\",\n\nReview comment:\n       \"separator\"\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n\nReview comment:\n       Use `checked_cast`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n\nReview comment:\n       Note that the computation logic doesn't depend on utf8 vs. binary, hence it would be nice to only instantiate two kernel routines (one per offset type), not four.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       I'm ok with this behaviour. We can add an option later if we want to override it.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -575,6 +575,22 @@ when a positive ``max_splits`` is given.\n   as separator.\n \n \n+String joining\n+~~~~~~~~~~~~~~\n+\n+The inverse of string splitting:\n+\n++--------------------------+------------+-------------------------+-------------------+---------+\n+| Function name            | Arity      | Input types             | Output type       | Notes   |\n++==========================+============+=========================+===================+=========+\n+| binary_join              | Binary     | List-like               | String-like       | \\(1)    |\n\nReview comment:\n       Since the two inputs must be of different types, it would be nice to make this explicit here (perhaps by making two columns \"first input type\" and \"second input type\"?).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i)) ||\n+              separator_array.IsNull(i)) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            const auto separator = separator_array.GetView(i);\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      } else if (batch[1].kind() == Datum::SCALAR) {\n+        const auto& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          KERNEL_ASSIGN_OR_RAISE(\n+              auto nulls, ctx,\n+              MakeArrayOfNull(list.value_type(), list.length(), ctx->memory_pool()));\n+          *output = *nulls->data();\n+          output->type = list.value_type();\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i))) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      }\n+      std::shared_ptr<Array> string_array;\n+\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_array));\n+      *output = *string_array->data();\n+      // correct the output type based on the input\n+      output->type = list.value_type();\n+    }\n+  }\n+};\n+\n+const FunctionDoc binary_join_doc(\n+    \"Join list of strings together with a `seperator` to form a single string\",\n+    (\"Insert `seperator` between each list element, and concatenate them.\"),\n\nReview comment:\n       Can you mention the null behaviour as well?\n\n##########\nFile path: cpp/src/arrow/array/builder_binary.h\n##########\n@@ -77,6 +77,25 @@ class BaseBinaryBuilder : public ArrayBuilder {\n     return Append(value.data(), static_cast<offset_type>(value.size()));\n   }\n \n+  /// AppendCurrent does not add a new offset\n+  Status AppendCurrent(const uint8_t* value, offset_type length) {\n\nReview comment:\n       Call this `AppendToCurrent`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i)) ||\n+              separator_array.IsNull(i)) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            const auto separator = separator_array.GetView(i);\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n\nReview comment:\n       or `UnsafeAppend(\"\", 0)`...\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -575,6 +575,22 @@ when a positive ``max_splits`` is given.\n   as separator.\n \n \n+String joining\n+~~~~~~~~~~~~~~\n+\n+The inverse of string splitting:\n+\n++--------------------------+------------+-------------------------+-------------------+---------+\n+| Function name            | Arity      | Input types             | Output type       | Notes   |\n++==========================+============+=========================+===================+=========+\n+| binary_join              | Binary     | List-like               | String-like       | \\(1)    |\n++--------------------------+------------+-------------------------+-------------------+---------+\n+\n+* \\(1) First argument must be an array, while the second argument (`separator`)\n+can be a scalar or array. When the `separator` argument is an array, the join is\n+performed by each corresponding element.\n\nReview comment:\n       Be careful with indentation in bullet lists, you need the continuation lines to be indented as the first line after the `*`:\r\n   ```\r\n   * \\(1) First argument must be an array, while the second argument (`separator`)\r\n     can be a scalar or array. When the `separator` argument is an array, the join is\r\n     performed by each corresponding element.\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i)) ||\n+              separator_array.IsNull(i)) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n\nReview comment:\n       Can be `UnsafeAppendNull`, since you reserved the space above.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n+          const ArrayType* strings = static_cast<const ArrayType*>(slice.get());\n+          if ((strings->null_count() > 0) || (list.IsNull(i)) ||\n+              separator_array.IsNull(i)) {\n+            KERNEL_RETURN_IF_ERROR(ctx, builder.AppendNull());\n+          } else {\n+            const auto separator = separator_array.GetView(i);\n+            if (strings->length() > 0) {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.Append(strings->GetView(0)));\n+              for (int64_t j = 1; j < strings->length(); j++) {\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(separator));\n+                KERNEL_RETURN_IF_ERROR(ctx, builder.AppendCurrent(strings->GetView(j)));\n+              }\n+            } else {\n+              KERNEL_RETURN_IF_ERROR(ctx, builder.AppendEmptyValue());\n+            }\n+          }\n+        }\n+      } else if (batch[1].kind() == Datum::SCALAR) {\n+        const auto& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          KERNEL_ASSIGN_OR_RAISE(\n+              auto nulls, ctx,\n+              MakeArrayOfNull(list.value_type(), list.length(), ctx->memory_pool()));\n+          *output = *nulls->data();\n+          output->type = list.value_type();\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n\nReview comment:\n       Same comments as above wrt. efficiency.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1828,6 +1828,148 @@ void AddUtf8Length(FunctionRegistry* registry) {\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+// binary join\n+\n+template <typename Type>\n+struct Join {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ListArrayType = ListArray;\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].kind() == Datum::SCALAR) {\n+      const ListScalar& list = checked_cast<const ListScalar&>(*batch[0].scalar());\n+      if (!list.is_valid) {\n+        return;\n+      }\n+      if (batch[1].kind() == Datum::SCALAR) {\n+        const BaseBinaryScalar& separator_scalar =\n+            checked_cast<const BaseBinaryScalar&>(*batch[1].scalar());\n+        if (!separator_scalar.is_valid) {\n+          return;\n+        }\n+        util::string_view separator(*separator_scalar.value);\n+\n+        TypedBufferBuilder<uint8_t> builder(ctx->memory_pool());\n+        auto Append = [&](util::string_view value) {\n+          return builder.Append(reinterpret_cast<const uint8_t*>(value.data()),\n+                                static_cast<offset_type>(value.size()));\n+        };\n+\n+        const ArrayType* strings = static_cast<const ArrayType*>(list.value.get());\n+        if (strings->null_count() > 0) {\n+          // since the input list is not null, the out datum needs to be assigned to\n+          *out = MakeNullScalar(list.value->type());\n+          return;\n+        }\n+        if (strings->length() > 0) {\n+          KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(0)));\n+          for (int64_t j = 1; j < strings->length(); j++) {\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(separator));\n+            KERNEL_RETURN_IF_ERROR(ctx, Append(strings->GetView(j)));\n+          }\n+        }\n+        std::shared_ptr<Buffer> string_buffer;\n+\n+        KERNEL_RETURN_IF_ERROR(ctx, builder.Finish(&string_buffer));\n+        KERNEL_ASSIGN_OR_RAISE(auto scalar_right_type, ctx,\n+                               MakeScalar<std::shared_ptr<Buffer>>(\n+                                   list.value->type(), std::move(string_buffer)));\n+        *out = scalar_right_type;\n+      }  // do we want to support scalar[list[str]] with array[str] ?\n+    } else {\n+      const ListArrayType list(batch[0].array());\n+      ArrayData* output = out->mutable_array();\n+\n+      BuilderType builder(ctx->memory_pool());\n+      KERNEL_RETURN_IF_ERROR(ctx, builder.Reserve(list.length()));\n+      if (batch[1].kind() == Datum::ARRAY) {\n+        ArrayType separator_array(batch[1].array());\n+        for (int64_t i = 0; i < list.length(); ++i) {\n+          const std::shared_ptr<Array> slice = list.value_slice(i);\n\nReview comment:\n       I think it would be much faster to avoid instantiating this temporary array for each list element.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T13:46:03.755+0000",
                    "updated": "2021-03-29T13:46:03.755+0000",
                    "started": "2021-03-29T13:46:03.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573488",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-809650002\n\n\n   Regarding \"join\" in the name:\r\n   +1 for consistency with Python's join function\r\n   -1 because as Arrow gains more database-like features, the word \"join\" is likely to confuse people. \"concat\" might be better.\r\n   \r\n   \r\n   Regarding \"binary\" in the name:\r\n   IMO that is likely to cause users to get the impression that this is _not_ for strings.\r\n   \r\n   It would also be good for the name to reflect that this operates on a list array.\r\n   \r\n   How about renaming it `list_concat`?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:29:03.149+0000",
                    "updated": "2021-03-29T19:29:03.149+0000",
                    "started": "2021-03-29T19:29:03.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573674",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#discussion_r603563736\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -428,6 +433,26 @@ TYPED_TEST(TestStringKernels, StrptimeDoesNotProvideDefaultOptions) {\n   ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input}));\n }\n \n+TYPED_TEST(TestStringKernels, Join) {\n+  auto separator = this->scalar(\"--\");\n+  CheckScalarBinary(\n+      \"binary_join\", list(this->type()),\n+      R\"([[\"a\", \"bb\", \"ccc\"], [], null, [\"dd\"], [\"eee\", null], [\"ff\", \"\"]])\", separator,\n+      this->type(), R\"([\"a--bb--ccc\", \"\", null, \"dd\", null, \"ff--\"])\");\n\nReview comment:\n       Regarding the R bindings: we will need some additional things beyond the scope of this PR to implement useful translations for `paste()` and `str_c()`\u2014most importantly, a way of combining two or more arrays row-wise into list arrays (because in most real-world usage the strings users want to combine won't be in a list array). So I think it's fine to save those considerations for later.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:41:45.287+0000",
                    "updated": "2021-03-29T19:41:45.287+0000",
                    "started": "2021-03-29T19:41:45.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573682",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-809664145\n\n\n   I'll just point out that \"join\" is not a python-ism.  There is a string join in Java, Rust, C#, JavaScript, etc. and it is consistently called join.  I think R is the only language I can find that doesn't call it \"join\".\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:47:38.106+0000",
                    "updated": "2021-03-29T19:47:38.106+0000",
                    "started": "2021-03-29T19:47:38.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573685",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-809664771\n\n\n   > I'll just point out that \"join\" is not a python-ism. There is a string join in Java, Rust, C#, JavaScript, etc. and it is consistently called join. I think R is the only language I can find that doesn't call it \"join\".\r\n   \r\n   SQL\u2014which probably has more users than all those languages combined \ud83d\ude01\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:48:36.650+0000",
                    "updated": "2021-03-29T19:48:36.650+0000",
                    "started": "2021-03-29T19:48:36.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573687",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-809669201\n\n\n   > > I'll just point out that \"join\" is not a python-ism. There is a string join in Java, Rust, C#, JavaScript, etc. and it is consistently called join. I think R is the only language I can find that doesn't call it \"join\".\r\n   > \r\n   > SQL\u2014which probably has more users than all those languages combined \ud83d\ude01\r\n   \r\n   Snark aside, that's a good point, and since users who are thinking in the SQL way will always be at least one abstraction layer removed from the C++ library, that makes me think \"join\" is fine \ud83d\udc4d \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:56:05.160+0000",
                    "updated": "2021-03-29T19:56:05.160+0000",
                    "started": "2021-03-29T19:56:05.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573688",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-809670982\n\n\n   In SQL it's called `CONCAT`? (https://www.w3schools.com/sql/func_mysql_concat.asp, although this doesn't have the concept of a join separator)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T19:58:44.205+0000",
                    "updated": "2021-03-29T19:58:44.205+0000",
                    "started": "2021-03-29T19:58:44.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573690",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/573694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-809672648\n\n\n   > In SQL it's called `CONCAT`? (https://www.w3schools.com/sql/func_mysql_concat.asp, although this doesn't have the concept of a join separator)\r\n   \r\n   In SQL, `concat_ws` is the variant with a separator\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T20:01:24.995+0000",
                    "updated": "2021-03-29T20:01:24.995+0000",
                    "started": "2021-03-29T20:01:24.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573694",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/594063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-836874807\n\n\n   @maartenbreddels Do you want to update this PR?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-10T15:54:47.659+0000",
                    "updated": "2021-05-10T15:54:47.659+0000",
                    "started": "2021-05-10T15:54:47.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594063",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/605318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-853166144\n\n\n   I'm going to take this up.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T16:20:19.917+0000",
                    "updated": "2021-06-02T16:20:19.917+0000",
                    "started": "2021-06-02T16:20:19.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605318",
                    "issueId": "13346799"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/worklog/605837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8990:\nURL: https://github.com/apache/arrow/pull/8990#issuecomment-853781608\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T10:58:10.776+0000",
                    "updated": "2021-06-03T10:58:10.776+0000",
                    "started": "2021-06-03T10:58:10.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605837",
                    "issueId": "13346799"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@47be3e2f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38ea164b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69aa1017[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@11a0b27[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40c92731[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7c9ca1e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eda4858[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6fc83f97[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66316df0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2fe1c212[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4395d73e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6d8f7c5c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 07 17:08:14 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-07T17:08:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10959/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-12-18T14:47:12.000+0000",
        "updated": "2021-06-07T17:08:25.000+0000",
        "timeoriginalestimate": null,
        "description": "Similar to Python's str.join\r\n\r\nFor example, if the separator were {{\"-\"}}, this takes input:\r\n{code}\r\nListArray<list<item: string>>\r\n[\r\n  [\"foo\",\"bar\"],\r\n  [\"push\",\"pop\"]\r\n]\r\n{code}\r\nand returns output:\r\n{code}\r\nArray<string>\r\n[ \r\n  \"foo-bar\",\r\n  \"push-pop\"\r\n] \r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add scalar string join kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346799/comment/17358728",
                    "id": "17358728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8990\n[https://github.com/apache/arrow/pull/8990]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-07T17:08:14.381+0000",
                    "updated": "2021-06-07T17:08:14.381+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lnb4:",
        "customfield_12314139": null
    }
}