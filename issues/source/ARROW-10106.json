{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13329524",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524",
    "key": "ARROW-10106",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "flight",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10106/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo opened a new pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476\n\n\n   Expose onIsReady() callback on OutboundStreamListener\r\n   \r\n   - Add callback to run when the client is ready to receive new data during getStream.\r\n   - This removes the need for FlightProducers to implement polling code on isReady.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T23:53:09.007+0000",
                    "updated": "2020-10-15T23:53:09.007+0000",
                    "started": "2020-10-15T23:53:09.007+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501333",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#issuecomment-709648406\n\n\n   FYI @lidavidm \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T23:53:35.229+0000",
                    "updated": "2020-10-15T23:53:35.229+0000",
                    "started": "2020-10-15T23:53:35.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501334",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#issuecomment-709655899\n\n\n   https://issues.apache.org/jira/browse/ARROW-10106\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-16T00:19:16.666+0000",
                    "updated": "2020-10-16T00:19:16.666+0000",
                    "started": "2020-10-16T00:19:16.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501344",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#discussion_r505948417\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/OutboundStreamListener.java\n##########\n@@ -36,6 +36,18 @@\n    */\n   boolean isReady();\n \n+  /**\n+   * Set a callback for when the client cancels is ready for new calls to putNext(), i.e. {@link #isReady()} ()}\n\nReview comment:\n       ```suggestion\r\n      * Set a callback for when the listener is ready for new calls to putNext(), i.e. {@link #isReady()} ()}\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-16T00:57:57.766+0000",
                    "updated": "2020-10-16T00:57:57.766+0000",
                    "started": "2020-10-16T00:57:57.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501347",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#issuecomment-710156896\n\n\n   > LGTM, one minor typo - and is it worth adding a test? (Though this is a very thin wrapper around gRPC.)\r\n   \r\n   Thanks. I'm looking to repurpose some existing tests that loop on isReady.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-16T16:13:04.257+0000",
                    "updated": "2020-10-16T16:13:04.257+0000",
                    "started": "2020-10-16T16:13:04.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501613",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#issuecomment-710777211\n\n\n   > > LGTM, one minor typo - and is it worth adding a test? (Though this is a very thin wrapper around gRPC.)\r\n   > \r\n   > Thanks. I'm looking to repurpose some existing tests that loop on isReady.\r\n   \r\n   - I've created a BackpressureStrategy interface and a simple callback-based implementation.\r\n   - I've used this to repurpose the tests in TestBackPressure to test both polling (existing) and callback-based solutions.\r\n   - New tests in TestBackpressure are marked Ignored since the tests they were based on were also ignored due to flakiness. I ran them locally though and they passed with similar performance.\r\n   - I needed to change getStream() to run in a background thread. Currently it gets run in the onHalfClosed callback handler in gRPC. In the test implementations, getStream() is a synchronous implementation which prevented the new callback handler from running. In practice, I'd expect real world getStream() implementations to be written asynchronously though, so perhaps we should change our test implementations of getStream() to be asynchronous instead.\r\n   \r\n   This line of code eventually calls doGet, which must complete before onReady is called (thus, if doGet blocks until a notification from onReady, it never completes. But polling on isReady does): https://github.com/grpc/grpc-java/blob/0b6f29371bd96614fdbdcd3638d4bb6312258da3/stub/src/main/java/io/grpc/stub/ServerCalls.java#L182\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T08:45:02.332+0000",
                    "updated": "2020-10-17T08:45:02.332+0000",
                    "started": "2020-10-17T08:45:02.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501746",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#discussion_r506941155\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/BackpressureStrategy.java\n##########\n@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Helper interface to dynamically handle backpressure when implementing FlightProducers.\n+ */\n+public interface BackpressureStrategy {\n+  /**\n+   * The state of the client after a call to waitForListener.\n+   */\n+  enum WaitResult {\n+    /**\n+     * Listener is ready.\n+     */\n+    READY,\n+\n+    /**\n+     * Listener was cancelled by the client.\n+     */\n+    CANCELLED,\n+\n+    /**\n+     * Timed out waiting for the listener to change state.\n+     */\n+    TIMEOUT\n+  }\n+\n+  /**\n+   * Set up operations to work against the given listener.\n+   *\n+   * This must be called exactly once and before any calls to {@link #waitForListener(long)} and\n+   * {@link OutboundStreamListener#start(VectorSchemaRoot)}\n+   * @param listener The listener this strategy applies to.\n+   */\n+  void register(FlightProducer.ServerStreamListener listener);\n+\n+  /**\n+   * Waits for the listener to be ready or cancelled up to the given timeout.\n+   *\n+   * @param timeout The timeout in milliseconds. Infinite if timeout is <= 0.\n+   * @return The result of the wait.\n+   */\n+  WaitResult waitForListener(long timeout);\n+\n+  /**\n+   * A back pressure strategy that uses callbacks to notify when the client is ready or cancelled.\n+   */\n+  class CallbackBackpressureStrategy implements BackpressureStrategy {\n+    private final Object lock = new Object();\n+    private FlightProducer.ServerStreamListener listener;\n+\n+    @Override\n+    public void register(FlightProducer.ServerStreamListener listener) {\n+      this.listener = listener;\n+      listener.setOnReadyHandler(this::onReadyOrCancel);\n+      listener.setOnCancelHandler(this::onReadyOrCancel);\n+    }\n+\n+    @Override\n+    public WaitResult waitForListener(long timeout) {\n+      Preconditions.checkNotNull(listener);\n+      final long startTime = System.currentTimeMillis();\n+      synchronized (lock) {\n+        while (!listener.isReady() && !listener.isCancelled()) {\n+          try {\n+            lock.wait(timeout);\n+            if (System.currentTimeMillis() > startTime + timeout) {\n+              return WaitResult.TIMEOUT;\n+            }\n+          } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+            return WaitResult.CANCELLED;\n+          }\n+        }\n+\n+        if (listener.isReady()) {\n+          return WaitResult.READY;\n+        } else if (listener.isCancelled()) {\n+          return WaitResult.CANCELLED;\n+        } else if (System.currentTimeMillis() > startTime + timeout) {\n+          return WaitResult.TIMEOUT;\n+        }\n+        throw new RuntimeException(\"Invalid state when waiting for listener.\");\n\nReview comment:\n       According to the gRPC docs, this isn't an invalid state - gRPC can wake you up spuriously.\r\n   \r\n   https://grpc.github.io/grpc-java/javadoc/io/grpc/stub/CallStreamObserver.html#setOnReadyHandler-java.lang.Runnable-\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightService.java\n##########\n@@ -147,11 +149,23 @@ private void onCancel() {\n       }\n     }\n \n+    private void onReady() {\n+      logger.debug(\"Stream is ready for new messages.\");\n\nReview comment:\n       This is going to spam logs a lot - best not to add it unless it's really valuable.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightService.java\n##########\n@@ -88,12 +87,15 @@ public void listFlights(Flight.Criteria criteria, StreamObserver<Flight.FlightIn\n   public void doGetCustom(Flight.Ticket ticket, StreamObserver<ArrowMessage> responseObserverSimple) {\n     final ServerCallStreamObserver<ArrowMessage> responseObserver =\n         (ServerCallStreamObserver<ArrowMessage>) responseObserverSimple;\n+\n     final GetListener listener = new GetListener(responseObserver, this::handleExceptionWithMiddleware);\n-    try {\n-      producer.getStream(makeContext(responseObserver), new Ticket(ticket), listener);\n-    } catch (Exception ex) {\n-      listener.error(ex);\n-    }\n+    executors.submit(() -> {\n\nReview comment:\n       I think you'll have to change setOnReadyHandler below to call responseObserver.setOnReadyHandler itself\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/BackpressureStrategy.java\n##########\n@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Helper interface to dynamically handle backpressure when implementing FlightProducers.\n+ */\n+public interface BackpressureStrategy {\n+  /**\n+   * The state of the client after a call to waitForListener.\n+   */\n+  enum WaitResult {\n+    /**\n+     * Listener is ready.\n+     */\n+    READY,\n+\n+    /**\n+     * Listener was cancelled by the client.\n+     */\n+    CANCELLED,\n+\n+    /**\n+     * Timed out waiting for the listener to change state.\n+     */\n+    TIMEOUT\n+  }\n+\n+  /**\n+   * Set up operations to work against the given listener.\n+   *\n+   * This must be called exactly once and before any calls to {@link #waitForListener(long)} and\n+   * {@link OutboundStreamListener#start(VectorSchemaRoot)}\n+   * @param listener The listener this strategy applies to.\n+   */\n+  void register(FlightProducer.ServerStreamListener listener);\n+\n+  /**\n+   * Waits for the listener to be ready or cancelled up to the given timeout.\n+   *\n+   * @param timeout The timeout in milliseconds. Infinite if timeout is <= 0.\n+   * @return The result of the wait.\n+   */\n+  WaitResult waitForListener(long timeout);\n+\n+  /**\n+   * A back pressure strategy that uses callbacks to notify when the client is ready or cancelled.\n+   */\n+  class CallbackBackpressureStrategy implements BackpressureStrategy {\n+    private final Object lock = new Object();\n+    private FlightProducer.ServerStreamListener listener;\n+\n+    @Override\n+    public void register(FlightProducer.ServerStreamListener listener) {\n+      this.listener = listener;\n+      listener.setOnReadyHandler(this::onReadyOrCancel);\n+      listener.setOnCancelHandler(this::onReadyOrCancel);\n+    }\n+\n+    @Override\n+    public WaitResult waitForListener(long timeout) {\n+      Preconditions.checkNotNull(listener);\n+      final long startTime = System.currentTimeMillis();\n+      synchronized (lock) {\n+        while (!listener.isReady() && !listener.isCancelled()) {\n+          try {\n+            lock.wait(timeout);\n+            if (System.currentTimeMillis() > startTime + timeout) {\n+              return WaitResult.TIMEOUT;\n+            }\n+          } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+            return WaitResult.CANCELLED;\n+          }\n+        }\n+\n+        if (listener.isReady()) {\n+          return WaitResult.READY;\n+        } else if (listener.isCancelled()) {\n+          return WaitResult.CANCELLED;\n+        } else if (System.currentTimeMillis() > startTime + timeout) {\n+          return WaitResult.TIMEOUT;\n+        }\n+        throw new RuntimeException(\"Invalid state when waiting for listener.\");\n\nReview comment:\n       I'd say we can probably just recurse into waitForListener or wrap the method body in a loop.\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/TestBackPressure.java\n##########\n@@ -158,4 +189,64 @@ private static void consume(FlightStream stream, int batches) {\n       batches--;\n     }\n   }\n+\n+  private interface SleepTimeRecordingBackpressureStrategy extends BackpressureStrategy {\n+    /**\n+     * Returns the total time spent waiting on the listener to be ready.\n+     * @return the total time spent waiting on the listener to be ready.\n+     */\n+    long getSleepTime();\n+  }\n+\n+  /**\n+   * Implementation of a backpressure strategy that polls on isReady and records amount of time spent in Thread.sleep().\n+   */\n+  private static class PollingBackpressureStrategy implements SleepTimeRecordingBackpressureStrategy {\n+    private final AtomicLong sleepTime = new AtomicLong(0);\n+    private FlightProducer.ServerStreamListener listener;\n+\n+    @Override\n+    public long getSleepTime() {\n+      return sleepTime.get();\n+    }\n+\n+    @Override\n+    public void register(FlightProducer.ServerStreamListener listener) {\n+      this.listener = listener;\n+    }\n+\n+    @Override\n+    public WaitResult waitForListener(long timeout) {\n+      while (!listener.isReady()) {\n+        try {\n+          Thread.sleep(1);\n+          sleepTime.addAndGet(1L);\n+        } catch (InterruptedException ignore) {\n+        }\n+      }\n+      return WaitResult.READY;\n+    }\n+  }\n+\n+  /**\n+   * Implementation of a backpressure strategy that polls on uses callbacks to detect changes in client readiness state\n\nReview comment:\n       ```suggestion\r\n      * Implementation of a backpressure strategy that uses callbacks to detect changes in client readiness state\r\n   ```\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightService.java\n##########\n@@ -88,12 +87,15 @@ public void listFlights(Flight.Criteria criteria, StreamObserver<Flight.FlightIn\n   public void doGetCustom(Flight.Ticket ticket, StreamObserver<ArrowMessage> responseObserverSimple) {\n     final ServerCallStreamObserver<ArrowMessage> responseObserver =\n         (ServerCallStreamObserver<ArrowMessage>) responseObserverSimple;\n+\n     final GetListener listener = new GetListener(responseObserver, this::handleExceptionWithMiddleware);\n-    try {\n-      producer.getStream(makeContext(responseObserver), new Ticket(ticket), listener);\n-    } catch (Exception ex) {\n-      listener.error(ex);\n-    }\n+    executors.submit(() -> {\n\nReview comment:\n       I'd rather we not use the executor here unconditionally. A fully asynchronous implementation would set the callbacks and not need to execute in a separate thread at all; an implementation that wants to appear blocking but use the callbacks (as with BackpressureStrategy) should manage its own thread pool. We've had production issues when it turned out that the internal executor in FlightService was queueing requests without bound, defeating the rate limit/concurrency controls that had been placed on the gRPC executor.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/OutboundStreamListener.java\n##########\n@@ -36,6 +36,18 @@\n    */\n   boolean isReady();\n \n+  /**\n+   * Set a callback for when the listener is ready for new calls to putNext(), i.e. {@link #isReady()} ()}\n\nReview comment:\n       The formatting here and below seems off.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T13:15:04.200+0000",
                    "updated": "2020-10-17T13:15:04.200+0000",
                    "started": "2020-10-17T13:15:04.199+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501762",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#discussion_r506961358\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightService.java\n##########\n@@ -88,12 +87,15 @@ public void listFlights(Flight.Criteria criteria, StreamObserver<Flight.FlightIn\n   public void doGetCustom(Flight.Ticket ticket, StreamObserver<ArrowMessage> responseObserverSimple) {\n     final ServerCallStreamObserver<ArrowMessage> responseObserver =\n         (ServerCallStreamObserver<ArrowMessage>) responseObserverSimple;\n+\n     final GetListener listener = new GetListener(responseObserver, this::handleExceptionWithMiddleware);\n-    try {\n-      producer.getStream(makeContext(responseObserver), new Ticket(ticket), listener);\n-    } catch (Exception ex) {\n-      listener.error(ex);\n-    }\n+    executors.submit(() -> {\n\nReview comment:\n       Do you mean within GetListener? We register #onReady() on the responseObserver during GetListener's constructor, which will delegate to the onReadyHandler if it's been set.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T16:47:35.703+0000",
                    "updated": "2020-10-17T16:47:35.703+0000",
                    "started": "2020-10-17T16:47:35.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501801",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/501818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#discussion_r506973728\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/BackpressureStrategy.java\n##########\n@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Helper interface to dynamically handle backpressure when implementing FlightProducers.\n+ */\n+public interface BackpressureStrategy {\n+  /**\n+   * The state of the client after a call to waitForListener.\n+   */\n+  enum WaitResult {\n+    /**\n+     * Listener is ready.\n+     */\n+    READY,\n+\n+    /**\n+     * Listener was cancelled by the client.\n+     */\n+    CANCELLED,\n+\n+    /**\n+     * Timed out waiting for the listener to change state.\n+     */\n+    TIMEOUT\n+  }\n+\n+  /**\n+   * Set up operations to work against the given listener.\n+   *\n+   * This must be called exactly once and before any calls to {@link #waitForListener(long)} and\n+   * {@link OutboundStreamListener#start(VectorSchemaRoot)}\n+   * @param listener The listener this strategy applies to.\n+   */\n+  void register(FlightProducer.ServerStreamListener listener);\n+\n+  /**\n+   * Waits for the listener to be ready or cancelled up to the given timeout.\n+   *\n+   * @param timeout The timeout in milliseconds. Infinite if timeout is <= 0.\n+   * @return The result of the wait.\n+   */\n+  WaitResult waitForListener(long timeout);\n+\n+  /**\n+   * A back pressure strategy that uses callbacks to notify when the client is ready or cancelled.\n+   */\n+  class CallbackBackpressureStrategy implements BackpressureStrategy {\n+    private final Object lock = new Object();\n+    private FlightProducer.ServerStreamListener listener;\n+\n+    @Override\n+    public void register(FlightProducer.ServerStreamListener listener) {\n+      this.listener = listener;\n+      listener.setOnReadyHandler(this::onReadyOrCancel);\n+      listener.setOnCancelHandler(this::onReadyOrCancel);\n+    }\n+\n+    @Override\n+    public WaitResult waitForListener(long timeout) {\n+      Preconditions.checkNotNull(listener);\n+      final long startTime = System.currentTimeMillis();\n+      synchronized (lock) {\n+        while (!listener.isReady() && !listener.isCancelled()) {\n+          try {\n+            lock.wait(timeout);\n+            if (System.currentTimeMillis() > startTime + timeout) {\n+              return WaitResult.TIMEOUT;\n+            }\n+          } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+            return WaitResult.CANCELLED;\n+          }\n+        }\n+\n+        if (listener.isReady()) {\n+          return WaitResult.READY;\n+        } else if (listener.isCancelled()) {\n+          return WaitResult.CANCELLED;\n+        } else if (System.currentTimeMillis() > startTime + timeout) {\n+          return WaitResult.TIMEOUT;\n+        }\n+        throw new RuntimeException(\"Invalid state when waiting for listener.\");\n\nReview comment:\n       I was looking at this and I think this gets covered by the upper loop -- if we ran the onReadyCallback, we'd wake out of the Object.wait() call, but then we would check if it is really ready as part of the loop condition, and if not, go back into the wait and wait for the callback again. (Pretty much the same as a standard use of wait/notify() really).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T19:04:51.489+0000",
                    "updated": "2020-10-17T19:04:51.489+0000",
                    "started": "2020-10-17T19:04:51.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501818",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/502151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#discussion_r507708211\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/BackpressureStrategy.java\n##########\n@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Helper interface to dynamically handle backpressure when implementing FlightProducers.\n+ */\n+public interface BackpressureStrategy {\n+  /**\n+   * The state of the client after a call to waitForListener.\n+   */\n+  enum WaitResult {\n+    /**\n+     * Listener is ready.\n+     */\n+    READY,\n+\n+    /**\n+     * Listener was cancelled by the client.\n+     */\n+    CANCELLED,\n+\n+    /**\n+     * Timed out waiting for the listener to change state.\n+     */\n+    TIMEOUT\n+  }\n+\n+  /**\n+   * Set up operations to work against the given listener.\n+   *\n+   * This must be called exactly once and before any calls to {@link #waitForListener(long)} and\n+   * {@link OutboundStreamListener#start(VectorSchemaRoot)}\n+   * @param listener The listener this strategy applies to.\n+   */\n+  void register(FlightProducer.ServerStreamListener listener);\n+\n+  /**\n+   * Waits for the listener to be ready or cancelled up to the given timeout.\n+   *\n+   * @param timeout The timeout in milliseconds. Infinite if timeout is <= 0.\n+   * @return The result of the wait.\n+   */\n+  WaitResult waitForListener(long timeout);\n+\n+  /**\n+   * A back pressure strategy that uses callbacks to notify when the client is ready or cancelled.\n+   */\n+  class CallbackBackpressureStrategy implements BackpressureStrategy {\n+    private final Object lock = new Object();\n+    private FlightProducer.ServerStreamListener listener;\n+\n+    @Override\n+    public void register(FlightProducer.ServerStreamListener listener) {\n+      this.listener = listener;\n+      listener.setOnReadyHandler(this::onReadyOrCancel);\n+      listener.setOnCancelHandler(this::onReadyOrCancel);\n+    }\n+\n+    @Override\n+    public WaitResult waitForListener(long timeout) {\n+      Preconditions.checkNotNull(listener);\n+      final long startTime = System.currentTimeMillis();\n+      synchronized (lock) {\n+        while (!listener.isReady() && !listener.isCancelled()) {\n+          try {\n+            lock.wait(timeout);\n+            if (System.currentTimeMillis() > startTime + timeout) {\n+              return WaitResult.TIMEOUT;\n+            }\n+          } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+            return WaitResult.CANCELLED;\n+          }\n+        }\n+\n+        if (listener.isReady()) {\n+          return WaitResult.READY;\n+        } else if (listener.isCancelled()) {\n+          return WaitResult.CANCELLED;\n+        } else if (System.currentTimeMillis() > startTime + timeout) {\n+          return WaitResult.TIMEOUT;\n+        }\n+        throw new RuntimeException(\"Invalid state when waiting for listener.\");\n\nReview comment:\n       Ah yes, you're right. Slight nit then, maybe IllegalStateException is more appropriate here?\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightService.java\n##########\n@@ -88,12 +87,15 @@ public void listFlights(Flight.Criteria criteria, StreamObserver<Flight.FlightIn\n   public void doGetCustom(Flight.Ticket ticket, StreamObserver<ArrowMessage> responseObserverSimple) {\n     final ServerCallStreamObserver<ArrowMessage> responseObserver =\n         (ServerCallStreamObserver<ArrowMessage>) responseObserverSimple;\n+\n     final GetListener listener = new GetListener(responseObserver, this::handleExceptionWithMiddleware);\n-    try {\n-      producer.getStream(makeContext(responseObserver), new Ticket(ticket), listener);\n-    } catch (Exception ex) {\n-      listener.error(ex);\n-    }\n+    executors.submit(() -> {\n\nReview comment:\n       Sorry, yes, I meant within GetListener, but I suppose setting the handler unconditionally doesn't matter to gRPC - it'll never get called in the blocking case.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:36:21.660+0000",
                    "updated": "2020-10-19T12:36:21.660+0000",
                    "started": "2020-10-19T12:36:21.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502151",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/502152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476#discussion_r507710515\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/BackpressureStrategy.java\n##########\n@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Helper interface to dynamically handle backpressure when implementing FlightProducers.\n+ */\n+public interface BackpressureStrategy {\n+  /**\n+   * The state of the client after a call to waitForListener.\n+   */\n+  enum WaitResult {\n+    /**\n+     * Listener is ready.\n+     */\n+    READY,\n+\n+    /**\n+     * Listener was cancelled by the client.\n+     */\n+    CANCELLED,\n+\n+    /**\n+     * Timed out waiting for the listener to change state.\n+     */\n+    TIMEOUT\n+  }\n+\n+  /**\n+   * Set up operations to work against the given listener.\n+   *\n+   * This must be called exactly once and before any calls to {@link #waitForListener(long)} and\n+   * {@link OutboundStreamListener#start(VectorSchemaRoot)}\n+   * @param listener The listener this strategy applies to.\n+   */\n+  void register(FlightProducer.ServerStreamListener listener);\n+\n+  /**\n+   * Waits for the listener to be ready or cancelled up to the given timeout.\n+   *\n+   * @param timeout The timeout in milliseconds. Infinite if timeout is <= 0.\n+   * @return The result of the wait.\n+   */\n+  WaitResult waitForListener(long timeout);\n+\n+  /**\n+   * A back pressure strategy that uses callbacks to notify when the client is ready or cancelled.\n+   */\n+  class CallbackBackpressureStrategy implements BackpressureStrategy {\n+    private final Object lock = new Object();\n+    private FlightProducer.ServerStreamListener listener;\n+\n+    @Override\n+    public void register(FlightProducer.ServerStreamListener listener) {\n+      this.listener = listener;\n+      listener.setOnReadyHandler(this::onReadyOrCancel);\n+      listener.setOnCancelHandler(this::onReadyOrCancel);\n+    }\n+\n+    @Override\n+    public WaitResult waitForListener(long timeout) {\n+      Preconditions.checkNotNull(listener);\n+      final long startTime = System.currentTimeMillis();\n+      synchronized (lock) {\n+        while (!listener.isReady() && !listener.isCancelled()) {\n+          try {\n+            lock.wait(timeout);\n+            if (System.currentTimeMillis() > startTime + timeout) {\n+              return WaitResult.TIMEOUT;\n+            }\n+          } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+            return WaitResult.CANCELLED;\n+          }\n+        }\n+\n+        if (listener.isReady()) {\n+          return WaitResult.READY;\n+        } else if (listener.isCancelled()) {\n+          return WaitResult.CANCELLED;\n+        } else if (System.currentTimeMillis() > startTime + timeout) {\n+          return WaitResult.TIMEOUT;\n+        }\n+        throw new RuntimeException(\"Invalid state when waiting for listener.\");\n\nReview comment:\n       Ah yes, you're right.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:36:34.775+0000",
                    "updated": "2020-10-19T12:36:34.775+0000",
                    "started": "2020-10-19T12:36:34.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502152",
                    "issueId": "13329524"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/worklog/502156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #8476:\nURL: https://github.com/apache/arrow/pull/8476\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:39:59.957+0000",
                    "updated": "2020-10-19T12:39:59.957+0000",
                    "started": "2020-10-19T12:39:59.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502156",
                    "issueId": "13329524"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@11c4720[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1357593[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3246447[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2917105d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58722884[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@28b1fa4c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@897a541[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1913c9f6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@506cf458[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@77a80783[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42a0099a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@457b2441[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 19 12:42:12 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-19T12:42:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10106/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-09-26T09:56:49.000+0000",
        "updated": "2020-11-03T19:08:34.000+0000",
        "timeoriginalestimate": null,
        "description": "OutboundStreamListener has a method isReady() that FlightProducers need to poll during implementations of getStream() to avoid buffering too much data.\r\n\r\nAn enhancement would be to allow setting a callback to run (for example, notifying a CountdownLatch) so that FlightProducer implementations don't need to busy wait.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][Java] Expose onIsReady() callback on OutboundStreamListener",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/comment/17202680",
                    "id": "17202680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This would be a great improvement. I also think having a gRPC-style async API with a StreamObserver-like API would be useful for applications that are concerned with efficiency; FlightStream/FlightProducer is a very convenient API, but the internals do quite a bit of work on behalf of the user to achieve that.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-09-26T21:21:48.554+0000",
                    "updated": "2020-09-26T21:21:48.554+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/comment/17215825",
                    "id": "17215825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
                        "name": "jduong",
                        "key": "jduong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "James Duong",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "To get this to work with FlightProducers in unit tests, I changed doGetCustom() to run in a background thread (similar to doPutCustom()). The reason is that the unit test implementations of getStream() block until all data has been sent to the client via putNext().\r\n\r\nIn practice, I would think implementers of FlightProducers would make getStream() asynchronous themselves, so it might be better to instead make the unit test FlightProducers have the same behavior.\r\n\r\nAlso, doAction() could have the same problems.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
                        "name": "jduong",
                        "key": "jduong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "James Duong",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-10-17T09:10:02.844+0000",
                    "updated": "2020-10-17T09:10:02.844+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329524/comment/17216686",
                    "id": "17216686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Resolved by [https://github.com/apache/arrow/pull/8476|https://github.com/apache/arrow/pull/8476].",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-10-19T12:42:12.787+0000",
                    "updated": "2020-10-19T12:42:12.787+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ixrk:",
        "customfield_12314139": null
    }
}