{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13135465",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13135465",
    "key": "ARROW-2074",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2074/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 1,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13135465/worklog/95095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #1935: ARROW-2074: [Python] Infer lists of dicts as struct arrays\nURL: https://github.com/apache/arrow/pull/1935\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex a1c379dfb..740c89666 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -21,6 +21,7 @@\n \n #include <algorithm>\n #include <limits>\n+#include <map>\n #include <sstream>\n #include <string>\n #include <utility>\n@@ -49,9 +50,11 @@ Status InvalidConversion(PyObject* obj, const std::string& expected_types,\n   return Status::OK();\n }\n \n-class ScalarVisitor {\n+class TypeInferrer {\n+  // A type inference visitor for Python values\n+\n  public:\n-  ScalarVisitor()\n+  TypeInferrer()\n       : total_count_(0),\n         none_count_(0),\n         bool_count_(0),\n@@ -62,14 +65,46 @@ class ScalarVisitor {\n         binary_count_(0),\n         unicode_count_(0),\n         decimal_count_(0),\n+        list_count_(0),\n+        struct_count_(0),\n         max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n                               std::numeric_limits<int32_t>::min()),\n         decimal_type_() {\n-    PyAcquireGIL lock;\n     Status status = internal::ImportDecimalType(&decimal_type_);\n     DCHECK_OK(status);\n   }\n \n+  // Infer value type from a sequence of values\n+  Status VisitSequence(PyObject* obj) {\n+    // Loop through a sequence\n+    if (PyArray_Check(obj)) {\n+      Py_ssize_t size = PySequence_Size(obj);\n+      OwnedRef value_ref;\n+\n+      for (Py_ssize_t i = 0; i < size; ++i) {\n+        auto array = reinterpret_cast<PyArrayObject*>(obj);\n+        auto ptr = reinterpret_cast<const char*>(PyArray_GETPTR1(array, i));\n+\n+        value_ref.reset(PyArray_GETITEM(array, ptr));\n+        RETURN_IF_PYERROR();\n+        RETURN_NOT_OK(Visit(value_ref.obj()));\n+      }\n+    } else if (PySequence_Check(obj)) {\n+      OwnedRef seq_ref(PySequence_Fast(obj, \"Object is not a sequence or iterable\"));\n+      RETURN_IF_PYERROR();\n+      PyObject* seq = seq_ref.obj();\n+\n+      Py_ssize_t size = PySequence_Fast_GET_SIZE(seq);\n+      for (Py_ssize_t i = 0; i < size; ++i) {\n+        PyObject* value = PySequence_Fast_GET_ITEM(seq, i);\n+        RETURN_NOT_OK(Visit(value));\n+      }\n+    } else {\n+      return Status::TypeError(\"Object is not a sequence or iterable\");\n+    }\n+    return Status::OK();\n+  }\n+\n   Status Visit(PyObject* obj) {\n     ++total_count_;\n     if (obj == Py_None || internal::PyFloat_IsNaN(obj)) {\n@@ -103,6 +138,10 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (PyList_Check(obj) || PyArray_Check(obj)) {\n+      return VisitList(obj);\n+    } else if (PyDict_Check(obj)) {\n+      return VisitDict(obj);\n     } else if (PyObject_IsInstance(obj, decimal_type_.obj())) {\n       RETURN_NOT_OK(max_decimal_metadata_.Update(obj));\n       ++decimal_count_;\n@@ -118,14 +157,36 @@ class ScalarVisitor {\n     return Status::OK();\n   }\n \n-  std::shared_ptr<DataType> GetType() {\n+  Status Validate() const {\n+    if (list_count_ > 0) {\n+      if (list_count_ + none_count_ != total_count_) {\n+        return Status::Invalid(\"cannot mix list and non-list, non-null values\");\n+      }\n+      RETURN_NOT_OK(list_inferrer_->Validate());\n+    } else if (struct_count_ > 0) {\n+      if (struct_count_ + none_count_ != total_count_) {\n+        return Status::Invalid(\"cannot mix struct and non-struct, non-null values\");\n+      }\n+      for (const auto& it : struct_inferrers_) {\n+        RETURN_NOT_OK(it.second.Validate());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> GetType() const {\n     // TODO(wesm): handling mixed-type cases\n-    if (decimal_count_) {\n+    if (list_count_) {\n+      auto value_type = list_inferrer_->GetType();\n+      DCHECK(value_type != nullptr);\n+      return list(value_type);\n+    } else if (struct_count_) {\n+      return GetStructType();\n+    } else if (decimal_count_) {\n       return decimal(max_decimal_metadata_.precision(), max_decimal_metadata_.scale());\n     } else if (float_count_) {\n       return float64();\n     } else if (int_count_) {\n-      // TODO(wesm): tighter type later\n       return int64();\n     } else if (date_count_) {\n       return date64();\n@@ -144,6 +205,53 @@ class ScalarVisitor {\n \n   int64_t total_count() const { return total_count_; }\n \n+ protected:\n+  Status VisitList(PyObject* obj) {\n+    if (!list_inferrer_) {\n+      list_inferrer_.reset(new TypeInferrer);\n+    }\n+    ++list_count_;\n+    return list_inferrer_->VisitSequence(obj);\n+  }\n+\n+  Status VisitDict(PyObject* obj) {\n+    PyObject* key_obj;\n+    PyObject* value_obj;\n+    Py_ssize_t pos = 0;\n+\n+    while (PyDict_Next(obj, &pos, &key_obj, &value_obj)) {\n+      std::string key;\n+      if (PyUnicode_Check(key_obj)) {\n+        RETURN_NOT_OK(internal::PyUnicode_AsStdString(key_obj, &key));\n+      } else if (PyBytes_Check(key_obj)) {\n+        key = internal::PyBytes_AsStdString(key_obj);\n+      } else {\n+        std::stringstream ss;\n+        ss << \"Expected dict key of type str or bytes, got '\" << Py_TYPE(key_obj)->tp_name\n+           << \"'\";\n+        return Status::TypeError(ss.str());\n+      }\n+      // Get or create visitor for this key\n+      auto it = struct_inferrers_.find(key);\n+      if (it == struct_inferrers_.end()) {\n+        it = struct_inferrers_.insert(std::make_pair(key, TypeInferrer())).first;\n+      }\n+      TypeInferrer* visitor = &it->second;\n+      RETURN_NOT_OK(visitor->Visit(value_obj));\n+    }\n+    ++struct_count_;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> GetStructType() const {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    for (const auto& it : struct_inferrers_) {\n+      const auto struct_field = field(it.first, it.second.GetType());\n+      fields.emplace_back(struct_field);\n+    }\n+    return struct_(fields);\n+  }\n+\n  private:\n   int64_t total_count_;\n   int64_t none_count_;\n@@ -155,6 +263,10 @@ class ScalarVisitor {\n   int64_t binary_count_;\n   int64_t unicode_count_;\n   int64_t decimal_count_;\n+  int64_t list_count_;\n+  std::unique_ptr<TypeInferrer> list_inferrer_;\n+  int64_t struct_count_;\n+  std::map<std::string, TypeInferrer> struct_inferrers_;\n \n   internal::DecimalMetadata max_decimal_metadata_;\n \n@@ -163,116 +275,6 @@ class ScalarVisitor {\n   OwnedRefNoGIL decimal_type_;\n };\n \n-static constexpr int MAX_NESTING_LEVELS = 32;\n-\n-// SeqVisitor is used to infer the type.\n-class SeqVisitor {\n- public:\n-  SeqVisitor() : max_nesting_level_(0), max_observed_level_(0), nesting_histogram_() {\n-    std::fill(nesting_histogram_, nesting_histogram_ + MAX_NESTING_LEVELS, 0);\n-  }\n-\n-  // co-recursive with VisitElem\n-  Status Visit(PyObject* obj, int level = 0) {\n-    max_nesting_level_ = std::max(max_nesting_level_, level);\n-\n-    // Loop through a sequence\n-    if (!PySequence_Check(obj))\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n-\n-    Py_ssize_t size = PySequence_Size(obj);\n-    for (int64_t i = 0; i < size; ++i) {\n-      OwnedRef ref;\n-      if (PyArray_Check(obj)) {\n-        auto array = reinterpret_cast<PyArrayObject*>(obj);\n-        auto ptr = reinterpret_cast<const char*>(PyArray_GETPTR1(array, i));\n-\n-        ref.reset(PyArray_GETITEM(array, ptr));\n-        RETURN_IF_PYERROR();\n-\n-        RETURN_NOT_OK(VisitElem(ref, level));\n-      } else {\n-        ref.reset(PySequence_GetItem(obj, i));\n-        RETURN_IF_PYERROR();\n-        RETURN_NOT_OK(VisitElem(ref, level));\n-      }\n-    }\n-    return Status::OK();\n-  }\n-\n-  std::shared_ptr<DataType> GetType() {\n-    // If all the non-list inputs were null (or there were no inputs)\n-    std::shared_ptr<DataType> result;\n-    if (scalars_.total_count() == 0) {\n-      // Lists of Lists of NULL\n-      result = null();\n-    } else {\n-      // Lists of Lists of [X]\n-      result = scalars_.GetType();\n-    }\n-    for (int i = 0; i < max_nesting_level_; ++i) {\n-      result = std::make_shared<ListType>(result);\n-    }\n-    return result;\n-  }\n-\n-  Status Validate() const {\n-    if (scalars_.total_count() > 0) {\n-      if (num_nesting_levels() > 1) {\n-        return Status::Invalid(\"Mixed nesting levels not supported\");\n-        // If the nesting goes deeper than the deepest scalar\n-      } else if (max_observed_level_ < max_nesting_level_) {\n-        return Status::Invalid(\"Mixed nesting levels not supported\");\n-      }\n-    }\n-    return Status::OK();\n-  }\n-\n-  // Returns the number of nesting levels which have scalar elements.\n-  int num_nesting_levels() const {\n-    int result = 0;\n-    for (int i = 0; i < MAX_NESTING_LEVELS; ++i) {\n-      if (nesting_histogram_[i] > 0) {\n-        ++result;\n-      }\n-    }\n-    return result;\n-  }\n-\n- private:\n-  ScalarVisitor scalars_;\n-\n-  // Track observed\n-  // Deapest nesting level (irregardless of scalars)\n-  int max_nesting_level_;\n-  int max_observed_level_;\n-\n-  // Number of scalar elements at each nesting level.\n-  // (TOOD: We really only need to know if a scalar is present, not the count).\n-  int nesting_histogram_[MAX_NESTING_LEVELS];\n-\n-  // Visits a specific element (inner part of the loop).\n-  Status VisitElem(const OwnedRef& item_ref, int level) {\n-    DCHECK_NE(item_ref.obj(), NULLPTR);\n-    if (PyList_Check(item_ref.obj()) || PyArray_Check(item_ref.obj())) {\n-      RETURN_NOT_OK(Visit(item_ref.obj(), level + 1));\n-    } else if (PyDict_Check(item_ref.obj())) {\n-      return Status::NotImplemented(\"No type inference for dicts\");\n-    } else {\n-      // We permit nulls at any level of nesting, but they aren't treated like\n-      // other scalar values as far as the checking for mixed nesting structure\n-      if (item_ref.obj() != Py_None) {\n-        ++nesting_histogram_[level];\n-      }\n-      if (level > max_observed_level_) {\n-        max_observed_level_ = level;\n-      }\n-      return scalars_.Visit(item_ref.obj());\n-    }\n-    return Status::OK();\n-  }\n-};\n-\n // Convert *obj* to a sequence if necessary\n // Fill *size* to its length.  If >= 0 on entry, *size* is an upper size\n // bound that may lead to truncation.\n@@ -319,11 +321,11 @@ Status ConvertToSequenceAndInferSize(PyObject* obj, PyObject** seq, int64_t* siz\n // Non-exhaustive type inference\n Status InferArrowType(PyObject* obj, std::shared_ptr<DataType>* out_type) {\n   PyDateTime_IMPORT;\n-  SeqVisitor seq_visitor;\n-  RETURN_NOT_OK(seq_visitor.Visit(obj));\n-  RETURN_NOT_OK(seq_visitor.Validate());\n+  TypeInferrer inferrer;\n+  RETURN_NOT_OK(inferrer.VisitSequence(obj));\n+  RETURN_NOT_OK(inferrer.Validate());\n \n-  *out_type = seq_visitor.GetType();\n+  *out_type = inferrer.GetType();\n   if (*out_type == nullptr) {\n     return Status::TypeError(\"Unable to determine data type\");\n   }\ndiff --git a/python/benchmarks/convert_builtins.py b/python/benchmarks/convert_builtins.py\nindex 91b15ecf5..48a38fa9a 100644\n--- a/python/benchmarks/convert_builtins.py\n+++ b/python/benchmarks/convert_builtins.py\n@@ -51,8 +51,7 @@ class InferPyListToArray(object):\n     \"\"\"\n     size = 10 ** 5\n     types = ('int64', 'float64', 'bool', 'decimal', 'binary', 'ascii',\n-             'unicode', 'int64 list')\n-    # TODO add 'struct' when supported\n+             'unicode', 'int64 list', 'struct')\n \n     param_names = ['type']\n     params = [types]\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex a18d18356..7fb43015e 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -51,6 +51,14 @@ def __iter__(self):\n         return self.lst.__iter__()\n \n \n+def check_struct_type(ty, expected):\n+    \"\"\"\n+    Check a struct type is as expected, but not taking order into account.\n+    \"\"\"\n+    assert pa.types.is_struct(ty)\n+    assert set(ty) == set(expected)\n+\n+\n def test_iterable_types():\n     arr1 = pa.array(StrangeIterable([0, 1, 2, 3]))\n     arr2 = pa.array((0, 1, 2, 3))\n@@ -479,11 +487,28 @@ class CustomClass():\n         pa.array([1, CustomClass()], type=pa.date64())\n \n \n-def test_sequence_mixed_nesting_levels():\n-    pa.array([1, 2, None])\n-    pa.array([[1], [2], None])\n-    pa.array([[1], [2], [None]])\n+def test_sequence_nesting_levels():\n+    data = [1, 2, None]\n+    arr = pa.array(data)\n+    assert arr.type == pa.int64()\n+    assert arr.to_pylist() == data\n+\n+    data = [[1], [2], None]\n+    arr = pa.array(data)\n+    assert arr.type == pa.list_(pa.int64())\n+    assert arr.to_pylist() == data\n \n+    data = [[1], [2, 3, 4], [None]]\n+    arr = pa.array(data)\n+    assert arr.type == pa.list_(pa.int64())\n+    assert arr.to_pylist() == data\n+\n+    data = [None, [[None, 1]], [[2, 3, 4], None], [None]]\n+    arr = pa.array(data)\n+    assert arr.type == pa.list_(pa.list_(pa.int64()))\n+    assert arr.to_pylist() == data\n+\n+    # Mixed nesting levels are rejected\n     with pytest.raises(pa.ArrowInvalid):\n         pa.array([1, 2, [1]])\n \n@@ -649,6 +674,50 @@ def test_struct_from_mixed_sequence():\n         pa.array(data, type=ty)\n \n \n+def test_struct_from_dicts_inference():\n+    expected_type = pa.struct([pa.field('a', pa.int64()),\n+                               pa.field('b', pa.string()),\n+                               pa.field('c', pa.bool_())])\n+    data = [{'a': 5, 'b': u'foo', 'c': True},\n+            {'a': 6, 'b': u'bar', 'c': False}]\n+    arr = pa.array(data)\n+    check_struct_type(arr.type, expected_type)\n+    assert arr.to_pylist() == data\n+\n+    # With omitted values\n+    data = [{'a': 5, 'c': True},\n+            None,\n+            {},\n+            {'a': None, 'b': u'bar'}]\n+    expected = [{'a': 5, 'b': None, 'c': True},\n+                None,\n+                {'a': None, 'b': None, 'c': None},\n+                {'a': None, 'b': u'bar', 'c': None}]\n+    arr = pa.array(data)\n+    check_struct_type(arr.type, expected_type)\n+    assert arr.to_pylist() == expected\n+\n+    # Nested\n+    expected_type = pa.struct([\n+        pa.field('a', pa.struct([pa.field('aa', pa.list_(pa.int64())),\n+                                 pa.field('ab', pa.bool_())])),\n+        pa.field('b', pa.string())])\n+    data = [{'a': {'aa': [5, 6], 'ab': True}, 'b': 'foo'},\n+            {'a': {'aa': None, 'ab': False}, 'b': None},\n+            {'a': None, 'b': 'bar'}]\n+    arr = pa.array(data)\n+    assert arr.to_pylist() == data\n+\n+    # Edge cases\n+    arr = pa.array([{}])\n+    assert arr.type == pa.struct([])\n+    assert arr.to_pylist() == [{}]\n+\n+    # Mixing structs and scalars is rejected\n+    with pytest.raises(pa.ArrowInvalid):\n+        pa.array([1, {'a': 2}])\n+\n+\n def test_structarray_from_arrays_coerce():\n     # ARROW-1706\n     ints = [None, 2, 3]\ndiff --git a/python/pyarrow/tests/test_types.py b/python/pyarrow/tests/test_types.py\nindex 9d0f383c8..bb2a986a3 100644\n--- a/python/pyarrow/tests/test_types.py\n+++ b/python/pyarrow/tests/test_types.py\n@@ -199,8 +199,9 @@ def test_types_hashable():\n     for i, type_ in enumerate(MANY_TYPES):\n         assert hash(type_) == hash(type_)\n         in_dict[type_] = i\n-        assert in_dict[type_] == i\n     assert len(in_dict) == len(MANY_TYPES)\n+    for i, type_ in enumerate(MANY_TYPES):\n+        assert in_dict[type_] == i\n \n \n def test_types_picklable():\n@@ -209,6 +210,18 @@ def test_types_picklable():\n         assert pickle.loads(data) == ty\n \n \n+def test_fields_hashable():\n+    in_dict = {}\n+    fields = [pa.field('a', pa.int64()),\n+              pa.field('a', pa.int32()),\n+              pa.field('b', pa.int32())]\n+    for i, field in enumerate(fields):\n+        in_dict[field] = i\n+    assert len(in_dict) == len(fields)\n+    for i, field in enumerate(fields):\n+        assert in_dict[field] == i\n+\n+\n @pytest.mark.parametrize('t,check_func', [\n     (pa.date32(), types.is_date32),\n     (pa.date64(), types.is_date64),\ndiff --git a/python/pyarrow/types.pxi b/python/pyarrow/types.pxi\nindex 4ed14433a..850be23fc 100644\n--- a/python/pyarrow/types.pxi\n+++ b/python/pyarrow/types.pxi\n@@ -414,6 +414,9 @@ cdef class Field:\n     def __repr__(self):\n         return self.__str__()\n \n+    def __hash__(self):\n+        return hash((self.field.name(), self.type.id))\n+\n     property nullable:\n \n         def __get__(self):\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-04-25T16:40:07.537+0000",
                    "updated": "2018-04-25T16:40:07.537+0000",
                    "started": "2018-04-25T16:40:07.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "95095",
                    "issueId": "13135465"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f0365bf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fc78d57[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7379b539[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@40e73334[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73d2b7cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3c891970[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@267b3a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7be05e4e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1deac216[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@69dc0a42[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56197647[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ff250e4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 25 16:40:06 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-25T16:40:06.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2074/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-02-01T15:41:58.000+0000",
        "updated": "2018-04-25T16:40:07.000+0000",
        "timeoriginalestimate": null,
        "description": "Support inferring a struct type in a {{pa.array}} call, if a sequence of dicts (or dict of sequences?= is given. Of course, this could mean that the wrong field order may be inferred, though on Python 3.6+ dicts retain ordering until the first deletion.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Allow type inference for struct arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13135465/comment/16448280",
                    "id": "16448280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1935: ARROW-2074: [Python] Infer lists of dicts as struct arrays\nURL: https://github.com/apache/arrow/pull/1935\n \n \n   Also refactor the type inference visitor and remove the superfluous separate SeqVisitor.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-23T15:02:10.311+0000",
                    "updated": "2018-04-23T15:02:10.311+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13135465/comment/16448318",
                    "id": "16448318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1935: ARROW-2074: [Python] Infer lists of dicts as struct arrays\nURL: https://github.com/apache/arrow/pull/1935#issuecomment-383618686\n \n \n   Benchmark numbers here:\r\n   * before:\r\n   ```\r\n   [100.00%] \u00b7\u00b7\u00b7 Running convert_builtins.InferPyListToArray.time_infer                                                                                     ok\r\n   [100.00%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ============ =============\r\n                      type                  \r\n                  ------------ -------------\r\n                     int64       11.0\u00b10.1ms \r\n                    float64     10.3\u00b10.07ms \r\n                      bool      9.37\u00b10.04ms \r\n                    decimal      297\u00b10.9ms  \r\n                     binary      14.9\u00b10.2ms \r\n                     ascii       17.3\u00b10.3ms \r\n                    unicode      29.7\u00b10.8ms \r\n                   int64 list    96.8\u00b10.6ms \r\n                  ============ =============\r\n   ```\r\n   * after:\r\n   ```\r\n   [100.00%] \u00b7\u00b7\u00b7 Running convert_builtins.InferPyListToArray.time_infer                                                                                     ok\r\n   [100.00%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ============ =============\r\n                      type                  \r\n                  ------------ -------------\r\n                     int64       7.41\u00b10.2ms \r\n                    float64     6.68\u00b10.04ms \r\n                      bool      5.75\u00b10.01ms \r\n                    decimal      292\u00b10.8ms  \r\n                     binary      11.4\u00b10.2ms \r\n                     ascii       14.1\u00b10.3ms \r\n                    unicode      26.3\u00b10.7ms \r\n                   int64 list    74.8\u00b10.6ms \r\n                     struct       70.7\u00b14ms  \r\n                  ============ =============\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-23T15:33:46.233+0000",
                    "updated": "2018-04-23T15:33:46.233+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13135465/comment/16452606",
                    "id": "16452606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1935\n[https://github.com/apache/arrow/pull/1935]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-25T16:40:06.257+0000",
                    "updated": "2018-04-25T16:40:06.257+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3pnt3:",
        "customfield_12314139": null
    }
}