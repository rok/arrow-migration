{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13200574",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574",
    "key": "ARROW-3882",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12555633",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12555633",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13155937",
                    "key": "ARROW-2523",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155937",
                    "fields": {
                        "summary": "[Rust] Implement CAST operations for arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3882/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/206986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797\n \n \n   This is an implementation of a cast kernel for most Arrow types.\r\n   \r\n   Limitations (when PR is complete):\r\n   * Casting to or from `StructArray` not supported\r\n   * Casting `ListArray` to non-list array not supported\r\n   * Casting of incompatible primitive types not supported (e.g. temporal to boolean)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T03:53:40.364+0000",
                    "updated": "2019-03-04T03:53:40.364+0000",
                    "started": "2019-03-04T03:53:40.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206986",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/206987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#issuecomment-469110347\n \n \n   @andygrove I created one cast fn to rule them all, but I need some help in DataFusion. When I replace the cast macros with this cast function, I get lifetime issues per below:\r\n   \r\n   ```rust\r\n   error[E0621]: explicit lifetime required in the type of `expr`\r\n      --> datafusion\\src\\execution\\expression.rs:340:24\r\n       |\r\n   299 |       expr: &Expr,\r\n       |             ----- help: add explicit lifetime `'static` to the type of `expr`: `&'static logicalplan::Expr`\r\n   ...\r\n   340 |                       f: Rc::new(|batch: &RecordBatch| {\r\n       |  ________________________^\r\n   341 | |                         // match compute::cast(batch.column(index), data_type) {\r\n   342 | |                         //     Ok(array) => Ok(array),\r\n   343 | |                         //     Err(e) => Err(e.into())\r\n   ...   |\r\n   346 | |                             .map_err(|e| ExecutionError::ArrowError(e))\r\n   347 | |                     }),\r\n       | |______________________^ lifetime `'static` required\r\n   ```\r\n   \r\n   Adding a `'static` lifetime as required leads me down a rabbit hole that doesn't solve the problem. I've already tried a few things on the cast's side, including not taking references, but I'm still not getting joy.\r\n   \r\n   @paddyhoran @sunchao do you have any ideas on how we could overcome this? And does the implementation of cast itself look sound enough for me to continue with this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T03:57:31.302+0000",
                    "updated": "2019-03-04T03:57:31.302+0000",
                    "started": "2019-03-04T03:57:31.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206987",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/206988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r261916708\n \n \n\n ##########\n File path: rust/datafusion/src/execution/expression.rs\n ##########\n @@ -334,44 +337,52 @@ pub fn compile_scalar_expr(\n                 Ok(RuntimeExpr::Compiled {\n                     name: col.name().clone(),\n                     t: col.data_type().clone(),\n-                    f: match col.data_type() {\n-                        DataType::Int8 => {\n-                            cast_column_outer!(index, Int8Array, &data_type)\n-                        }\n-                        DataType::Int16 => {\n-                            cast_column_outer!(index, Int16Array, &data_type)\n-                        }\n-                        DataType::Int32 => {\n-                            cast_column_outer!(index, Int32Array, &data_type)\n-                        }\n-                        DataType::Int64 => {\n-                            cast_column_outer!(index, Int64Array, &data_type)\n-                        }\n-                        DataType::UInt8 => {\n-                            cast_column_outer!(index, UInt8Array, &data_type)\n-                        }\n-                        DataType::UInt16 => {\n-                            cast_column_outer!(index, UInt16Array, &data_type)\n-                        }\n-                        DataType::UInt32 => {\n-                            cast_column_outer!(index, UInt32Array, &data_type)\n-                        }\n-                        DataType::UInt64 => {\n-                            cast_column_outer!(index, UInt64Array, &data_type)\n-                        }\n-                        DataType::Float32 => {\n-                            cast_column_outer!(index, Float32Array, &data_type)\n-                        }\n-                        DataType::Float64 => {\n-                            cast_column_outer!(index, Float64Array, &data_type)\n-                        }\n-                        _ => panic!(\"unsupported CAST operation\"), /*TODO */\n-                                                                   /*Err(ExecutionError::NotImplemented(format!(\n-                                                                       \"CAST column from {:?} to {:?}\",\n-                                                                       col.data_type(),\n-                                                                       data_type\n-                                                                   )))*/\n-                    },\n+                    f: Rc::new(|batch: &RecordBatch| {\n+                        // match compute::cast(batch.column(index), data_type) {\n+                        //     Ok(array) => Ok(array),\n+                        //     Err(e) => Err(e.into())\n+                        // }\n+                        compute::cast(batch.column(index).clone(), data_type.clone())\n \n Review comment:\n   @andygrove this is where I'm getting the error\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T03:58:24.468+0000",
                    "updated": "2019-03-04T03:58:24.468+0000",
                    "started": "2019-03-04T03:58:24.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206988",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/206992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r261918898\n \n \n\n ##########\n File path: rust/datafusion/src/execution/expression.rs\n ##########\n @@ -334,44 +337,52 @@ pub fn compile_scalar_expr(\n                 Ok(RuntimeExpr::Compiled {\n                     name: col.name().clone(),\n                     t: col.data_type().clone(),\n-                    f: match col.data_type() {\n-                        DataType::Int8 => {\n-                            cast_column_outer!(index, Int8Array, &data_type)\n-                        }\n-                        DataType::Int16 => {\n-                            cast_column_outer!(index, Int16Array, &data_type)\n-                        }\n-                        DataType::Int32 => {\n-                            cast_column_outer!(index, Int32Array, &data_type)\n-                        }\n-                        DataType::Int64 => {\n-                            cast_column_outer!(index, Int64Array, &data_type)\n-                        }\n-                        DataType::UInt8 => {\n-                            cast_column_outer!(index, UInt8Array, &data_type)\n-                        }\n-                        DataType::UInt16 => {\n-                            cast_column_outer!(index, UInt16Array, &data_type)\n-                        }\n-                        DataType::UInt32 => {\n-                            cast_column_outer!(index, UInt32Array, &data_type)\n-                        }\n-                        DataType::UInt64 => {\n-                            cast_column_outer!(index, UInt64Array, &data_type)\n-                        }\n-                        DataType::Float32 => {\n-                            cast_column_outer!(index, Float32Array, &data_type)\n-                        }\n-                        DataType::Float64 => {\n-                            cast_column_outer!(index, Float64Array, &data_type)\n-                        }\n-                        _ => panic!(\"unsupported CAST operation\"), /*TODO */\n-                                                                   /*Err(ExecutionError::NotImplemented(format!(\n-                                                                       \"CAST column from {:?} to {:?}\",\n-                                                                       col.data_type(),\n-                                                                       data_type\n-                                                                   )))*/\n-                    },\n+                    f: Rc::new(|batch: &RecordBatch| {\n+                        // match compute::cast(batch.column(index), data_type) {\n+                        //     Ok(array) => Ok(array),\n+                        //     Err(e) => Err(e.into())\n+                        // }\n+                        compute::cast(batch.column(index).clone(), data_type.clone())\n \n Review comment:\n   I can help with this. I'll take a look now and see if it is easy to fix or not.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T04:19:52.052+0000",
                    "updated": "2019-03-04T04:19:52.052+0000",
                    "started": "2019-03-04T04:19:52.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206992",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/206993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r261920119\n \n \n\n ##########\n File path: rust/datafusion/src/execution/expression.rs\n ##########\n @@ -334,44 +337,52 @@ pub fn compile_scalar_expr(\n                 Ok(RuntimeExpr::Compiled {\n                     name: col.name().clone(),\n                     t: col.data_type().clone(),\n-                    f: match col.data_type() {\n-                        DataType::Int8 => {\n-                            cast_column_outer!(index, Int8Array, &data_type)\n-                        }\n-                        DataType::Int16 => {\n-                            cast_column_outer!(index, Int16Array, &data_type)\n-                        }\n-                        DataType::Int32 => {\n-                            cast_column_outer!(index, Int32Array, &data_type)\n-                        }\n-                        DataType::Int64 => {\n-                            cast_column_outer!(index, Int64Array, &data_type)\n-                        }\n-                        DataType::UInt8 => {\n-                            cast_column_outer!(index, UInt8Array, &data_type)\n-                        }\n-                        DataType::UInt16 => {\n-                            cast_column_outer!(index, UInt16Array, &data_type)\n-                        }\n-                        DataType::UInt32 => {\n-                            cast_column_outer!(index, UInt32Array, &data_type)\n-                        }\n-                        DataType::UInt64 => {\n-                            cast_column_outer!(index, UInt64Array, &data_type)\n-                        }\n-                        DataType::Float32 => {\n-                            cast_column_outer!(index, Float32Array, &data_type)\n-                        }\n-                        DataType::Float64 => {\n-                            cast_column_outer!(index, Float64Array, &data_type)\n-                        }\n-                        _ => panic!(\"unsupported CAST operation\"), /*TODO */\n-                                                                   /*Err(ExecutionError::NotImplemented(format!(\n-                                                                       \"CAST column from {:?} to {:?}\",\n-                                                                       col.data_type(),\n-                                                                       data_type\n-                                                                   )))*/\n-                    },\n+                    f: Rc::new(|batch: &RecordBatch| {\n+                        // match compute::cast(batch.column(index), data_type) {\n+                        //     Ok(array) => Ok(array),\n+                        //     Err(e) => Err(e.into())\n+                        // }\n+                        compute::cast(batch.column(index).clone(), data_type.clone())\n \n Review comment:\n   Here you go. This works:\r\n   \r\n   ```rust\r\n   &Expr::Column(index) => {\r\n                   let col = input_schema.field(index);\r\n                   let dt = data_type.clone();\r\n                   Ok(RuntimeExpr::Compiled {\r\n                       name: col.name().clone(),\r\n                       t: col.data_type().clone(),\r\n                       f: Rc::new(move |batch: &RecordBatch| {\r\n                           compute::cast(batch.column(index), &dt)\r\n                               .map_err(|e| ExecutionError::ArrowError(e))\r\n                       }),\r\n   ```\r\n   \r\n   The issue was that the closure being built had a reference to data_type from the expression. The fix was to clone it before creating the closure, and use the `move` keyword to move ownership of the variables into the closure.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T04:31:31.464+0000",
                    "updated": "2019-03-04T04:31:31.464+0000",
                    "started": "2019-03-04T04:31:31.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206993",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/206994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r261920713\n \n \n\n ##########\n File path: rust/datafusion/src/execution/expression.rs\n ##########\n @@ -334,44 +337,52 @@ pub fn compile_scalar_expr(\n                 Ok(RuntimeExpr::Compiled {\n                     name: col.name().clone(),\n                     t: col.data_type().clone(),\n-                    f: match col.data_type() {\n-                        DataType::Int8 => {\n-                            cast_column_outer!(index, Int8Array, &data_type)\n-                        }\n-                        DataType::Int16 => {\n-                            cast_column_outer!(index, Int16Array, &data_type)\n-                        }\n-                        DataType::Int32 => {\n-                            cast_column_outer!(index, Int32Array, &data_type)\n-                        }\n-                        DataType::Int64 => {\n-                            cast_column_outer!(index, Int64Array, &data_type)\n-                        }\n-                        DataType::UInt8 => {\n-                            cast_column_outer!(index, UInt8Array, &data_type)\n-                        }\n-                        DataType::UInt16 => {\n-                            cast_column_outer!(index, UInt16Array, &data_type)\n-                        }\n-                        DataType::UInt32 => {\n-                            cast_column_outer!(index, UInt32Array, &data_type)\n-                        }\n-                        DataType::UInt64 => {\n-                            cast_column_outer!(index, UInt64Array, &data_type)\n-                        }\n-                        DataType::Float32 => {\n-                            cast_column_outer!(index, Float32Array, &data_type)\n-                        }\n-                        DataType::Float64 => {\n-                            cast_column_outer!(index, Float64Array, &data_type)\n-                        }\n-                        _ => panic!(\"unsupported CAST operation\"), /*TODO */\n-                                                                   /*Err(ExecutionError::NotImplemented(format!(\n-                                                                       \"CAST column from {:?} to {:?}\",\n-                                                                       col.data_type(),\n-                                                                       data_type\n-                                                                   )))*/\n-                    },\n+                    f: Rc::new(|batch: &RecordBatch| {\n+                        // match compute::cast(batch.column(index), data_type) {\n+                        //     Ok(array) => Ok(array),\n+                        //     Err(e) => Err(e.into())\n+                        // }\n+                        compute::cast(batch.column(index).clone(), data_type.clone())\n \n Review comment:\n   Awesome! I would have never figured. Code's compiling, so I should be able to complete this PR by the weekend\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T04:37:17.550+0000",
                    "updated": "2019-03-04T04:37:17.550+0000",
                    "started": "2019-03-04T04:37:17.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206994",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262076490\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+// TODO:\n+//  * remove downcast unwraps and replace with explicit errors\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n+    use DataType::*;\n+    let from_type = array.data_type();\n+\n+    // clone array if types are the same\n+    if from_type == to_type {\n+        return Ok(array.clone());\n+    }\n+    match (from_type, to_type) {\n+        (Struct(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast from struct to other types\".to_string(),\n+        )),\n+        (_, Struct(_)) => Err(ArrowError::ComputeError(\n+            \"Cannot cast to struct from other types\".to_string(),\n+        )),\n+        (List(_), List(_)) => unimplemented!(\"Casting between lists not yet supported\"),\n+        (List(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast list to non-list data types\".to_string(),\n+        )),\n+        (_, List(_)) => unimplemented!(\"Casting scalars to lists not yet supported\"),\n \n Review comment:\n   It should be easy to change these `unimplemented!` calls into `Err` now?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T14:19:58.371+0000",
                    "updated": "2019-03-04T14:19:58.371+0000",
                    "started": "2019-03-04T14:19:58.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207191",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262112553\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+// TODO:\n+//  * remove downcast unwraps and replace with explicit errors\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n+    use DataType::*;\n+    let from_type = array.data_type();\n+\n+    // clone array if types are the same\n+    if from_type == to_type {\n+        return Ok(array.clone());\n+    }\n+    match (from_type, to_type) {\n+        (Struct(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast from struct to other types\".to_string(),\n+        )),\n+        (_, Struct(_)) => Err(ArrowError::ComputeError(\n+            \"Cannot cast to struct from other types\".to_string(),\n+        )),\n+        (List(_), List(_)) => unimplemented!(\"Casting between lists not yet supported\"),\n+        (List(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast list to non-list data types\".to_string(),\n+        )),\n+        (_, List(_)) => unimplemented!(\"Casting scalars to lists not yet supported\"),\n \n Review comment:\n   All the places where I'm not already returning an error are placeholders. I'll replace the `unimplemented` with cast functions\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T15:37:46.532+0000",
                    "updated": "2019-03-04T15:37:46.532+0000",
                    "started": "2019-03-04T15:37:46.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207236",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#issuecomment-469388542\n \n \n   @andygrove @paddyhoran @liurenjie1024 this is ready for review\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T19:28:56.489+0000",
                    "updated": "2019-03-04T19:28:56.489+0000",
                    "started": "2019-03-04T19:28:56.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207387",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262615487\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n \n Review comment:\n   why these have to be macro? can we use generic function?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T18:06:39.886+0000",
                    "updated": "2019-03-05T18:06:39.886+0000",
                    "started": "2019-03-05T18:06:39.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207921",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262615632\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_bool {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_bool::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_bool_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_bool_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BooleanArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n \n Review comment:\n   can we move this to the top and add more comments on its behavior?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T18:06:39.934+0000",
                    "updated": "2019-03-05T18:06:39.934+0000",
                    "started": "2019-03-05T18:06:39.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207922",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262616638\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n \n Review comment:\n   can we have a `kernels` directory under `compute` and rename this to `cast.rs`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T18:06:39.941+0000",
                    "updated": "2019-03-05T18:06:39.941+0000",
                    "started": "2019-03-05T18:06:39.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207923",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262616246\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_bool {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_bool::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_bool_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_bool_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BooleanArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n+    use DataType::*;\n+    let from_type = array.data_type();\n+\n+    // clone array if types are the same\n+    if from_type == to_type {\n+        return Ok(array.clone());\n+    }\n+    match (from_type, to_type) {\n+        (Struct(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast from struct to other types\".to_string(),\n+        )),\n+        (_, Struct(_)) => Err(ArrowError::ComputeError(\n+            \"Cannot cast to struct from other types\".to_string(),\n+        )),\n+        (List(_), List(_)) => Err(ArrowError::ComputeError(\n+            \"Casting between lists not yet supported\".to_string(),\n+        )),\n+        (List(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast list to non-list data types\".to_string(),\n+        )),\n+        (_, List(_)) => Err(ArrowError::ComputeError(\n+            \"Cannot cast primitive types to lists\".to_string(),\n+        )),\n+        (_, Boolean) => match from_type {\n+            UInt8 => cast_numeric_to_bool!(array, UInt8Type),\n+            UInt16 => cast_numeric_to_bool!(array, UInt16Type),\n+            UInt32 => cast_numeric_to_bool!(array, UInt32Type),\n+            UInt64 => cast_numeric_to_bool!(array, UInt64Type),\n+            Int8 => cast_numeric_to_bool!(array, Int8Type),\n+            Int16 => cast_numeric_to_bool!(array, Int16Type),\n+            Int32 => cast_numeric_to_bool!(array, Int32Type),\n+            Int64 => cast_numeric_to_bool!(array, Int64Type),\n+            Float32 => cast_numeric_to_bool!(array, Float32Type),\n+            Float64 => cast_numeric_to_bool!(array, Float64Type),\n+            Utf8 => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+        (Boolean, _) => match to_type {\n+            UInt8 => cast_bool_to_numeric!(array, UInt8Type),\n+            UInt16 => cast_bool_to_numeric!(array, UInt16Type),\n+            UInt32 => cast_bool_to_numeric!(array, UInt32Type),\n+            UInt64 => cast_bool_to_numeric!(array, UInt64Type),\n+            Int8 => cast_bool_to_numeric!(array, Int8Type),\n+            Int16 => cast_bool_to_numeric!(array, Int16Type),\n+            Int32 => cast_bool_to_numeric!(array, Int32Type),\n+            Int64 => cast_bool_to_numeric!(array, Int64Type),\n+            Float32 | Float64 => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+            Utf8 => {\n+                let from = array.as_any().downcast_ref::<BooleanArray>().unwrap();\n+                let mut b = BinaryBuilder::new(array.len());\n+                for i in 0..array.len() {\n+                    if array.is_null(i) {\n+                        b.append(false)?;\n+                    } else {\n+                        b.append_string(match from.value(i) {\n+                            true => \"1\",\n+                            false => \"0\",\n+                        })?;\n+                    }\n+                }\n+\n+                Ok(Arc::new(b.finish()) as ArrayRef)\n+            }\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+        (Utf8, _) => match to_type {\n+            UInt8 => cast_string_to_numeric!(array, UInt8Type),\n+            UInt16 => cast_string_to_numeric!(array, UInt16Type),\n+            UInt32 => cast_string_to_numeric!(array, UInt32Type),\n+            UInt64 => cast_string_to_numeric!(array, UInt64Type),\n+            Int8 => cast_string_to_numeric!(array, Int8Type),\n+            Int16 => cast_string_to_numeric!(array, Int16Type),\n+            Int32 => cast_string_to_numeric!(array, Int32Type),\n+            Int64 => cast_string_to_numeric!(array, Int64Type),\n+            Float32 => cast_string_to_numeric!(array, Float32Type),\n+            Float64 => cast_string_to_numeric!(array, Float64Type),\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+        (_, Utf8) => match from_type {\n+            UInt8 => cast_numeric_to_string!(array, UInt8Type),\n+            UInt16 => cast_numeric_to_string!(array, UInt16Type),\n+            UInt32 => cast_numeric_to_string!(array, UInt32Type),\n+            UInt64 => cast_numeric_to_string!(array, UInt64Type),\n+            Int8 => cast_numeric_to_string!(array, Int8Type),\n+            Int16 => cast_numeric_to_string!(array, Int16Type),\n+            Int32 => cast_numeric_to_string!(array, Int32Type),\n+            Int64 => cast_numeric_to_string!(array, Int64Type),\n+            Float32 => cast_numeric_to_string!(array, Float32Type),\n+            Float64 => cast_numeric_to_string!(array, Float64Type),\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+\n+        // start numeric casts\n+        (UInt8, UInt16) => cast_numeric_arrays!(array, UInt8Type, UInt16Type),\n+        (UInt8, UInt32) => cast_numeric_arrays!(array, UInt8Type, UInt32Type),\n+        (UInt8, UInt64) => cast_numeric_arrays!(array, UInt8Type, UInt64Type),\n+        (UInt8, Int8) => cast_numeric_arrays!(array, UInt8Type, Int8Type),\n+        (UInt8, Int16) => cast_numeric_arrays!(array, UInt8Type, Int16Type),\n+        (UInt8, Int32) => cast_numeric_arrays!(array, UInt8Type, Int32Type),\n+        (UInt8, Int64) => cast_numeric_arrays!(array, UInt8Type, Int64Type),\n+        (UInt8, Float32) => cast_numeric_arrays!(array, UInt8Type, Float32Type),\n+        (UInt8, Float64) => cast_numeric_arrays!(array, UInt8Type, Float64Type),\n+\n+        (UInt16, UInt8) => cast_numeric_arrays!(array, UInt16Type, UInt8Type),\n+        (UInt16, UInt32) => cast_numeric_arrays!(array, UInt16Type, UInt32Type),\n+        (UInt16, UInt64) => cast_numeric_arrays!(array, UInt16Type, UInt64Type),\n+        (UInt16, Int8) => cast_numeric_arrays!(array, UInt16Type, Int8Type),\n+        (UInt16, Int16) => cast_numeric_arrays!(array, UInt16Type, Int16Type),\n+        (UInt16, Int32) => cast_numeric_arrays!(array, UInt16Type, Int32Type),\n+        (UInt16, Int64) => cast_numeric_arrays!(array, UInt16Type, Int64Type),\n+        (UInt16, Float32) => cast_numeric_arrays!(array, UInt16Type, Float32Type),\n+        (UInt16, Float64) => cast_numeric_arrays!(array, UInt16Type, Float64Type),\n+\n+        (UInt32, UInt8) => cast_numeric_arrays!(array, UInt32Type, UInt8Type),\n+        (UInt32, UInt16) => cast_numeric_arrays!(array, UInt32Type, UInt16Type),\n+        (UInt32, UInt64) => cast_numeric_arrays!(array, UInt32Type, UInt64Type),\n+        (UInt32, Int8) => cast_numeric_arrays!(array, UInt32Type, Int8Type),\n+        (UInt32, Int16) => cast_numeric_arrays!(array, UInt32Type, Int16Type),\n+        (UInt32, Int32) => cast_numeric_arrays!(array, UInt32Type, Int32Type),\n+        (UInt32, Int64) => cast_numeric_arrays!(array, UInt32Type, Int64Type),\n+        (UInt32, Float32) => cast_numeric_arrays!(array, UInt32Type, Float32Type),\n+        (UInt32, Float64) => cast_numeric_arrays!(array, UInt32Type, Float64Type),\n+\n+        (UInt64, UInt8) => cast_numeric_arrays!(array, UInt64Type, UInt8Type),\n+        (UInt64, UInt16) => cast_numeric_arrays!(array, UInt64Type, UInt16Type),\n+        (UInt64, UInt32) => cast_numeric_arrays!(array, UInt64Type, UInt32Type),\n+        (UInt64, Int8) => cast_numeric_arrays!(array, UInt64Type, Int8Type),\n+        (UInt64, Int16) => cast_numeric_arrays!(array, UInt64Type, Int16Type),\n+        (UInt64, Int32) => cast_numeric_arrays!(array, UInt64Type, Int32Type),\n+        (UInt64, Int64) => cast_numeric_arrays!(array, UInt64Type, Int64Type),\n+        (UInt64, Float32) => cast_numeric_arrays!(array, UInt64Type, Float32Type),\n+        (UInt64, Float64) => cast_numeric_arrays!(array, UInt64Type, Float64Type),\n+\n+        (Int8, UInt8) => cast_numeric_arrays!(array, Int8Type, UInt8Type),\n \n Review comment:\n   For these casts where the physical storage format is the same, can we just change the data type associated with `ArrayData` such as [how it is done in cpp ](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array.h#L65).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T18:06:40.163+0000",
                    "updated": "2019-03-05T18:06:40.163+0000",
                    "started": "2019-03-05T18:06:40.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207924",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262632014\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n \n Review comment:\n   I've had this problem in a lot of areas across the project. I don't know how I'd convert `DateTime::Int32` to `Int32Type`. Do you have an idea/example of how I could be able to make the cast generic?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T18:36:19.755+0000",
                    "updated": "2019-03-05T18:36:19.755+0000",
                    "started": "2019-03-05T18:36:19.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207962",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262644678\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_bool {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_bool::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_bool_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_bool_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BooleanArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n \n Review comment:\n   I can't put it at the top as it depends on the macro definitions. I've expanded the doc comment to include behaviour.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T19:01:07.803+0000",
                    "updated": "2019-03-05T19:01:07.803+0000",
                    "started": "2019-03-05T19:01:07.803+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207979",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/207991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262648777\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_bool {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_bool::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_bool_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_bool_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BooleanArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n+    use DataType::*;\n+    let from_type = array.data_type();\n+\n+    // clone array if types are the same\n+    if from_type == to_type {\n+        return Ok(array.clone());\n+    }\n+    match (from_type, to_type) {\n+        (Struct(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast from struct to other types\".to_string(),\n+        )),\n+        (_, Struct(_)) => Err(ArrowError::ComputeError(\n+            \"Cannot cast to struct from other types\".to_string(),\n+        )),\n+        (List(_), List(_)) => Err(ArrowError::ComputeError(\n+            \"Casting between lists not yet supported\".to_string(),\n+        )),\n+        (List(_), _) => Err(ArrowError::ComputeError(\n+            \"Cannot cast list to non-list data types\".to_string(),\n+        )),\n+        (_, List(_)) => Err(ArrowError::ComputeError(\n+            \"Cannot cast primitive types to lists\".to_string(),\n+        )),\n+        (_, Boolean) => match from_type {\n+            UInt8 => cast_numeric_to_bool!(array, UInt8Type),\n+            UInt16 => cast_numeric_to_bool!(array, UInt16Type),\n+            UInt32 => cast_numeric_to_bool!(array, UInt32Type),\n+            UInt64 => cast_numeric_to_bool!(array, UInt64Type),\n+            Int8 => cast_numeric_to_bool!(array, Int8Type),\n+            Int16 => cast_numeric_to_bool!(array, Int16Type),\n+            Int32 => cast_numeric_to_bool!(array, Int32Type),\n+            Int64 => cast_numeric_to_bool!(array, Int64Type),\n+            Float32 => cast_numeric_to_bool!(array, Float32Type),\n+            Float64 => cast_numeric_to_bool!(array, Float64Type),\n+            Utf8 => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+        (Boolean, _) => match to_type {\n+            UInt8 => cast_bool_to_numeric!(array, UInt8Type),\n+            UInt16 => cast_bool_to_numeric!(array, UInt16Type),\n+            UInt32 => cast_bool_to_numeric!(array, UInt32Type),\n+            UInt64 => cast_bool_to_numeric!(array, UInt64Type),\n+            Int8 => cast_bool_to_numeric!(array, Int8Type),\n+            Int16 => cast_bool_to_numeric!(array, Int16Type),\n+            Int32 => cast_bool_to_numeric!(array, Int32Type),\n+            Int64 => cast_bool_to_numeric!(array, Int64Type),\n+            Float32 | Float64 => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+            Utf8 => {\n+                let from = array.as_any().downcast_ref::<BooleanArray>().unwrap();\n+                let mut b = BinaryBuilder::new(array.len());\n+                for i in 0..array.len() {\n+                    if array.is_null(i) {\n+                        b.append(false)?;\n+                    } else {\n+                        b.append_string(match from.value(i) {\n+                            true => \"1\",\n+                            false => \"0\",\n+                        })?;\n+                    }\n+                }\n+\n+                Ok(Arc::new(b.finish()) as ArrayRef)\n+            }\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+        (Utf8, _) => match to_type {\n+            UInt8 => cast_string_to_numeric!(array, UInt8Type),\n+            UInt16 => cast_string_to_numeric!(array, UInt16Type),\n+            UInt32 => cast_string_to_numeric!(array, UInt32Type),\n+            UInt64 => cast_string_to_numeric!(array, UInt64Type),\n+            Int8 => cast_string_to_numeric!(array, Int8Type),\n+            Int16 => cast_string_to_numeric!(array, Int16Type),\n+            Int32 => cast_string_to_numeric!(array, Int32Type),\n+            Int64 => cast_string_to_numeric!(array, Int64Type),\n+            Float32 => cast_string_to_numeric!(array, Float32Type),\n+            Float64 => cast_string_to_numeric!(array, Float64Type),\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+        (_, Utf8) => match from_type {\n+            UInt8 => cast_numeric_to_string!(array, UInt8Type),\n+            UInt16 => cast_numeric_to_string!(array, UInt16Type),\n+            UInt32 => cast_numeric_to_string!(array, UInt32Type),\n+            UInt64 => cast_numeric_to_string!(array, UInt64Type),\n+            Int8 => cast_numeric_to_string!(array, Int8Type),\n+            Int16 => cast_numeric_to_string!(array, Int16Type),\n+            Int32 => cast_numeric_to_string!(array, Int32Type),\n+            Int64 => cast_numeric_to_string!(array, Int64Type),\n+            Float32 => cast_numeric_to_string!(array, Float32Type),\n+            Float64 => cast_numeric_to_string!(array, Float64Type),\n+            _ => Err(ArrowError::ComputeError(format!(\n+                \"Casting from {:?} to {:?} not supported\",\n+                from_type, to_type,\n+            ))),\n+        },\n+\n+        // start numeric casts\n+        (UInt8, UInt16) => cast_numeric_arrays!(array, UInt8Type, UInt16Type),\n+        (UInt8, UInt32) => cast_numeric_arrays!(array, UInt8Type, UInt32Type),\n+        (UInt8, UInt64) => cast_numeric_arrays!(array, UInt8Type, UInt64Type),\n+        (UInt8, Int8) => cast_numeric_arrays!(array, UInt8Type, Int8Type),\n+        (UInt8, Int16) => cast_numeric_arrays!(array, UInt8Type, Int16Type),\n+        (UInt8, Int32) => cast_numeric_arrays!(array, UInt8Type, Int32Type),\n+        (UInt8, Int64) => cast_numeric_arrays!(array, UInt8Type, Int64Type),\n+        (UInt8, Float32) => cast_numeric_arrays!(array, UInt8Type, Float32Type),\n+        (UInt8, Float64) => cast_numeric_arrays!(array, UInt8Type, Float64Type),\n+\n+        (UInt16, UInt8) => cast_numeric_arrays!(array, UInt16Type, UInt8Type),\n+        (UInt16, UInt32) => cast_numeric_arrays!(array, UInt16Type, UInt32Type),\n+        (UInt16, UInt64) => cast_numeric_arrays!(array, UInt16Type, UInt64Type),\n+        (UInt16, Int8) => cast_numeric_arrays!(array, UInt16Type, Int8Type),\n+        (UInt16, Int16) => cast_numeric_arrays!(array, UInt16Type, Int16Type),\n+        (UInt16, Int32) => cast_numeric_arrays!(array, UInt16Type, Int32Type),\n+        (UInt16, Int64) => cast_numeric_arrays!(array, UInt16Type, Int64Type),\n+        (UInt16, Float32) => cast_numeric_arrays!(array, UInt16Type, Float32Type),\n+        (UInt16, Float64) => cast_numeric_arrays!(array, UInt16Type, Float64Type),\n+\n+        (UInt32, UInt8) => cast_numeric_arrays!(array, UInt32Type, UInt8Type),\n+        (UInt32, UInt16) => cast_numeric_arrays!(array, UInt32Type, UInt16Type),\n+        (UInt32, UInt64) => cast_numeric_arrays!(array, UInt32Type, UInt64Type),\n+        (UInt32, Int8) => cast_numeric_arrays!(array, UInt32Type, Int8Type),\n+        (UInt32, Int16) => cast_numeric_arrays!(array, UInt32Type, Int16Type),\n+        (UInt32, Int32) => cast_numeric_arrays!(array, UInt32Type, Int32Type),\n+        (UInt32, Int64) => cast_numeric_arrays!(array, UInt32Type, Int64Type),\n+        (UInt32, Float32) => cast_numeric_arrays!(array, UInt32Type, Float32Type),\n+        (UInt32, Float64) => cast_numeric_arrays!(array, UInt32Type, Float64Type),\n+\n+        (UInt64, UInt8) => cast_numeric_arrays!(array, UInt64Type, UInt8Type),\n+        (UInt64, UInt16) => cast_numeric_arrays!(array, UInt64Type, UInt16Type),\n+        (UInt64, UInt32) => cast_numeric_arrays!(array, UInt64Type, UInt32Type),\n+        (UInt64, Int8) => cast_numeric_arrays!(array, UInt64Type, Int8Type),\n+        (UInt64, Int16) => cast_numeric_arrays!(array, UInt64Type, Int16Type),\n+        (UInt64, Int32) => cast_numeric_arrays!(array, UInt64Type, Int32Type),\n+        (UInt64, Int64) => cast_numeric_arrays!(array, UInt64Type, Int64Type),\n+        (UInt64, Float32) => cast_numeric_arrays!(array, UInt64Type, Float32Type),\n+        (UInt64, Float64) => cast_numeric_arrays!(array, UInt64Type, Float64Type),\n+\n+        (Int8, UInt8) => cast_numeric_arrays!(array, Int8Type, UInt8Type),\n \n Review comment:\n   Would this be for going from `UInt8` to `Int{8|16|32|64}` and not the inverse like `Int{x}` -> `UInt{x}`? I've just done a quick test:\r\n   \r\n   ```rust\r\n       fn test_associated_data() {\r\n           let a = Int32Array::from(vec![-5, 6]);\r\n           let b: PrimitiveArray<UInt32Type> = PrimitiveArray::from(a.data());\r\n           let c: PrimitiveArray<Int32Type> = PrimitiveArray::from(b.data());\r\n   \r\n           // I expect -5 to be invalid for UInt8, not sure how I'd change the bitmask \r\n           assert_eq!(false, b.is_valid(0));\r\n           assert_eq!(6, b.value(1));\r\n   \r\n           // this is also not the case as I still get -5\r\n           assert_eq!(false, c.is_null(0));\r\n           assert_eq!(6, c.value(1));\r\n       }\r\n   ```\r\n   \r\n   I expect a negative Int cast to UInt to have `is_valid(x) == false`, but because I haven't changed the bitmask, that's not the case.\r\n   \r\n   I'll have a look at how I could do that if I need to cast from signed to unsigned. I also wouldn't mind getting help with those (and other more efficient) casts in follow-up JIRAs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-05T19:12:17.026+0000",
                    "updated": "2019-03-05T19:12:17.026+0000",
                    "started": "2019-03-05T19:12:17.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "207991",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/208472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r262809645\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n \n Review comment:\n   Can you just use:\r\n   ```rust\r\n   fn cast_numeric_arrays<FROM, TO>(src: &ArrayRef) -> Result<ArrayRef>\r\n   where\r\n       FROM: ArrowNumericType,\r\n       TO: ArrowNumericType,\r\n       FROM::Native: num::NumCast,\r\n       TO::Native: num::NumCast,\r\n   {\r\n       match numeric_cast::<FROM, TO>(\r\n           src.as_any().downcast_ref::<PrimitiveArray<FROM>>().unwrap(),\r\n       ) {\r\n           Ok(to) => Ok(Arc::new(to) as ArrayRef),\r\n           Err(e) => Err(e),\r\n       }\r\n   }\r\n   ```\r\n   This is very similar to the `numeric_cast` you have below.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T06:48:15.303+0000",
                    "updated": "2019-03-06T06:48:15.303+0000",
                    "started": "2019-03-06T06:48:15.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208472",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/209192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r263165585\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n \n Review comment:\n   Thanks Chao, I've removed all macros and replaced with the above\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T22:32:24.775+0000",
                    "updated": "2019-03-06T22:32:24.775+0000",
                    "started": "2019-03-06T22:32:24.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "209192",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/209193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r263165719\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines cast kernels for `ArrayRef`.\n+//!\n+//! Allows casting arrays between supported datatypes.\n+//!\n+//! ## Behavior\n+//!\n+//! * Boolean to Utf8: `true` => '1', `false` => `0`\n+//! * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings\n+//!   in integer casts return null\n+//! * Numeric to boolean: 0 returns `false`, any other value returns `true`\n+//!\n+//! ## Unsupported Casts\n+//!\n+//! * To or from `StructArray`\n+//! * To or from `ListArray`\n+//! * Boolean to float\n+//! * Utf8 to boolean\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::compute::cast;\n+//! use arrow::datatypes::DataType;\n+//! use std::sync::Arc;\n+//!\n+//! let a = Int32Array::from(vec![5, 6, 7]);\n+//! let array = Arc::new(a) as ArrayRef;\n+//! let b = cast(&array, &DataType::Float64).unwrap();\n+//! let c = b.as_any().downcast_ref::<Float64Array>().unwrap();\n+//! assert_eq!(5.0, c.value(0));\n+//! assert_eq!(6.0, c.value(1));\n+//! assert_eq!(7.0, c.value(2));\n+//! ```\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::builder::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Macro rule to cast between numeric types\n+macro_rules! cast_numeric_arrays {\n+    ($array:expr, $from_ty:ident, $to_ty:ident) => {{\n+        match numeric_cast::<$from_ty, $to_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_string {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_string::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_string_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_string_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BinaryArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_numeric_to_bool {\n+    ($array:expr, $from_ty:ident) => {{\n+        match cast_numeric_to_bool::<$from_ty>(\n+            $array\n+                .as_any()\n+                .downcast_ref::<PrimitiveArray<$from_ty>>()\n+                .unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+macro_rules! cast_bool_to_numeric {\n+    ($array:expr, $to_ty:ident) => {{\n+        match cast_bool_to_numeric::<$to_ty>(\n+            $array.as_any().downcast_ref::<BooleanArray>().unwrap(),\n+        ) {\n+            Ok(to) => Ok(Arc::new(to) as ArrayRef),\n+            Err(e) => Err(e),\n+        }\n+    }};\n+}\n+\n+/// Cast array to provided data type\n+pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n \n Review comment:\n   Resolved this by removing macros\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T22:32:44.924+0000",
                    "updated": "2019-03-06T22:32:44.924+0000",
                    "started": "2019-03-06T22:32:44.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "209193",
                    "issueId": "13200574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/worklog/209319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3797: ARROW-3882: [Rust] Cast Kernel for most types\nURL: https://github.com/apache/arrow/pull/3797#discussion_r263219830\n \n \n\n ##########\n File path: rust/arrow/src/compute/cast_kernels.rs\n ##########\n @@ -0,0 +1,543 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n \n Review comment:\n   I guess this is to be consistent with cpp?  In that case we should move all the existing kernels too (boolean, comparison).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-07T02:48:19.373+0000",
                    "updated": "2019-03-07T02:48:19.373+0000",
                    "started": "2019-03-07T02:48:19.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "209319",
                    "issueId": "13200574"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2a1d303a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ada8315[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b636912[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@650f8940[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ccc1167[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@43eeacd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@544528a1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4d99fee0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41d2991d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@32c97b68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f345db0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4dd8d448[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 13 23:55:26 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-13T23:55:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3882/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-11-26T14:03:02.000+0000",
        "updated": "2019-03-13T23:55:38.000+0000",
        "timeoriginalestimate": null,
        "description": "It should be possible to cast PrimitiveArray<i32> to PrimitiveArray<f32> as one example.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] PrimitiveArray<T> should support cast operations",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200574/comment/16792191",
                    "id": "16792191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 3797\n[https://github.com/apache/arrow/pull/3797]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-03-13T23:55:26.027+0000",
                    "updated": "2019-03-13T23:55:26.027+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00v3c:",
        "customfield_12314139": null
    }
}